Given grammar:
translation_unit -> external_declaration;
translation_unit -> translation_unit external_declaration;
external_declaration -> function_definition;
external_declaration -> declaration;
function_definition -> declaration_specifiers declarator declaration_list compound_statement;
function_definition -> declaration_specifiers declarator compound_statement;
function_definition -> declarator declaration_list compound_statement;
function_definition -> declarator compound_statement;
primary_expression -> IDENTIFIER;
primary_expression -> CONSTANT;
primary_expression -> STRING_LITERAL;
primary_expression -> '(' expression ')';
postfix_expression -> primary_expression;
postfix_expression -> postfix_expression '[' expression ']';
postfix_expression -> postfix_expression '(' ')';
postfix_expression -> postfix_expression '(' argument_expression_list ')';
postfix_expression -> postfix_expression '.' IDENTIFIER;
postfix_expression -> postfix_expression '->' IDENTIFIER;
postfix_expression -> postfix_expression '++';
postfix_expression -> postfix_expression '--';
argument_expression_list -> assignment_expression;
argument_expression_list -> argument_expression_list ',' assignment_expression;
unary_expression -> postfix_expression;
unary_expression -> '++' unary_expression;
unary_expression -> '--' unary_expression;
unary_expression -> unary_operator cast_expression;
unary_expression -> 'sizeof' unary_expression;
unary_expression -> 'sizeof' '(' type_name ')';
unary_operator -> '&';
unary_operator -> '*';
unary_operator -> '+';
unary_operator -> '-';
unary_operator -> '~';
unary_operator -> '!';
cast_expression -> unary_expression;
cast_expression -> '(' type_name ')' cast_expression;
multiplicative_expression -> cast_expression;
multiplicative_expression -> multiplicative_expression '*' cast_expression;
multiplicative_expression -> multiplicative_expression '/' cast_expression;
multiplicative_expression -> multiplicative_expression '%' cast_expression;
additive_expression -> multiplicative_expression;
additive_expression -> additive_expression '+' multiplicative_expression;
additive_expression -> additive_expression '-' multiplicative_expression;
shift_expression -> additive_expression;
shift_expression -> shift_expression '<<' additive_expression;
shift_expression -> shift_expression '>>' additive_expression;
relational_expression -> shift_expression;
relational_expression -> relational_expression '<' shift_expression;
relational_expression -> relational_expression '>' shift_expression;
relational_expression -> relational_expression '<=' shift_expression;
relational_expression -> relational_expression '>=' shift_expression;
equality_expression -> relational_expression;
equality_expression -> equality_expression '==' relational_expression;
equality_expression -> equality_expression '!=' relational_expression;
and_expression -> equality_expression;
and_expression -> and_expression '&' equality_expression;
exclusive_or_expression -> and_expression;
exclusive_or_expression -> exclusive_or_expression '^' and_expression;
inclusive_or_expression -> exclusive_or_expression;
inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression;
logical_and_expression -> inclusive_or_expression;
logical_and_expression -> logical_and_expression '&&' inclusive_or_expression;
logical_or_expression -> logical_and_expression;
logical_or_expression -> logical_or_expression '||' logical_and_expression;
conditional_expression -> logical_or_expression;
conditional_expression -> logical_or_expression '?' expression ':' conditional_expression;
assignment_expression -> conditional_expression;
assignment_expression -> unary_expression assignment_operator assignment_expression;
assignment_operator -> '=';
assignment_operator -> '*=';
assignment_operator -> '/=';
assignment_operator -> '%=';
assignment_operator -> '+=';
assignment_operator -> '-=';
assignment_operator -> '<<=';
assignment_operator -> '>>=';
assignment_operator -> '&=';
assignment_operator -> '^=';
assignment_operator -> '|=';
expression -> assignment_expression;
expression -> expression ',' assignment_expression;
constant_expression -> conditional_expression;
declaration -> declaration_specifiers ';';
declaration -> declaration_specifiers init_declarator_list ';';
declaration_specifiers -> storage_class_specifier;
declaration_specifiers -> storage_class_specifier declaration_specifiers;
declaration_specifiers -> type_specifier;
declaration_specifiers -> type_specifier declaration_specifiers;
declaration_specifiers -> type_qualifier;
declaration_specifiers -> type_qualifier declaration_specifiers;
init_declarator_list -> init_declarator;
init_declarator_list -> init_declarator_list ',' init_declarator;
init_declarator -> declarator;
init_declarator -> declarator '=' initializer;
storage_class_specifier -> 'typedef';
storage_class_specifier -> 'extern';
storage_class_specifier -> 'static';
storage_class_specifier -> 'auto';
storage_class_specifier -> 'register';
type_specifier -> 'void';
type_specifier -> 'char';
type_specifier -> 'short';
type_specifier -> 'int';
type_specifier -> 'long';
type_specifier -> 'float';
type_specifier -> 'double';
type_specifier -> 'signed';
type_specifier -> 'unsigned';
type_specifier -> struct_or_union_specifier;
type_specifier -> enum_specifier;
type_specifier -> TYPE_NAME;
struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}';
struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}';
struct_or_union_specifier -> struct_or_union IDENTIFIER;
struct_or_union -> 'struct';
struct_or_union -> 'union';
struct_declaration_list -> struct_declaration;
struct_declaration_list -> struct_declaration_list struct_declaration;
struct_declaration -> specifier_qualifier_list struct_declarator_list ';';
specifier_qualifier_list -> type_specifier specifier_qualifier_list;
specifier_qualifier_list -> type_specifier;
specifier_qualifier_list -> type_qualifier specifier_qualifier_list;
specifier_qualifier_list -> type_qualifier;
struct_declarator_list -> struct_declarator;
struct_declarator_list -> struct_declarator_list ',' struct_declarator;
struct_declarator -> declarator;
struct_declarator -> ':' constant_expression;
struct_declarator -> declarator ':' constant_expression;
enum_specifier -> 'enum' '{' enumerator_list '}';
enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}';
enum_specifier -> 'enum' IDENTIFIER;
enumerator_list -> enumerator;
enumerator_list -> enumerator_list ',' enumerator;
enumerator -> IDENTIFIER;
enumerator -> IDENTIFIER '=' constant_expression;
type_qualifier -> 'const';
type_qualifier -> 'volatile';
declarator -> pointer direct_declarator;
declarator -> direct_declarator;
direct_declarator -> IDENTIFIER;
direct_declarator -> '(' declarator ')';
direct_declarator -> direct_declarator '[' constant_expression ']';
direct_declarator -> direct_declarator '[' ']';
direct_declarator -> direct_declarator '(' parameter_type_list ')';
direct_declarator -> direct_declarator '(' identifier_list ')';
direct_declarator -> direct_declarator '(' ')';
pointer -> '*';
pointer -> '*' type_qualifier_list;
pointer -> '*' pointer;
pointer -> '*' type_qualifier_list pointer;
type_qualifier_list -> type_qualifier;
type_qualifier_list -> type_qualifier_list type_qualifier;
parameter_type_list -> parameter_list;
parameter_type_list -> parameter_list ',' '...';
parameter_list -> parameter_declaration;
parameter_list -> parameter_list ',' parameter_declaration;
parameter_declaration -> declaration_specifiers declarator;
parameter_declaration -> declaration_specifiers abstract_declarator;
parameter_declaration -> declaration_specifiers;
identifier_list -> IDENTIFIER;
identifier_list -> identifier_list ',' IDENTIFIER;
type_name -> specifier_qualifier_list;
type_name -> specifier_qualifier_list abstract_declarator;
abstract_declarator -> pointer;
abstract_declarator -> direct_abstract_declarator;
abstract_declarator -> pointer direct_abstract_declarator;
direct_abstract_declarator -> '(' abstract_declarator ')';
direct_abstract_declarator -> '[' ']';
direct_abstract_declarator -> '[' constant_expression ']';
direct_abstract_declarator -> direct_abstract_declarator '[' ']';
direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']';
direct_abstract_declarator -> '(' ')';
direct_abstract_declarator -> '(' parameter_type_list ')';
direct_abstract_declarator -> direct_abstract_declarator '(' ')';
direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')';
initializer -> assignment_expression;
initializer -> '{' initializer_list '}';
initializer -> '{' initializer_list ',' '}';
initializer_list -> initializer;
initializer_list -> initializer_list ',' initializer;
statement -> labeled_statement;
statement -> compound_statement;
statement -> expression_statement;
statement -> selection_statement;
statement -> iteration_statement;
statement -> jump_statement;
labeled_statement -> IDENTIFIER ':' statement;
labeled_statement -> 'case' constant_expression ':' statement;
labeled_statement -> 'default' ':' statement;
compound_statement -> '{' '}';
compound_statement -> '{' statement_list '}';
compound_statement -> '{' declaration_list '}';
compound_statement -> '{' declaration_list statement_list '}';
declaration_list -> declaration;
declaration_list -> declaration_list declaration;
statement_list -> statement;
statement_list -> statement_list statement;
expression_statement -> ';';
expression_statement -> expression ';';
selection_statement -> 'if' '(' expression ')' statement;
selection_statement -> 'if' '(' expression ')' statement 'else' statement;
selection_statement -> 'switch' '(' expression ')' statement;
iteration_statement -> 'while' '(' expression ')' statement;
iteration_statement -> 'do' statement 'while' '(' expression ')' ';';
iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement;
iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement;
jump_statement -> 'goto' IDENTIFIER ';';
jump_statement -> 'continue' ';';
jump_statement -> 'break' ';';
jump_statement -> 'return' ';';
jump_statement -> 'return' expression ';';
S -> translation_unit;

First sets:
First(S) = {"'('", "'*'", "'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "IDENTIFIER", "TYPE_NAME"}
First(abstract_declarator) = {"'('", "'*'", "'['"}
First(additive_expression) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(and_expression) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(argument_expression_list) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(assignment_expression) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(assignment_operator) = {"'%='", "'&='", "'*='", "'+='", "'-='", "'/='", "'<<='", "'='", "'>>='", "'^='", "'|='"}
First(cast_expression) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(compound_statement) = {"'{'"}
First(conditional_expression) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(constant_expression) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(declaration) = {"'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "TYPE_NAME"}
First(declaration_list) = {"'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "TYPE_NAME"}
First(declaration_specifiers) = {"'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "TYPE_NAME"}
First(declarator) = {"'('", "'*'", "IDENTIFIER"}
First(direct_abstract_declarator) = {"'('", "'['"}
First(direct_declarator) = {"'('", "IDENTIFIER"}
First(enum_specifier) = {"'enum'"}
First(enumerator) = {"IDENTIFIER"}
First(enumerator_list) = {"IDENTIFIER"}
First(equality_expression) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(exclusive_or_expression) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(expression) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(expression_statement) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "';'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(external_declaration) = {"'('", "'*'", "'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "IDENTIFIER", "TYPE_NAME"}
First(function_definition) = {"'('", "'*'", "'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "IDENTIFIER", "TYPE_NAME"}
First(identifier_list) = {"IDENTIFIER"}
First(inclusive_or_expression) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(init_declarator) = {"'('", "'*'", "IDENTIFIER"}
First(init_declarator_list) = {"'('", "'*'", "IDENTIFIER"}
First(initializer) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'{'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(initializer_list) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'{'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(iteration_statement) = {"'do'", "'for'", "'while'"}
First(jump_statement) = {"'break'", "'continue'", "'goto'", "'return'"}
First(labeled_statement) = {"'case'", "'default'", "IDENTIFIER"}
First(logical_and_expression) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(logical_or_expression) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(multiplicative_expression) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(parameter_declaration) = {"'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "TYPE_NAME"}
First(parameter_list) = {"'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "TYPE_NAME"}
First(parameter_type_list) = {"'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "TYPE_NAME"}
First(pointer) = {"'*'"}
First(postfix_expression) = {"'('", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(primary_expression) = {"'('", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(relational_expression) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(selection_statement) = {"'if'", "'switch'"}
First(shift_expression) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(specifier_qualifier_list) = {"'char'", "'const'", "'double'", "'enum'", "'float'", "'int'", "'long'", "'short'", "'signed'", "'struct'", "'union'", "'unsigned'", "'void'", "'volatile'", "TYPE_NAME"}
First(statement) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "';'", "'break'", "'case'", "'continue'", "'default'", "'do'", "'for'", "'goto'", "'if'", "'return'", "'sizeof'", "'switch'", "'while'", "'{'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(statement_list) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "';'", "'break'", "'case'", "'continue'", "'default'", "'do'", "'for'", "'goto'", "'if'", "'return'", "'sizeof'", "'switch'", "'while'", "'{'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(storage_class_specifier) = {"'auto'", "'extern'", "'register'", "'static'", "'typedef'"}
First(struct_declaration) = {"'char'", "'const'", "'double'", "'enum'", "'float'", "'int'", "'long'", "'short'", "'signed'", "'struct'", "'union'", "'unsigned'", "'void'", "'volatile'", "TYPE_NAME"}
First(struct_declaration_list) = {"'char'", "'const'", "'double'", "'enum'", "'float'", "'int'", "'long'", "'short'", "'signed'", "'struct'", "'union'", "'unsigned'", "'void'", "'volatile'", "TYPE_NAME"}
First(struct_declarator) = {"'('", "'*'", "':'", "IDENTIFIER"}
First(struct_declarator_list) = {"'('", "'*'", "':'", "IDENTIFIER"}
First(struct_or_union) = {"'struct'", "'union'"}
First(struct_or_union_specifier) = {"'struct'", "'union'"}
First(translation_unit) = {"'('", "'*'", "'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "IDENTIFIER", "TYPE_NAME"}
First(type_name) = {"'char'", "'const'", "'double'", "'enum'", "'float'", "'int'", "'long'", "'short'", "'signed'", "'struct'", "'union'", "'unsigned'", "'void'", "'volatile'", "TYPE_NAME"}
First(type_qualifier) = {"'const'", "'volatile'"}
First(type_qualifier_list) = {"'const'", "'volatile'"}
First(type_specifier) = {"'char'", "'double'", "'enum'", "'float'", "'int'", "'long'", "'short'", "'signed'", "'struct'", "'union'", "'unsigned'", "'void'", "TYPE_NAME"}
First(unary_expression) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
First(unary_operator) = {"'!'", "'&'", "'*'", "'+'", "'-'", "'~'"}

Follow sets (note that "$" denotes the end of file):
Follow(S) = {"$"}
Follow(abstract_declarator) = {"')'", "','"}
Follow(additive_expression) = {"'!='", "'&&'", "'&'", "')'", "'+'", "','", "'-'", "':'", "';'", "'<'", "'<<'", "'<='", "'=='", "'>'", "'>='", "'>>'", "'?'", "']'", "'^'", "'|'", "'||'", "'}'"}
Follow(and_expression) = {"'&&'", "'&'", "')'", "','", "':'", "';'", "'?'", "']'", "'^'", "'|'", "'||'", "'}'"}
Follow(argument_expression_list) = {"')'", "','"}
Follow(assignment_expression) = {"')'", "','", "':'", "';'", "']'", "'}'"}
Follow(assignment_operator) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
Follow(cast_expression) = {"'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "')'", "'*'", "'*='", "'+'", "'+='", "','", "'-'", "'-='", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "']'", "'^'", "'^='", "'|'", "'|='", "'||'", "'}'"}
Follow(compound_statement) = {"$", "'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "';'", "'auto'", "'break'", "'case'", "'char'", "'const'", "'continue'", "'default'", "'do'", "'double'", "'else'", "'enum'", "'extern'", "'float'", "'for'", "'goto'", "'if'", "'int'", "'long'", "'register'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", "'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "'while'", "'{'", "'}'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL", "TYPE_NAME"}
Follow(conditional_expression) = {"')'", "','", "':'", "';'", "']'", "'}'"}
Follow(constant_expression) = {"','", "':'", "';'", "']'", "'}'"}
Follow(declaration) = {"$", "'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "';'", "'auto'", "'break'", "'case'", "'char'", "'const'", "'continue'", "'default'", "'do'", "'double'", "'enum'", "'extern'", "'float'", "'for'", "'goto'", "'if'", "'int'", "'long'", "'register'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", "'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "'while'", "'{'", "'}'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL", "TYPE_NAME"}
Follow(declaration_list) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "';'", "'auto'", "'break'", "'case'", "'char'", "'const'", "'continue'", "'default'", "'do'", "'double'", "'enum'", "'extern'", "'float'", "'for'", "'goto'", "'if'", "'int'", "'long'", "'register'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", "'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "'while'", "'{'", "'}'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL", "TYPE_NAME"}
Follow(declaration_specifiers) = {"'('", "')'", "'*'", "','", "';'", "'['", "IDENTIFIER"}
Follow(declarator) = {"')'", "','", "':'", "';'", "'='", "'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "'{'", "TYPE_NAME"}
Follow(direct_abstract_declarator) = {"'('", "')'", "','", "'['"}
Follow(direct_declarator) = {"'('", "')'", "','", "':'", "';'", "'='", "'['", "'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "'{'", "TYPE_NAME"}
Follow(enum_specifier) = {"'('", "')'", "'*'", "','", "':'", "';'", "'['", "'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "IDENTIFIER", "TYPE_NAME"}
Follow(enumerator) = {"','", "'}'"}
Follow(enumerator_list) = {"','", "'}'"}
Follow(equality_expression) = {"'!='", "'&&'", "'&'", "')'", "','", "':'", "';'", "'=='", "'?'", "']'", "'^'", "'|'", "'||'", "'}'"}
Follow(exclusive_or_expression) = {"'&&'", "')'", "','", "':'", "';'", "'?'", "']'", "'^'", "'|'", "'||'", "'}'"}
Follow(expression) = {"')'", "','", "':'", "';'", "']'"}
Follow(expression_statement) = {"'!'", "'&'", "'('", "')'", "'*'", "'+'", "'++'", "'-'", "'--'", "';'", "'break'", "'case'", "'continue'", "'default'", "'do'", "'else'", "'for'", "'goto'", "'if'", "'return'", "'sizeof'", "'switch'", "'while'", "'{'", "'}'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
Follow(external_declaration) = {"$", "'('", "'*'", "'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "IDENTIFIER", "TYPE_NAME"}
Follow(function_definition) = {"$", "'('", "'*'", "'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "IDENTIFIER", "TYPE_NAME"}
Follow(identifier_list) = {"')'", "','"}
Follow(inclusive_or_expression) = {"'&&'", "')'", "','", "':'", "';'", "'?'", "']'", "'|'", "'||'", "'}'"}
Follow(init_declarator) = {"','", "';'"}
Follow(init_declarator_list) = {"','", "';'"}
Follow(initializer) = {"','", "';'", "'}'"}
Follow(initializer_list) = {"','", "'}'"}
Follow(iteration_statement) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "';'", "'break'", "'case'", "'continue'", "'default'", "'do'", "'else'", "'for'", "'goto'", "'if'", "'return'", "'sizeof'", "'switch'", "'while'", "'{'", "'}'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
Follow(jump_statement) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "';'", "'break'", "'case'", "'continue'", "'default'", "'do'", "'else'", "'for'", "'goto'", "'if'", "'return'", "'sizeof'", "'switch'", "'while'", "'{'", "'}'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
Follow(labeled_statement) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "';'", "'break'", "'case'", "'continue'", "'default'", "'do'", "'else'", "'for'", "'goto'", "'if'", "'return'", "'sizeof'", "'switch'", "'while'", "'{'", "'}'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
Follow(logical_and_expression) = {"'&&'", "')'", "','", "':'", "';'", "'?'", "']'", "'||'", "'}'"}
Follow(logical_or_expression) = {"')'", "','", "':'", "';'", "'?'", "']'", "'||'", "'}'"}
Follow(multiplicative_expression) = {"'!='", "'%'", "'&&'", "'&'", "')'", "'*'", "'+'", "','", "'-'", "'/'", "':'", "';'", "'<'", "'<<'", "'<='", "'=='", "'>'", "'>='", "'>>'", "'?'", "']'", "'^'", "'|'", "'||'", "'}'"}
Follow(parameter_declaration) = {"')'", "','"}
Follow(parameter_list) = {"')'", "','"}
Follow(parameter_type_list) = {"')'"}
Follow(pointer) = {"'('", "')'", "','", "'['", "IDENTIFIER"}
Follow(postfix_expression) = {"'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'['", "']'", "'^'", "'^='", "'|'", "'|='", "'||'", "'}'"}
Follow(primary_expression) = {"'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'['", "']'", "'^'", "'^='", "'|'", "'|='", "'||'", "'}'"}
Follow(relational_expression) = {"'!='", "'&&'", "'&'", "')'", "','", "':'", "';'", "'<'", "'<='", "'=='", "'>'", "'>='", "'?'", "']'", "'^'", "'|'", "'||'", "'}'"}
Follow(selection_statement) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "';'", "'break'", "'case'", "'continue'", "'default'", "'do'", "'else'", "'for'", "'goto'", "'if'", "'return'", "'sizeof'", "'switch'", "'while'", "'{'", "'}'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
Follow(shift_expression) = {"'!='", "'&&'", "'&'", "')'", "','", "':'", "';'", "'<'", "'<<'", "'<='", "'=='", "'>'", "'>='", "'>>'", "'?'", "']'", "'^'", "'|'", "'||'", "'}'"}
Follow(specifier_qualifier_list) = {"'('", "')'", "'*'", "':'", "'['", "IDENTIFIER"}
Follow(statement) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "';'", "'break'", "'case'", "'continue'", "'default'", "'do'", "'else'", "'for'", "'goto'", "'if'", "'return'", "'sizeof'", "'switch'", "'while'", "'{'", "'}'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
Follow(statement_list) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "';'", "'break'", "'case'", "'continue'", "'default'", "'do'", "'for'", "'goto'", "'if'", "'return'", "'sizeof'", "'switch'", "'while'", "'{'", "'}'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}
Follow(storage_class_specifier) = {"'('", "')'", "'*'", "','", "';'", "'['", "'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "IDENTIFIER", "TYPE_NAME"}
Follow(struct_declaration) = {"'char'", "'const'", "'double'", "'enum'", "'float'", "'int'", "'long'", "'short'", "'signed'", "'struct'", "'union'", "'unsigned'", "'void'", "'volatile'", "'}'", "TYPE_NAME"}
Follow(struct_declaration_list) = {"'char'", "'const'", "'double'", "'enum'", "'float'", "'int'", "'long'", "'short'", "'signed'", "'struct'", "'union'", "'unsigned'", "'void'", "'volatile'", "'}'", "TYPE_NAME"}
Follow(struct_declarator) = {"','", "';'"}
Follow(struct_declarator_list) = {"','", "';'"}
Follow(struct_or_union) = {"'{'", "IDENTIFIER"}
Follow(struct_or_union_specifier) = {"'('", "')'", "'*'", "','", "':'", "';'", "'['", "'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "IDENTIFIER", "TYPE_NAME"}
Follow(translation_unit) = {"$", "'('", "'*'", "'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "IDENTIFIER", "TYPE_NAME"}
Follow(type_name) = {"')'"}
Follow(type_qualifier) = {"'('", "')'", "'*'", "','", "':'", "';'", "'['", "'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "IDENTIFIER", "TYPE_NAME"}
Follow(type_qualifier_list) = {"'('", "')'", "'*'", "','", "'['", "'const'", "'volatile'", "IDENTIFIER"}
Follow(type_specifier) = {"'('", "')'", "'*'", "','", "':'", "';'", "'['", "'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", "'float'", "'int'", "'long'", "'register'", "'short'", "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "IDENTIFIER", "TYPE_NAME"}
Follow(unary_expression) = {"'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "')'", "'*'", "'*='", "'+'", "'+='", "','", "'-'", "'-='", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "']'", "'^'", "'^='", "'|'", "'|='", "'||'", "'}'"}
Follow(unary_operator) = {"'!'", "'&'", "'('", "'*'", "'+'", "'++'", "'-'", "'--'", "'sizeof'", "'~'", "CONSTANT", "IDENTIFIER", "STRING_LITERAL"}

All SLR-states:
s0 = {S -> (*) translation_unit, declaration -> (*) declaration_specifiers ';', declaration -> (*) declaration_specifiers init_declarator_list ';', declaration_specifiers -> (*) storage_class_specifier, declaration_specifiers -> (*) storage_class_specifier declaration_specifiers, declaration_specifiers -> (*) type_qualifier, declaration_specifiers -> (*) type_qualifier declaration_specifiers, declaration_specifiers -> (*) type_specifier, declaration_specifiers -> (*) type_specifier declaration_specifiers, declarator -> (*) direct_declarator, declarator -> (*) pointer direct_declarator, direct_declarator -> (*) '(' declarator ')', direct_declarator -> (*) IDENTIFIER, direct_declarator -> (*) direct_declarator '(' ')', direct_declarator -> (*) direct_declarator '(' identifier_list ')', direct_declarator -> (*) direct_declarator '(' parameter_type_list ')', direct_declarator -> (*) direct_declarator '[' ']', direct_declarator -> (*) direct_declarator '[' constant_expression ']', enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', external_declaration -> (*) declaration, external_declaration -> (*) function_definition, function_definition -> (*) declaration_specifiers declarator compound_statement, function_definition -> (*) declaration_specifiers declarator declaration_list compound_statement, function_definition -> (*) declarator compound_statement, function_definition -> (*) declarator declaration_list compound_statement, pointer -> (*) '*', pointer -> (*) '*' pointer, pointer -> (*) '*' type_qualifier_list, pointer -> (*) '*' type_qualifier_list pointer, storage_class_specifier -> (*) 'auto', storage_class_specifier -> (*) 'extern', storage_class_specifier -> (*) 'register', storage_class_specifier -> (*) 'static', storage_class_specifier -> (*) 'typedef', struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', translation_unit -> (*) external_declaration, translation_unit -> (*) translation_unit external_declaration, type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier}
s1 = {abstract_declarator -> (*) direct_abstract_declarator, abstract_declarator -> (*) pointer, abstract_declarator -> (*) pointer direct_abstract_declarator, declaration_specifiers -> (*) storage_class_specifier, declaration_specifiers -> (*) storage_class_specifier declaration_specifiers, declaration_specifiers -> (*) type_qualifier, declaration_specifiers -> (*) type_qualifier declaration_specifiers, declaration_specifiers -> (*) type_specifier, declaration_specifiers -> (*) type_specifier declaration_specifiers, declarator -> (*) direct_declarator, declarator -> (*) pointer direct_declarator, direct_abstract_declarator -> (*) '(' ')', direct_abstract_declarator -> (*) '(' abstract_declarator ')', direct_abstract_declarator -> (*) '(' parameter_type_list ')', direct_abstract_declarator -> (*) '[' ']', direct_abstract_declarator -> (*) '[' constant_expression ']', direct_abstract_declarator -> (*) direct_abstract_declarator '(' ')', direct_abstract_declarator -> (*) direct_abstract_declarator '(' parameter_type_list ')', direct_abstract_declarator -> (*) direct_abstract_declarator '[' ']', direct_abstract_declarator -> (*) direct_abstract_declarator '[' constant_expression ']', direct_declarator -> (*) '(' declarator ')', direct_declarator -> (*) IDENTIFIER, direct_declarator -> (*) direct_declarator '(' ')', direct_declarator -> (*) direct_declarator '(' identifier_list ')', direct_declarator -> (*) direct_declarator '(' parameter_type_list ')', direct_declarator -> (*) direct_declarator '[' ']', direct_declarator -> (*) direct_declarator '[' constant_expression ']', enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', parameter_declaration -> (*) declaration_specifiers, parameter_declaration -> (*) declaration_specifiers abstract_declarator, parameter_declaration -> (*) declaration_specifiers declarator, parameter_list -> (*) parameter_declaration, parameter_list -> (*) parameter_list ',' parameter_declaration, parameter_type_list -> (*) parameter_list, parameter_type_list -> (*) parameter_list ',' '...', pointer -> (*) '*', pointer -> (*) '*' pointer, pointer -> (*) '*' type_qualifier_list, pointer -> (*) '*' type_qualifier_list pointer, storage_class_specifier -> (*) 'auto', storage_class_specifier -> (*) 'extern', storage_class_specifier -> (*) 'register', storage_class_specifier -> (*) 'static', storage_class_specifier -> (*) 'typedef', struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, direct_abstract_declarator -> '(' (*) ')', direct_abstract_declarator -> '(' (*) abstract_declarator ')', direct_abstract_declarator -> '(' (*) parameter_type_list ')', direct_declarator -> '(' (*) declarator ')'}
s2 = {abstract_declarator -> (*) direct_abstract_declarator, abstract_declarator -> (*) pointer, abstract_declarator -> (*) pointer direct_abstract_declarator, declaration_specifiers -> (*) storage_class_specifier, declaration_specifiers -> (*) storage_class_specifier declaration_specifiers, declaration_specifiers -> (*) type_qualifier, declaration_specifiers -> (*) type_qualifier declaration_specifiers, declaration_specifiers -> (*) type_specifier, declaration_specifiers -> (*) type_specifier declaration_specifiers, direct_abstract_declarator -> (*) '(' ')', direct_abstract_declarator -> (*) '(' abstract_declarator ')', direct_abstract_declarator -> (*) '(' parameter_type_list ')', direct_abstract_declarator -> (*) '[' ']', direct_abstract_declarator -> (*) '[' constant_expression ']', direct_abstract_declarator -> (*) direct_abstract_declarator '(' ')', direct_abstract_declarator -> (*) direct_abstract_declarator '(' parameter_type_list ')', direct_abstract_declarator -> (*) direct_abstract_declarator '[' ']', direct_abstract_declarator -> (*) direct_abstract_declarator '[' constant_expression ']', enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', parameter_declaration -> (*) declaration_specifiers, parameter_declaration -> (*) declaration_specifiers abstract_declarator, parameter_declaration -> (*) declaration_specifiers declarator, parameter_list -> (*) parameter_declaration, parameter_list -> (*) parameter_list ',' parameter_declaration, parameter_type_list -> (*) parameter_list, parameter_type_list -> (*) parameter_list ',' '...', pointer -> (*) '*', pointer -> (*) '*' pointer, pointer -> (*) '*' type_qualifier_list, pointer -> (*) '*' type_qualifier_list pointer, storage_class_specifier -> (*) 'auto', storage_class_specifier -> (*) 'extern', storage_class_specifier -> (*) 'register', storage_class_specifier -> (*) 'static', storage_class_specifier -> (*) 'typedef', struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, direct_abstract_declarator -> '(' (*) ')', direct_abstract_declarator -> '(' (*) abstract_declarator ')', direct_abstract_declarator -> '(' (*) parameter_type_list ')'}
s3 = {abstract_declarator -> (*) direct_abstract_declarator, abstract_declarator -> (*) pointer, abstract_declarator -> (*) pointer direct_abstract_declarator, declarator -> (*) direct_declarator, declarator -> (*) pointer direct_declarator, direct_abstract_declarator -> (*) '(' ')', direct_abstract_declarator -> (*) '(' abstract_declarator ')', direct_abstract_declarator -> (*) '(' parameter_type_list ')', direct_abstract_declarator -> (*) '[' ']', direct_abstract_declarator -> (*) '[' constant_expression ']', direct_abstract_declarator -> (*) direct_abstract_declarator '(' ')', direct_abstract_declarator -> (*) direct_abstract_declarator '(' parameter_type_list ')', direct_abstract_declarator -> (*) direct_abstract_declarator '[' ']', direct_abstract_declarator -> (*) direct_abstract_declarator '[' constant_expression ']', direct_declarator -> (*) '(' declarator ')', direct_declarator -> (*) IDENTIFIER, direct_declarator -> (*) direct_declarator '(' ')', direct_declarator -> (*) direct_declarator '(' identifier_list ')', direct_declarator -> (*) direct_declarator '(' parameter_type_list ')', direct_declarator -> (*) direct_declarator '[' ']', direct_declarator -> (*) direct_declarator '[' constant_expression ']', pointer -> (*) '*', pointer -> (*) '*' pointer, pointer -> (*) '*' type_qualifier_list, pointer -> (*) '*' type_qualifier_list pointer, parameter_declaration -> declaration_specifiers (*), parameter_declaration -> declaration_specifiers (*) abstract_declarator, parameter_declaration -> declaration_specifiers (*) declarator}
s4 = {abstract_declarator -> (*) direct_abstract_declarator, abstract_declarator -> (*) pointer, abstract_declarator -> (*) pointer direct_abstract_declarator, direct_abstract_declarator -> (*) '(' ')', direct_abstract_declarator -> (*) '(' abstract_declarator ')', direct_abstract_declarator -> (*) '(' parameter_type_list ')', direct_abstract_declarator -> (*) '[' ']', direct_abstract_declarator -> (*) '[' constant_expression ']', direct_abstract_declarator -> (*) direct_abstract_declarator '(' ')', direct_abstract_declarator -> (*) direct_abstract_declarator '(' parameter_type_list ')', direct_abstract_declarator -> (*) direct_abstract_declarator '[' ']', direct_abstract_declarator -> (*) direct_abstract_declarator '[' constant_expression ']', pointer -> (*) '*', pointer -> (*) '*' pointer, pointer -> (*) '*' type_qualifier_list, pointer -> (*) '*' type_qualifier_list pointer, type_name -> specifier_qualifier_list (*), type_name -> specifier_qualifier_list (*) abstract_declarator}
s5 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, argument_expression_list -> (*) argument_expression_list ',' assignment_expression, argument_expression_list -> (*) assignment_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', postfix_expression -> postfix_expression '(' (*) ')', postfix_expression -> postfix_expression '(' (*) argument_expression_list ')'}
s6 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, compound_statement -> (*) '{' '}', compound_statement -> (*) '{' declaration_list '}', compound_statement -> (*) '{' declaration_list statement_list '}', compound_statement -> (*) '{' statement_list '}', conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, declaration -> (*) declaration_specifiers ';', declaration -> (*) declaration_specifiers init_declarator_list ';', declaration_list -> (*) declaration, declaration_list -> (*) declaration_list declaration, declaration_specifiers -> (*) storage_class_specifier, declaration_specifiers -> (*) storage_class_specifier declaration_specifiers, declaration_specifiers -> (*) type_qualifier, declaration_specifiers -> (*) type_qualifier declaration_specifiers, declaration_specifiers -> (*) type_specifier, declaration_specifiers -> (*) type_specifier declaration_specifiers, enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, expression_statement -> (*) ';', expression_statement -> (*) expression ';', inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, iteration_statement -> (*) 'do' statement 'while' '(' expression ')' ';', iteration_statement -> (*) 'for' '(' expression_statement expression_statement ')' statement, iteration_statement -> (*) 'for' '(' expression_statement expression_statement expression ')' statement, iteration_statement -> (*) 'while' '(' expression ')' statement, jump_statement -> (*) 'break' ';', jump_statement -> (*) 'continue' ';', jump_statement -> (*) 'goto' IDENTIFIER ';', jump_statement -> (*) 'return' ';', jump_statement -> (*) 'return' expression ';', labeled_statement -> (*) 'case' constant_expression ':' statement, labeled_statement -> (*) 'default' ':' statement, labeled_statement -> (*) IDENTIFIER ':' statement, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, selection_statement -> (*) 'if' '(' expression ')' statement, selection_statement -> (*) 'if' '(' expression ')' statement 'else' statement, selection_statement -> (*) 'switch' '(' expression ')' statement, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, statement -> (*) compound_statement, statement -> (*) expression_statement, statement -> (*) iteration_statement, statement -> (*) jump_statement, statement -> (*) labeled_statement, statement -> (*) selection_statement, statement_list -> (*) statement, statement_list -> (*) statement_list statement, storage_class_specifier -> (*) 'auto', storage_class_specifier -> (*) 'extern', storage_class_specifier -> (*) 'register', storage_class_specifier -> (*) 'static', storage_class_specifier -> (*) 'typedef', struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', compound_statement -> '{' (*) '}', compound_statement -> '{' (*) declaration_list '}', compound_statement -> '{' (*) declaration_list statement_list '}', compound_statement -> '{' (*) statement_list '}'}
s7 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, compound_statement -> (*) '{' '}', compound_statement -> (*) '{' declaration_list '}', compound_statement -> (*) '{' declaration_list statement_list '}', compound_statement -> (*) '{' statement_list '}', conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, declaration -> (*) declaration_specifiers ';', declaration -> (*) declaration_specifiers init_declarator_list ';', declaration_specifiers -> (*) storage_class_specifier, declaration_specifiers -> (*) storage_class_specifier declaration_specifiers, declaration_specifiers -> (*) type_qualifier, declaration_specifiers -> (*) type_qualifier declaration_specifiers, declaration_specifiers -> (*) type_specifier, declaration_specifiers -> (*) type_specifier declaration_specifiers, enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, expression_statement -> (*) ';', expression_statement -> (*) expression ';', inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, iteration_statement -> (*) 'do' statement 'while' '(' expression ')' ';', iteration_statement -> (*) 'for' '(' expression_statement expression_statement ')' statement, iteration_statement -> (*) 'for' '(' expression_statement expression_statement expression ')' statement, iteration_statement -> (*) 'while' '(' expression ')' statement, jump_statement -> (*) 'break' ';', jump_statement -> (*) 'continue' ';', jump_statement -> (*) 'goto' IDENTIFIER ';', jump_statement -> (*) 'return' ';', jump_statement -> (*) 'return' expression ';', labeled_statement -> (*) 'case' constant_expression ':' statement, labeled_statement -> (*) 'default' ':' statement, labeled_statement -> (*) IDENTIFIER ':' statement, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, selection_statement -> (*) 'if' '(' expression ')' statement, selection_statement -> (*) 'if' '(' expression ')' statement 'else' statement, selection_statement -> (*) 'switch' '(' expression ')' statement, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, statement -> (*) compound_statement, statement -> (*) expression_statement, statement -> (*) iteration_statement, statement -> (*) jump_statement, statement -> (*) labeled_statement, statement -> (*) selection_statement, statement_list -> (*) statement, statement_list -> (*) statement_list statement, storage_class_specifier -> (*) 'auto', storage_class_specifier -> (*) 'extern', storage_class_specifier -> (*) 'register', storage_class_specifier -> (*) 'static', storage_class_specifier -> (*) 'typedef', struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', compound_statement -> '{' declaration_list (*) '}', compound_statement -> '{' declaration_list (*) statement_list '}', declaration_list -> declaration_list (*) declaration}
s8 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, compound_statement -> (*) '{' '}', compound_statement -> (*) '{' declaration_list '}', compound_statement -> (*) '{' declaration_list statement_list '}', compound_statement -> (*) '{' statement_list '}', conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, expression_statement -> (*) ';', expression_statement -> (*) expression ';', inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, iteration_statement -> (*) 'do' statement 'while' '(' expression ')' ';', iteration_statement -> (*) 'for' '(' expression_statement expression_statement ')' statement, iteration_statement -> (*) 'for' '(' expression_statement expression_statement expression ')' statement, iteration_statement -> (*) 'while' '(' expression ')' statement, jump_statement -> (*) 'break' ';', jump_statement -> (*) 'continue' ';', jump_statement -> (*) 'goto' IDENTIFIER ';', jump_statement -> (*) 'return' ';', jump_statement -> (*) 'return' expression ';', labeled_statement -> (*) 'case' constant_expression ':' statement, labeled_statement -> (*) 'default' ':' statement, labeled_statement -> (*) IDENTIFIER ':' statement, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, selection_statement -> (*) 'if' '(' expression ')' statement, selection_statement -> (*) 'if' '(' expression ')' statement 'else' statement, selection_statement -> (*) 'switch' '(' expression ')' statement, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, statement -> (*) compound_statement, statement -> (*) expression_statement, statement -> (*) iteration_statement, statement -> (*) jump_statement, statement -> (*) labeled_statement, statement -> (*) selection_statement, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', labeled_statement -> 'case' constant_expression ':' (*) statement}
s9 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, compound_statement -> (*) '{' '}', compound_statement -> (*) '{' declaration_list '}', compound_statement -> (*) '{' declaration_list statement_list '}', compound_statement -> (*) '{' statement_list '}', conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, expression_statement -> (*) ';', expression_statement -> (*) expression ';', inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, iteration_statement -> (*) 'do' statement 'while' '(' expression ')' ';', iteration_statement -> (*) 'for' '(' expression_statement expression_statement ')' statement, iteration_statement -> (*) 'for' '(' expression_statement expression_statement expression ')' statement, iteration_statement -> (*) 'while' '(' expression ')' statement, jump_statement -> (*) 'break' ';', jump_statement -> (*) 'continue' ';', jump_statement -> (*) 'goto' IDENTIFIER ';', jump_statement -> (*) 'return' ';', jump_statement -> (*) 'return' expression ';', labeled_statement -> (*) 'case' constant_expression ':' statement, labeled_statement -> (*) 'default' ':' statement, labeled_statement -> (*) IDENTIFIER ':' statement, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, selection_statement -> (*) 'if' '(' expression ')' statement, selection_statement -> (*) 'if' '(' expression ')' statement 'else' statement, selection_statement -> (*) 'switch' '(' expression ')' statement, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, statement -> (*) compound_statement, statement -> (*) expression_statement, statement -> (*) iteration_statement, statement -> (*) jump_statement, statement -> (*) labeled_statement, statement -> (*) selection_statement, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', labeled_statement -> 'default' ':' (*) statement}
s10 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, compound_statement -> (*) '{' '}', compound_statement -> (*) '{' declaration_list '}', compound_statement -> (*) '{' declaration_list statement_list '}', compound_statement -> (*) '{' statement_list '}', conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, expression_statement -> (*) ';', expression_statement -> (*) expression ';', inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, iteration_statement -> (*) 'do' statement 'while' '(' expression ')' ';', iteration_statement -> (*) 'for' '(' expression_statement expression_statement ')' statement, iteration_statement -> (*) 'for' '(' expression_statement expression_statement expression ')' statement, iteration_statement -> (*) 'while' '(' expression ')' statement, jump_statement -> (*) 'break' ';', jump_statement -> (*) 'continue' ';', jump_statement -> (*) 'goto' IDENTIFIER ';', jump_statement -> (*) 'return' ';', jump_statement -> (*) 'return' expression ';', labeled_statement -> (*) 'case' constant_expression ':' statement, labeled_statement -> (*) 'default' ':' statement, labeled_statement -> (*) IDENTIFIER ':' statement, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, selection_statement -> (*) 'if' '(' expression ')' statement, selection_statement -> (*) 'if' '(' expression ')' statement 'else' statement, selection_statement -> (*) 'switch' '(' expression ')' statement, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, statement -> (*) compound_statement, statement -> (*) expression_statement, statement -> (*) iteration_statement, statement -> (*) jump_statement, statement -> (*) labeled_statement, statement -> (*) selection_statement, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', iteration_statement -> 'do' (*) statement 'while' '(' expression ')' ';'}
s11 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, compound_statement -> (*) '{' '}', compound_statement -> (*) '{' declaration_list '}', compound_statement -> (*) '{' declaration_list statement_list '}', compound_statement -> (*) '{' statement_list '}', conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, expression_statement -> (*) ';', expression_statement -> (*) expression ';', inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, iteration_statement -> (*) 'do' statement 'while' '(' expression ')' ';', iteration_statement -> (*) 'for' '(' expression_statement expression_statement ')' statement, iteration_statement -> (*) 'for' '(' expression_statement expression_statement expression ')' statement, iteration_statement -> (*) 'while' '(' expression ')' statement, jump_statement -> (*) 'break' ';', jump_statement -> (*) 'continue' ';', jump_statement -> (*) 'goto' IDENTIFIER ';', jump_statement -> (*) 'return' ';', jump_statement -> (*) 'return' expression ';', labeled_statement -> (*) 'case' constant_expression ':' statement, labeled_statement -> (*) 'default' ':' statement, labeled_statement -> (*) IDENTIFIER ':' statement, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, selection_statement -> (*) 'if' '(' expression ')' statement, selection_statement -> (*) 'if' '(' expression ')' statement 'else' statement, selection_statement -> (*) 'switch' '(' expression ')' statement, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, statement -> (*) compound_statement, statement -> (*) expression_statement, statement -> (*) iteration_statement, statement -> (*) jump_statement, statement -> (*) labeled_statement, statement -> (*) selection_statement, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', iteration_statement -> 'for' '(' expression_statement expression_statement ')' (*) statement}
s12 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, compound_statement -> (*) '{' '}', compound_statement -> (*) '{' declaration_list '}', compound_statement -> (*) '{' declaration_list statement_list '}', compound_statement -> (*) '{' statement_list '}', conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, expression_statement -> (*) ';', expression_statement -> (*) expression ';', inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, iteration_statement -> (*) 'do' statement 'while' '(' expression ')' ';', iteration_statement -> (*) 'for' '(' expression_statement expression_statement ')' statement, iteration_statement -> (*) 'for' '(' expression_statement expression_statement expression ')' statement, iteration_statement -> (*) 'while' '(' expression ')' statement, jump_statement -> (*) 'break' ';', jump_statement -> (*) 'continue' ';', jump_statement -> (*) 'goto' IDENTIFIER ';', jump_statement -> (*) 'return' ';', jump_statement -> (*) 'return' expression ';', labeled_statement -> (*) 'case' constant_expression ':' statement, labeled_statement -> (*) 'default' ':' statement, labeled_statement -> (*) IDENTIFIER ':' statement, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, selection_statement -> (*) 'if' '(' expression ')' statement, selection_statement -> (*) 'if' '(' expression ')' statement 'else' statement, selection_statement -> (*) 'switch' '(' expression ')' statement, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, statement -> (*) compound_statement, statement -> (*) expression_statement, statement -> (*) iteration_statement, statement -> (*) jump_statement, statement -> (*) labeled_statement, statement -> (*) selection_statement, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' (*) statement}
s13 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, compound_statement -> (*) '{' '}', compound_statement -> (*) '{' declaration_list '}', compound_statement -> (*) '{' declaration_list statement_list '}', compound_statement -> (*) '{' statement_list '}', conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, expression_statement -> (*) ';', expression_statement -> (*) expression ';', inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, iteration_statement -> (*) 'do' statement 'while' '(' expression ')' ';', iteration_statement -> (*) 'for' '(' expression_statement expression_statement ')' statement, iteration_statement -> (*) 'for' '(' expression_statement expression_statement expression ')' statement, iteration_statement -> (*) 'while' '(' expression ')' statement, jump_statement -> (*) 'break' ';', jump_statement -> (*) 'continue' ';', jump_statement -> (*) 'goto' IDENTIFIER ';', jump_statement -> (*) 'return' ';', jump_statement -> (*) 'return' expression ';', labeled_statement -> (*) 'case' constant_expression ':' statement, labeled_statement -> (*) 'default' ':' statement, labeled_statement -> (*) IDENTIFIER ':' statement, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, selection_statement -> (*) 'if' '(' expression ')' statement, selection_statement -> (*) 'if' '(' expression ')' statement 'else' statement, selection_statement -> (*) 'switch' '(' expression ')' statement, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, statement -> (*) compound_statement, statement -> (*) expression_statement, statement -> (*) iteration_statement, statement -> (*) jump_statement, statement -> (*) labeled_statement, statement -> (*) selection_statement, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', selection_statement -> 'if' '(' expression ')' (*) statement, selection_statement -> 'if' '(' expression ')' (*) statement 'else' statement}
s14 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, compound_statement -> (*) '{' '}', compound_statement -> (*) '{' declaration_list '}', compound_statement -> (*) '{' declaration_list statement_list '}', compound_statement -> (*) '{' statement_list '}', conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, expression_statement -> (*) ';', expression_statement -> (*) expression ';', inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, iteration_statement -> (*) 'do' statement 'while' '(' expression ')' ';', iteration_statement -> (*) 'for' '(' expression_statement expression_statement ')' statement, iteration_statement -> (*) 'for' '(' expression_statement expression_statement expression ')' statement, iteration_statement -> (*) 'while' '(' expression ')' statement, jump_statement -> (*) 'break' ';', jump_statement -> (*) 'continue' ';', jump_statement -> (*) 'goto' IDENTIFIER ';', jump_statement -> (*) 'return' ';', jump_statement -> (*) 'return' expression ';', labeled_statement -> (*) 'case' constant_expression ':' statement, labeled_statement -> (*) 'default' ':' statement, labeled_statement -> (*) IDENTIFIER ':' statement, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, selection_statement -> (*) 'if' '(' expression ')' statement, selection_statement -> (*) 'if' '(' expression ')' statement 'else' statement, selection_statement -> (*) 'switch' '(' expression ')' statement, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, statement -> (*) compound_statement, statement -> (*) expression_statement, statement -> (*) iteration_statement, statement -> (*) jump_statement, statement -> (*) labeled_statement, statement -> (*) selection_statement, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', selection_statement -> 'if' '(' expression ')' statement 'else' (*) statement}
s15 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, compound_statement -> (*) '{' '}', compound_statement -> (*) '{' declaration_list '}', compound_statement -> (*) '{' declaration_list statement_list '}', compound_statement -> (*) '{' statement_list '}', conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, expression_statement -> (*) ';', expression_statement -> (*) expression ';', inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, iteration_statement -> (*) 'do' statement 'while' '(' expression ')' ';', iteration_statement -> (*) 'for' '(' expression_statement expression_statement ')' statement, iteration_statement -> (*) 'for' '(' expression_statement expression_statement expression ')' statement, iteration_statement -> (*) 'while' '(' expression ')' statement, jump_statement -> (*) 'break' ';', jump_statement -> (*) 'continue' ';', jump_statement -> (*) 'goto' IDENTIFIER ';', jump_statement -> (*) 'return' ';', jump_statement -> (*) 'return' expression ';', labeled_statement -> (*) 'case' constant_expression ':' statement, labeled_statement -> (*) 'default' ':' statement, labeled_statement -> (*) IDENTIFIER ':' statement, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, selection_statement -> (*) 'if' '(' expression ')' statement, selection_statement -> (*) 'if' '(' expression ')' statement 'else' statement, selection_statement -> (*) 'switch' '(' expression ')' statement, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, statement -> (*) compound_statement, statement -> (*) expression_statement, statement -> (*) iteration_statement, statement -> (*) jump_statement, statement -> (*) labeled_statement, statement -> (*) selection_statement, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', selection_statement -> 'switch' '(' expression ')' (*) statement}
s16 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, compound_statement -> (*) '{' '}', compound_statement -> (*) '{' declaration_list '}', compound_statement -> (*) '{' declaration_list statement_list '}', compound_statement -> (*) '{' statement_list '}', conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, expression_statement -> (*) ';', expression_statement -> (*) expression ';', inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, iteration_statement -> (*) 'do' statement 'while' '(' expression ')' ';', iteration_statement -> (*) 'for' '(' expression_statement expression_statement ')' statement, iteration_statement -> (*) 'for' '(' expression_statement expression_statement expression ')' statement, iteration_statement -> (*) 'while' '(' expression ')' statement, jump_statement -> (*) 'break' ';', jump_statement -> (*) 'continue' ';', jump_statement -> (*) 'goto' IDENTIFIER ';', jump_statement -> (*) 'return' ';', jump_statement -> (*) 'return' expression ';', labeled_statement -> (*) 'case' constant_expression ':' statement, labeled_statement -> (*) 'default' ':' statement, labeled_statement -> (*) IDENTIFIER ':' statement, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, selection_statement -> (*) 'if' '(' expression ')' statement, selection_statement -> (*) 'if' '(' expression ')' statement 'else' statement, selection_statement -> (*) 'switch' '(' expression ')' statement, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, statement -> (*) compound_statement, statement -> (*) expression_statement, statement -> (*) iteration_statement, statement -> (*) jump_statement, statement -> (*) labeled_statement, statement -> (*) selection_statement, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', iteration_statement -> 'while' '(' expression ')' (*) statement}
s17 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, compound_statement -> (*) '{' '}', compound_statement -> (*) '{' declaration_list '}', compound_statement -> (*) '{' declaration_list statement_list '}', compound_statement -> (*) '{' statement_list '}', conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, expression_statement -> (*) ';', expression_statement -> (*) expression ';', inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, iteration_statement -> (*) 'do' statement 'while' '(' expression ')' ';', iteration_statement -> (*) 'for' '(' expression_statement expression_statement ')' statement, iteration_statement -> (*) 'for' '(' expression_statement expression_statement expression ')' statement, iteration_statement -> (*) 'while' '(' expression ')' statement, jump_statement -> (*) 'break' ';', jump_statement -> (*) 'continue' ';', jump_statement -> (*) 'goto' IDENTIFIER ';', jump_statement -> (*) 'return' ';', jump_statement -> (*) 'return' expression ';', labeled_statement -> (*) 'case' constant_expression ':' statement, labeled_statement -> (*) 'default' ':' statement, labeled_statement -> (*) IDENTIFIER ':' statement, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, selection_statement -> (*) 'if' '(' expression ')' statement, selection_statement -> (*) 'if' '(' expression ')' statement 'else' statement, selection_statement -> (*) 'switch' '(' expression ')' statement, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, statement -> (*) compound_statement, statement -> (*) expression_statement, statement -> (*) iteration_statement, statement -> (*) jump_statement, statement -> (*) labeled_statement, statement -> (*) selection_statement, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', compound_statement -> '{' declaration_list statement_list (*) '}', statement_list -> statement_list (*) statement}
s18 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, compound_statement -> (*) '{' '}', compound_statement -> (*) '{' declaration_list '}', compound_statement -> (*) '{' declaration_list statement_list '}', compound_statement -> (*) '{' statement_list '}', conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, expression_statement -> (*) ';', expression_statement -> (*) expression ';', inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, iteration_statement -> (*) 'do' statement 'while' '(' expression ')' ';', iteration_statement -> (*) 'for' '(' expression_statement expression_statement ')' statement, iteration_statement -> (*) 'for' '(' expression_statement expression_statement expression ')' statement, iteration_statement -> (*) 'while' '(' expression ')' statement, jump_statement -> (*) 'break' ';', jump_statement -> (*) 'continue' ';', jump_statement -> (*) 'goto' IDENTIFIER ';', jump_statement -> (*) 'return' ';', jump_statement -> (*) 'return' expression ';', labeled_statement -> (*) 'case' constant_expression ':' statement, labeled_statement -> (*) 'default' ':' statement, labeled_statement -> (*) IDENTIFIER ':' statement, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, selection_statement -> (*) 'if' '(' expression ')' statement, selection_statement -> (*) 'if' '(' expression ')' statement 'else' statement, selection_statement -> (*) 'switch' '(' expression ')' statement, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, statement -> (*) compound_statement, statement -> (*) expression_statement, statement -> (*) iteration_statement, statement -> (*) jump_statement, statement -> (*) labeled_statement, statement -> (*) selection_statement, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', compound_statement -> '{' statement_list (*) '}', statement_list -> statement_list (*) statement}
s19 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, compound_statement -> (*) '{' '}', compound_statement -> (*) '{' declaration_list '}', compound_statement -> (*) '{' declaration_list statement_list '}', compound_statement -> (*) '{' statement_list '}', conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, expression_statement -> (*) ';', expression_statement -> (*) expression ';', inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, iteration_statement -> (*) 'do' statement 'while' '(' expression ')' ';', iteration_statement -> (*) 'for' '(' expression_statement expression_statement ')' statement, iteration_statement -> (*) 'for' '(' expression_statement expression_statement expression ')' statement, iteration_statement -> (*) 'while' '(' expression ')' statement, jump_statement -> (*) 'break' ';', jump_statement -> (*) 'continue' ';', jump_statement -> (*) 'goto' IDENTIFIER ';', jump_statement -> (*) 'return' ';', jump_statement -> (*) 'return' expression ';', labeled_statement -> (*) 'case' constant_expression ':' statement, labeled_statement -> (*) 'default' ':' statement, labeled_statement -> (*) IDENTIFIER ':' statement, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, selection_statement -> (*) 'if' '(' expression ')' statement, selection_statement -> (*) 'if' '(' expression ')' statement 'else' statement, selection_statement -> (*) 'switch' '(' expression ')' statement, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, statement -> (*) compound_statement, statement -> (*) expression_statement, statement -> (*) iteration_statement, statement -> (*) jump_statement, statement -> (*) labeled_statement, statement -> (*) selection_statement, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', labeled_statement -> IDENTIFIER ':' (*) statement}
s20 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, specifier_qualifier_list -> (*) type_qualifier, specifier_qualifier_list -> (*) type_qualifier specifier_qualifier_list, specifier_qualifier_list -> (*) type_specifier, specifier_qualifier_list -> (*) type_specifier specifier_qualifier_list, struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_name -> (*) specifier_qualifier_list, type_name -> (*) specifier_qualifier_list abstract_declarator, type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', cast_expression -> '(' (*) type_name ')' cast_expression, primary_expression -> '(' (*) expression ')'}
s21 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, specifier_qualifier_list -> (*) type_qualifier, specifier_qualifier_list -> (*) type_qualifier specifier_qualifier_list, specifier_qualifier_list -> (*) type_specifier, specifier_qualifier_list -> (*) type_specifier specifier_qualifier_list, struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_name -> (*) specifier_qualifier_list, type_name -> (*) specifier_qualifier_list abstract_declarator, type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', primary_expression -> '(' (*) expression ')', unary_expression -> 'sizeof' '(' (*) type_name ')'}
s22 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, expression_statement -> (*) ';', expression_statement -> (*) expression ';', inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', iteration_statement -> 'for' '(' (*) expression_statement expression_statement ')' statement, iteration_statement -> 'for' '(' (*) expression_statement expression_statement expression ')' statement}
s23 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, expression_statement -> (*) ';', expression_statement -> (*) expression ';', inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', iteration_statement -> 'for' '(' expression_statement (*) expression_statement ')' statement, iteration_statement -> 'for' '(' expression_statement (*) expression_statement expression ')' statement}
s24 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', primary_expression -> '(' (*) expression ')'}
s25 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', iteration_statement -> 'do' statement 'while' '(' (*) expression ')' ';'}
s26 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', iteration_statement -> 'for' '(' expression_statement expression_statement (*) ')' statement, iteration_statement -> 'for' '(' expression_statement expression_statement (*) expression ')' statement}
s27 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', selection_statement -> 'if' '(' (*) expression ')' statement, selection_statement -> 'if' '(' (*) expression ')' statement 'else' statement}
s28 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', jump_statement -> 'return' (*) ';', jump_statement -> 'return' (*) expression ';'}
s29 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', selection_statement -> 'switch' '(' (*) expression ')' statement}
s30 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', iteration_statement -> 'while' '(' (*) expression ')' statement}
s31 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', conditional_expression -> logical_or_expression '?' (*) expression ':' conditional_expression}
s32 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, expression -> (*) assignment_expression, expression -> (*) expression ',' assignment_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', postfix_expression -> postfix_expression '[' (*) expression ']'}
s33 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, initializer -> (*) '{' initializer_list ',' '}', initializer -> (*) '{' initializer_list '}', initializer -> (*) assignment_expression, initializer_list -> (*) initializer, initializer_list -> (*) initializer_list ',' initializer, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', initializer -> '{' (*) initializer_list ',' '}', initializer -> '{' (*) initializer_list '}'}
s34 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, initializer -> (*) '{' initializer_list ',' '}', initializer -> (*) '{' initializer_list '}', initializer -> (*) assignment_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', initializer -> '{' initializer_list ',' (*) '}', initializer_list -> initializer_list ',' (*) initializer}
s35 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, initializer -> (*) '{' initializer_list ',' '}', initializer -> (*) '{' initializer_list '}', initializer -> (*) assignment_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', init_declarator -> declarator '=' (*) initializer}
s36 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', argument_expression_list -> argument_expression_list ',' (*) assignment_expression}
s37 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', expression -> expression ',' (*) assignment_expression}
s38 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, assignment_expression -> (*) conditional_expression, assignment_expression -> (*) unary_expression assignment_operator assignment_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', assignment_expression -> unary_expression assignment_operator (*) assignment_expression}
s39 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, constant_expression -> (*) conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', struct_declarator -> ':' (*) constant_expression}
s40 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, constant_expression -> (*) conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', direct_abstract_declarator -> '[' (*) ']', direct_abstract_declarator -> '[' (*) constant_expression ']'}
s41 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, constant_expression -> (*) conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', labeled_statement -> 'case' (*) constant_expression ':' statement}
s42 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, constant_expression -> (*) conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', enumerator -> IDENTIFIER '=' (*) constant_expression}
s43 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, constant_expression -> (*) conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', struct_declarator -> declarator ':' (*) constant_expression}
s44 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, constant_expression -> (*) conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', direct_abstract_declarator -> direct_abstract_declarator '[' (*) ']', direct_abstract_declarator -> direct_abstract_declarator '[' (*) constant_expression ']'}
s45 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, constant_expression -> (*) conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', direct_declarator -> direct_declarator '[' (*) ']', direct_declarator -> direct_declarator '[' (*) constant_expression ']'}
s46 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, conditional_expression -> (*) logical_or_expression, conditional_expression -> (*) logical_or_expression '?' expression ':' conditional_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> (*) logical_and_expression, logical_or_expression -> (*) logical_or_expression '||' logical_and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', conditional_expression -> logical_or_expression '?' expression ':' (*) conditional_expression}
s47 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, logical_and_expression -> (*) inclusive_or_expression, logical_and_expression -> (*) logical_and_expression '&&' inclusive_or_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', logical_or_expression -> logical_or_expression '||' (*) logical_and_expression}
s48 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, inclusive_or_expression -> (*) exclusive_or_expression, inclusive_or_expression -> (*) inclusive_or_expression '|' exclusive_or_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', logical_and_expression -> logical_and_expression '&&' (*) inclusive_or_expression}
s49 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, exclusive_or_expression -> (*) and_expression, exclusive_or_expression -> (*) exclusive_or_expression '^' and_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', inclusive_or_expression -> inclusive_or_expression '|' (*) exclusive_or_expression}
s50 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, and_expression -> (*) and_expression '&' equality_expression, and_expression -> (*) equality_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', exclusive_or_expression -> exclusive_or_expression '^' (*) and_expression}
s51 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, equality_expression -> (*) equality_expression '!=' relational_expression, equality_expression -> (*) equality_expression '==' relational_expression, equality_expression -> (*) relational_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', and_expression -> and_expression '&' (*) equality_expression}
s52 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', equality_expression -> equality_expression '!=' (*) relational_expression}
s53 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, relational_expression -> (*) relational_expression '<' shift_expression, relational_expression -> (*) relational_expression '<=' shift_expression, relational_expression -> (*) relational_expression '>' shift_expression, relational_expression -> (*) relational_expression '>=' shift_expression, relational_expression -> (*) shift_expression, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', equality_expression -> equality_expression '==' (*) relational_expression}
s54 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', relational_expression -> relational_expression '<' (*) shift_expression}
s55 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', relational_expression -> relational_expression '<=' (*) shift_expression}
s56 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', relational_expression -> relational_expression '>' (*) shift_expression}
s57 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, shift_expression -> (*) additive_expression, shift_expression -> (*) shift_expression '<<' additive_expression, shift_expression -> (*) shift_expression '>>' additive_expression, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', relational_expression -> relational_expression '>=' (*) shift_expression}
s58 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', shift_expression -> shift_expression '<<' (*) additive_expression}
s59 = {additive_expression -> (*) additive_expression '+' multiplicative_expression, additive_expression -> (*) additive_expression '-' multiplicative_expression, additive_expression -> (*) multiplicative_expression, cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', shift_expression -> shift_expression '>>' (*) additive_expression}
s60 = {assignment_operator -> (*) '%=', assignment_operator -> (*) '&=', assignment_operator -> (*) '*=', assignment_operator -> (*) '+=', assignment_operator -> (*) '-=', assignment_operator -> (*) '/=', assignment_operator -> (*) '<<=', assignment_operator -> (*) '=', assignment_operator -> (*) '>>=', assignment_operator -> (*) '^=', assignment_operator -> (*) '|=', assignment_expression -> unary_expression (*) assignment_operator assignment_expression, cast_expression -> unary_expression (*)}
s61 = {cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', additive_expression -> additive_expression '+' (*) multiplicative_expression}
s62 = {cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, multiplicative_expression -> (*) cast_expression, multiplicative_expression -> (*) multiplicative_expression '%' cast_expression, multiplicative_expression -> (*) multiplicative_expression '*' cast_expression, multiplicative_expression -> (*) multiplicative_expression '/' cast_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', additive_expression -> additive_expression '-' (*) multiplicative_expression}
s63 = {cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', cast_expression -> '(' type_name ')' (*) cast_expression}
s64 = {cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', multiplicative_expression -> multiplicative_expression '%' (*) cast_expression}
s65 = {cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', multiplicative_expression -> multiplicative_expression '*' (*) cast_expression}
s66 = {cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', multiplicative_expression -> multiplicative_expression '/' (*) cast_expression}
s67 = {cast_expression -> (*) '(' type_name ')' cast_expression, cast_expression -> (*) unary_expression, postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', unary_expression -> unary_operator (*) cast_expression}
s68 = {compound_statement -> (*) '{' '}', compound_statement -> (*) '{' declaration_list '}', compound_statement -> (*) '{' declaration_list statement_list '}', compound_statement -> (*) '{' statement_list '}', declaration -> (*) declaration_specifiers ';', declaration -> (*) declaration_specifiers init_declarator_list ';', declaration_list -> (*) declaration, declaration_list -> (*) declaration_list declaration, declaration_specifiers -> (*) storage_class_specifier, declaration_specifiers -> (*) storage_class_specifier declaration_specifiers, declaration_specifiers -> (*) type_qualifier, declaration_specifiers -> (*) type_qualifier declaration_specifiers, declaration_specifiers -> (*) type_specifier, declaration_specifiers -> (*) type_specifier declaration_specifiers, enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', storage_class_specifier -> (*) 'auto', storage_class_specifier -> (*) 'extern', storage_class_specifier -> (*) 'register', storage_class_specifier -> (*) 'static', storage_class_specifier -> (*) 'typedef', struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, function_definition -> declaration_specifiers declarator (*) compound_statement, function_definition -> declaration_specifiers declarator (*) declaration_list compound_statement, init_declarator -> declarator (*), init_declarator -> declarator (*) '=' initializer}
s69 = {compound_statement -> (*) '{' '}', compound_statement -> (*) '{' declaration_list '}', compound_statement -> (*) '{' declaration_list statement_list '}', compound_statement -> (*) '{' statement_list '}', declaration -> (*) declaration_specifiers ';', declaration -> (*) declaration_specifiers init_declarator_list ';', declaration_list -> (*) declaration, declaration_list -> (*) declaration_list declaration, declaration_specifiers -> (*) storage_class_specifier, declaration_specifiers -> (*) storage_class_specifier declaration_specifiers, declaration_specifiers -> (*) type_qualifier, declaration_specifiers -> (*) type_qualifier declaration_specifiers, declaration_specifiers -> (*) type_specifier, declaration_specifiers -> (*) type_specifier declaration_specifiers, enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', storage_class_specifier -> (*) 'auto', storage_class_specifier -> (*) 'extern', storage_class_specifier -> (*) 'register', storage_class_specifier -> (*) 'static', storage_class_specifier -> (*) 'typedef', struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, function_definition -> declarator (*) compound_statement, function_definition -> declarator (*) declaration_list compound_statement}
s70 = {compound_statement -> (*) '{' '}', compound_statement -> (*) '{' declaration_list '}', compound_statement -> (*) '{' declaration_list statement_list '}', compound_statement -> (*) '{' statement_list '}', declaration -> (*) declaration_specifiers ';', declaration -> (*) declaration_specifiers init_declarator_list ';', declaration_specifiers -> (*) storage_class_specifier, declaration_specifiers -> (*) storage_class_specifier declaration_specifiers, declaration_specifiers -> (*) type_qualifier, declaration_specifiers -> (*) type_qualifier declaration_specifiers, declaration_specifiers -> (*) type_specifier, declaration_specifiers -> (*) type_specifier declaration_specifiers, enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', storage_class_specifier -> (*) 'auto', storage_class_specifier -> (*) 'extern', storage_class_specifier -> (*) 'register', storage_class_specifier -> (*) 'static', storage_class_specifier -> (*) 'typedef', struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, declaration_list -> declaration_list (*) declaration, function_definition -> declaration_specifiers declarator declaration_list (*) compound_statement}
s71 = {compound_statement -> (*) '{' '}', compound_statement -> (*) '{' declaration_list '}', compound_statement -> (*) '{' declaration_list statement_list '}', compound_statement -> (*) '{' statement_list '}', declaration -> (*) declaration_specifiers ';', declaration -> (*) declaration_specifiers init_declarator_list ';', declaration_specifiers -> (*) storage_class_specifier, declaration_specifiers -> (*) storage_class_specifier declaration_specifiers, declaration_specifiers -> (*) type_qualifier, declaration_specifiers -> (*) type_qualifier declaration_specifiers, declaration_specifiers -> (*) type_specifier, declaration_specifiers -> (*) type_specifier declaration_specifiers, enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', storage_class_specifier -> (*) 'auto', storage_class_specifier -> (*) 'extern', storage_class_specifier -> (*) 'register', storage_class_specifier -> (*) 'static', storage_class_specifier -> (*) 'typedef', struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, declaration_list -> declaration_list (*) declaration, function_definition -> declarator declaration_list (*) compound_statement}
s72 = {declaration -> (*) declaration_specifiers ';', declaration -> (*) declaration_specifiers init_declarator_list ';', declaration_specifiers -> (*) storage_class_specifier, declaration_specifiers -> (*) storage_class_specifier declaration_specifiers, declaration_specifiers -> (*) type_qualifier, declaration_specifiers -> (*) type_qualifier declaration_specifiers, declaration_specifiers -> (*) type_specifier, declaration_specifiers -> (*) type_specifier declaration_specifiers, declarator -> (*) direct_declarator, declarator -> (*) pointer direct_declarator, direct_declarator -> (*) '(' declarator ')', direct_declarator -> (*) IDENTIFIER, direct_declarator -> (*) direct_declarator '(' ')', direct_declarator -> (*) direct_declarator '(' identifier_list ')', direct_declarator -> (*) direct_declarator '(' parameter_type_list ')', direct_declarator -> (*) direct_declarator '[' ']', direct_declarator -> (*) direct_declarator '[' constant_expression ']', enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', external_declaration -> (*) declaration, external_declaration -> (*) function_definition, function_definition -> (*) declaration_specifiers declarator compound_statement, function_definition -> (*) declaration_specifiers declarator declaration_list compound_statement, function_definition -> (*) declarator compound_statement, function_definition -> (*) declarator declaration_list compound_statement, pointer -> (*) '*', pointer -> (*) '*' pointer, pointer -> (*) '*' type_qualifier_list, pointer -> (*) '*' type_qualifier_list pointer, storage_class_specifier -> (*) 'auto', storage_class_specifier -> (*) 'extern', storage_class_specifier -> (*) 'register', storage_class_specifier -> (*) 'static', storage_class_specifier -> (*) 'typedef', struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, S -> translation_unit (*), translation_unit -> translation_unit (*) external_declaration}
s73 = {declaration_specifiers -> (*) storage_class_specifier, declaration_specifiers -> (*) storage_class_specifier declaration_specifiers, declaration_specifiers -> (*) type_qualifier, declaration_specifiers -> (*) type_qualifier declaration_specifiers, declaration_specifiers -> (*) type_specifier, declaration_specifiers -> (*) type_specifier declaration_specifiers, enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', identifier_list -> (*) IDENTIFIER, identifier_list -> (*) identifier_list ',' IDENTIFIER, parameter_declaration -> (*) declaration_specifiers, parameter_declaration -> (*) declaration_specifiers abstract_declarator, parameter_declaration -> (*) declaration_specifiers declarator, parameter_list -> (*) parameter_declaration, parameter_list -> (*) parameter_list ',' parameter_declaration, parameter_type_list -> (*) parameter_list, parameter_type_list -> (*) parameter_list ',' '...', storage_class_specifier -> (*) 'auto', storage_class_specifier -> (*) 'extern', storage_class_specifier -> (*) 'register', storage_class_specifier -> (*) 'static', storage_class_specifier -> (*) 'typedef', struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, direct_declarator -> direct_declarator '(' (*) ')', direct_declarator -> direct_declarator '(' (*) identifier_list ')', direct_declarator -> direct_declarator '(' (*) parameter_type_list ')'}
s74 = {declaration_specifiers -> (*) storage_class_specifier, declaration_specifiers -> (*) storage_class_specifier declaration_specifiers, declaration_specifiers -> (*) type_qualifier, declaration_specifiers -> (*) type_qualifier declaration_specifiers, declaration_specifiers -> (*) type_specifier, declaration_specifiers -> (*) type_specifier declaration_specifiers, enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', parameter_declaration -> (*) declaration_specifiers, parameter_declaration -> (*) declaration_specifiers abstract_declarator, parameter_declaration -> (*) declaration_specifiers declarator, parameter_list -> (*) parameter_declaration, parameter_list -> (*) parameter_list ',' parameter_declaration, parameter_type_list -> (*) parameter_list, parameter_type_list -> (*) parameter_list ',' '...', storage_class_specifier -> (*) 'auto', storage_class_specifier -> (*) 'extern', storage_class_specifier -> (*) 'register', storage_class_specifier -> (*) 'static', storage_class_specifier -> (*) 'typedef', struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, direct_abstract_declarator -> direct_abstract_declarator '(' (*) ')', direct_abstract_declarator -> direct_abstract_declarator '(' (*) parameter_type_list ')'}
s75 = {declaration_specifiers -> (*) storage_class_specifier, declaration_specifiers -> (*) storage_class_specifier declaration_specifiers, declaration_specifiers -> (*) type_qualifier, declaration_specifiers -> (*) type_qualifier declaration_specifiers, declaration_specifiers -> (*) type_specifier, declaration_specifiers -> (*) type_specifier declaration_specifiers, enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', parameter_declaration -> (*) declaration_specifiers, parameter_declaration -> (*) declaration_specifiers abstract_declarator, parameter_declaration -> (*) declaration_specifiers declarator, storage_class_specifier -> (*) 'auto', storage_class_specifier -> (*) 'extern', storage_class_specifier -> (*) 'register', storage_class_specifier -> (*) 'static', storage_class_specifier -> (*) 'typedef', struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, parameter_list -> parameter_list ',' (*) parameter_declaration, parameter_type_list -> parameter_list ',' (*) '...'}
s76 = {declaration_specifiers -> (*) storage_class_specifier, declaration_specifiers -> (*) storage_class_specifier declaration_specifiers, declaration_specifiers -> (*) type_qualifier, declaration_specifiers -> (*) type_qualifier declaration_specifiers, declaration_specifiers -> (*) type_specifier, declaration_specifiers -> (*) type_specifier declaration_specifiers, enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', storage_class_specifier -> (*) 'auto', storage_class_specifier -> (*) 'extern', storage_class_specifier -> (*) 'register', storage_class_specifier -> (*) 'static', storage_class_specifier -> (*) 'typedef', struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, declaration_specifiers -> storage_class_specifier (*), declaration_specifiers -> storage_class_specifier (*) declaration_specifiers}
s77 = {declaration_specifiers -> (*) storage_class_specifier, declaration_specifiers -> (*) storage_class_specifier declaration_specifiers, declaration_specifiers -> (*) type_qualifier, declaration_specifiers -> (*) type_qualifier declaration_specifiers, declaration_specifiers -> (*) type_specifier, declaration_specifiers -> (*) type_specifier declaration_specifiers, enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', storage_class_specifier -> (*) 'auto', storage_class_specifier -> (*) 'extern', storage_class_specifier -> (*) 'register', storage_class_specifier -> (*) 'static', storage_class_specifier -> (*) 'typedef', struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, declaration_specifiers -> type_qualifier (*), declaration_specifiers -> type_qualifier (*) declaration_specifiers}
s78 = {declaration_specifiers -> (*) storage_class_specifier, declaration_specifiers -> (*) storage_class_specifier declaration_specifiers, declaration_specifiers -> (*) type_qualifier, declaration_specifiers -> (*) type_qualifier declaration_specifiers, declaration_specifiers -> (*) type_specifier, declaration_specifiers -> (*) type_specifier declaration_specifiers, enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', storage_class_specifier -> (*) 'auto', storage_class_specifier -> (*) 'extern', storage_class_specifier -> (*) 'register', storage_class_specifier -> (*) 'static', storage_class_specifier -> (*) 'typedef', struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, declaration_specifiers -> type_specifier (*), declaration_specifiers -> type_specifier (*) declaration_specifiers}
s79 = {declarator -> (*) direct_declarator, declarator -> (*) pointer direct_declarator, direct_declarator -> (*) '(' declarator ')', direct_declarator -> (*) IDENTIFIER, direct_declarator -> (*) direct_declarator '(' ')', direct_declarator -> (*) direct_declarator '(' identifier_list ')', direct_declarator -> (*) direct_declarator '(' parameter_type_list ')', direct_declarator -> (*) direct_declarator '[' ']', direct_declarator -> (*) direct_declarator '[' constant_expression ']', init_declarator -> (*) declarator, init_declarator -> (*) declarator '=' initializer, init_declarator_list -> (*) init_declarator, init_declarator_list -> (*) init_declarator_list ',' init_declarator, pointer -> (*) '*', pointer -> (*) '*' pointer, pointer -> (*) '*' type_qualifier_list, pointer -> (*) '*' type_qualifier_list pointer, declaration -> declaration_specifiers (*) ';', declaration -> declaration_specifiers (*) init_declarator_list ';'}
s80 = {declarator -> (*) direct_declarator, declarator -> (*) pointer direct_declarator, direct_declarator -> (*) '(' declarator ')', direct_declarator -> (*) IDENTIFIER, direct_declarator -> (*) direct_declarator '(' ')', direct_declarator -> (*) direct_declarator '(' identifier_list ')', direct_declarator -> (*) direct_declarator '(' parameter_type_list ')', direct_declarator -> (*) direct_declarator '[' ']', direct_declarator -> (*) direct_declarator '[' constant_expression ']', init_declarator -> (*) declarator, init_declarator -> (*) declarator '=' initializer, init_declarator_list -> (*) init_declarator, init_declarator_list -> (*) init_declarator_list ',' init_declarator, pointer -> (*) '*', pointer -> (*) '*' pointer, pointer -> (*) '*' type_qualifier_list, pointer -> (*) '*' type_qualifier_list pointer, declaration -> declaration_specifiers (*) ';', declaration -> declaration_specifiers (*) init_declarator_list ';', function_definition -> declaration_specifiers (*) declarator compound_statement, function_definition -> declaration_specifiers (*) declarator declaration_list compound_statement}
s81 = {declarator -> (*) direct_declarator, declarator -> (*) pointer direct_declarator, direct_declarator -> (*) '(' declarator ')', direct_declarator -> (*) IDENTIFIER, direct_declarator -> (*) direct_declarator '(' ')', direct_declarator -> (*) direct_declarator '(' identifier_list ')', direct_declarator -> (*) direct_declarator '(' parameter_type_list ')', direct_declarator -> (*) direct_declarator '[' ']', direct_declarator -> (*) direct_declarator '[' constant_expression ']', init_declarator -> (*) declarator, init_declarator -> (*) declarator '=' initializer, pointer -> (*) '*', pointer -> (*) '*' pointer, pointer -> (*) '*' type_qualifier_list, pointer -> (*) '*' type_qualifier_list pointer, init_declarator_list -> init_declarator_list ',' (*) init_declarator}
s82 = {declarator -> (*) direct_declarator, declarator -> (*) pointer direct_declarator, direct_declarator -> (*) '(' declarator ')', direct_declarator -> (*) IDENTIFIER, direct_declarator -> (*) direct_declarator '(' ')', direct_declarator -> (*) direct_declarator '(' identifier_list ')', direct_declarator -> (*) direct_declarator '(' parameter_type_list ')', direct_declarator -> (*) direct_declarator '[' ']', direct_declarator -> (*) direct_declarator '[' constant_expression ']', pointer -> (*) '*', pointer -> (*) '*' pointer, pointer -> (*) '*' type_qualifier_list, pointer -> (*) '*' type_qualifier_list pointer, struct_declarator -> (*) ':' constant_expression, struct_declarator -> (*) declarator, struct_declarator -> (*) declarator ':' constant_expression, struct_declarator_list -> (*) struct_declarator, struct_declarator_list -> (*) struct_declarator_list ',' struct_declarator, struct_declaration -> specifier_qualifier_list (*) struct_declarator_list ';'}
s83 = {declarator -> (*) direct_declarator, declarator -> (*) pointer direct_declarator, direct_declarator -> (*) '(' declarator ')', direct_declarator -> (*) IDENTIFIER, direct_declarator -> (*) direct_declarator '(' ')', direct_declarator -> (*) direct_declarator '(' identifier_list ')', direct_declarator -> (*) direct_declarator '(' parameter_type_list ')', direct_declarator -> (*) direct_declarator '[' ']', direct_declarator -> (*) direct_declarator '[' constant_expression ']', pointer -> (*) '*', pointer -> (*) '*' pointer, pointer -> (*) '*' type_qualifier_list, pointer -> (*) '*' type_qualifier_list pointer, struct_declarator -> (*) ':' constant_expression, struct_declarator -> (*) declarator, struct_declarator -> (*) declarator ':' constant_expression, struct_declarator_list -> struct_declarator_list ',' (*) struct_declarator}
s84 = {declarator -> (*) direct_declarator, declarator -> (*) pointer direct_declarator, direct_declarator -> (*) '(' declarator ')', direct_declarator -> (*) IDENTIFIER, direct_declarator -> (*) direct_declarator '(' ')', direct_declarator -> (*) direct_declarator '(' identifier_list ')', direct_declarator -> (*) direct_declarator '(' parameter_type_list ')', direct_declarator -> (*) direct_declarator '[' ']', direct_declarator -> (*) direct_declarator '[' constant_expression ']', pointer -> (*) '*', pointer -> (*) '*' pointer, pointer -> (*) '*' type_qualifier_list, pointer -> (*) '*' type_qualifier_list pointer, direct_declarator -> '(' (*) declarator ')'}
s85 = {direct_abstract_declarator -> (*) '(' ')', direct_abstract_declarator -> (*) '(' abstract_declarator ')', direct_abstract_declarator -> (*) '(' parameter_type_list ')', direct_abstract_declarator -> (*) '[' ']', direct_abstract_declarator -> (*) '[' constant_expression ']', direct_abstract_declarator -> (*) direct_abstract_declarator '(' ')', direct_abstract_declarator -> (*) direct_abstract_declarator '(' parameter_type_list ')', direct_abstract_declarator -> (*) direct_abstract_declarator '[' ']', direct_abstract_declarator -> (*) direct_abstract_declarator '[' constant_expression ']', direct_declarator -> (*) '(' declarator ')', direct_declarator -> (*) IDENTIFIER, direct_declarator -> (*) direct_declarator '(' ')', direct_declarator -> (*) direct_declarator '(' identifier_list ')', direct_declarator -> (*) direct_declarator '(' parameter_type_list ')', direct_declarator -> (*) direct_declarator '[' ']', direct_declarator -> (*) direct_declarator '[' constant_expression ']', abstract_declarator -> pointer (*), abstract_declarator -> pointer (*) direct_abstract_declarator, declarator -> pointer (*) direct_declarator}
s86 = {direct_abstract_declarator -> (*) '(' ')', direct_abstract_declarator -> (*) '(' abstract_declarator ')', direct_abstract_declarator -> (*) '(' parameter_type_list ')', direct_abstract_declarator -> (*) '[' ']', direct_abstract_declarator -> (*) '[' constant_expression ']', direct_abstract_declarator -> (*) direct_abstract_declarator '(' ')', direct_abstract_declarator -> (*) direct_abstract_declarator '(' parameter_type_list ')', direct_abstract_declarator -> (*) direct_abstract_declarator '[' ']', direct_abstract_declarator -> (*) direct_abstract_declarator '[' constant_expression ']', abstract_declarator -> pointer (*), abstract_declarator -> pointer (*) direct_abstract_declarator}
s87 = {direct_declarator -> (*) '(' declarator ')', direct_declarator -> (*) IDENTIFIER, direct_declarator -> (*) direct_declarator '(' ')', direct_declarator -> (*) direct_declarator '(' identifier_list ')', direct_declarator -> (*) direct_declarator '(' parameter_type_list ')', direct_declarator -> (*) direct_declarator '[' ']', direct_declarator -> (*) direct_declarator '[' constant_expression ']', declarator -> pointer (*) direct_declarator}
s88 = {enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', specifier_qualifier_list -> (*) type_qualifier, specifier_qualifier_list -> (*) type_qualifier specifier_qualifier_list, specifier_qualifier_list -> (*) type_specifier, specifier_qualifier_list -> (*) type_specifier specifier_qualifier_list, struct_declaration -> (*) specifier_qualifier_list struct_declarator_list ';', struct_declaration_list -> (*) struct_declaration, struct_declaration_list -> (*) struct_declaration_list struct_declaration, struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, struct_or_union_specifier -> struct_or_union '{' (*) struct_declaration_list '}'}
s89 = {enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', specifier_qualifier_list -> (*) type_qualifier, specifier_qualifier_list -> (*) type_qualifier specifier_qualifier_list, specifier_qualifier_list -> (*) type_specifier, specifier_qualifier_list -> (*) type_specifier specifier_qualifier_list, struct_declaration -> (*) specifier_qualifier_list struct_declarator_list ';', struct_declaration_list -> (*) struct_declaration, struct_declaration_list -> (*) struct_declaration_list struct_declaration, struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' (*) struct_declaration_list '}'}
s90 = {enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', specifier_qualifier_list -> (*) type_qualifier, specifier_qualifier_list -> (*) type_qualifier specifier_qualifier_list, specifier_qualifier_list -> (*) type_specifier, specifier_qualifier_list -> (*) type_specifier specifier_qualifier_list, struct_declaration -> (*) specifier_qualifier_list struct_declarator_list ';', struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, struct_declaration_list -> struct_declaration_list (*) struct_declaration, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list (*) '}'}
s91 = {enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', specifier_qualifier_list -> (*) type_qualifier, specifier_qualifier_list -> (*) type_qualifier specifier_qualifier_list, specifier_qualifier_list -> (*) type_specifier, specifier_qualifier_list -> (*) type_specifier specifier_qualifier_list, struct_declaration -> (*) specifier_qualifier_list struct_declarator_list ';', struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, struct_declaration_list -> struct_declaration_list (*) struct_declaration, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list (*) '}'}
s92 = {enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', specifier_qualifier_list -> (*) type_qualifier, specifier_qualifier_list -> (*) type_qualifier specifier_qualifier_list, specifier_qualifier_list -> (*) type_specifier, specifier_qualifier_list -> (*) type_specifier specifier_qualifier_list, struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, specifier_qualifier_list -> type_qualifier (*), specifier_qualifier_list -> type_qualifier (*) specifier_qualifier_list}
s93 = {enum_specifier -> (*) 'enum' '{' enumerator_list '}', enum_specifier -> (*) 'enum' IDENTIFIER, enum_specifier -> (*) 'enum' IDENTIFIER '{' enumerator_list '}', specifier_qualifier_list -> (*) type_qualifier, specifier_qualifier_list -> (*) type_qualifier specifier_qualifier_list, specifier_qualifier_list -> (*) type_specifier, specifier_qualifier_list -> (*) type_specifier specifier_qualifier_list, struct_or_union -> (*) 'struct', struct_or_union -> (*) 'union', struct_or_union_specifier -> (*) struct_or_union '{' struct_declaration_list '}', struct_or_union_specifier -> (*) struct_or_union IDENTIFIER, struct_or_union_specifier -> (*) struct_or_union IDENTIFIER '{' struct_declaration_list '}', type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_specifier -> (*) 'char', type_specifier -> (*) 'double', type_specifier -> (*) 'float', type_specifier -> (*) 'int', type_specifier -> (*) 'long', type_specifier -> (*) 'short', type_specifier -> (*) 'signed', type_specifier -> (*) 'unsigned', type_specifier -> (*) 'void', type_specifier -> (*) TYPE_NAME, type_specifier -> (*) enum_specifier, type_specifier -> (*) struct_or_union_specifier, specifier_qualifier_list -> type_specifier (*), specifier_qualifier_list -> type_specifier (*) specifier_qualifier_list}
s94 = {enumerator -> (*) IDENTIFIER, enumerator -> (*) IDENTIFIER '=' constant_expression, enumerator_list -> (*) enumerator, enumerator_list -> (*) enumerator_list ',' enumerator, enum_specifier -> 'enum' '{' (*) enumerator_list '}'}
s95 = {enumerator -> (*) IDENTIFIER, enumerator -> (*) IDENTIFIER '=' constant_expression, enumerator_list -> (*) enumerator, enumerator_list -> (*) enumerator_list ',' enumerator, enum_specifier -> 'enum' IDENTIFIER '{' (*) enumerator_list '}'}
s96 = {enumerator -> (*) IDENTIFIER, enumerator -> (*) IDENTIFIER '=' constant_expression, enumerator_list -> enumerator_list ',' (*) enumerator}
s97 = {pointer -> (*) '*', pointer -> (*) '*' pointer, pointer -> (*) '*' type_qualifier_list, pointer -> (*) '*' type_qualifier_list pointer, type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', type_qualifier_list -> (*) type_qualifier, type_qualifier_list -> (*) type_qualifier_list type_qualifier, pointer -> '*' (*), pointer -> '*' (*) pointer, pointer -> '*' (*) type_qualifier_list, pointer -> '*' (*) type_qualifier_list pointer}
s98 = {pointer -> (*) '*', pointer -> (*) '*' pointer, pointer -> (*) '*' type_qualifier_list, pointer -> (*) '*' type_qualifier_list pointer, type_qualifier -> (*) 'const', type_qualifier -> (*) 'volatile', pointer -> '*' type_qualifier_list (*), pointer -> '*' type_qualifier_list (*) pointer, type_qualifier_list -> type_qualifier_list (*) type_qualifier}
s99 = {postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', unary_expression -> '++' (*) unary_expression}
s100 = {postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', unary_expression -> '--' (*) unary_expression}
s101 = {postfix_expression -> (*) postfix_expression '(' ')', postfix_expression -> (*) postfix_expression '(' argument_expression_list ')', postfix_expression -> (*) postfix_expression '++', postfix_expression -> (*) postfix_expression '--', postfix_expression -> (*) postfix_expression '->' IDENTIFIER, postfix_expression -> (*) postfix_expression '.' IDENTIFIER, postfix_expression -> (*) postfix_expression '[' expression ']', postfix_expression -> (*) primary_expression, primary_expression -> (*) '(' expression ')', primary_expression -> (*) CONSTANT, primary_expression -> (*) IDENTIFIER, primary_expression -> (*) STRING_LITERAL, unary_expression -> (*) '++' unary_expression, unary_expression -> (*) '--' unary_expression, unary_expression -> (*) 'sizeof' '(' type_name ')', unary_expression -> (*) 'sizeof' unary_expression, unary_expression -> (*) postfix_expression, unary_expression -> (*) unary_operator cast_expression, unary_operator -> (*) '!', unary_operator -> (*) '&', unary_operator -> (*) '*', unary_operator -> (*) '+', unary_operator -> (*) '-', unary_operator -> (*) '~', unary_expression -> 'sizeof' (*) '(' type_name ')', unary_expression -> 'sizeof' (*) unary_expression}
s102 = {unary_operator -> '!' (*)}
s103 = {assignment_operator -> '%=' (*)}
s104 = {unary_operator -> '&' (*)}
s105 = {assignment_operator -> '&=' (*)}
s106 = {direct_abstract_declarator -> '(' ')' (*)}
s107 = {direct_abstract_declarator -> '(' abstract_declarator (*) ')'}
s108 = {direct_abstract_declarator -> '(' abstract_declarator ')' (*)}
s109 = {direct_declarator -> '(' declarator (*) ')'}
s110 = {direct_declarator -> '(' declarator ')' (*)}
s111 = {primary_expression -> '(' expression (*) ')', expression -> expression (*) ',' assignment_expression}
s112 = {primary_expression -> '(' expression ')' (*)}
s113 = {direct_abstract_declarator -> '(' parameter_type_list (*) ')'}
s114 = {direct_abstract_declarator -> '(' parameter_type_list ')' (*)}
s115 = {cast_expression -> '(' type_name (*) ')' cast_expression}
s116 = {cast_expression -> '(' type_name ')' cast_expression (*)}
s117 = {unary_operator -> '*' (*)}
s118 = {pointer -> '*' pointer (*)}
s119 = {pointer -> '*' type_qualifier_list pointer (*)}
s120 = {assignment_operator -> '*=' (*)}
s121 = {unary_operator -> '+' (*)}
s122 = {unary_expression -> '++' unary_expression (*)}
s123 = {assignment_operator -> '+=' (*)}
s124 = {unary_operator -> '-' (*)}
s125 = {unary_expression -> '--' unary_expression (*)}
s126 = {assignment_operator -> '-=' (*)}
s127 = {assignment_operator -> '/=' (*)}
s128 = {struct_declarator -> ':' constant_expression (*)}
s129 = {expression_statement -> ';' (*)}
s130 = {assignment_operator -> '<<=' (*)}
s131 = {assignment_operator -> '=' (*)}
s132 = {assignment_operator -> '>>=' (*)}
s133 = {direct_abstract_declarator -> '[' ']' (*)}
s134 = {direct_abstract_declarator -> '[' constant_expression (*) ']'}
s135 = {direct_abstract_declarator -> '[' constant_expression ']' (*)}
s136 = {assignment_operator -> '^=' (*)}
s137 = {storage_class_specifier -> 'auto' (*)}
s138 = {jump_statement -> 'break' (*) ';'}
s139 = {jump_statement -> 'break' ';' (*)}
s140 = {labeled_statement -> 'case' constant_expression (*) ':' statement}
s141 = {labeled_statement -> 'case' constant_expression ':' statement (*)}
s142 = {type_specifier -> 'char' (*)}
s143 = {type_qualifier -> 'const' (*)}
s144 = {jump_statement -> 'continue' (*) ';'}
s145 = {jump_statement -> 'continue' ';' (*)}
s146 = {labeled_statement -> 'default' (*) ':' statement}
s147 = {labeled_statement -> 'default' ':' statement (*)}
s148 = {iteration_statement -> 'do' statement (*) 'while' '(' expression ')' ';'}
s149 = {iteration_statement -> 'do' statement 'while' (*) '(' expression ')' ';'}
s150 = {iteration_statement -> 'do' statement 'while' '(' expression (*) ')' ';', expression -> expression (*) ',' assignment_expression}
s151 = {iteration_statement -> 'do' statement 'while' '(' expression ')' (*) ';'}
s152 = {iteration_statement -> 'do' statement 'while' '(' expression ')' ';' (*)}
s153 = {type_specifier -> 'double' (*)}
s154 = {enum_specifier -> 'enum' (*) '{' enumerator_list '}', enum_specifier -> 'enum' (*) IDENTIFIER, enum_specifier -> 'enum' (*) IDENTIFIER '{' enumerator_list '}'}
s155 = {enum_specifier -> 'enum' '{' enumerator_list (*) '}', enumerator_list -> enumerator_list (*) ',' enumerator}
s156 = {enum_specifier -> 'enum' '{' enumerator_list '}' (*)}
s157 = {enum_specifier -> 'enum' IDENTIFIER (*), enum_specifier -> 'enum' IDENTIFIER (*) '{' enumerator_list '}'}
s158 = {enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list (*) '}', enumerator_list -> enumerator_list (*) ',' enumerator}
s159 = {enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}' (*)}
s160 = {storage_class_specifier -> 'extern' (*)}
s161 = {type_specifier -> 'float' (*)}
s162 = {iteration_statement -> 'for' (*) '(' expression_statement expression_statement ')' statement, iteration_statement -> 'for' (*) '(' expression_statement expression_statement expression ')' statement}
s163 = {iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement (*)}
s164 = {iteration_statement -> 'for' '(' expression_statement expression_statement expression (*) ')' statement, expression -> expression (*) ',' assignment_expression}
s165 = {iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement (*)}
s166 = {jump_statement -> 'goto' (*) IDENTIFIER ';'}
s167 = {jump_statement -> 'goto' IDENTIFIER (*) ';'}
s168 = {jump_statement -> 'goto' IDENTIFIER ';' (*)}
s169 = {selection_statement -> 'if' (*) '(' expression ')' statement, selection_statement -> 'if' (*) '(' expression ')' statement 'else' statement}
s170 = {selection_statement -> 'if' '(' expression (*) ')' statement, selection_statement -> 'if' '(' expression (*) ')' statement 'else' statement, expression -> expression (*) ',' assignment_expression}
s171 = {selection_statement -> 'if' '(' expression ')' statement (*), selection_statement -> 'if' '(' expression ')' statement (*) 'else' statement}
s172 = {selection_statement -> 'if' '(' expression ')' statement 'else' statement (*)}
s173 = {type_specifier -> 'int' (*)}
s174 = {type_specifier -> 'long' (*)}
s175 = {storage_class_specifier -> 'register' (*)}
s176 = {jump_statement -> 'return' ';' (*)}
s177 = {jump_statement -> 'return' expression (*) ';', expression -> expression (*) ',' assignment_expression}
s178 = {jump_statement -> 'return' expression ';' (*)}
s179 = {type_specifier -> 'short' (*)}
s180 = {type_specifier -> 'signed' (*)}
s181 = {unary_expression -> 'sizeof' '(' type_name (*) ')'}
s182 = {unary_expression -> 'sizeof' '(' type_name ')' (*)}
s183 = {unary_expression -> 'sizeof' unary_expression (*)}
s184 = {storage_class_specifier -> 'static' (*)}
s185 = {struct_or_union -> 'struct' (*)}
s186 = {selection_statement -> 'switch' (*) '(' expression ')' statement}
s187 = {selection_statement -> 'switch' '(' expression (*) ')' statement, expression -> expression (*) ',' assignment_expression}
s188 = {selection_statement -> 'switch' '(' expression ')' statement (*)}
s189 = {storage_class_specifier -> 'typedef' (*)}
s190 = {struct_or_union -> 'union' (*)}
s191 = {type_specifier -> 'unsigned' (*)}
s192 = {type_specifier -> 'void' (*)}
s193 = {type_qualifier -> 'volatile' (*)}
s194 = {iteration_statement -> 'while' (*) '(' expression ')' statement}
s195 = {iteration_statement -> 'while' '(' expression (*) ')' statement, expression -> expression (*) ',' assignment_expression}
s196 = {iteration_statement -> 'while' '(' expression ')' statement (*)}
s197 = {compound_statement -> '{' '}' (*)}
s198 = {compound_statement -> '{' declaration_list '}' (*)}
s199 = {compound_statement -> '{' declaration_list statement_list '}' (*)}
s200 = {initializer -> '{' initializer_list (*) ',' '}', initializer -> '{' initializer_list (*) '}', initializer_list -> initializer_list (*) ',' initializer}
s201 = {initializer -> '{' initializer_list ',' '}' (*)}
s202 = {initializer -> '{' initializer_list '}' (*)}
s203 = {compound_statement -> '{' statement_list '}' (*)}
s204 = {assignment_operator -> '|=' (*)}
s205 = {unary_operator -> '~' (*)}
s206 = {primary_expression -> CONSTANT (*)}
s207 = {direct_declarator -> IDENTIFIER (*)}
s208 = {enumerator -> IDENTIFIER (*), enumerator -> IDENTIFIER (*) '=' constant_expression}
s209 = {identifier_list -> IDENTIFIER (*)}
s210 = {labeled_statement -> IDENTIFIER (*) ':' statement, primary_expression -> IDENTIFIER (*)}
s211 = {primary_expression -> IDENTIFIER (*)}
s212 = {labeled_statement -> IDENTIFIER ':' statement (*)}
s213 = {enumerator -> IDENTIFIER '=' constant_expression (*)}
s214 = {primary_expression -> STRING_LITERAL (*)}
s215 = {type_specifier -> TYPE_NAME (*)}
s216 = {additive_expression -> additive_expression (*) '+' multiplicative_expression, additive_expression -> additive_expression (*) '-' multiplicative_expression, shift_expression -> additive_expression (*)}
s217 = {additive_expression -> additive_expression (*) '+' multiplicative_expression, additive_expression -> additive_expression (*) '-' multiplicative_expression, shift_expression -> shift_expression '<<' additive_expression (*)}
s218 = {additive_expression -> additive_expression (*) '+' multiplicative_expression, additive_expression -> additive_expression (*) '-' multiplicative_expression, shift_expression -> shift_expression '>>' additive_expression (*)}
s219 = {additive_expression -> additive_expression '+' multiplicative_expression (*), multiplicative_expression -> multiplicative_expression (*) '%' cast_expression, multiplicative_expression -> multiplicative_expression (*) '*' cast_expression, multiplicative_expression -> multiplicative_expression (*) '/' cast_expression}
s220 = {additive_expression -> additive_expression '-' multiplicative_expression (*), multiplicative_expression -> multiplicative_expression (*) '%' cast_expression, multiplicative_expression -> multiplicative_expression (*) '*' cast_expression, multiplicative_expression -> multiplicative_expression (*) '/' cast_expression}
s221 = {and_expression -> and_expression (*) '&' equality_expression, exclusive_or_expression -> and_expression (*)}
s222 = {and_expression -> and_expression (*) '&' equality_expression, exclusive_or_expression -> exclusive_or_expression '^' and_expression (*)}
s223 = {and_expression -> and_expression '&' equality_expression (*), equality_expression -> equality_expression (*) '!=' relational_expression, equality_expression -> equality_expression (*) '==' relational_expression}
s224 = {argument_expression_list -> argument_expression_list (*) ',' assignment_expression, postfix_expression -> postfix_expression '(' argument_expression_list (*) ')'}
s225 = {argument_expression_list -> argument_expression_list ',' assignment_expression (*)}
s226 = {argument_expression_list -> assignment_expression (*)}
s227 = {expression -> assignment_expression (*)}
s228 = {initializer -> assignment_expression (*)}
s229 = {multiplicative_expression -> cast_expression (*)}
s230 = {statement -> compound_statement (*)}
s231 = {assignment_expression -> conditional_expression (*)}
s232 = {constant_expression -> conditional_expression (*)}
s233 = {declaration_list -> declaration (*)}
s234 = {external_declaration -> declaration (*)}
s235 = {declaration_list -> declaration_list declaration (*)}
s236 = {declaration -> declaration_specifiers ';' (*)}
s237 = {parameter_declaration -> declaration_specifiers abstract_declarator (*)}
s238 = {parameter_declaration -> declaration_specifiers declarator (*)}
s239 = {function_definition -> declaration_specifiers declarator compound_statement (*)}
s240 = {function_definition -> declaration_specifiers declarator declaration_list compound_statement (*)}
s241 = {declaration -> declaration_specifiers init_declarator_list (*) ';', init_declarator_list -> init_declarator_list (*) ',' init_declarator}
s242 = {declaration -> declaration_specifiers init_declarator_list ';' (*)}
s243 = {init_declarator -> declarator (*), init_declarator -> declarator (*) '=' initializer}
s244 = {struct_declarator -> declarator (*), struct_declarator -> declarator (*) ':' constant_expression}
s245 = {struct_declarator -> declarator ':' constant_expression (*)}
s246 = {init_declarator -> declarator '=' initializer (*)}
s247 = {function_definition -> declarator compound_statement (*)}
s248 = {function_definition -> declarator declaration_list compound_statement (*)}
s249 = {abstract_declarator -> direct_abstract_declarator (*), direct_abstract_declarator -> direct_abstract_declarator (*) '(' ')', direct_abstract_declarator -> direct_abstract_declarator (*) '(' parameter_type_list ')', direct_abstract_declarator -> direct_abstract_declarator (*) '[' ']', direct_abstract_declarator -> direct_abstract_declarator (*) '[' constant_expression ']'}
s250 = {direct_abstract_declarator -> direct_abstract_declarator (*) '(' ')', direct_abstract_declarator -> direct_abstract_declarator (*) '(' parameter_type_list ')', direct_abstract_declarator -> direct_abstract_declarator (*) '[' ']', direct_abstract_declarator -> direct_abstract_declarator (*) '[' constant_expression ']', abstract_declarator -> pointer direct_abstract_declarator (*)}
s251 = {direct_abstract_declarator -> direct_abstract_declarator '(' ')' (*)}
s252 = {direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list (*) ')'}
s253 = {direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')' (*)}
s254 = {direct_abstract_declarator -> direct_abstract_declarator '[' ']' (*)}
s255 = {direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression (*) ']'}
s256 = {direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']' (*)}
s257 = {declarator -> direct_declarator (*), direct_declarator -> direct_declarator (*) '(' ')', direct_declarator -> direct_declarator (*) '(' identifier_list ')', direct_declarator -> direct_declarator (*) '(' parameter_type_list ')', direct_declarator -> direct_declarator (*) '[' ']', direct_declarator -> direct_declarator (*) '[' constant_expression ']'}
s258 = {direct_declarator -> direct_declarator (*) '(' ')', direct_declarator -> direct_declarator (*) '(' identifier_list ')', direct_declarator -> direct_declarator (*) '(' parameter_type_list ')', direct_declarator -> direct_declarator (*) '[' ']', direct_declarator -> direct_declarator (*) '[' constant_expression ']', declarator -> pointer direct_declarator (*)}
s259 = {direct_declarator -> direct_declarator '(' ')' (*)}
s260 = {direct_declarator -> direct_declarator '(' identifier_list (*) ')', identifier_list -> identifier_list (*) ',' IDENTIFIER}
s261 = {direct_declarator -> direct_declarator '(' identifier_list ')' (*)}
s262 = {direct_declarator -> direct_declarator '(' parameter_type_list (*) ')'}
s263 = {direct_declarator -> direct_declarator '(' parameter_type_list ')' (*)}
s264 = {direct_declarator -> direct_declarator '[' ']' (*)}
s265 = {direct_declarator -> direct_declarator '[' constant_expression (*) ']'}
s266 = {direct_declarator -> direct_declarator '[' constant_expression ']' (*)}
s267 = {type_specifier -> enum_specifier (*)}
s268 = {enumerator_list -> enumerator (*)}
s269 = {enumerator_list -> enumerator_list ',' enumerator (*)}
s270 = {and_expression -> equality_expression (*), equality_expression -> equality_expression (*) '!=' relational_expression, equality_expression -> equality_expression (*) '==' relational_expression}
s271 = {equality_expression -> equality_expression '!=' relational_expression (*), relational_expression -> relational_expression (*) '<' shift_expression, relational_expression -> relational_expression (*) '<=' shift_expression, relational_expression -> relational_expression (*) '>' shift_expression, relational_expression -> relational_expression (*) '>=' shift_expression}
s272 = {equality_expression -> equality_expression '==' relational_expression (*), relational_expression -> relational_expression (*) '<' shift_expression, relational_expression -> relational_expression (*) '<=' shift_expression, relational_expression -> relational_expression (*) '>' shift_expression, relational_expression -> relational_expression (*) '>=' shift_expression}
s273 = {exclusive_or_expression -> exclusive_or_expression (*) '^' and_expression, inclusive_or_expression -> exclusive_or_expression (*)}
s274 = {exclusive_or_expression -> exclusive_or_expression (*) '^' and_expression, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression (*)}
s275 = {expression -> expression (*) ',' assignment_expression, expression_statement -> expression (*) ';'}
s276 = {expression -> expression (*) ',' assignment_expression, conditional_expression -> logical_or_expression '?' expression (*) ':' conditional_expression}
s277 = {expression -> expression (*) ',' assignment_expression, postfix_expression -> postfix_expression '[' expression (*) ']'}
s278 = {expression -> expression ',' assignment_expression (*)}
s279 = {expression_statement -> expression ';' (*)}
s280 = {statement -> expression_statement (*)}
s281 = {translation_unit -> external_declaration (*)}
s282 = {external_declaration -> function_definition (*)}
s283 = {identifier_list -> identifier_list ',' (*) IDENTIFIER}
s284 = {identifier_list -> identifier_list ',' IDENTIFIER (*)}
s285 = {inclusive_or_expression -> inclusive_or_expression (*) '|' exclusive_or_expression, logical_and_expression -> inclusive_or_expression (*)}
s286 = {inclusive_or_expression -> inclusive_or_expression (*) '|' exclusive_or_expression, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression (*)}
s287 = {init_declarator_list -> init_declarator (*)}
s288 = {init_declarator_list -> init_declarator_list ',' init_declarator (*)}
s289 = {initializer_list -> initializer (*)}
s290 = {initializer_list -> initializer_list ',' initializer (*)}
s291 = {statement -> iteration_statement (*)}
s292 = {statement -> jump_statement (*)}
s293 = {statement -> labeled_statement (*)}
s294 = {logical_and_expression -> logical_and_expression (*) '&&' inclusive_or_expression, logical_or_expression -> logical_and_expression (*)}
s295 = {logical_and_expression -> logical_and_expression (*) '&&' inclusive_or_expression, logical_or_expression -> logical_or_expression '||' logical_and_expression (*)}
s296 = {conditional_expression -> logical_or_expression (*), conditional_expression -> logical_or_expression (*) '?' expression ':' conditional_expression, logical_or_expression -> logical_or_expression (*) '||' logical_and_expression}
s297 = {conditional_expression -> logical_or_expression '?' expression ':' conditional_expression (*)}
s298 = {additive_expression -> multiplicative_expression (*), multiplicative_expression -> multiplicative_expression (*) '%' cast_expression, multiplicative_expression -> multiplicative_expression (*) '*' cast_expression, multiplicative_expression -> multiplicative_expression (*) '/' cast_expression}
s299 = {multiplicative_expression -> multiplicative_expression '%' cast_expression (*)}
s300 = {multiplicative_expression -> multiplicative_expression '*' cast_expression (*)}
s301 = {multiplicative_expression -> multiplicative_expression '/' cast_expression (*)}
s302 = {parameter_list -> parameter_declaration (*)}
s303 = {parameter_list -> parameter_list (*) ',' parameter_declaration, parameter_type_list -> parameter_list (*), parameter_type_list -> parameter_list (*) ',' '...'}
s304 = {parameter_type_list -> parameter_list ',' '...' (*)}
s305 = {parameter_list -> parameter_list ',' parameter_declaration (*)}
s306 = {postfix_expression -> postfix_expression (*) '(' ')', postfix_expression -> postfix_expression (*) '(' argument_expression_list ')', postfix_expression -> postfix_expression (*) '++', postfix_expression -> postfix_expression (*) '--', postfix_expression -> postfix_expression (*) '->' IDENTIFIER, postfix_expression -> postfix_expression (*) '.' IDENTIFIER, postfix_expression -> postfix_expression (*) '[' expression ']', unary_expression -> postfix_expression (*)}
s307 = {postfix_expression -> postfix_expression '(' ')' (*)}
s308 = {postfix_expression -> postfix_expression '(' argument_expression_list ')' (*)}
s309 = {postfix_expression -> postfix_expression '++' (*)}
s310 = {postfix_expression -> postfix_expression '--' (*)}
s311 = {postfix_expression -> postfix_expression '->' (*) IDENTIFIER}
s312 = {postfix_expression -> postfix_expression '->' IDENTIFIER (*)}
s313 = {postfix_expression -> postfix_expression '.' (*) IDENTIFIER}
s314 = {postfix_expression -> postfix_expression '.' IDENTIFIER (*)}
s315 = {postfix_expression -> postfix_expression '[' expression ']' (*)}
s316 = {postfix_expression -> primary_expression (*)}
s317 = {equality_expression -> relational_expression (*), relational_expression -> relational_expression (*) '<' shift_expression, relational_expression -> relational_expression (*) '<=' shift_expression, relational_expression -> relational_expression (*) '>' shift_expression, relational_expression -> relational_expression (*) '>=' shift_expression}
s318 = {relational_expression -> relational_expression '<' shift_expression (*), shift_expression -> shift_expression (*) '<<' additive_expression, shift_expression -> shift_expression (*) '>>' additive_expression}
s319 = {relational_expression -> relational_expression '<=' shift_expression (*), shift_expression -> shift_expression (*) '<<' additive_expression, shift_expression -> shift_expression (*) '>>' additive_expression}
s320 = {relational_expression -> relational_expression '>' shift_expression (*), shift_expression -> shift_expression (*) '<<' additive_expression, shift_expression -> shift_expression (*) '>>' additive_expression}
s321 = {relational_expression -> relational_expression '>=' shift_expression (*), shift_expression -> shift_expression (*) '<<' additive_expression, shift_expression -> shift_expression (*) '>>' additive_expression}
s322 = {statement -> selection_statement (*)}
s323 = {relational_expression -> shift_expression (*), shift_expression -> shift_expression (*) '<<' additive_expression, shift_expression -> shift_expression (*) '>>' additive_expression}
s324 = {type_name -> specifier_qualifier_list abstract_declarator (*)}
s325 = {struct_declaration -> specifier_qualifier_list struct_declarator_list (*) ';', struct_declarator_list -> struct_declarator_list (*) ',' struct_declarator}
s326 = {struct_declaration -> specifier_qualifier_list struct_declarator_list ';' (*)}
s327 = {statement_list -> statement (*)}
s328 = {statement_list -> statement_list statement (*)}
s329 = {declaration_specifiers -> storage_class_specifier declaration_specifiers (*)}
s330 = {struct_declaration_list -> struct_declaration (*)}
s331 = {struct_declaration_list -> struct_declaration_list struct_declaration (*)}
s332 = {struct_declarator_list -> struct_declarator (*)}
s333 = {struct_declarator_list -> struct_declarator_list ',' struct_declarator (*)}
s334 = {struct_or_union_specifier -> struct_or_union (*) '{' struct_declaration_list '}', struct_or_union_specifier -> struct_or_union (*) IDENTIFIER, struct_or_union_specifier -> struct_or_union (*) IDENTIFIER '{' struct_declaration_list '}'}
s335 = {struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}' (*)}
s336 = {struct_or_union_specifier -> struct_or_union IDENTIFIER (*), struct_or_union_specifier -> struct_or_union IDENTIFIER (*) '{' struct_declaration_list '}'}
s337 = {struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}' (*)}
s338 = {type_specifier -> struct_or_union_specifier (*)}
s339 = {translation_unit -> translation_unit external_declaration (*)}
s340 = {type_qualifier_list -> type_qualifier (*)}
s341 = {declaration_specifiers -> type_qualifier declaration_specifiers (*)}
s342 = {specifier_qualifier_list -> type_qualifier specifier_qualifier_list (*)}
s343 = {type_qualifier_list -> type_qualifier_list type_qualifier (*)}
s344 = {declaration_specifiers -> type_specifier declaration_specifiers (*)}
s345 = {specifier_qualifier_list -> type_specifier specifier_qualifier_list (*)}
s346 = {cast_expression -> unary_expression (*)}
s347 = {assignment_expression -> unary_expression assignment_operator assignment_expression (*)}
s348 = {unary_expression -> unary_operator cast_expression (*)}

Action Table:
action("s0", '(') = Shift("s84")
action("s0", '*') = Shift("s97")
action("s0", 'auto') = Shift("s137")
action("s0", 'char') = Shift("s142")
action("s0", 'const') = Shift("s143")
action("s0", 'double') = Shift("s153")
action("s0", 'enum') = Shift("s154")
action("s0", 'extern') = Shift("s160")
action("s0", 'float') = Shift("s161")
action("s0", 'int') = Shift("s173")
action("s0", 'long') = Shift("s174")
action("s0", 'register') = Shift("s175")
action("s0", 'short') = Shift("s179")
action("s0", 'signed') = Shift("s180")
action("s0", 'static') = Shift("s184")
action("s0", 'struct') = Shift("s185")
action("s0", 'typedef') = Shift("s189")
action("s0", 'union') = Shift("s190")
action("s0", 'unsigned') = Shift("s191")
action("s0", 'void') = Shift("s192")
action("s0", 'volatile') = Shift("s193")
action("s0", IDENTIFIER) = Shift("s207")
action("s0", TYPE_NAME) = Shift("s215")
action("s1", '(') = Shift("s1")
action("s1", ')') = Shift("s106")
action("s1", '*') = Shift("s97")
action("s1", '[') = Shift("s40")
action("s1", 'auto') = Shift("s137")
action("s1", 'char') = Shift("s142")
action("s1", 'const') = Shift("s143")
action("s1", 'double') = Shift("s153")
action("s1", 'enum') = Shift("s154")
action("s1", 'extern') = Shift("s160")
action("s1", 'float') = Shift("s161")
action("s1", 'int') = Shift("s173")
action("s1", 'long') = Shift("s174")
action("s1", 'register') = Shift("s175")
action("s1", 'short') = Shift("s179")
action("s1", 'signed') = Shift("s180")
action("s1", 'static') = Shift("s184")
action("s1", 'struct') = Shift("s185")
action("s1", 'typedef') = Shift("s189")
action("s1", 'union') = Shift("s190")
action("s1", 'unsigned') = Shift("s191")
action("s1", 'void') = Shift("s192")
action("s1", 'volatile') = Shift("s193")
action("s1", IDENTIFIER) = Shift("s207")
action("s1", TYPE_NAME) = Shift("s215")
action("s2", '(') = Shift("s2")
action("s2", ')') = Shift("s106")
action("s2", '*') = Shift("s97")
action("s2", '[') = Shift("s40")
action("s2", 'auto') = Shift("s137")
action("s2", 'char') = Shift("s142")
action("s2", 'const') = Shift("s143")
action("s2", 'double') = Shift("s153")
action("s2", 'enum') = Shift("s154")
action("s2", 'extern') = Shift("s160")
action("s2", 'float') = Shift("s161")
action("s2", 'int') = Shift("s173")
action("s2", 'long') = Shift("s174")
action("s2", 'register') = Shift("s175")
action("s2", 'short') = Shift("s179")
action("s2", 'signed') = Shift("s180")
action("s2", 'static') = Shift("s184")
action("s2", 'struct') = Shift("s185")
action("s2", 'typedef') = Shift("s189")
action("s2", 'union') = Shift("s190")
action("s2", 'unsigned') = Shift("s191")
action("s2", 'void') = Shift("s192")
action("s2", 'volatile') = Shift("s193")
action("s2", TYPE_NAME) = Shift("s215")
action("s3", '(') = Shift("s1")
action("s3", '*') = Shift("s97")
action("s3", '[') = Shift("s40")
action("s3", IDENTIFIER) = Shift("s207")
action("s3", ')') = Reduce(parameter_declaration -> declaration_specifiers)
action("s3", ',') = Reduce(parameter_declaration -> declaration_specifiers)
action("s4", '(') = Shift("s2")
action("s4", '*') = Shift("s97")
action("s4", '[') = Shift("s40")
action("s4", ')') = Reduce(type_name -> specifier_qualifier_list)
action("s5", '!') = Shift("s102")
action("s5", '&') = Shift("s104")
action("s5", '(') = Shift("s20")
action("s5", ')') = Shift("s307")
action("s5", '*') = Shift("s117")
action("s5", '+') = Shift("s121")
action("s5", '++') = Shift("s99")
action("s5", '-') = Shift("s124")
action("s5", '--') = Shift("s100")
action("s5", 'sizeof') = Shift("s101")
action("s5", '~') = Shift("s205")
action("s5", CONSTANT) = Shift("s206")
action("s5", IDENTIFIER) = Shift("s211")
action("s5", STRING_LITERAL) = Shift("s214")
action("s6", '!') = Shift("s102")
action("s6", '&') = Shift("s104")
action("s6", '(') = Shift("s20")
action("s6", '*') = Shift("s117")
action("s6", '+') = Shift("s121")
action("s6", '++') = Shift("s99")
action("s6", '-') = Shift("s124")
action("s6", '--') = Shift("s100")
action("s6", ';') = Shift("s129")
action("s6", 'auto') = Shift("s137")
action("s6", 'break') = Shift("s138")
action("s6", 'case') = Shift("s41")
action("s6", 'char') = Shift("s142")
action("s6", 'const') = Shift("s143")
action("s6", 'continue') = Shift("s144")
action("s6", 'default') = Shift("s146")
action("s6", 'do') = Shift("s10")
action("s6", 'double') = Shift("s153")
action("s6", 'enum') = Shift("s154")
action("s6", 'extern') = Shift("s160")
action("s6", 'float') = Shift("s161")
action("s6", 'for') = Shift("s162")
action("s6", 'goto') = Shift("s166")
action("s6", 'if') = Shift("s169")
action("s6", 'int') = Shift("s173")
action("s6", 'long') = Shift("s174")
action("s6", 'register') = Shift("s175")
action("s6", 'return') = Shift("s28")
action("s6", 'short') = Shift("s179")
action("s6", 'signed') = Shift("s180")
action("s6", 'sizeof') = Shift("s101")
action("s6", 'static') = Shift("s184")
action("s6", 'struct') = Shift("s185")
action("s6", 'switch') = Shift("s186")
action("s6", 'typedef') = Shift("s189")
action("s6", 'union') = Shift("s190")
action("s6", 'unsigned') = Shift("s191")
action("s6", 'void') = Shift("s192")
action("s6", 'volatile') = Shift("s193")
action("s6", 'while') = Shift("s194")
action("s6", '{') = Shift("s6")
action("s6", '}') = Shift("s197")
action("s6", '~') = Shift("s205")
action("s6", CONSTANT) = Shift("s206")
action("s6", IDENTIFIER) = Shift("s210")
action("s6", STRING_LITERAL) = Shift("s214")
action("s6", TYPE_NAME) = Shift("s215")
action("s7", '!') = Shift("s102")
action("s7", '&') = Shift("s104")
action("s7", '(') = Shift("s20")
action("s7", '*') = Shift("s117")
action("s7", '+') = Shift("s121")
action("s7", '++') = Shift("s99")
action("s7", '-') = Shift("s124")
action("s7", '--') = Shift("s100")
action("s7", ';') = Shift("s129")
action("s7", 'auto') = Shift("s137")
action("s7", 'break') = Shift("s138")
action("s7", 'case') = Shift("s41")
action("s7", 'char') = Shift("s142")
action("s7", 'const') = Shift("s143")
action("s7", 'continue') = Shift("s144")
action("s7", 'default') = Shift("s146")
action("s7", 'do') = Shift("s10")
action("s7", 'double') = Shift("s153")
action("s7", 'enum') = Shift("s154")
action("s7", 'extern') = Shift("s160")
action("s7", 'float') = Shift("s161")
action("s7", 'for') = Shift("s162")
action("s7", 'goto') = Shift("s166")
action("s7", 'if') = Shift("s169")
action("s7", 'int') = Shift("s173")
action("s7", 'long') = Shift("s174")
action("s7", 'register') = Shift("s175")
action("s7", 'return') = Shift("s28")
action("s7", 'short') = Shift("s179")
action("s7", 'signed') = Shift("s180")
action("s7", 'sizeof') = Shift("s101")
action("s7", 'static') = Shift("s184")
action("s7", 'struct') = Shift("s185")
action("s7", 'switch') = Shift("s186")
action("s7", 'typedef') = Shift("s189")
action("s7", 'union') = Shift("s190")
action("s7", 'unsigned') = Shift("s191")
action("s7", 'void') = Shift("s192")
action("s7", 'volatile') = Shift("s193")
action("s7", 'while') = Shift("s194")
action("s7", '{') = Shift("s6")
action("s7", '}') = Shift("s198")
action("s7", '~') = Shift("s205")
action("s7", CONSTANT) = Shift("s206")
action("s7", IDENTIFIER) = Shift("s210")
action("s7", STRING_LITERAL) = Shift("s214")
action("s7", TYPE_NAME) = Shift("s215")
action("s8", '!') = Shift("s102")
action("s8", '&') = Shift("s104")
action("s8", '(') = Shift("s20")
action("s8", '*') = Shift("s117")
action("s8", '+') = Shift("s121")
action("s8", '++') = Shift("s99")
action("s8", '-') = Shift("s124")
action("s8", '--') = Shift("s100")
action("s8", ';') = Shift("s129")
action("s8", 'break') = Shift("s138")
action("s8", 'case') = Shift("s41")
action("s8", 'continue') = Shift("s144")
action("s8", 'default') = Shift("s146")
action("s8", 'do') = Shift("s10")
action("s8", 'for') = Shift("s162")
action("s8", 'goto') = Shift("s166")
action("s8", 'if') = Shift("s169")
action("s8", 'return') = Shift("s28")
action("s8", 'sizeof') = Shift("s101")
action("s8", 'switch') = Shift("s186")
action("s8", 'while') = Shift("s194")
action("s8", '{') = Shift("s6")
action("s8", '~') = Shift("s205")
action("s8", CONSTANT) = Shift("s206")
action("s8", IDENTIFIER) = Shift("s210")
action("s8", STRING_LITERAL) = Shift("s214")
action("s9", '!') = Shift("s102")
action("s9", '&') = Shift("s104")
action("s9", '(') = Shift("s20")
action("s9", '*') = Shift("s117")
action("s9", '+') = Shift("s121")
action("s9", '++') = Shift("s99")
action("s9", '-') = Shift("s124")
action("s9", '--') = Shift("s100")
action("s9", ';') = Shift("s129")
action("s9", 'break') = Shift("s138")
action("s9", 'case') = Shift("s41")
action("s9", 'continue') = Shift("s144")
action("s9", 'default') = Shift("s146")
action("s9", 'do') = Shift("s10")
action("s9", 'for') = Shift("s162")
action("s9", 'goto') = Shift("s166")
action("s9", 'if') = Shift("s169")
action("s9", 'return') = Shift("s28")
action("s9", 'sizeof') = Shift("s101")
action("s9", 'switch') = Shift("s186")
action("s9", 'while') = Shift("s194")
action("s9", '{') = Shift("s6")
action("s9", '~') = Shift("s205")
action("s9", CONSTANT) = Shift("s206")
action("s9", IDENTIFIER) = Shift("s210")
action("s9", STRING_LITERAL) = Shift("s214")
action("s10", '!') = Shift("s102")
action("s10", '&') = Shift("s104")
action("s10", '(') = Shift("s20")
action("s10", '*') = Shift("s117")
action("s10", '+') = Shift("s121")
action("s10", '++') = Shift("s99")
action("s10", '-') = Shift("s124")
action("s10", '--') = Shift("s100")
action("s10", ';') = Shift("s129")
action("s10", 'break') = Shift("s138")
action("s10", 'case') = Shift("s41")
action("s10", 'continue') = Shift("s144")
action("s10", 'default') = Shift("s146")
action("s10", 'do') = Shift("s10")
action("s10", 'for') = Shift("s162")
action("s10", 'goto') = Shift("s166")
action("s10", 'if') = Shift("s169")
action("s10", 'return') = Shift("s28")
action("s10", 'sizeof') = Shift("s101")
action("s10", 'switch') = Shift("s186")
action("s10", 'while') = Shift("s194")
action("s10", '{') = Shift("s6")
action("s10", '~') = Shift("s205")
action("s10", CONSTANT) = Shift("s206")
action("s10", IDENTIFIER) = Shift("s210")
action("s10", STRING_LITERAL) = Shift("s214")
action("s11", '!') = Shift("s102")
action("s11", '&') = Shift("s104")
action("s11", '(') = Shift("s20")
action("s11", '*') = Shift("s117")
action("s11", '+') = Shift("s121")
action("s11", '++') = Shift("s99")
action("s11", '-') = Shift("s124")
action("s11", '--') = Shift("s100")
action("s11", ';') = Shift("s129")
action("s11", 'break') = Shift("s138")
action("s11", 'case') = Shift("s41")
action("s11", 'continue') = Shift("s144")
action("s11", 'default') = Shift("s146")
action("s11", 'do') = Shift("s10")
action("s11", 'for') = Shift("s162")
action("s11", 'goto') = Shift("s166")
action("s11", 'if') = Shift("s169")
action("s11", 'return') = Shift("s28")
action("s11", 'sizeof') = Shift("s101")
action("s11", 'switch') = Shift("s186")
action("s11", 'while') = Shift("s194")
action("s11", '{') = Shift("s6")
action("s11", '~') = Shift("s205")
action("s11", CONSTANT) = Shift("s206")
action("s11", IDENTIFIER) = Shift("s210")
action("s11", STRING_LITERAL) = Shift("s214")
action("s12", '!') = Shift("s102")
action("s12", '&') = Shift("s104")
action("s12", '(') = Shift("s20")
action("s12", '*') = Shift("s117")
action("s12", '+') = Shift("s121")
action("s12", '++') = Shift("s99")
action("s12", '-') = Shift("s124")
action("s12", '--') = Shift("s100")
action("s12", ';') = Shift("s129")
action("s12", 'break') = Shift("s138")
action("s12", 'case') = Shift("s41")
action("s12", 'continue') = Shift("s144")
action("s12", 'default') = Shift("s146")
action("s12", 'do') = Shift("s10")
action("s12", 'for') = Shift("s162")
action("s12", 'goto') = Shift("s166")
action("s12", 'if') = Shift("s169")
action("s12", 'return') = Shift("s28")
action("s12", 'sizeof') = Shift("s101")
action("s12", 'switch') = Shift("s186")
action("s12", 'while') = Shift("s194")
action("s12", '{') = Shift("s6")
action("s12", '~') = Shift("s205")
action("s12", CONSTANT) = Shift("s206")
action("s12", IDENTIFIER) = Shift("s210")
action("s12", STRING_LITERAL) = Shift("s214")
action("s13", '!') = Shift("s102")
action("s13", '&') = Shift("s104")
action("s13", '(') = Shift("s20")
action("s13", '*') = Shift("s117")
action("s13", '+') = Shift("s121")
action("s13", '++') = Shift("s99")
action("s13", '-') = Shift("s124")
action("s13", '--') = Shift("s100")
action("s13", ';') = Shift("s129")
action("s13", 'break') = Shift("s138")
action("s13", 'case') = Shift("s41")
action("s13", 'continue') = Shift("s144")
action("s13", 'default') = Shift("s146")
action("s13", 'do') = Shift("s10")
action("s13", 'for') = Shift("s162")
action("s13", 'goto') = Shift("s166")
action("s13", 'if') = Shift("s169")
action("s13", 'return') = Shift("s28")
action("s13", 'sizeof') = Shift("s101")
action("s13", 'switch') = Shift("s186")
action("s13", 'while') = Shift("s194")
action("s13", '{') = Shift("s6")
action("s13", '~') = Shift("s205")
action("s13", CONSTANT) = Shift("s206")
action("s13", IDENTIFIER) = Shift("s210")
action("s13", STRING_LITERAL) = Shift("s214")
action("s14", '!') = Shift("s102")
action("s14", '&') = Shift("s104")
action("s14", '(') = Shift("s20")
action("s14", '*') = Shift("s117")
action("s14", '+') = Shift("s121")
action("s14", '++') = Shift("s99")
action("s14", '-') = Shift("s124")
action("s14", '--') = Shift("s100")
action("s14", ';') = Shift("s129")
action("s14", 'break') = Shift("s138")
action("s14", 'case') = Shift("s41")
action("s14", 'continue') = Shift("s144")
action("s14", 'default') = Shift("s146")
action("s14", 'do') = Shift("s10")
action("s14", 'for') = Shift("s162")
action("s14", 'goto') = Shift("s166")
action("s14", 'if') = Shift("s169")
action("s14", 'return') = Shift("s28")
action("s14", 'sizeof') = Shift("s101")
action("s14", 'switch') = Shift("s186")
action("s14", 'while') = Shift("s194")
action("s14", '{') = Shift("s6")
action("s14", '~') = Shift("s205")
action("s14", CONSTANT) = Shift("s206")
action("s14", IDENTIFIER) = Shift("s210")
action("s14", STRING_LITERAL) = Shift("s214")
action("s15", '!') = Shift("s102")
action("s15", '&') = Shift("s104")
action("s15", '(') = Shift("s20")
action("s15", '*') = Shift("s117")
action("s15", '+') = Shift("s121")
action("s15", '++') = Shift("s99")
action("s15", '-') = Shift("s124")
action("s15", '--') = Shift("s100")
action("s15", ';') = Shift("s129")
action("s15", 'break') = Shift("s138")
action("s15", 'case') = Shift("s41")
action("s15", 'continue') = Shift("s144")
action("s15", 'default') = Shift("s146")
action("s15", 'do') = Shift("s10")
action("s15", 'for') = Shift("s162")
action("s15", 'goto') = Shift("s166")
action("s15", 'if') = Shift("s169")
action("s15", 'return') = Shift("s28")
action("s15", 'sizeof') = Shift("s101")
action("s15", 'switch') = Shift("s186")
action("s15", 'while') = Shift("s194")
action("s15", '{') = Shift("s6")
action("s15", '~') = Shift("s205")
action("s15", CONSTANT) = Shift("s206")
action("s15", IDENTIFIER) = Shift("s210")
action("s15", STRING_LITERAL) = Shift("s214")
action("s16", '!') = Shift("s102")
action("s16", '&') = Shift("s104")
action("s16", '(') = Shift("s20")
action("s16", '*') = Shift("s117")
action("s16", '+') = Shift("s121")
action("s16", '++') = Shift("s99")
action("s16", '-') = Shift("s124")
action("s16", '--') = Shift("s100")
action("s16", ';') = Shift("s129")
action("s16", 'break') = Shift("s138")
action("s16", 'case') = Shift("s41")
action("s16", 'continue') = Shift("s144")
action("s16", 'default') = Shift("s146")
action("s16", 'do') = Shift("s10")
action("s16", 'for') = Shift("s162")
action("s16", 'goto') = Shift("s166")
action("s16", 'if') = Shift("s169")
action("s16", 'return') = Shift("s28")
action("s16", 'sizeof') = Shift("s101")
action("s16", 'switch') = Shift("s186")
action("s16", 'while') = Shift("s194")
action("s16", '{') = Shift("s6")
action("s16", '~') = Shift("s205")
action("s16", CONSTANT) = Shift("s206")
action("s16", IDENTIFIER) = Shift("s210")
action("s16", STRING_LITERAL) = Shift("s214")
action("s17", '!') = Shift("s102")
action("s17", '&') = Shift("s104")
action("s17", '(') = Shift("s20")
action("s17", '*') = Shift("s117")
action("s17", '+') = Shift("s121")
action("s17", '++') = Shift("s99")
action("s17", '-') = Shift("s124")
action("s17", '--') = Shift("s100")
action("s17", ';') = Shift("s129")
action("s17", 'break') = Shift("s138")
action("s17", 'case') = Shift("s41")
action("s17", 'continue') = Shift("s144")
action("s17", 'default') = Shift("s146")
action("s17", 'do') = Shift("s10")
action("s17", 'for') = Shift("s162")
action("s17", 'goto') = Shift("s166")
action("s17", 'if') = Shift("s169")
action("s17", 'return') = Shift("s28")
action("s17", 'sizeof') = Shift("s101")
action("s17", 'switch') = Shift("s186")
action("s17", 'while') = Shift("s194")
action("s17", '{') = Shift("s6")
action("s17", '}') = Shift("s199")
action("s17", '~') = Shift("s205")
action("s17", CONSTANT) = Shift("s206")
action("s17", IDENTIFIER) = Shift("s210")
action("s17", STRING_LITERAL) = Shift("s214")
action("s18", '!') = Shift("s102")
action("s18", '&') = Shift("s104")
action("s18", '(') = Shift("s20")
action("s18", '*') = Shift("s117")
action("s18", '+') = Shift("s121")
action("s18", '++') = Shift("s99")
action("s18", '-') = Shift("s124")
action("s18", '--') = Shift("s100")
action("s18", ';') = Shift("s129")
action("s18", 'break') = Shift("s138")
action("s18", 'case') = Shift("s41")
action("s18", 'continue') = Shift("s144")
action("s18", 'default') = Shift("s146")
action("s18", 'do') = Shift("s10")
action("s18", 'for') = Shift("s162")
action("s18", 'goto') = Shift("s166")
action("s18", 'if') = Shift("s169")
action("s18", 'return') = Shift("s28")
action("s18", 'sizeof') = Shift("s101")
action("s18", 'switch') = Shift("s186")
action("s18", 'while') = Shift("s194")
action("s18", '{') = Shift("s6")
action("s18", '}') = Shift("s203")
action("s18", '~') = Shift("s205")
action("s18", CONSTANT) = Shift("s206")
action("s18", IDENTIFIER) = Shift("s210")
action("s18", STRING_LITERAL) = Shift("s214")
action("s19", '!') = Shift("s102")
action("s19", '&') = Shift("s104")
action("s19", '(') = Shift("s20")
action("s19", '*') = Shift("s117")
action("s19", '+') = Shift("s121")
action("s19", '++') = Shift("s99")
action("s19", '-') = Shift("s124")
action("s19", '--') = Shift("s100")
action("s19", ';') = Shift("s129")
action("s19", 'break') = Shift("s138")
action("s19", 'case') = Shift("s41")
action("s19", 'continue') = Shift("s144")
action("s19", 'default') = Shift("s146")
action("s19", 'do') = Shift("s10")
action("s19", 'for') = Shift("s162")
action("s19", 'goto') = Shift("s166")
action("s19", 'if') = Shift("s169")
action("s19", 'return') = Shift("s28")
action("s19", 'sizeof') = Shift("s101")
action("s19", 'switch') = Shift("s186")
action("s19", 'while') = Shift("s194")
action("s19", '{') = Shift("s6")
action("s19", '~') = Shift("s205")
action("s19", CONSTANT) = Shift("s206")
action("s19", IDENTIFIER) = Shift("s210")
action("s19", STRING_LITERAL) = Shift("s214")
action("s20", '!') = Shift("s102")
action("s20", '&') = Shift("s104")
action("s20", '(') = Shift("s20")
action("s20", '*') = Shift("s117")
action("s20", '+') = Shift("s121")
action("s20", '++') = Shift("s99")
action("s20", '-') = Shift("s124")
action("s20", '--') = Shift("s100")
action("s20", 'char') = Shift("s142")
action("s20", 'const') = Shift("s143")
action("s20", 'double') = Shift("s153")
action("s20", 'enum') = Shift("s154")
action("s20", 'float') = Shift("s161")
action("s20", 'int') = Shift("s173")
action("s20", 'long') = Shift("s174")
action("s20", 'short') = Shift("s179")
action("s20", 'signed') = Shift("s180")
action("s20", 'sizeof') = Shift("s101")
action("s20", 'struct') = Shift("s185")
action("s20", 'union') = Shift("s190")
action("s20", 'unsigned') = Shift("s191")
action("s20", 'void') = Shift("s192")
action("s20", 'volatile') = Shift("s193")
action("s20", '~') = Shift("s205")
action("s20", CONSTANT) = Shift("s206")
action("s20", IDENTIFIER) = Shift("s211")
action("s20", STRING_LITERAL) = Shift("s214")
action("s20", TYPE_NAME) = Shift("s215")
action("s21", '!') = Shift("s102")
action("s21", '&') = Shift("s104")
action("s21", '(') = Shift("s20")
action("s21", '*') = Shift("s117")
action("s21", '+') = Shift("s121")
action("s21", '++') = Shift("s99")
action("s21", '-') = Shift("s124")
action("s21", '--') = Shift("s100")
action("s21", 'char') = Shift("s142")
action("s21", 'const') = Shift("s143")
action("s21", 'double') = Shift("s153")
action("s21", 'enum') = Shift("s154")
action("s21", 'float') = Shift("s161")
action("s21", 'int') = Shift("s173")
action("s21", 'long') = Shift("s174")
action("s21", 'short') = Shift("s179")
action("s21", 'signed') = Shift("s180")
action("s21", 'sizeof') = Shift("s101")
action("s21", 'struct') = Shift("s185")
action("s21", 'union') = Shift("s190")
action("s21", 'unsigned') = Shift("s191")
action("s21", 'void') = Shift("s192")
action("s21", 'volatile') = Shift("s193")
action("s21", '~') = Shift("s205")
action("s21", CONSTANT) = Shift("s206")
action("s21", IDENTIFIER) = Shift("s211")
action("s21", STRING_LITERAL) = Shift("s214")
action("s21", TYPE_NAME) = Shift("s215")
action("s22", '!') = Shift("s102")
action("s22", '&') = Shift("s104")
action("s22", '(') = Shift("s20")
action("s22", '*') = Shift("s117")
action("s22", '+') = Shift("s121")
action("s22", '++') = Shift("s99")
action("s22", '-') = Shift("s124")
action("s22", '--') = Shift("s100")
action("s22", ';') = Shift("s129")
action("s22", 'sizeof') = Shift("s101")
action("s22", '~') = Shift("s205")
action("s22", CONSTANT) = Shift("s206")
action("s22", IDENTIFIER) = Shift("s211")
action("s22", STRING_LITERAL) = Shift("s214")
action("s23", '!') = Shift("s102")
action("s23", '&') = Shift("s104")
action("s23", '(') = Shift("s20")
action("s23", '*') = Shift("s117")
action("s23", '+') = Shift("s121")
action("s23", '++') = Shift("s99")
action("s23", '-') = Shift("s124")
action("s23", '--') = Shift("s100")
action("s23", ';') = Shift("s129")
action("s23", 'sizeof') = Shift("s101")
action("s23", '~') = Shift("s205")
action("s23", CONSTANT) = Shift("s206")
action("s23", IDENTIFIER) = Shift("s211")
action("s23", STRING_LITERAL) = Shift("s214")
action("s24", '!') = Shift("s102")
action("s24", '&') = Shift("s104")
action("s24", '(') = Shift("s20")
action("s24", '*') = Shift("s117")
action("s24", '+') = Shift("s121")
action("s24", '++') = Shift("s99")
action("s24", '-') = Shift("s124")
action("s24", '--') = Shift("s100")
action("s24", 'sizeof') = Shift("s101")
action("s24", '~') = Shift("s205")
action("s24", CONSTANT) = Shift("s206")
action("s24", IDENTIFIER) = Shift("s211")
action("s24", STRING_LITERAL) = Shift("s214")
action("s25", '!') = Shift("s102")
action("s25", '&') = Shift("s104")
action("s25", '(') = Shift("s20")
action("s25", '*') = Shift("s117")
action("s25", '+') = Shift("s121")
action("s25", '++') = Shift("s99")
action("s25", '-') = Shift("s124")
action("s25", '--') = Shift("s100")
action("s25", 'sizeof') = Shift("s101")
action("s25", '~') = Shift("s205")
action("s25", CONSTANT) = Shift("s206")
action("s25", IDENTIFIER) = Shift("s211")
action("s25", STRING_LITERAL) = Shift("s214")
action("s26", '!') = Shift("s102")
action("s26", '&') = Shift("s104")
action("s26", '(') = Shift("s20")
action("s26", ')') = Shift("s11")
action("s26", '*') = Shift("s117")
action("s26", '+') = Shift("s121")
action("s26", '++') = Shift("s99")
action("s26", '-') = Shift("s124")
action("s26", '--') = Shift("s100")
action("s26", 'sizeof') = Shift("s101")
action("s26", '~') = Shift("s205")
action("s26", CONSTANT) = Shift("s206")
action("s26", IDENTIFIER) = Shift("s211")
action("s26", STRING_LITERAL) = Shift("s214")
action("s27", '!') = Shift("s102")
action("s27", '&') = Shift("s104")
action("s27", '(') = Shift("s20")
action("s27", '*') = Shift("s117")
action("s27", '+') = Shift("s121")
action("s27", '++') = Shift("s99")
action("s27", '-') = Shift("s124")
action("s27", '--') = Shift("s100")
action("s27", 'sizeof') = Shift("s101")
action("s27", '~') = Shift("s205")
action("s27", CONSTANT) = Shift("s206")
action("s27", IDENTIFIER) = Shift("s211")
action("s27", STRING_LITERAL) = Shift("s214")
action("s28", '!') = Shift("s102")
action("s28", '&') = Shift("s104")
action("s28", '(') = Shift("s20")
action("s28", '*') = Shift("s117")
action("s28", '+') = Shift("s121")
action("s28", '++') = Shift("s99")
action("s28", '-') = Shift("s124")
action("s28", '--') = Shift("s100")
action("s28", ';') = Shift("s176")
action("s28", 'sizeof') = Shift("s101")
action("s28", '~') = Shift("s205")
action("s28", CONSTANT) = Shift("s206")
action("s28", IDENTIFIER) = Shift("s211")
action("s28", STRING_LITERAL) = Shift("s214")
action("s29", '!') = Shift("s102")
action("s29", '&') = Shift("s104")
action("s29", '(') = Shift("s20")
action("s29", '*') = Shift("s117")
action("s29", '+') = Shift("s121")
action("s29", '++') = Shift("s99")
action("s29", '-') = Shift("s124")
action("s29", '--') = Shift("s100")
action("s29", 'sizeof') = Shift("s101")
action("s29", '~') = Shift("s205")
action("s29", CONSTANT) = Shift("s206")
action("s29", IDENTIFIER) = Shift("s211")
action("s29", STRING_LITERAL) = Shift("s214")
action("s30", '!') = Shift("s102")
action("s30", '&') = Shift("s104")
action("s30", '(') = Shift("s20")
action("s30", '*') = Shift("s117")
action("s30", '+') = Shift("s121")
action("s30", '++') = Shift("s99")
action("s30", '-') = Shift("s124")
action("s30", '--') = Shift("s100")
action("s30", 'sizeof') = Shift("s101")
action("s30", '~') = Shift("s205")
action("s30", CONSTANT) = Shift("s206")
action("s30", IDENTIFIER) = Shift("s211")
action("s30", STRING_LITERAL) = Shift("s214")
action("s31", '!') = Shift("s102")
action("s31", '&') = Shift("s104")
action("s31", '(') = Shift("s20")
action("s31", '*') = Shift("s117")
action("s31", '+') = Shift("s121")
action("s31", '++') = Shift("s99")
action("s31", '-') = Shift("s124")
action("s31", '--') = Shift("s100")
action("s31", 'sizeof') = Shift("s101")
action("s31", '~') = Shift("s205")
action("s31", CONSTANT) = Shift("s206")
action("s31", IDENTIFIER) = Shift("s211")
action("s31", STRING_LITERAL) = Shift("s214")
action("s32", '!') = Shift("s102")
action("s32", '&') = Shift("s104")
action("s32", '(') = Shift("s20")
action("s32", '*') = Shift("s117")
action("s32", '+') = Shift("s121")
action("s32", '++') = Shift("s99")
action("s32", '-') = Shift("s124")
action("s32", '--') = Shift("s100")
action("s32", 'sizeof') = Shift("s101")
action("s32", '~') = Shift("s205")
action("s32", CONSTANT) = Shift("s206")
action("s32", IDENTIFIER) = Shift("s211")
action("s32", STRING_LITERAL) = Shift("s214")
action("s33", '!') = Shift("s102")
action("s33", '&') = Shift("s104")
action("s33", '(') = Shift("s20")
action("s33", '*') = Shift("s117")
action("s33", '+') = Shift("s121")
action("s33", '++') = Shift("s99")
action("s33", '-') = Shift("s124")
action("s33", '--') = Shift("s100")
action("s33", 'sizeof') = Shift("s101")
action("s33", '{') = Shift("s33")
action("s33", '~') = Shift("s205")
action("s33", CONSTANT) = Shift("s206")
action("s33", IDENTIFIER) = Shift("s211")
action("s33", STRING_LITERAL) = Shift("s214")
action("s34", '!') = Shift("s102")
action("s34", '&') = Shift("s104")
action("s34", '(') = Shift("s20")
action("s34", '*') = Shift("s117")
action("s34", '+') = Shift("s121")
action("s34", '++') = Shift("s99")
action("s34", '-') = Shift("s124")
action("s34", '--') = Shift("s100")
action("s34", 'sizeof') = Shift("s101")
action("s34", '{') = Shift("s33")
action("s34", '}') = Shift("s201")
action("s34", '~') = Shift("s205")
action("s34", CONSTANT) = Shift("s206")
action("s34", IDENTIFIER) = Shift("s211")
action("s34", STRING_LITERAL) = Shift("s214")
action("s35", '!') = Shift("s102")
action("s35", '&') = Shift("s104")
action("s35", '(') = Shift("s20")
action("s35", '*') = Shift("s117")
action("s35", '+') = Shift("s121")
action("s35", '++') = Shift("s99")
action("s35", '-') = Shift("s124")
action("s35", '--') = Shift("s100")
action("s35", 'sizeof') = Shift("s101")
action("s35", '{') = Shift("s33")
action("s35", '~') = Shift("s205")
action("s35", CONSTANT) = Shift("s206")
action("s35", IDENTIFIER) = Shift("s211")
action("s35", STRING_LITERAL) = Shift("s214")
action("s36", '!') = Shift("s102")
action("s36", '&') = Shift("s104")
action("s36", '(') = Shift("s20")
action("s36", '*') = Shift("s117")
action("s36", '+') = Shift("s121")
action("s36", '++') = Shift("s99")
action("s36", '-') = Shift("s124")
action("s36", '--') = Shift("s100")
action("s36", 'sizeof') = Shift("s101")
action("s36", '~') = Shift("s205")
action("s36", CONSTANT) = Shift("s206")
action("s36", IDENTIFIER) = Shift("s211")
action("s36", STRING_LITERAL) = Shift("s214")
action("s37", '!') = Shift("s102")
action("s37", '&') = Shift("s104")
action("s37", '(') = Shift("s20")
action("s37", '*') = Shift("s117")
action("s37", '+') = Shift("s121")
action("s37", '++') = Shift("s99")
action("s37", '-') = Shift("s124")
action("s37", '--') = Shift("s100")
action("s37", 'sizeof') = Shift("s101")
action("s37", '~') = Shift("s205")
action("s37", CONSTANT) = Shift("s206")
action("s37", IDENTIFIER) = Shift("s211")
action("s37", STRING_LITERAL) = Shift("s214")
action("s38", '!') = Shift("s102")
action("s38", '&') = Shift("s104")
action("s38", '(') = Shift("s20")
action("s38", '*') = Shift("s117")
action("s38", '+') = Shift("s121")
action("s38", '++') = Shift("s99")
action("s38", '-') = Shift("s124")
action("s38", '--') = Shift("s100")
action("s38", 'sizeof') = Shift("s101")
action("s38", '~') = Shift("s205")
action("s38", CONSTANT) = Shift("s206")
action("s38", IDENTIFIER) = Shift("s211")
action("s38", STRING_LITERAL) = Shift("s214")
action("s39", '!') = Shift("s102")
action("s39", '&') = Shift("s104")
action("s39", '(') = Shift("s20")
action("s39", '*') = Shift("s117")
action("s39", '+') = Shift("s121")
action("s39", '++') = Shift("s99")
action("s39", '-') = Shift("s124")
action("s39", '--') = Shift("s100")
action("s39", 'sizeof') = Shift("s101")
action("s39", '~') = Shift("s205")
action("s39", CONSTANT) = Shift("s206")
action("s39", IDENTIFIER) = Shift("s211")
action("s39", STRING_LITERAL) = Shift("s214")
action("s40", '!') = Shift("s102")
action("s40", '&') = Shift("s104")
action("s40", '(') = Shift("s20")
action("s40", '*') = Shift("s117")
action("s40", '+') = Shift("s121")
action("s40", '++') = Shift("s99")
action("s40", '-') = Shift("s124")
action("s40", '--') = Shift("s100")
action("s40", ']') = Shift("s133")
action("s40", 'sizeof') = Shift("s101")
action("s40", '~') = Shift("s205")
action("s40", CONSTANT) = Shift("s206")
action("s40", IDENTIFIER) = Shift("s211")
action("s40", STRING_LITERAL) = Shift("s214")
action("s41", '!') = Shift("s102")
action("s41", '&') = Shift("s104")
action("s41", '(') = Shift("s20")
action("s41", '*') = Shift("s117")
action("s41", '+') = Shift("s121")
action("s41", '++') = Shift("s99")
action("s41", '-') = Shift("s124")
action("s41", '--') = Shift("s100")
action("s41", 'sizeof') = Shift("s101")
action("s41", '~') = Shift("s205")
action("s41", CONSTANT) = Shift("s206")
action("s41", IDENTIFIER) = Shift("s211")
action("s41", STRING_LITERAL) = Shift("s214")
action("s42", '!') = Shift("s102")
action("s42", '&') = Shift("s104")
action("s42", '(') = Shift("s20")
action("s42", '*') = Shift("s117")
action("s42", '+') = Shift("s121")
action("s42", '++') = Shift("s99")
action("s42", '-') = Shift("s124")
action("s42", '--') = Shift("s100")
action("s42", 'sizeof') = Shift("s101")
action("s42", '~') = Shift("s205")
action("s42", CONSTANT) = Shift("s206")
action("s42", IDENTIFIER) = Shift("s211")
action("s42", STRING_LITERAL) = Shift("s214")
action("s43", '!') = Shift("s102")
action("s43", '&') = Shift("s104")
action("s43", '(') = Shift("s20")
action("s43", '*') = Shift("s117")
action("s43", '+') = Shift("s121")
action("s43", '++') = Shift("s99")
action("s43", '-') = Shift("s124")
action("s43", '--') = Shift("s100")
action("s43", 'sizeof') = Shift("s101")
action("s43", '~') = Shift("s205")
action("s43", CONSTANT) = Shift("s206")
action("s43", IDENTIFIER) = Shift("s211")
action("s43", STRING_LITERAL) = Shift("s214")
action("s44", '!') = Shift("s102")
action("s44", '&') = Shift("s104")
action("s44", '(') = Shift("s20")
action("s44", '*') = Shift("s117")
action("s44", '+') = Shift("s121")
action("s44", '++') = Shift("s99")
action("s44", '-') = Shift("s124")
action("s44", '--') = Shift("s100")
action("s44", ']') = Shift("s254")
action("s44", 'sizeof') = Shift("s101")
action("s44", '~') = Shift("s205")
action("s44", CONSTANT) = Shift("s206")
action("s44", IDENTIFIER) = Shift("s211")
action("s44", STRING_LITERAL) = Shift("s214")
action("s45", '!') = Shift("s102")
action("s45", '&') = Shift("s104")
action("s45", '(') = Shift("s20")
action("s45", '*') = Shift("s117")
action("s45", '+') = Shift("s121")
action("s45", '++') = Shift("s99")
action("s45", '-') = Shift("s124")
action("s45", '--') = Shift("s100")
action("s45", ']') = Shift("s264")
action("s45", 'sizeof') = Shift("s101")
action("s45", '~') = Shift("s205")
action("s45", CONSTANT) = Shift("s206")
action("s45", IDENTIFIER) = Shift("s211")
action("s45", STRING_LITERAL) = Shift("s214")
action("s46", '!') = Shift("s102")
action("s46", '&') = Shift("s104")
action("s46", '(') = Shift("s20")
action("s46", '*') = Shift("s117")
action("s46", '+') = Shift("s121")
action("s46", '++') = Shift("s99")
action("s46", '-') = Shift("s124")
action("s46", '--') = Shift("s100")
action("s46", 'sizeof') = Shift("s101")
action("s46", '~') = Shift("s205")
action("s46", CONSTANT) = Shift("s206")
action("s46", IDENTIFIER) = Shift("s211")
action("s46", STRING_LITERAL) = Shift("s214")
action("s47", '!') = Shift("s102")
action("s47", '&') = Shift("s104")
action("s47", '(') = Shift("s20")
action("s47", '*') = Shift("s117")
action("s47", '+') = Shift("s121")
action("s47", '++') = Shift("s99")
action("s47", '-') = Shift("s124")
action("s47", '--') = Shift("s100")
action("s47", 'sizeof') = Shift("s101")
action("s47", '~') = Shift("s205")
action("s47", CONSTANT) = Shift("s206")
action("s47", IDENTIFIER) = Shift("s211")
action("s47", STRING_LITERAL) = Shift("s214")
action("s48", '!') = Shift("s102")
action("s48", '&') = Shift("s104")
action("s48", '(') = Shift("s20")
action("s48", '*') = Shift("s117")
action("s48", '+') = Shift("s121")
action("s48", '++') = Shift("s99")
action("s48", '-') = Shift("s124")
action("s48", '--') = Shift("s100")
action("s48", 'sizeof') = Shift("s101")
action("s48", '~') = Shift("s205")
action("s48", CONSTANT) = Shift("s206")
action("s48", IDENTIFIER) = Shift("s211")
action("s48", STRING_LITERAL) = Shift("s214")
action("s49", '!') = Shift("s102")
action("s49", '&') = Shift("s104")
action("s49", '(') = Shift("s20")
action("s49", '*') = Shift("s117")
action("s49", '+') = Shift("s121")
action("s49", '++') = Shift("s99")
action("s49", '-') = Shift("s124")
action("s49", '--') = Shift("s100")
action("s49", 'sizeof') = Shift("s101")
action("s49", '~') = Shift("s205")
action("s49", CONSTANT) = Shift("s206")
action("s49", IDENTIFIER) = Shift("s211")
action("s49", STRING_LITERAL) = Shift("s214")
action("s50", '!') = Shift("s102")
action("s50", '&') = Shift("s104")
action("s50", '(') = Shift("s20")
action("s50", '*') = Shift("s117")
action("s50", '+') = Shift("s121")
action("s50", '++') = Shift("s99")
action("s50", '-') = Shift("s124")
action("s50", '--') = Shift("s100")
action("s50", 'sizeof') = Shift("s101")
action("s50", '~') = Shift("s205")
action("s50", CONSTANT) = Shift("s206")
action("s50", IDENTIFIER) = Shift("s211")
action("s50", STRING_LITERAL) = Shift("s214")
action("s51", '!') = Shift("s102")
action("s51", '&') = Shift("s104")
action("s51", '(') = Shift("s20")
action("s51", '*') = Shift("s117")
action("s51", '+') = Shift("s121")
action("s51", '++') = Shift("s99")
action("s51", '-') = Shift("s124")
action("s51", '--') = Shift("s100")
action("s51", 'sizeof') = Shift("s101")
action("s51", '~') = Shift("s205")
action("s51", CONSTANT) = Shift("s206")
action("s51", IDENTIFIER) = Shift("s211")
action("s51", STRING_LITERAL) = Shift("s214")
action("s52", '!') = Shift("s102")
action("s52", '&') = Shift("s104")
action("s52", '(') = Shift("s20")
action("s52", '*') = Shift("s117")
action("s52", '+') = Shift("s121")
action("s52", '++') = Shift("s99")
action("s52", '-') = Shift("s124")
action("s52", '--') = Shift("s100")
action("s52", 'sizeof') = Shift("s101")
action("s52", '~') = Shift("s205")
action("s52", CONSTANT) = Shift("s206")
action("s52", IDENTIFIER) = Shift("s211")
action("s52", STRING_LITERAL) = Shift("s214")
action("s53", '!') = Shift("s102")
action("s53", '&') = Shift("s104")
action("s53", '(') = Shift("s20")
action("s53", '*') = Shift("s117")
action("s53", '+') = Shift("s121")
action("s53", '++') = Shift("s99")
action("s53", '-') = Shift("s124")
action("s53", '--') = Shift("s100")
action("s53", 'sizeof') = Shift("s101")
action("s53", '~') = Shift("s205")
action("s53", CONSTANT) = Shift("s206")
action("s53", IDENTIFIER) = Shift("s211")
action("s53", STRING_LITERAL) = Shift("s214")
action("s54", '!') = Shift("s102")
action("s54", '&') = Shift("s104")
action("s54", '(') = Shift("s20")
action("s54", '*') = Shift("s117")
action("s54", '+') = Shift("s121")
action("s54", '++') = Shift("s99")
action("s54", '-') = Shift("s124")
action("s54", '--') = Shift("s100")
action("s54", 'sizeof') = Shift("s101")
action("s54", '~') = Shift("s205")
action("s54", CONSTANT) = Shift("s206")
action("s54", IDENTIFIER) = Shift("s211")
action("s54", STRING_LITERAL) = Shift("s214")
action("s55", '!') = Shift("s102")
action("s55", '&') = Shift("s104")
action("s55", '(') = Shift("s20")
action("s55", '*') = Shift("s117")
action("s55", '+') = Shift("s121")
action("s55", '++') = Shift("s99")
action("s55", '-') = Shift("s124")
action("s55", '--') = Shift("s100")
action("s55", 'sizeof') = Shift("s101")
action("s55", '~') = Shift("s205")
action("s55", CONSTANT) = Shift("s206")
action("s55", IDENTIFIER) = Shift("s211")
action("s55", STRING_LITERAL) = Shift("s214")
action("s56", '!') = Shift("s102")
action("s56", '&') = Shift("s104")
action("s56", '(') = Shift("s20")
action("s56", '*') = Shift("s117")
action("s56", '+') = Shift("s121")
action("s56", '++') = Shift("s99")
action("s56", '-') = Shift("s124")
action("s56", '--') = Shift("s100")
action("s56", 'sizeof') = Shift("s101")
action("s56", '~') = Shift("s205")
action("s56", CONSTANT) = Shift("s206")
action("s56", IDENTIFIER) = Shift("s211")
action("s56", STRING_LITERAL) = Shift("s214")
action("s57", '!') = Shift("s102")
action("s57", '&') = Shift("s104")
action("s57", '(') = Shift("s20")
action("s57", '*') = Shift("s117")
action("s57", '+') = Shift("s121")
action("s57", '++') = Shift("s99")
action("s57", '-') = Shift("s124")
action("s57", '--') = Shift("s100")
action("s57", 'sizeof') = Shift("s101")
action("s57", '~') = Shift("s205")
action("s57", CONSTANT) = Shift("s206")
action("s57", IDENTIFIER) = Shift("s211")
action("s57", STRING_LITERAL) = Shift("s214")
action("s58", '!') = Shift("s102")
action("s58", '&') = Shift("s104")
action("s58", '(') = Shift("s20")
action("s58", '*') = Shift("s117")
action("s58", '+') = Shift("s121")
action("s58", '++') = Shift("s99")
action("s58", '-') = Shift("s124")
action("s58", '--') = Shift("s100")
action("s58", 'sizeof') = Shift("s101")
action("s58", '~') = Shift("s205")
action("s58", CONSTANT) = Shift("s206")
action("s58", IDENTIFIER) = Shift("s211")
action("s58", STRING_LITERAL) = Shift("s214")
action("s59", '!') = Shift("s102")
action("s59", '&') = Shift("s104")
action("s59", '(') = Shift("s20")
action("s59", '*') = Shift("s117")
action("s59", '+') = Shift("s121")
action("s59", '++') = Shift("s99")
action("s59", '-') = Shift("s124")
action("s59", '--') = Shift("s100")
action("s59", 'sizeof') = Shift("s101")
action("s59", '~') = Shift("s205")
action("s59", CONSTANT) = Shift("s206")
action("s59", IDENTIFIER) = Shift("s211")
action("s59", STRING_LITERAL) = Shift("s214")
action("s60", '%=') = Shift("s103")
action("s60", '&=') = Shift("s105")
action("s60", '*=') = Shift("s120")
action("s60", '+=') = Shift("s123")
action("s60", '-=') = Shift("s126")
action("s60", '/=') = Shift("s127")
action("s60", '<<=') = Shift("s130")
action("s60", '=') = Shift("s131")
action("s60", '>>=') = Shift("s132")
action("s60", '^=') = Shift("s136")
action("s60", '|=') = Shift("s204")
action("s60", '!=') = Reduce(cast_expression -> unary_expression)
action("s60", '%') = Reduce(cast_expression -> unary_expression)

conflict in state s60:
s60 = {assignment_operator -> (*) '%=', assignment_operator -> (*) '&=', assignment_operator -> (*) '*=', assignment_operator -> (*) '+=', assignment_operator -> (*) '-=', assignment_operator -> (*) '/=', assignment_operator -> (*) '<<=', assignment_operator -> (*) '=', assignment_operator -> (*) '>>=', assignment_operator -> (*) '^=', assignment_operator -> (*) '|=', assignment_expression -> unary_expression (*) assignment_operator assignment_expression, cast_expression -> unary_expression (*)}
action("s60", '%=') = Shift("s103")
action("s60", '%=') = Reduce(cast_expression -> unary_expression)

action("s60", '&&') = Reduce(cast_expression -> unary_expression)
action("s60", '&') = Reduce(cast_expression -> unary_expression)

conflict in state s60:
s60 = {assignment_operator -> (*) '%=', assignment_operator -> (*) '&=', assignment_operator -> (*) '*=', assignment_operator -> (*) '+=', assignment_operator -> (*) '-=', assignment_operator -> (*) '/=', assignment_operator -> (*) '<<=', assignment_operator -> (*) '=', assignment_operator -> (*) '>>=', assignment_operator -> (*) '^=', assignment_operator -> (*) '|=', assignment_expression -> unary_expression (*) assignment_operator assignment_expression, cast_expression -> unary_expression (*)}
action("s60", '&=') = Shift("s105")
action("s60", '&=') = Reduce(cast_expression -> unary_expression)

action("s60", ')') = Reduce(cast_expression -> unary_expression)
action("s60", '*') = Reduce(cast_expression -> unary_expression)

conflict in state s60:
s60 = {assignment_operator -> (*) '%=', assignment_operator -> (*) '&=', assignment_operator -> (*) '*=', assignment_operator -> (*) '+=', assignment_operator -> (*) '-=', assignment_operator -> (*) '/=', assignment_operator -> (*) '<<=', assignment_operator -> (*) '=', assignment_operator -> (*) '>>=', assignment_operator -> (*) '^=', assignment_operator -> (*) '|=', assignment_expression -> unary_expression (*) assignment_operator assignment_expression, cast_expression -> unary_expression (*)}
action("s60", '*=') = Shift("s120")
action("s60", '*=') = Reduce(cast_expression -> unary_expression)

action("s60", '+') = Reduce(cast_expression -> unary_expression)

conflict in state s60:
s60 = {assignment_operator -> (*) '%=', assignment_operator -> (*) '&=', assignment_operator -> (*) '*=', assignment_operator -> (*) '+=', assignment_operator -> (*) '-=', assignment_operator -> (*) '/=', assignment_operator -> (*) '<<=', assignment_operator -> (*) '=', assignment_operator -> (*) '>>=', assignment_operator -> (*) '^=', assignment_operator -> (*) '|=', assignment_expression -> unary_expression (*) assignment_operator assignment_expression, cast_expression -> unary_expression (*)}
action("s60", '+=') = Shift("s123")
action("s60", '+=') = Reduce(cast_expression -> unary_expression)

action("s60", ',') = Reduce(cast_expression -> unary_expression)
action("s60", '-') = Reduce(cast_expression -> unary_expression)

conflict in state s60:
s60 = {assignment_operator -> (*) '%=', assignment_operator -> (*) '&=', assignment_operator -> (*) '*=', assignment_operator -> (*) '+=', assignment_operator -> (*) '-=', assignment_operator -> (*) '/=', assignment_operator -> (*) '<<=', assignment_operator -> (*) '=', assignment_operator -> (*) '>>=', assignment_operator -> (*) '^=', assignment_operator -> (*) '|=', assignment_expression -> unary_expression (*) assignment_operator assignment_expression, cast_expression -> unary_expression (*)}
action("s60", '-=') = Shift("s126")
action("s60", '-=') = Reduce(cast_expression -> unary_expression)

action("s60", '/') = Reduce(cast_expression -> unary_expression)

conflict in state s60:
s60 = {assignment_operator -> (*) '%=', assignment_operator -> (*) '&=', assignment_operator -> (*) '*=', assignment_operator -> (*) '+=', assignment_operator -> (*) '-=', assignment_operator -> (*) '/=', assignment_operator -> (*) '<<=', assignment_operator -> (*) '=', assignment_operator -> (*) '>>=', assignment_operator -> (*) '^=', assignment_operator -> (*) '|=', assignment_expression -> unary_expression (*) assignment_operator assignment_expression, cast_expression -> unary_expression (*)}
action("s60", '/=') = Shift("s127")
action("s60", '/=') = Reduce(cast_expression -> unary_expression)

action("s60", ':') = Reduce(cast_expression -> unary_expression)
action("s60", ';') = Reduce(cast_expression -> unary_expression)
action("s60", '<') = Reduce(cast_expression -> unary_expression)
action("s60", '<<') = Reduce(cast_expression -> unary_expression)

conflict in state s60:
s60 = {assignment_operator -> (*) '%=', assignment_operator -> (*) '&=', assignment_operator -> (*) '*=', assignment_operator -> (*) '+=', assignment_operator -> (*) '-=', assignment_operator -> (*) '/=', assignment_operator -> (*) '<<=', assignment_operator -> (*) '=', assignment_operator -> (*) '>>=', assignment_operator -> (*) '^=', assignment_operator -> (*) '|=', assignment_expression -> unary_expression (*) assignment_operator assignment_expression, cast_expression -> unary_expression (*)}
action("s60", '<<=') = Shift("s130")
action("s60", '<<=') = Reduce(cast_expression -> unary_expression)

action("s60", '<=') = Reduce(cast_expression -> unary_expression)

conflict in state s60:
s60 = {assignment_operator -> (*) '%=', assignment_operator -> (*) '&=', assignment_operator -> (*) '*=', assignment_operator -> (*) '+=', assignment_operator -> (*) '-=', assignment_operator -> (*) '/=', assignment_operator -> (*) '<<=', assignment_operator -> (*) '=', assignment_operator -> (*) '>>=', assignment_operator -> (*) '^=', assignment_operator -> (*) '|=', assignment_expression -> unary_expression (*) assignment_operator assignment_expression, cast_expression -> unary_expression (*)}
action("s60", '=') = Shift("s131")
action("s60", '=') = Reduce(cast_expression -> unary_expression)

action("s60", '==') = Reduce(cast_expression -> unary_expression)
action("s60", '>') = Reduce(cast_expression -> unary_expression)
action("s60", '>=') = Reduce(cast_expression -> unary_expression)
action("s60", '>>') = Reduce(cast_expression -> unary_expression)

conflict in state s60:
s60 = {assignment_operator -> (*) '%=', assignment_operator -> (*) '&=', assignment_operator -> (*) '*=', assignment_operator -> (*) '+=', assignment_operator -> (*) '-=', assignment_operator -> (*) '/=', assignment_operator -> (*) '<<=', assignment_operator -> (*) '=', assignment_operator -> (*) '>>=', assignment_operator -> (*) '^=', assignment_operator -> (*) '|=', assignment_expression -> unary_expression (*) assignment_operator assignment_expression, cast_expression -> unary_expression (*)}
action("s60", '>>=') = Shift("s132")
action("s60", '>>=') = Reduce(cast_expression -> unary_expression)

action("s60", '?') = Reduce(cast_expression -> unary_expression)
action("s60", ']') = Reduce(cast_expression -> unary_expression)
action("s60", '^') = Reduce(cast_expression -> unary_expression)

conflict in state s60:
s60 = {assignment_operator -> (*) '%=', assignment_operator -> (*) '&=', assignment_operator -> (*) '*=', assignment_operator -> (*) '+=', assignment_operator -> (*) '-=', assignment_operator -> (*) '/=', assignment_operator -> (*) '<<=', assignment_operator -> (*) '=', assignment_operator -> (*) '>>=', assignment_operator -> (*) '^=', assignment_operator -> (*) '|=', assignment_expression -> unary_expression (*) assignment_operator assignment_expression, cast_expression -> unary_expression (*)}
action("s60", '^=') = Shift("s136")
action("s60", '^=') = Reduce(cast_expression -> unary_expression)

action("s60", '|') = Reduce(cast_expression -> unary_expression)

conflict in state s60:
s60 = {assignment_operator -> (*) '%=', assignment_operator -> (*) '&=', assignment_operator -> (*) '*=', assignment_operator -> (*) '+=', assignment_operator -> (*) '-=', assignment_operator -> (*) '/=', assignment_operator -> (*) '<<=', assignment_operator -> (*) '=', assignment_operator -> (*) '>>=', assignment_operator -> (*) '^=', assignment_operator -> (*) '|=', assignment_expression -> unary_expression (*) assignment_operator assignment_expression, cast_expression -> unary_expression (*)}
action("s60", '|=') = Shift("s204")
action("s60", '|=') = Reduce(cast_expression -> unary_expression)

action("s60", '||') = Reduce(cast_expression -> unary_expression)
action("s60", '}') = Reduce(cast_expression -> unary_expression)
action("s61", '!') = Shift("s102")
action("s61", '&') = Shift("s104")
action("s61", '(') = Shift("s20")
action("s61", '*') = Shift("s117")
action("s61", '+') = Shift("s121")
action("s61", '++') = Shift("s99")
action("s61", '-') = Shift("s124")
action("s61", '--') = Shift("s100")
action("s61", 'sizeof') = Shift("s101")
action("s61", '~') = Shift("s205")
action("s61", CONSTANT) = Shift("s206")
action("s61", IDENTIFIER) = Shift("s211")
action("s61", STRING_LITERAL) = Shift("s214")
action("s62", '!') = Shift("s102")
action("s62", '&') = Shift("s104")
action("s62", '(') = Shift("s20")
action("s62", '*') = Shift("s117")
action("s62", '+') = Shift("s121")
action("s62", '++') = Shift("s99")
action("s62", '-') = Shift("s124")
action("s62", '--') = Shift("s100")
action("s62", 'sizeof') = Shift("s101")
action("s62", '~') = Shift("s205")
action("s62", CONSTANT) = Shift("s206")
action("s62", IDENTIFIER) = Shift("s211")
action("s62", STRING_LITERAL) = Shift("s214")
action("s63", '!') = Shift("s102")
action("s63", '&') = Shift("s104")
action("s63", '(') = Shift("s20")
action("s63", '*') = Shift("s117")
action("s63", '+') = Shift("s121")
action("s63", '++') = Shift("s99")
action("s63", '-') = Shift("s124")
action("s63", '--') = Shift("s100")
action("s63", 'sizeof') = Shift("s101")
action("s63", '~') = Shift("s205")
action("s63", CONSTANT) = Shift("s206")
action("s63", IDENTIFIER) = Shift("s211")
action("s63", STRING_LITERAL) = Shift("s214")
action("s64", '!') = Shift("s102")
action("s64", '&') = Shift("s104")
action("s64", '(') = Shift("s20")
action("s64", '*') = Shift("s117")
action("s64", '+') = Shift("s121")
action("s64", '++') = Shift("s99")
action("s64", '-') = Shift("s124")
action("s64", '--') = Shift("s100")
action("s64", 'sizeof') = Shift("s101")
action("s64", '~') = Shift("s205")
action("s64", CONSTANT) = Shift("s206")
action("s64", IDENTIFIER) = Shift("s211")
action("s64", STRING_LITERAL) = Shift("s214")
action("s65", '!') = Shift("s102")
action("s65", '&') = Shift("s104")
action("s65", '(') = Shift("s20")
action("s65", '*') = Shift("s117")
action("s65", '+') = Shift("s121")
action("s65", '++') = Shift("s99")
action("s65", '-') = Shift("s124")
action("s65", '--') = Shift("s100")
action("s65", 'sizeof') = Shift("s101")
action("s65", '~') = Shift("s205")
action("s65", CONSTANT) = Shift("s206")
action("s65", IDENTIFIER) = Shift("s211")
action("s65", STRING_LITERAL) = Shift("s214")
action("s66", '!') = Shift("s102")
action("s66", '&') = Shift("s104")
action("s66", '(') = Shift("s20")
action("s66", '*') = Shift("s117")
action("s66", '+') = Shift("s121")
action("s66", '++') = Shift("s99")
action("s66", '-') = Shift("s124")
action("s66", '--') = Shift("s100")
action("s66", 'sizeof') = Shift("s101")
action("s66", '~') = Shift("s205")
action("s66", CONSTANT) = Shift("s206")
action("s66", IDENTIFIER) = Shift("s211")
action("s66", STRING_LITERAL) = Shift("s214")
action("s67", '!') = Shift("s102")
action("s67", '&') = Shift("s104")
action("s67", '(') = Shift("s20")
action("s67", '*') = Shift("s117")
action("s67", '+') = Shift("s121")
action("s67", '++') = Shift("s99")
action("s67", '-') = Shift("s124")
action("s67", '--') = Shift("s100")
action("s67", 'sizeof') = Shift("s101")
action("s67", '~') = Shift("s205")
action("s67", CONSTANT) = Shift("s206")
action("s67", IDENTIFIER) = Shift("s211")
action("s67", STRING_LITERAL) = Shift("s214")
action("s68", '=') = Shift("s35")
action("s68", 'auto') = Shift("s137")
action("s68", 'char') = Shift("s142")
action("s68", 'const') = Shift("s143")
action("s68", 'double') = Shift("s153")
action("s68", 'enum') = Shift("s154")
action("s68", 'extern') = Shift("s160")
action("s68", 'float') = Shift("s161")
action("s68", 'int') = Shift("s173")
action("s68", 'long') = Shift("s174")
action("s68", 'register') = Shift("s175")
action("s68", 'short') = Shift("s179")
action("s68", 'signed') = Shift("s180")
action("s68", 'static') = Shift("s184")
action("s68", 'struct') = Shift("s185")
action("s68", 'typedef') = Shift("s189")
action("s68", 'union') = Shift("s190")
action("s68", 'unsigned') = Shift("s191")
action("s68", 'void') = Shift("s192")
action("s68", 'volatile') = Shift("s193")
action("s68", '{') = Shift("s6")
action("s68", TYPE_NAME) = Shift("s215")
action("s68", ',') = Reduce(init_declarator -> declarator)
action("s68", ';') = Reduce(init_declarator -> declarator)
action("s69", 'auto') = Shift("s137")
action("s69", 'char') = Shift("s142")
action("s69", 'const') = Shift("s143")
action("s69", 'double') = Shift("s153")
action("s69", 'enum') = Shift("s154")
action("s69", 'extern') = Shift("s160")
action("s69", 'float') = Shift("s161")
action("s69", 'int') = Shift("s173")
action("s69", 'long') = Shift("s174")
action("s69", 'register') = Shift("s175")
action("s69", 'short') = Shift("s179")
action("s69", 'signed') = Shift("s180")
action("s69", 'static') = Shift("s184")
action("s69", 'struct') = Shift("s185")
action("s69", 'typedef') = Shift("s189")
action("s69", 'union') = Shift("s190")
action("s69", 'unsigned') = Shift("s191")
action("s69", 'void') = Shift("s192")
action("s69", 'volatile') = Shift("s193")
action("s69", '{') = Shift("s6")
action("s69", TYPE_NAME) = Shift("s215")
action("s70", 'auto') = Shift("s137")
action("s70", 'char') = Shift("s142")
action("s70", 'const') = Shift("s143")
action("s70", 'double') = Shift("s153")
action("s70", 'enum') = Shift("s154")
action("s70", 'extern') = Shift("s160")
action("s70", 'float') = Shift("s161")
action("s70", 'int') = Shift("s173")
action("s70", 'long') = Shift("s174")
action("s70", 'register') = Shift("s175")
action("s70", 'short') = Shift("s179")
action("s70", 'signed') = Shift("s180")
action("s70", 'static') = Shift("s184")
action("s70", 'struct') = Shift("s185")
action("s70", 'typedef') = Shift("s189")
action("s70", 'union') = Shift("s190")
action("s70", 'unsigned') = Shift("s191")
action("s70", 'void') = Shift("s192")
action("s70", 'volatile') = Shift("s193")
action("s70", '{') = Shift("s6")
action("s70", TYPE_NAME) = Shift("s215")
action("s71", 'auto') = Shift("s137")
action("s71", 'char') = Shift("s142")
action("s71", 'const') = Shift("s143")
action("s71", 'double') = Shift("s153")
action("s71", 'enum') = Shift("s154")
action("s71", 'extern') = Shift("s160")
action("s71", 'float') = Shift("s161")
action("s71", 'int') = Shift("s173")
action("s71", 'long') = Shift("s174")
action("s71", 'register') = Shift("s175")
action("s71", 'short') = Shift("s179")
action("s71", 'signed') = Shift("s180")
action("s71", 'static') = Shift("s184")
action("s71", 'struct') = Shift("s185")
action("s71", 'typedef') = Shift("s189")
action("s71", 'union') = Shift("s190")
action("s71", 'unsigned') = Shift("s191")
action("s71", 'void') = Shift("s192")
action("s71", 'volatile') = Shift("s193")
action("s71", '{') = Shift("s6")
action("s71", TYPE_NAME) = Shift("s215")
action("s72", '(') = Shift("s84")
action("s72", '*') = Shift("s97")
action("s72", 'auto') = Shift("s137")
action("s72", 'char') = Shift("s142")
action("s72", 'const') = Shift("s143")
action("s72", 'double') = Shift("s153")
action("s72", 'enum') = Shift("s154")
action("s72", 'extern') = Shift("s160")
action("s72", 'float') = Shift("s161")
action("s72", 'int') = Shift("s173")
action("s72", 'long') = Shift("s174")
action("s72", 'register') = Shift("s175")
action("s72", 'short') = Shift("s179")
action("s72", 'signed') = Shift("s180")
action("s72", 'static') = Shift("s184")
action("s72", 'struct') = Shift("s185")
action("s72", 'typedef') = Shift("s189")
action("s72", 'union') = Shift("s190")
action("s72", 'unsigned') = Shift("s191")
action("s72", 'void') = Shift("s192")
action("s72", 'volatile') = Shift("s193")
action("s72", IDENTIFIER) = Shift("s207")
action("s72", TYPE_NAME) = Shift("s215")
action("s72", $) = Reduce(S -> translation_unit)
action("s73", ')') = Shift("s259")
action("s73", 'auto') = Shift("s137")
action("s73", 'char') = Shift("s142")
action("s73", 'const') = Shift("s143")
action("s73", 'double') = Shift("s153")
action("s73", 'enum') = Shift("s154")
action("s73", 'extern') = Shift("s160")
action("s73", 'float') = Shift("s161")
action("s73", 'int') = Shift("s173")
action("s73", 'long') = Shift("s174")
action("s73", 'register') = Shift("s175")
action("s73", 'short') = Shift("s179")
action("s73", 'signed') = Shift("s180")
action("s73", 'static') = Shift("s184")
action("s73", 'struct') = Shift("s185")
action("s73", 'typedef') = Shift("s189")
action("s73", 'union') = Shift("s190")
action("s73", 'unsigned') = Shift("s191")
action("s73", 'void') = Shift("s192")
action("s73", 'volatile') = Shift("s193")
action("s73", IDENTIFIER) = Shift("s209")
action("s73", TYPE_NAME) = Shift("s215")
action("s74", ')') = Shift("s251")
action("s74", 'auto') = Shift("s137")
action("s74", 'char') = Shift("s142")
action("s74", 'const') = Shift("s143")
action("s74", 'double') = Shift("s153")
action("s74", 'enum') = Shift("s154")
action("s74", 'extern') = Shift("s160")
action("s74", 'float') = Shift("s161")
action("s74", 'int') = Shift("s173")
action("s74", 'long') = Shift("s174")
action("s74", 'register') = Shift("s175")
action("s74", 'short') = Shift("s179")
action("s74", 'signed') = Shift("s180")
action("s74", 'static') = Shift("s184")
action("s74", 'struct') = Shift("s185")
action("s74", 'typedef') = Shift("s189")
action("s74", 'union') = Shift("s190")
action("s74", 'unsigned') = Shift("s191")
action("s74", 'void') = Shift("s192")
action("s74", 'volatile') = Shift("s193")
action("s74", TYPE_NAME) = Shift("s215")
action("s75", '...') = Shift("s304")
action("s75", 'auto') = Shift("s137")
action("s75", 'char') = Shift("s142")
action("s75", 'const') = Shift("s143")
action("s75", 'double') = Shift("s153")
action("s75", 'enum') = Shift("s154")
action("s75", 'extern') = Shift("s160")
action("s75", 'float') = Shift("s161")
action("s75", 'int') = Shift("s173")
action("s75", 'long') = Shift("s174")
action("s75", 'register') = Shift("s175")
action("s75", 'short') = Shift("s179")
action("s75", 'signed') = Shift("s180")
action("s75", 'static') = Shift("s184")
action("s75", 'struct') = Shift("s185")
action("s75", 'typedef') = Shift("s189")
action("s75", 'union') = Shift("s190")
action("s75", 'unsigned') = Shift("s191")
action("s75", 'void') = Shift("s192")
action("s75", 'volatile') = Shift("s193")
action("s75", TYPE_NAME) = Shift("s215")
action("s76", 'auto') = Shift("s137")
action("s76", 'char') = Shift("s142")
action("s76", 'const') = Shift("s143")
action("s76", 'double') = Shift("s153")
action("s76", 'enum') = Shift("s154")
action("s76", 'extern') = Shift("s160")
action("s76", 'float') = Shift("s161")
action("s76", 'int') = Shift("s173")
action("s76", 'long') = Shift("s174")
action("s76", 'register') = Shift("s175")
action("s76", 'short') = Shift("s179")
action("s76", 'signed') = Shift("s180")
action("s76", 'static') = Shift("s184")
action("s76", 'struct') = Shift("s185")
action("s76", 'typedef') = Shift("s189")
action("s76", 'union') = Shift("s190")
action("s76", 'unsigned') = Shift("s191")
action("s76", 'void') = Shift("s192")
action("s76", 'volatile') = Shift("s193")
action("s76", TYPE_NAME) = Shift("s215")
action("s76", '(') = Reduce(declaration_specifiers -> storage_class_specifier)
action("s76", ')') = Reduce(declaration_specifiers -> storage_class_specifier)
action("s76", '*') = Reduce(declaration_specifiers -> storage_class_specifier)
action("s76", ',') = Reduce(declaration_specifiers -> storage_class_specifier)
action("s76", ';') = Reduce(declaration_specifiers -> storage_class_specifier)
action("s76", '[') = Reduce(declaration_specifiers -> storage_class_specifier)
action("s76", IDENTIFIER) = Reduce(declaration_specifiers -> storage_class_specifier)
action("s77", 'auto') = Shift("s137")
action("s77", 'char') = Shift("s142")
action("s77", 'const') = Shift("s143")
action("s77", 'double') = Shift("s153")
action("s77", 'enum') = Shift("s154")
action("s77", 'extern') = Shift("s160")
action("s77", 'float') = Shift("s161")
action("s77", 'int') = Shift("s173")
action("s77", 'long') = Shift("s174")
action("s77", 'register') = Shift("s175")
action("s77", 'short') = Shift("s179")
action("s77", 'signed') = Shift("s180")
action("s77", 'static') = Shift("s184")
action("s77", 'struct') = Shift("s185")
action("s77", 'typedef') = Shift("s189")
action("s77", 'union') = Shift("s190")
action("s77", 'unsigned') = Shift("s191")
action("s77", 'void') = Shift("s192")
action("s77", 'volatile') = Shift("s193")
action("s77", TYPE_NAME) = Shift("s215")
action("s77", '(') = Reduce(declaration_specifiers -> type_qualifier)
action("s77", ')') = Reduce(declaration_specifiers -> type_qualifier)
action("s77", '*') = Reduce(declaration_specifiers -> type_qualifier)
action("s77", ',') = Reduce(declaration_specifiers -> type_qualifier)
action("s77", ';') = Reduce(declaration_specifiers -> type_qualifier)
action("s77", '[') = Reduce(declaration_specifiers -> type_qualifier)
action("s77", IDENTIFIER) = Reduce(declaration_specifiers -> type_qualifier)
action("s78", 'auto') = Shift("s137")
action("s78", 'char') = Shift("s142")
action("s78", 'const') = Shift("s143")
action("s78", 'double') = Shift("s153")
action("s78", 'enum') = Shift("s154")
action("s78", 'extern') = Shift("s160")
action("s78", 'float') = Shift("s161")
action("s78", 'int') = Shift("s173")
action("s78", 'long') = Shift("s174")
action("s78", 'register') = Shift("s175")
action("s78", 'short') = Shift("s179")
action("s78", 'signed') = Shift("s180")
action("s78", 'static') = Shift("s184")
action("s78", 'struct') = Shift("s185")
action("s78", 'typedef') = Shift("s189")
action("s78", 'union') = Shift("s190")
action("s78", 'unsigned') = Shift("s191")
action("s78", 'void') = Shift("s192")
action("s78", 'volatile') = Shift("s193")
action("s78", TYPE_NAME) = Shift("s215")
action("s78", '(') = Reduce(declaration_specifiers -> type_specifier)
action("s78", ')') = Reduce(declaration_specifiers -> type_specifier)
action("s78", '*') = Reduce(declaration_specifiers -> type_specifier)
action("s78", ',') = Reduce(declaration_specifiers -> type_specifier)
action("s78", ';') = Reduce(declaration_specifiers -> type_specifier)
action("s78", '[') = Reduce(declaration_specifiers -> type_specifier)
action("s78", IDENTIFIER) = Reduce(declaration_specifiers -> type_specifier)
action("s79", '(') = Shift("s84")
action("s79", '*') = Shift("s97")
action("s79", ';') = Shift("s236")
action("s79", IDENTIFIER) = Shift("s207")
action("s80", '(') = Shift("s84")
action("s80", '*') = Shift("s97")
action("s80", ';') = Shift("s236")
action("s80", IDENTIFIER) = Shift("s207")
action("s81", '(') = Shift("s84")
action("s81", '*') = Shift("s97")
action("s81", IDENTIFIER) = Shift("s207")
action("s82", '(') = Shift("s84")
action("s82", '*') = Shift("s97")
action("s82", ':') = Shift("s39")
action("s82", IDENTIFIER) = Shift("s207")
action("s83", '(') = Shift("s84")
action("s83", '*') = Shift("s97")
action("s83", ':') = Shift("s39")
action("s83", IDENTIFIER) = Shift("s207")
action("s84", '(') = Shift("s84")
action("s84", '*') = Shift("s97")
action("s84", IDENTIFIER) = Shift("s207")
action("s85", '(') = Shift("s1")
action("s85", '[') = Shift("s40")
action("s85", IDENTIFIER) = Shift("s207")
action("s85", ')') = Reduce(abstract_declarator -> pointer)
action("s85", ',') = Reduce(abstract_declarator -> pointer)
action("s86", '(') = Shift("s2")
action("s86", '[') = Shift("s40")
action("s86", ')') = Reduce(abstract_declarator -> pointer)
action("s86", ',') = Reduce(abstract_declarator -> pointer)
action("s87", '(') = Shift("s84")
action("s87", IDENTIFIER) = Shift("s207")
action("s88", 'char') = Shift("s142")
action("s88", 'const') = Shift("s143")
action("s88", 'double') = Shift("s153")
action("s88", 'enum') = Shift("s154")
action("s88", 'float') = Shift("s161")
action("s88", 'int') = Shift("s173")
action("s88", 'long') = Shift("s174")
action("s88", 'short') = Shift("s179")
action("s88", 'signed') = Shift("s180")
action("s88", 'struct') = Shift("s185")
action("s88", 'union') = Shift("s190")
action("s88", 'unsigned') = Shift("s191")
action("s88", 'void') = Shift("s192")
action("s88", 'volatile') = Shift("s193")
action("s88", TYPE_NAME) = Shift("s215")
action("s89", 'char') = Shift("s142")
action("s89", 'const') = Shift("s143")
action("s89", 'double') = Shift("s153")
action("s89", 'enum') = Shift("s154")
action("s89", 'float') = Shift("s161")
action("s89", 'int') = Shift("s173")
action("s89", 'long') = Shift("s174")
action("s89", 'short') = Shift("s179")
action("s89", 'signed') = Shift("s180")
action("s89", 'struct') = Shift("s185")
action("s89", 'union') = Shift("s190")
action("s89", 'unsigned') = Shift("s191")
action("s89", 'void') = Shift("s192")
action("s89", 'volatile') = Shift("s193")
action("s89", TYPE_NAME) = Shift("s215")
action("s90", 'char') = Shift("s142")
action("s90", 'const') = Shift("s143")
action("s90", 'double') = Shift("s153")
action("s90", 'enum') = Shift("s154")
action("s90", 'float') = Shift("s161")
action("s90", 'int') = Shift("s173")
action("s90", 'long') = Shift("s174")
action("s90", 'short') = Shift("s179")
action("s90", 'signed') = Shift("s180")
action("s90", 'struct') = Shift("s185")
action("s90", 'union') = Shift("s190")
action("s90", 'unsigned') = Shift("s191")
action("s90", 'void') = Shift("s192")
action("s90", 'volatile') = Shift("s193")
action("s90", '}') = Shift("s335")
action("s90", TYPE_NAME) = Shift("s215")
action("s91", 'char') = Shift("s142")
action("s91", 'const') = Shift("s143")
action("s91", 'double') = Shift("s153")
action("s91", 'enum') = Shift("s154")
action("s91", 'float') = Shift("s161")
action("s91", 'int') = Shift("s173")
action("s91", 'long') = Shift("s174")
action("s91", 'short') = Shift("s179")
action("s91", 'signed') = Shift("s180")
action("s91", 'struct') = Shift("s185")
action("s91", 'union') = Shift("s190")
action("s91", 'unsigned') = Shift("s191")
action("s91", 'void') = Shift("s192")
action("s91", 'volatile') = Shift("s193")
action("s91", '}') = Shift("s337")
action("s91", TYPE_NAME) = Shift("s215")
action("s92", 'char') = Shift("s142")
action("s92", 'const') = Shift("s143")
action("s92", 'double') = Shift("s153")
action("s92", 'enum') = Shift("s154")
action("s92", 'float') = Shift("s161")
action("s92", 'int') = Shift("s173")
action("s92", 'long') = Shift("s174")
action("s92", 'short') = Shift("s179")
action("s92", 'signed') = Shift("s180")
action("s92", 'struct') = Shift("s185")
action("s92", 'union') = Shift("s190")
action("s92", 'unsigned') = Shift("s191")
action("s92", 'void') = Shift("s192")
action("s92", 'volatile') = Shift("s193")
action("s92", TYPE_NAME) = Shift("s215")
action("s92", '(') = Reduce(specifier_qualifier_list -> type_qualifier)
action("s92", ')') = Reduce(specifier_qualifier_list -> type_qualifier)
action("s92", '*') = Reduce(specifier_qualifier_list -> type_qualifier)
action("s92", ':') = Reduce(specifier_qualifier_list -> type_qualifier)
action("s92", '[') = Reduce(specifier_qualifier_list -> type_qualifier)
action("s92", IDENTIFIER) = Reduce(specifier_qualifier_list -> type_qualifier)
action("s93", 'char') = Shift("s142")
action("s93", 'const') = Shift("s143")
action("s93", 'double') = Shift("s153")
action("s93", 'enum') = Shift("s154")
action("s93", 'float') = Shift("s161")
action("s93", 'int') = Shift("s173")
action("s93", 'long') = Shift("s174")
action("s93", 'short') = Shift("s179")
action("s93", 'signed') = Shift("s180")
action("s93", 'struct') = Shift("s185")
action("s93", 'union') = Shift("s190")
action("s93", 'unsigned') = Shift("s191")
action("s93", 'void') = Shift("s192")
action("s93", 'volatile') = Shift("s193")
action("s93", TYPE_NAME) = Shift("s215")
action("s93", '(') = Reduce(specifier_qualifier_list -> type_specifier)
action("s93", ')') = Reduce(specifier_qualifier_list -> type_specifier)
action("s93", '*') = Reduce(specifier_qualifier_list -> type_specifier)
action("s93", ':') = Reduce(specifier_qualifier_list -> type_specifier)
action("s93", '[') = Reduce(specifier_qualifier_list -> type_specifier)
action("s93", IDENTIFIER) = Reduce(specifier_qualifier_list -> type_specifier)
action("s94", IDENTIFIER) = Shift("s208")
action("s95", IDENTIFIER) = Shift("s208")
action("s96", IDENTIFIER) = Shift("s208")
action("s97", '*') = Shift("s97")
action("s97", 'const') = Shift("s143")
action("s97", 'volatile') = Shift("s193")
action("s97", '(') = Reduce(pointer -> '*')
action("s97", ')') = Reduce(pointer -> '*')
action("s97", ',') = Reduce(pointer -> '*')
action("s97", '[') = Reduce(pointer -> '*')
action("s97", IDENTIFIER) = Reduce(pointer -> '*')
action("s98", '*') = Shift("s97")
action("s98", 'const') = Shift("s143")
action("s98", 'volatile') = Shift("s193")
action("s98", '(') = Reduce(pointer -> '*' type_qualifier_list)
action("s98", ')') = Reduce(pointer -> '*' type_qualifier_list)
action("s98", ',') = Reduce(pointer -> '*' type_qualifier_list)
action("s98", '[') = Reduce(pointer -> '*' type_qualifier_list)
action("s98", IDENTIFIER) = Reduce(pointer -> '*' type_qualifier_list)
action("s99", '!') = Shift("s102")
action("s99", '&') = Shift("s104")
action("s99", '(') = Shift("s24")
action("s99", '*') = Shift("s117")
action("s99", '+') = Shift("s121")
action("s99", '++') = Shift("s99")
action("s99", '-') = Shift("s124")
action("s99", '--') = Shift("s100")
action("s99", 'sizeof') = Shift("s101")
action("s99", '~') = Shift("s205")
action("s99", CONSTANT) = Shift("s206")
action("s99", IDENTIFIER) = Shift("s211")
action("s99", STRING_LITERAL) = Shift("s214")
action("s100", '!') = Shift("s102")
action("s100", '&') = Shift("s104")
action("s100", '(') = Shift("s24")
action("s100", '*') = Shift("s117")
action("s100", '+') = Shift("s121")
action("s100", '++') = Shift("s99")
action("s100", '-') = Shift("s124")
action("s100", '--') = Shift("s100")
action("s100", 'sizeof') = Shift("s101")
action("s100", '~') = Shift("s205")
action("s100", CONSTANT) = Shift("s206")
action("s100", IDENTIFIER) = Shift("s211")
action("s100", STRING_LITERAL) = Shift("s214")
action("s101", '!') = Shift("s102")
action("s101", '&') = Shift("s104")
action("s101", '(') = Shift("s21")
action("s101", '*') = Shift("s117")
action("s101", '+') = Shift("s121")
action("s101", '++') = Shift("s99")
action("s101", '-') = Shift("s124")
action("s101", '--') = Shift("s100")
action("s101", 'sizeof') = Shift("s101")
action("s101", '~') = Shift("s205")
action("s101", CONSTANT) = Shift("s206")
action("s101", IDENTIFIER) = Shift("s211")
action("s101", STRING_LITERAL) = Shift("s214")
action("s102", '!') = Reduce(unary_operator -> '!')
action("s102", '&') = Reduce(unary_operator -> '!')
action("s102", '(') = Reduce(unary_operator -> '!')
action("s102", '*') = Reduce(unary_operator -> '!')
action("s102", '+') = Reduce(unary_operator -> '!')
action("s102", '++') = Reduce(unary_operator -> '!')
action("s102", '-') = Reduce(unary_operator -> '!')
action("s102", '--') = Reduce(unary_operator -> '!')
action("s102", 'sizeof') = Reduce(unary_operator -> '!')
action("s102", '~') = Reduce(unary_operator -> '!')
action("s102", CONSTANT) = Reduce(unary_operator -> '!')
action("s102", IDENTIFIER) = Reduce(unary_operator -> '!')
action("s102", STRING_LITERAL) = Reduce(unary_operator -> '!')
action("s103", '!') = Reduce(assignment_operator -> '%=')
action("s103", '&') = Reduce(assignment_operator -> '%=')
action("s103", '(') = Reduce(assignment_operator -> '%=')
action("s103", '*') = Reduce(assignment_operator -> '%=')
action("s103", '+') = Reduce(assignment_operator -> '%=')
action("s103", '++') = Reduce(assignment_operator -> '%=')
action("s103", '-') = Reduce(assignment_operator -> '%=')
action("s103", '--') = Reduce(assignment_operator -> '%=')
action("s103", 'sizeof') = Reduce(assignment_operator -> '%=')
action("s103", '~') = Reduce(assignment_operator -> '%=')
action("s103", CONSTANT) = Reduce(assignment_operator -> '%=')
action("s103", IDENTIFIER) = Reduce(assignment_operator -> '%=')
action("s103", STRING_LITERAL) = Reduce(assignment_operator -> '%=')
action("s104", '!') = Reduce(unary_operator -> '&')
action("s104", '&') = Reduce(unary_operator -> '&')
action("s104", '(') = Reduce(unary_operator -> '&')
action("s104", '*') = Reduce(unary_operator -> '&')
action("s104", '+') = Reduce(unary_operator -> '&')
action("s104", '++') = Reduce(unary_operator -> '&')
action("s104", '-') = Reduce(unary_operator -> '&')
action("s104", '--') = Reduce(unary_operator -> '&')
action("s104", 'sizeof') = Reduce(unary_operator -> '&')
action("s104", '~') = Reduce(unary_operator -> '&')
action("s104", CONSTANT) = Reduce(unary_operator -> '&')
action("s104", IDENTIFIER) = Reduce(unary_operator -> '&')
action("s104", STRING_LITERAL) = Reduce(unary_operator -> '&')
action("s105", '!') = Reduce(assignment_operator -> '&=')
action("s105", '&') = Reduce(assignment_operator -> '&=')
action("s105", '(') = Reduce(assignment_operator -> '&=')
action("s105", '*') = Reduce(assignment_operator -> '&=')
action("s105", '+') = Reduce(assignment_operator -> '&=')
action("s105", '++') = Reduce(assignment_operator -> '&=')
action("s105", '-') = Reduce(assignment_operator -> '&=')
action("s105", '--') = Reduce(assignment_operator -> '&=')
action("s105", 'sizeof') = Reduce(assignment_operator -> '&=')
action("s105", '~') = Reduce(assignment_operator -> '&=')
action("s105", CONSTANT) = Reduce(assignment_operator -> '&=')
action("s105", IDENTIFIER) = Reduce(assignment_operator -> '&=')
action("s105", STRING_LITERAL) = Reduce(assignment_operator -> '&=')
action("s106", '(') = Reduce(direct_abstract_declarator -> '(' ')')
action("s106", ')') = Reduce(direct_abstract_declarator -> '(' ')')
action("s106", ',') = Reduce(direct_abstract_declarator -> '(' ')')
action("s106", '[') = Reduce(direct_abstract_declarator -> '(' ')')
action("s107", ')') = Shift("s108")
action("s108", '(') = Reduce(direct_abstract_declarator -> '(' abstract_declarator ')')
action("s108", ')') = Reduce(direct_abstract_declarator -> '(' abstract_declarator ')')
action("s108", ',') = Reduce(direct_abstract_declarator -> '(' abstract_declarator ')')
action("s108", '[') = Reduce(direct_abstract_declarator -> '(' abstract_declarator ')')
action("s109", ')') = Shift("s110")
action("s110", '(') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", ')') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", ',') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", ':') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", ';') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", '=') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", '[') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'auto') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'char') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'const') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'double') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'enum') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'extern') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'float') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'int') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'long') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'register') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'short') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'signed') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'static') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'struct') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'typedef') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'union') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'unsigned') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'void') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", 'volatile') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", '{') = Reduce(direct_declarator -> '(' declarator ')')
action("s110", TYPE_NAME) = Reduce(direct_declarator -> '(' declarator ')')
action("s111", ')') = Shift("s112")
action("s111", ',') = Shift("s37")
action("s112", '!=') = Reduce(primary_expression -> '(' expression ')')
action("s112", '%') = Reduce(primary_expression -> '(' expression ')')
action("s112", '%=') = Reduce(primary_expression -> '(' expression ')')
action("s112", '&&') = Reduce(primary_expression -> '(' expression ')')
action("s112", '&') = Reduce(primary_expression -> '(' expression ')')
action("s112", '&=') = Reduce(primary_expression -> '(' expression ')')
action("s112", '(') = Reduce(primary_expression -> '(' expression ')')
action("s112", ')') = Reduce(primary_expression -> '(' expression ')')
action("s112", '*') = Reduce(primary_expression -> '(' expression ')')
action("s112", '*=') = Reduce(primary_expression -> '(' expression ')')
action("s112", '+') = Reduce(primary_expression -> '(' expression ')')
action("s112", '++') = Reduce(primary_expression -> '(' expression ')')
action("s112", '+=') = Reduce(primary_expression -> '(' expression ')')
action("s112", ',') = Reduce(primary_expression -> '(' expression ')')
action("s112", '-') = Reduce(primary_expression -> '(' expression ')')
action("s112", '--') = Reduce(primary_expression -> '(' expression ')')
action("s112", '-=') = Reduce(primary_expression -> '(' expression ')')
action("s112", '->') = Reduce(primary_expression -> '(' expression ')')
action("s112", '.') = Reduce(primary_expression -> '(' expression ')')
action("s112", '/') = Reduce(primary_expression -> '(' expression ')')
action("s112", '/=') = Reduce(primary_expression -> '(' expression ')')
action("s112", ':') = Reduce(primary_expression -> '(' expression ')')
action("s112", ';') = Reduce(primary_expression -> '(' expression ')')
action("s112", '<') = Reduce(primary_expression -> '(' expression ')')
action("s112", '<<') = Reduce(primary_expression -> '(' expression ')')
action("s112", '<<=') = Reduce(primary_expression -> '(' expression ')')
action("s112", '<=') = Reduce(primary_expression -> '(' expression ')')
action("s112", '=') = Reduce(primary_expression -> '(' expression ')')
action("s112", '==') = Reduce(primary_expression -> '(' expression ')')
action("s112", '>') = Reduce(primary_expression -> '(' expression ')')
action("s112", '>=') = Reduce(primary_expression -> '(' expression ')')
action("s112", '>>') = Reduce(primary_expression -> '(' expression ')')
action("s112", '>>=') = Reduce(primary_expression -> '(' expression ')')
action("s112", '?') = Reduce(primary_expression -> '(' expression ')')
action("s112", '[') = Reduce(primary_expression -> '(' expression ')')
action("s112", ']') = Reduce(primary_expression -> '(' expression ')')
action("s112", '^') = Reduce(primary_expression -> '(' expression ')')
action("s112", '^=') = Reduce(primary_expression -> '(' expression ')')
action("s112", '|') = Reduce(primary_expression -> '(' expression ')')
action("s112", '|=') = Reduce(primary_expression -> '(' expression ')')
action("s112", '||') = Reduce(primary_expression -> '(' expression ')')
action("s112", '}') = Reduce(primary_expression -> '(' expression ')')
action("s113", ')') = Shift("s114")
action("s114", '(') = Reduce(direct_abstract_declarator -> '(' parameter_type_list ')')
action("s114", ')') = Reduce(direct_abstract_declarator -> '(' parameter_type_list ')')
action("s114", ',') = Reduce(direct_abstract_declarator -> '(' parameter_type_list ')')
action("s114", '[') = Reduce(direct_abstract_declarator -> '(' parameter_type_list ')')
action("s115", ')') = Shift("s63")
action("s116", '!=') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '%') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '%=') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '&&') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '&') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '&=') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", ')') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '*') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '*=') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '+') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '+=') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", ',') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '-') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '-=') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '/') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '/=') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", ':') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", ';') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '<') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '<<') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '<<=') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '<=') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '=') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '==') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '>') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '>=') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '>>') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '>>=') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '?') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", ']') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '^') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '^=') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '|') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '|=') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '||') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s116", '}') = Reduce(cast_expression -> '(' type_name ')' cast_expression)
action("s117", '!') = Reduce(unary_operator -> '*')
action("s117", '&') = Reduce(unary_operator -> '*')
action("s117", '(') = Reduce(unary_operator -> '*')
action("s117", '*') = Reduce(unary_operator -> '*')
action("s117", '+') = Reduce(unary_operator -> '*')
action("s117", '++') = Reduce(unary_operator -> '*')
action("s117", '-') = Reduce(unary_operator -> '*')
action("s117", '--') = Reduce(unary_operator -> '*')
action("s117", 'sizeof') = Reduce(unary_operator -> '*')
action("s117", '~') = Reduce(unary_operator -> '*')
action("s117", CONSTANT) = Reduce(unary_operator -> '*')
action("s117", IDENTIFIER) = Reduce(unary_operator -> '*')
action("s117", STRING_LITERAL) = Reduce(unary_operator -> '*')
action("s118", '(') = Reduce(pointer -> '*' pointer)
action("s118", ')') = Reduce(pointer -> '*' pointer)
action("s118", ',') = Reduce(pointer -> '*' pointer)
action("s118", '[') = Reduce(pointer -> '*' pointer)
action("s118", IDENTIFIER) = Reduce(pointer -> '*' pointer)
action("s119", '(') = Reduce(pointer -> '*' type_qualifier_list pointer)
action("s119", ')') = Reduce(pointer -> '*' type_qualifier_list pointer)
action("s119", ',') = Reduce(pointer -> '*' type_qualifier_list pointer)
action("s119", '[') = Reduce(pointer -> '*' type_qualifier_list pointer)
action("s119", IDENTIFIER) = Reduce(pointer -> '*' type_qualifier_list pointer)
action("s120", '!') = Reduce(assignment_operator -> '*=')
action("s120", '&') = Reduce(assignment_operator -> '*=')
action("s120", '(') = Reduce(assignment_operator -> '*=')
action("s120", '*') = Reduce(assignment_operator -> '*=')
action("s120", '+') = Reduce(assignment_operator -> '*=')
action("s120", '++') = Reduce(assignment_operator -> '*=')
action("s120", '-') = Reduce(assignment_operator -> '*=')
action("s120", '--') = Reduce(assignment_operator -> '*=')
action("s120", 'sizeof') = Reduce(assignment_operator -> '*=')
action("s120", '~') = Reduce(assignment_operator -> '*=')
action("s120", CONSTANT) = Reduce(assignment_operator -> '*=')
action("s120", IDENTIFIER) = Reduce(assignment_operator -> '*=')
action("s120", STRING_LITERAL) = Reduce(assignment_operator -> '*=')
action("s121", '!') = Reduce(unary_operator -> '+')
action("s121", '&') = Reduce(unary_operator -> '+')
action("s121", '(') = Reduce(unary_operator -> '+')
action("s121", '*') = Reduce(unary_operator -> '+')
action("s121", '+') = Reduce(unary_operator -> '+')
action("s121", '++') = Reduce(unary_operator -> '+')
action("s121", '-') = Reduce(unary_operator -> '+')
action("s121", '--') = Reduce(unary_operator -> '+')
action("s121", 'sizeof') = Reduce(unary_operator -> '+')
action("s121", '~') = Reduce(unary_operator -> '+')
action("s121", CONSTANT) = Reduce(unary_operator -> '+')
action("s121", IDENTIFIER) = Reduce(unary_operator -> '+')
action("s121", STRING_LITERAL) = Reduce(unary_operator -> '+')
action("s122", '!=') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '%') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '%=') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '&&') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '&') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '&=') = Reduce(unary_expression -> '++' unary_expression)
action("s122", ')') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '*') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '*=') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '+') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '+=') = Reduce(unary_expression -> '++' unary_expression)
action("s122", ',') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '-') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '-=') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '/') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '/=') = Reduce(unary_expression -> '++' unary_expression)
action("s122", ':') = Reduce(unary_expression -> '++' unary_expression)
action("s122", ';') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '<') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '<<') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '<<=') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '<=') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '=') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '==') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '>') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '>=') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '>>') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '>>=') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '?') = Reduce(unary_expression -> '++' unary_expression)
action("s122", ']') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '^') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '^=') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '|') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '|=') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '||') = Reduce(unary_expression -> '++' unary_expression)
action("s122", '}') = Reduce(unary_expression -> '++' unary_expression)
action("s123", '!') = Reduce(assignment_operator -> '+=')
action("s123", '&') = Reduce(assignment_operator -> '+=')
action("s123", '(') = Reduce(assignment_operator -> '+=')
action("s123", '*') = Reduce(assignment_operator -> '+=')
action("s123", '+') = Reduce(assignment_operator -> '+=')
action("s123", '++') = Reduce(assignment_operator -> '+=')
action("s123", '-') = Reduce(assignment_operator -> '+=')
action("s123", '--') = Reduce(assignment_operator -> '+=')
action("s123", 'sizeof') = Reduce(assignment_operator -> '+=')
action("s123", '~') = Reduce(assignment_operator -> '+=')
action("s123", CONSTANT) = Reduce(assignment_operator -> '+=')
action("s123", IDENTIFIER) = Reduce(assignment_operator -> '+=')
action("s123", STRING_LITERAL) = Reduce(assignment_operator -> '+=')
action("s124", '!') = Reduce(unary_operator -> '-')
action("s124", '&') = Reduce(unary_operator -> '-')
action("s124", '(') = Reduce(unary_operator -> '-')
action("s124", '*') = Reduce(unary_operator -> '-')
action("s124", '+') = Reduce(unary_operator -> '-')
action("s124", '++') = Reduce(unary_operator -> '-')
action("s124", '-') = Reduce(unary_operator -> '-')
action("s124", '--') = Reduce(unary_operator -> '-')
action("s124", 'sizeof') = Reduce(unary_operator -> '-')
action("s124", '~') = Reduce(unary_operator -> '-')
action("s124", CONSTANT) = Reduce(unary_operator -> '-')
action("s124", IDENTIFIER) = Reduce(unary_operator -> '-')
action("s124", STRING_LITERAL) = Reduce(unary_operator -> '-')
action("s125", '!=') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '%') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '%=') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '&&') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '&') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '&=') = Reduce(unary_expression -> '--' unary_expression)
action("s125", ')') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '*') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '*=') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '+') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '+=') = Reduce(unary_expression -> '--' unary_expression)
action("s125", ',') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '-') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '-=') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '/') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '/=') = Reduce(unary_expression -> '--' unary_expression)
action("s125", ':') = Reduce(unary_expression -> '--' unary_expression)
action("s125", ';') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '<') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '<<') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '<<=') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '<=') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '=') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '==') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '>') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '>=') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '>>') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '>>=') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '?') = Reduce(unary_expression -> '--' unary_expression)
action("s125", ']') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '^') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '^=') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '|') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '|=') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '||') = Reduce(unary_expression -> '--' unary_expression)
action("s125", '}') = Reduce(unary_expression -> '--' unary_expression)
action("s126", '!') = Reduce(assignment_operator -> '-=')
action("s126", '&') = Reduce(assignment_operator -> '-=')
action("s126", '(') = Reduce(assignment_operator -> '-=')
action("s126", '*') = Reduce(assignment_operator -> '-=')
action("s126", '+') = Reduce(assignment_operator -> '-=')
action("s126", '++') = Reduce(assignment_operator -> '-=')
action("s126", '-') = Reduce(assignment_operator -> '-=')
action("s126", '--') = Reduce(assignment_operator -> '-=')
action("s126", 'sizeof') = Reduce(assignment_operator -> '-=')
action("s126", '~') = Reduce(assignment_operator -> '-=')
action("s126", CONSTANT) = Reduce(assignment_operator -> '-=')
action("s126", IDENTIFIER) = Reduce(assignment_operator -> '-=')
action("s126", STRING_LITERAL) = Reduce(assignment_operator -> '-=')
action("s127", '!') = Reduce(assignment_operator -> '/=')
action("s127", '&') = Reduce(assignment_operator -> '/=')
action("s127", '(') = Reduce(assignment_operator -> '/=')
action("s127", '*') = Reduce(assignment_operator -> '/=')
action("s127", '+') = Reduce(assignment_operator -> '/=')
action("s127", '++') = Reduce(assignment_operator -> '/=')
action("s127", '-') = Reduce(assignment_operator -> '/=')
action("s127", '--') = Reduce(assignment_operator -> '/=')
action("s127", 'sizeof') = Reduce(assignment_operator -> '/=')
action("s127", '~') = Reduce(assignment_operator -> '/=')
action("s127", CONSTANT) = Reduce(assignment_operator -> '/=')
action("s127", IDENTIFIER) = Reduce(assignment_operator -> '/=')
action("s127", STRING_LITERAL) = Reduce(assignment_operator -> '/=')
action("s128", ',') = Reduce(struct_declarator -> ':' constant_expression)
action("s128", ';') = Reduce(struct_declarator -> ':' constant_expression)
action("s129", '!') = Reduce(expression_statement -> ';')
action("s129", '&') = Reduce(expression_statement -> ';')
action("s129", '(') = Reduce(expression_statement -> ';')
action("s129", ')') = Reduce(expression_statement -> ';')
action("s129", '*') = Reduce(expression_statement -> ';')
action("s129", '+') = Reduce(expression_statement -> ';')
action("s129", '++') = Reduce(expression_statement -> ';')
action("s129", '-') = Reduce(expression_statement -> ';')
action("s129", '--') = Reduce(expression_statement -> ';')
action("s129", ';') = Reduce(expression_statement -> ';')
action("s129", 'break') = Reduce(expression_statement -> ';')
action("s129", 'case') = Reduce(expression_statement -> ';')
action("s129", 'continue') = Reduce(expression_statement -> ';')
action("s129", 'default') = Reduce(expression_statement -> ';')
action("s129", 'do') = Reduce(expression_statement -> ';')
action("s129", 'else') = Reduce(expression_statement -> ';')
action("s129", 'for') = Reduce(expression_statement -> ';')
action("s129", 'goto') = Reduce(expression_statement -> ';')
action("s129", 'if') = Reduce(expression_statement -> ';')
action("s129", 'return') = Reduce(expression_statement -> ';')
action("s129", 'sizeof') = Reduce(expression_statement -> ';')
action("s129", 'switch') = Reduce(expression_statement -> ';')
action("s129", 'while') = Reduce(expression_statement -> ';')
action("s129", '{') = Reduce(expression_statement -> ';')
action("s129", '}') = Reduce(expression_statement -> ';')
action("s129", '~') = Reduce(expression_statement -> ';')
action("s129", CONSTANT) = Reduce(expression_statement -> ';')
action("s129", IDENTIFIER) = Reduce(expression_statement -> ';')
action("s129", STRING_LITERAL) = Reduce(expression_statement -> ';')
action("s130", '!') = Reduce(assignment_operator -> '<<=')
action("s130", '&') = Reduce(assignment_operator -> '<<=')
action("s130", '(') = Reduce(assignment_operator -> '<<=')
action("s130", '*') = Reduce(assignment_operator -> '<<=')
action("s130", '+') = Reduce(assignment_operator -> '<<=')
action("s130", '++') = Reduce(assignment_operator -> '<<=')
action("s130", '-') = Reduce(assignment_operator -> '<<=')
action("s130", '--') = Reduce(assignment_operator -> '<<=')
action("s130", 'sizeof') = Reduce(assignment_operator -> '<<=')
action("s130", '~') = Reduce(assignment_operator -> '<<=')
action("s130", CONSTANT) = Reduce(assignment_operator -> '<<=')
action("s130", IDENTIFIER) = Reduce(assignment_operator -> '<<=')
action("s130", STRING_LITERAL) = Reduce(assignment_operator -> '<<=')
action("s131", '!') = Reduce(assignment_operator -> '=')
action("s131", '&') = Reduce(assignment_operator -> '=')
action("s131", '(') = Reduce(assignment_operator -> '=')
action("s131", '*') = Reduce(assignment_operator -> '=')
action("s131", '+') = Reduce(assignment_operator -> '=')
action("s131", '++') = Reduce(assignment_operator -> '=')
action("s131", '-') = Reduce(assignment_operator -> '=')
action("s131", '--') = Reduce(assignment_operator -> '=')
action("s131", 'sizeof') = Reduce(assignment_operator -> '=')
action("s131", '~') = Reduce(assignment_operator -> '=')
action("s131", CONSTANT) = Reduce(assignment_operator -> '=')
action("s131", IDENTIFIER) = Reduce(assignment_operator -> '=')
action("s131", STRING_LITERAL) = Reduce(assignment_operator -> '=')
action("s132", '!') = Reduce(assignment_operator -> '>>=')
action("s132", '&') = Reduce(assignment_operator -> '>>=')
action("s132", '(') = Reduce(assignment_operator -> '>>=')
action("s132", '*') = Reduce(assignment_operator -> '>>=')
action("s132", '+') = Reduce(assignment_operator -> '>>=')
action("s132", '++') = Reduce(assignment_operator -> '>>=')
action("s132", '-') = Reduce(assignment_operator -> '>>=')
action("s132", '--') = Reduce(assignment_operator -> '>>=')
action("s132", 'sizeof') = Reduce(assignment_operator -> '>>=')
action("s132", '~') = Reduce(assignment_operator -> '>>=')
action("s132", CONSTANT) = Reduce(assignment_operator -> '>>=')
action("s132", IDENTIFIER) = Reduce(assignment_operator -> '>>=')
action("s132", STRING_LITERAL) = Reduce(assignment_operator -> '>>=')
action("s133", '(') = Reduce(direct_abstract_declarator -> '[' ']')
action("s133", ')') = Reduce(direct_abstract_declarator -> '[' ']')
action("s133", ',') = Reduce(direct_abstract_declarator -> '[' ']')
action("s133", '[') = Reduce(direct_abstract_declarator -> '[' ']')
action("s134", ']') = Shift("s135")
action("s135", '(') = Reduce(direct_abstract_declarator -> '[' constant_expression ']')
action("s135", ')') = Reduce(direct_abstract_declarator -> '[' constant_expression ']')
action("s135", ',') = Reduce(direct_abstract_declarator -> '[' constant_expression ']')
action("s135", '[') = Reduce(direct_abstract_declarator -> '[' constant_expression ']')
action("s136", '!') = Reduce(assignment_operator -> '^=')
action("s136", '&') = Reduce(assignment_operator -> '^=')
action("s136", '(') = Reduce(assignment_operator -> '^=')
action("s136", '*') = Reduce(assignment_operator -> '^=')
action("s136", '+') = Reduce(assignment_operator -> '^=')
action("s136", '++') = Reduce(assignment_operator -> '^=')
action("s136", '-') = Reduce(assignment_operator -> '^=')
action("s136", '--') = Reduce(assignment_operator -> '^=')
action("s136", 'sizeof') = Reduce(assignment_operator -> '^=')
action("s136", '~') = Reduce(assignment_operator -> '^=')
action("s136", CONSTANT) = Reduce(assignment_operator -> '^=')
action("s136", IDENTIFIER) = Reduce(assignment_operator -> '^=')
action("s136", STRING_LITERAL) = Reduce(assignment_operator -> '^=')
action("s137", '(') = Reduce(storage_class_specifier -> 'auto')
action("s137", ')') = Reduce(storage_class_specifier -> 'auto')
action("s137", '*') = Reduce(storage_class_specifier -> 'auto')
action("s137", ',') = Reduce(storage_class_specifier -> 'auto')
action("s137", ';') = Reduce(storage_class_specifier -> 'auto')
action("s137", '[') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'auto') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'char') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'const') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'double') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'enum') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'extern') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'float') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'int') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'long') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'register') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'short') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'signed') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'static') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'struct') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'typedef') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'union') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'unsigned') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'void') = Reduce(storage_class_specifier -> 'auto')
action("s137", 'volatile') = Reduce(storage_class_specifier -> 'auto')
action("s137", IDENTIFIER) = Reduce(storage_class_specifier -> 'auto')
action("s137", TYPE_NAME) = Reduce(storage_class_specifier -> 'auto')
action("s138", ';') = Shift("s139")
action("s139", '!') = Reduce(jump_statement -> 'break' ';')
action("s139", '&') = Reduce(jump_statement -> 'break' ';')
action("s139", '(') = Reduce(jump_statement -> 'break' ';')
action("s139", '*') = Reduce(jump_statement -> 'break' ';')
action("s139", '+') = Reduce(jump_statement -> 'break' ';')
action("s139", '++') = Reduce(jump_statement -> 'break' ';')
action("s139", '-') = Reduce(jump_statement -> 'break' ';')
action("s139", '--') = Reduce(jump_statement -> 'break' ';')
action("s139", ';') = Reduce(jump_statement -> 'break' ';')
action("s139", 'break') = Reduce(jump_statement -> 'break' ';')
action("s139", 'case') = Reduce(jump_statement -> 'break' ';')
action("s139", 'continue') = Reduce(jump_statement -> 'break' ';')
action("s139", 'default') = Reduce(jump_statement -> 'break' ';')
action("s139", 'do') = Reduce(jump_statement -> 'break' ';')
action("s139", 'else') = Reduce(jump_statement -> 'break' ';')
action("s139", 'for') = Reduce(jump_statement -> 'break' ';')
action("s139", 'goto') = Reduce(jump_statement -> 'break' ';')
action("s139", 'if') = Reduce(jump_statement -> 'break' ';')
action("s139", 'return') = Reduce(jump_statement -> 'break' ';')
action("s139", 'sizeof') = Reduce(jump_statement -> 'break' ';')
action("s139", 'switch') = Reduce(jump_statement -> 'break' ';')
action("s139", 'while') = Reduce(jump_statement -> 'break' ';')
action("s139", '{') = Reduce(jump_statement -> 'break' ';')
action("s139", '}') = Reduce(jump_statement -> 'break' ';')
action("s139", '~') = Reduce(jump_statement -> 'break' ';')
action("s139", CONSTANT) = Reduce(jump_statement -> 'break' ';')
action("s139", IDENTIFIER) = Reduce(jump_statement -> 'break' ';')
action("s139", STRING_LITERAL) = Reduce(jump_statement -> 'break' ';')
action("s140", ':') = Shift("s8")
action("s141", '!') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", '&') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", '(') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", '*') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", '+') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", '++') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", '-') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", '--') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", ';') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", 'break') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", 'case') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", 'continue') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", 'default') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", 'do') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", 'else') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", 'for') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", 'goto') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", 'if') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", 'return') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", 'sizeof') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", 'switch') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", 'while') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", '{') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", '}') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", '~') = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", CONSTANT) = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", IDENTIFIER) = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s141", STRING_LITERAL) = Reduce(labeled_statement -> 'case' constant_expression ':' statement)
action("s142", '(') = Reduce(type_specifier -> 'char')
action("s142", ')') = Reduce(type_specifier -> 'char')
action("s142", '*') = Reduce(type_specifier -> 'char')
action("s142", ',') = Reduce(type_specifier -> 'char')
action("s142", ':') = Reduce(type_specifier -> 'char')
action("s142", ';') = Reduce(type_specifier -> 'char')
action("s142", '[') = Reduce(type_specifier -> 'char')
action("s142", 'auto') = Reduce(type_specifier -> 'char')
action("s142", 'char') = Reduce(type_specifier -> 'char')
action("s142", 'const') = Reduce(type_specifier -> 'char')
action("s142", 'double') = Reduce(type_specifier -> 'char')
action("s142", 'enum') = Reduce(type_specifier -> 'char')
action("s142", 'extern') = Reduce(type_specifier -> 'char')
action("s142", 'float') = Reduce(type_specifier -> 'char')
action("s142", 'int') = Reduce(type_specifier -> 'char')
action("s142", 'long') = Reduce(type_specifier -> 'char')
action("s142", 'register') = Reduce(type_specifier -> 'char')
action("s142", 'short') = Reduce(type_specifier -> 'char')
action("s142", 'signed') = Reduce(type_specifier -> 'char')
action("s142", 'static') = Reduce(type_specifier -> 'char')
action("s142", 'struct') = Reduce(type_specifier -> 'char')
action("s142", 'typedef') = Reduce(type_specifier -> 'char')
action("s142", 'union') = Reduce(type_specifier -> 'char')
action("s142", 'unsigned') = Reduce(type_specifier -> 'char')
action("s142", 'void') = Reduce(type_specifier -> 'char')
action("s142", 'volatile') = Reduce(type_specifier -> 'char')
action("s142", IDENTIFIER) = Reduce(type_specifier -> 'char')
action("s142", TYPE_NAME) = Reduce(type_specifier -> 'char')
action("s143", '(') = Reduce(type_qualifier -> 'const')
action("s143", ')') = Reduce(type_qualifier -> 'const')
action("s143", '*') = Reduce(type_qualifier -> 'const')
action("s143", ',') = Reduce(type_qualifier -> 'const')
action("s143", ':') = Reduce(type_qualifier -> 'const')
action("s143", ';') = Reduce(type_qualifier -> 'const')
action("s143", '[') = Reduce(type_qualifier -> 'const')
action("s143", 'auto') = Reduce(type_qualifier -> 'const')
action("s143", 'char') = Reduce(type_qualifier -> 'const')
action("s143", 'const') = Reduce(type_qualifier -> 'const')
action("s143", 'double') = Reduce(type_qualifier -> 'const')
action("s143", 'enum') = Reduce(type_qualifier -> 'const')
action("s143", 'extern') = Reduce(type_qualifier -> 'const')
action("s143", 'float') = Reduce(type_qualifier -> 'const')
action("s143", 'int') = Reduce(type_qualifier -> 'const')
action("s143", 'long') = Reduce(type_qualifier -> 'const')
action("s143", 'register') = Reduce(type_qualifier -> 'const')
action("s143", 'short') = Reduce(type_qualifier -> 'const')
action("s143", 'signed') = Reduce(type_qualifier -> 'const')
action("s143", 'static') = Reduce(type_qualifier -> 'const')
action("s143", 'struct') = Reduce(type_qualifier -> 'const')
action("s143", 'typedef') = Reduce(type_qualifier -> 'const')
action("s143", 'union') = Reduce(type_qualifier -> 'const')
action("s143", 'unsigned') = Reduce(type_qualifier -> 'const')
action("s143", 'void') = Reduce(type_qualifier -> 'const')
action("s143", 'volatile') = Reduce(type_qualifier -> 'const')
action("s143", IDENTIFIER) = Reduce(type_qualifier -> 'const')
action("s143", TYPE_NAME) = Reduce(type_qualifier -> 'const')
action("s144", ';') = Shift("s145")
action("s145", '!') = Reduce(jump_statement -> 'continue' ';')
action("s145", '&') = Reduce(jump_statement -> 'continue' ';')
action("s145", '(') = Reduce(jump_statement -> 'continue' ';')
action("s145", '*') = Reduce(jump_statement -> 'continue' ';')
action("s145", '+') = Reduce(jump_statement -> 'continue' ';')
action("s145", '++') = Reduce(jump_statement -> 'continue' ';')
action("s145", '-') = Reduce(jump_statement -> 'continue' ';')
action("s145", '--') = Reduce(jump_statement -> 'continue' ';')
action("s145", ';') = Reduce(jump_statement -> 'continue' ';')
action("s145", 'break') = Reduce(jump_statement -> 'continue' ';')
action("s145", 'case') = Reduce(jump_statement -> 'continue' ';')
action("s145", 'continue') = Reduce(jump_statement -> 'continue' ';')
action("s145", 'default') = Reduce(jump_statement -> 'continue' ';')
action("s145", 'do') = Reduce(jump_statement -> 'continue' ';')
action("s145", 'else') = Reduce(jump_statement -> 'continue' ';')
action("s145", 'for') = Reduce(jump_statement -> 'continue' ';')
action("s145", 'goto') = Reduce(jump_statement -> 'continue' ';')
action("s145", 'if') = Reduce(jump_statement -> 'continue' ';')
action("s145", 'return') = Reduce(jump_statement -> 'continue' ';')
action("s145", 'sizeof') = Reduce(jump_statement -> 'continue' ';')
action("s145", 'switch') = Reduce(jump_statement -> 'continue' ';')
action("s145", 'while') = Reduce(jump_statement -> 'continue' ';')
action("s145", '{') = Reduce(jump_statement -> 'continue' ';')
action("s145", '}') = Reduce(jump_statement -> 'continue' ';')
action("s145", '~') = Reduce(jump_statement -> 'continue' ';')
action("s145", CONSTANT) = Reduce(jump_statement -> 'continue' ';')
action("s145", IDENTIFIER) = Reduce(jump_statement -> 'continue' ';')
action("s145", STRING_LITERAL) = Reduce(jump_statement -> 'continue' ';')
action("s146", ':') = Shift("s9")
action("s147", '!') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", '&') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", '(') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", '*') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", '+') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", '++') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", '-') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", '--') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", ';') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", 'break') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", 'case') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", 'continue') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", 'default') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", 'do') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", 'else') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", 'for') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", 'goto') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", 'if') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", 'return') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", 'sizeof') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", 'switch') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", 'while') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", '{') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", '}') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", '~') = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", CONSTANT) = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", IDENTIFIER) = Reduce(labeled_statement -> 'default' ':' statement)
action("s147", STRING_LITERAL) = Reduce(labeled_statement -> 'default' ':' statement)
action("s148", 'while') = Shift("s149")
action("s149", '(') = Shift("s25")
action("s150", ')') = Shift("s151")
action("s150", ',') = Shift("s37")
action("s151", ';') = Shift("s152")
action("s152", '!') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", '&') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", '(') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", '*') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", '+') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", '++') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", '-') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", '--') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", ';') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", 'break') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", 'case') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", 'continue') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", 'default') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", 'do') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", 'else') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", 'for') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", 'goto') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", 'if') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", 'return') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", 'sizeof') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", 'switch') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", 'while') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", '{') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", '}') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", '~') = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", CONSTANT) = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", IDENTIFIER) = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s152", STRING_LITERAL) = Reduce(iteration_statement -> 'do' statement 'while' '(' expression ')' ';')
action("s153", '(') = Reduce(type_specifier -> 'double')
action("s153", ')') = Reduce(type_specifier -> 'double')
action("s153", '*') = Reduce(type_specifier -> 'double')
action("s153", ',') = Reduce(type_specifier -> 'double')
action("s153", ':') = Reduce(type_specifier -> 'double')
action("s153", ';') = Reduce(type_specifier -> 'double')
action("s153", '[') = Reduce(type_specifier -> 'double')
action("s153", 'auto') = Reduce(type_specifier -> 'double')
action("s153", 'char') = Reduce(type_specifier -> 'double')
action("s153", 'const') = Reduce(type_specifier -> 'double')
action("s153", 'double') = Reduce(type_specifier -> 'double')
action("s153", 'enum') = Reduce(type_specifier -> 'double')
action("s153", 'extern') = Reduce(type_specifier -> 'double')
action("s153", 'float') = Reduce(type_specifier -> 'double')
action("s153", 'int') = Reduce(type_specifier -> 'double')
action("s153", 'long') = Reduce(type_specifier -> 'double')
action("s153", 'register') = Reduce(type_specifier -> 'double')
action("s153", 'short') = Reduce(type_specifier -> 'double')
action("s153", 'signed') = Reduce(type_specifier -> 'double')
action("s153", 'static') = Reduce(type_specifier -> 'double')
action("s153", 'struct') = Reduce(type_specifier -> 'double')
action("s153", 'typedef') = Reduce(type_specifier -> 'double')
action("s153", 'union') = Reduce(type_specifier -> 'double')
action("s153", 'unsigned') = Reduce(type_specifier -> 'double')
action("s153", 'void') = Reduce(type_specifier -> 'double')
action("s153", 'volatile') = Reduce(type_specifier -> 'double')
action("s153", IDENTIFIER) = Reduce(type_specifier -> 'double')
action("s153", TYPE_NAME) = Reduce(type_specifier -> 'double')
action("s154", '{') = Shift("s94")
action("s154", IDENTIFIER) = Shift("s157")
action("s155", ',') = Shift("s96")
action("s155", '}') = Shift("s156")
action("s156", '(') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", ')') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", '*') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", ',') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", ':') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", ';') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", '[') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'auto') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'char') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'const') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'double') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'enum') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'extern') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'float') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'int') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'long') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'register') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'short') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'signed') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'static') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'struct') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'typedef') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'union') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'unsigned') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'void') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", 'volatile') = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", IDENTIFIER) = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s156", TYPE_NAME) = Reduce(enum_specifier -> 'enum' '{' enumerator_list '}')
action("s157", '{') = Shift("s95")
action("s157", '(') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", ')') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", '*') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", ',') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", ':') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", ';') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", '[') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'auto') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'char') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'const') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'double') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'enum') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'extern') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'float') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'int') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'long') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'register') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'short') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'signed') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'static') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'struct') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'typedef') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'union') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'unsigned') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'void') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", 'volatile') = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", IDENTIFIER) = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s157", TYPE_NAME) = Reduce(enum_specifier -> 'enum' IDENTIFIER)
action("s158", ',') = Shift("s96")
action("s158", '}') = Shift("s159")
action("s159", '(') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", ')') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", '*') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", ',') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", ':') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", ';') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", '[') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'auto') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'char') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'const') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'double') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'enum') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'extern') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'float') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'int') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'long') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'register') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'short') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'signed') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'static') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'struct') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'typedef') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'union') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'unsigned') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'void') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", 'volatile') = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", IDENTIFIER) = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s159", TYPE_NAME) = Reduce(enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}')
action("s160", '(') = Reduce(storage_class_specifier -> 'extern')
action("s160", ')') = Reduce(storage_class_specifier -> 'extern')
action("s160", '*') = Reduce(storage_class_specifier -> 'extern')
action("s160", ',') = Reduce(storage_class_specifier -> 'extern')
action("s160", ';') = Reduce(storage_class_specifier -> 'extern')
action("s160", '[') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'auto') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'char') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'const') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'double') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'enum') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'extern') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'float') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'int') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'long') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'register') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'short') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'signed') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'static') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'struct') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'typedef') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'union') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'unsigned') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'void') = Reduce(storage_class_specifier -> 'extern')
action("s160", 'volatile') = Reduce(storage_class_specifier -> 'extern')
action("s160", IDENTIFIER) = Reduce(storage_class_specifier -> 'extern')
action("s160", TYPE_NAME) = Reduce(storage_class_specifier -> 'extern')
action("s161", '(') = Reduce(type_specifier -> 'float')
action("s161", ')') = Reduce(type_specifier -> 'float')
action("s161", '*') = Reduce(type_specifier -> 'float')
action("s161", ',') = Reduce(type_specifier -> 'float')
action("s161", ':') = Reduce(type_specifier -> 'float')
action("s161", ';') = Reduce(type_specifier -> 'float')
action("s161", '[') = Reduce(type_specifier -> 'float')
action("s161", 'auto') = Reduce(type_specifier -> 'float')
action("s161", 'char') = Reduce(type_specifier -> 'float')
action("s161", 'const') = Reduce(type_specifier -> 'float')
action("s161", 'double') = Reduce(type_specifier -> 'float')
action("s161", 'enum') = Reduce(type_specifier -> 'float')
action("s161", 'extern') = Reduce(type_specifier -> 'float')
action("s161", 'float') = Reduce(type_specifier -> 'float')
action("s161", 'int') = Reduce(type_specifier -> 'float')
action("s161", 'long') = Reduce(type_specifier -> 'float')
action("s161", 'register') = Reduce(type_specifier -> 'float')
action("s161", 'short') = Reduce(type_specifier -> 'float')
action("s161", 'signed') = Reduce(type_specifier -> 'float')
action("s161", 'static') = Reduce(type_specifier -> 'float')
action("s161", 'struct') = Reduce(type_specifier -> 'float')
action("s161", 'typedef') = Reduce(type_specifier -> 'float')
action("s161", 'union') = Reduce(type_specifier -> 'float')
action("s161", 'unsigned') = Reduce(type_specifier -> 'float')
action("s161", 'void') = Reduce(type_specifier -> 'float')
action("s161", 'volatile') = Reduce(type_specifier -> 'float')
action("s161", IDENTIFIER) = Reduce(type_specifier -> 'float')
action("s161", TYPE_NAME) = Reduce(type_specifier -> 'float')
action("s162", '(') = Shift("s22")
action("s163", '!') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", '&') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", '(') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", '*') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", '+') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", '++') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", '-') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", '--') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", ';') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", 'break') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", 'case') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", 'continue') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", 'default') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", 'do') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", 'else') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", 'for') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", 'goto') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", 'if') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", 'return') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", 'sizeof') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", 'switch') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", 'while') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", '{') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", '}') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", '~') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", CONSTANT) = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", IDENTIFIER) = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s163", STRING_LITERAL) = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement)
action("s164", ')') = Shift("s12")
action("s164", ',') = Shift("s37")
action("s165", '!') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", '&') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", '(') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", '*') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", '+') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", '++') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", '-') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", '--') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", ';') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", 'break') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", 'case') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", 'continue') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", 'default') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", 'do') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", 'else') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", 'for') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", 'goto') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", 'if') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", 'return') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", 'sizeof') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", 'switch') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", 'while') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", '{') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", '}') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", '~') = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", CONSTANT) = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", IDENTIFIER) = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s165", STRING_LITERAL) = Reduce(iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement)
action("s166", IDENTIFIER) = Shift("s167")
action("s167", ';') = Shift("s168")
action("s168", '!') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", '&') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", '(') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", '*') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", '+') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", '++') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", '-') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", '--') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", ';') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", 'break') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", 'case') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", 'continue') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", 'default') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", 'do') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", 'else') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", 'for') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", 'goto') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", 'if') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", 'return') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", 'sizeof') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", 'switch') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", 'while') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", '{') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", '}') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", '~') = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", CONSTANT) = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", IDENTIFIER) = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s168", STRING_LITERAL) = Reduce(jump_statement -> 'goto' IDENTIFIER ';')
action("s169", '(') = Shift("s27")
action("s170", ')') = Shift("s13")
action("s170", ',') = Shift("s37")
action("s171", 'else') = Shift("s14")
action("s171", '!') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", '&') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", '(') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", '*') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", '+') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", '++') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", '-') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", '--') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", ';') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", 'break') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", 'case') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", 'continue') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", 'default') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", 'do') = Reduce(selection_statement -> 'if' '(' expression ')' statement)

conflict in state s171:
s171 = {selection_statement -> 'if' '(' expression ')' statement (*), selection_statement -> 'if' '(' expression ')' statement (*) 'else' statement}
action("s171", 'else') = Shift("s14")
action("s171", 'else') = Reduce(selection_statement -> 'if' '(' expression ')' statement)

action("s171", 'for') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", 'goto') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", 'if') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", 'return') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", 'sizeof') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", 'switch') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", 'while') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", '{') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", '}') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", '~') = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", CONSTANT) = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", IDENTIFIER) = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s171", STRING_LITERAL) = Reduce(selection_statement -> 'if' '(' expression ')' statement)
action("s172", '!') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", '&') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", '(') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", '*') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", '+') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", '++') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", '-') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", '--') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", ';') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", 'break') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", 'case') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", 'continue') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", 'default') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", 'do') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", 'else') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", 'for') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", 'goto') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", 'if') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", 'return') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", 'sizeof') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", 'switch') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", 'while') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", '{') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", '}') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", '~') = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", CONSTANT) = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", IDENTIFIER) = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s172", STRING_LITERAL) = Reduce(selection_statement -> 'if' '(' expression ')' statement 'else' statement)
action("s173", '(') = Reduce(type_specifier -> 'int')
action("s173", ')') = Reduce(type_specifier -> 'int')
action("s173", '*') = Reduce(type_specifier -> 'int')
action("s173", ',') = Reduce(type_specifier -> 'int')
action("s173", ':') = Reduce(type_specifier -> 'int')
action("s173", ';') = Reduce(type_specifier -> 'int')
action("s173", '[') = Reduce(type_specifier -> 'int')
action("s173", 'auto') = Reduce(type_specifier -> 'int')
action("s173", 'char') = Reduce(type_specifier -> 'int')
action("s173", 'const') = Reduce(type_specifier -> 'int')
action("s173", 'double') = Reduce(type_specifier -> 'int')
action("s173", 'enum') = Reduce(type_specifier -> 'int')
action("s173", 'extern') = Reduce(type_specifier -> 'int')
action("s173", 'float') = Reduce(type_specifier -> 'int')
action("s173", 'int') = Reduce(type_specifier -> 'int')
action("s173", 'long') = Reduce(type_specifier -> 'int')
action("s173", 'register') = Reduce(type_specifier -> 'int')
action("s173", 'short') = Reduce(type_specifier -> 'int')
action("s173", 'signed') = Reduce(type_specifier -> 'int')
action("s173", 'static') = Reduce(type_specifier -> 'int')
action("s173", 'struct') = Reduce(type_specifier -> 'int')
action("s173", 'typedef') = Reduce(type_specifier -> 'int')
action("s173", 'union') = Reduce(type_specifier -> 'int')
action("s173", 'unsigned') = Reduce(type_specifier -> 'int')
action("s173", 'void') = Reduce(type_specifier -> 'int')
action("s173", 'volatile') = Reduce(type_specifier -> 'int')
action("s173", IDENTIFIER) = Reduce(type_specifier -> 'int')
action("s173", TYPE_NAME) = Reduce(type_specifier -> 'int')
action("s174", '(') = Reduce(type_specifier -> 'long')
action("s174", ')') = Reduce(type_specifier -> 'long')
action("s174", '*') = Reduce(type_specifier -> 'long')
action("s174", ',') = Reduce(type_specifier -> 'long')
action("s174", ':') = Reduce(type_specifier -> 'long')
action("s174", ';') = Reduce(type_specifier -> 'long')
action("s174", '[') = Reduce(type_specifier -> 'long')
action("s174", 'auto') = Reduce(type_specifier -> 'long')
action("s174", 'char') = Reduce(type_specifier -> 'long')
action("s174", 'const') = Reduce(type_specifier -> 'long')
action("s174", 'double') = Reduce(type_specifier -> 'long')
action("s174", 'enum') = Reduce(type_specifier -> 'long')
action("s174", 'extern') = Reduce(type_specifier -> 'long')
action("s174", 'float') = Reduce(type_specifier -> 'long')
action("s174", 'int') = Reduce(type_specifier -> 'long')
action("s174", 'long') = Reduce(type_specifier -> 'long')
action("s174", 'register') = Reduce(type_specifier -> 'long')
action("s174", 'short') = Reduce(type_specifier -> 'long')
action("s174", 'signed') = Reduce(type_specifier -> 'long')
action("s174", 'static') = Reduce(type_specifier -> 'long')
action("s174", 'struct') = Reduce(type_specifier -> 'long')
action("s174", 'typedef') = Reduce(type_specifier -> 'long')
action("s174", 'union') = Reduce(type_specifier -> 'long')
action("s174", 'unsigned') = Reduce(type_specifier -> 'long')
action("s174", 'void') = Reduce(type_specifier -> 'long')
action("s174", 'volatile') = Reduce(type_specifier -> 'long')
action("s174", IDENTIFIER) = Reduce(type_specifier -> 'long')
action("s174", TYPE_NAME) = Reduce(type_specifier -> 'long')
action("s175", '(') = Reduce(storage_class_specifier -> 'register')
action("s175", ')') = Reduce(storage_class_specifier -> 'register')
action("s175", '*') = Reduce(storage_class_specifier -> 'register')
action("s175", ',') = Reduce(storage_class_specifier -> 'register')
action("s175", ';') = Reduce(storage_class_specifier -> 'register')
action("s175", '[') = Reduce(storage_class_specifier -> 'register')
action("s175", 'auto') = Reduce(storage_class_specifier -> 'register')
action("s175", 'char') = Reduce(storage_class_specifier -> 'register')
action("s175", 'const') = Reduce(storage_class_specifier -> 'register')
action("s175", 'double') = Reduce(storage_class_specifier -> 'register')
action("s175", 'enum') = Reduce(storage_class_specifier -> 'register')
action("s175", 'extern') = Reduce(storage_class_specifier -> 'register')
action("s175", 'float') = Reduce(storage_class_specifier -> 'register')
action("s175", 'int') = Reduce(storage_class_specifier -> 'register')
action("s175", 'long') = Reduce(storage_class_specifier -> 'register')
action("s175", 'register') = Reduce(storage_class_specifier -> 'register')
action("s175", 'short') = Reduce(storage_class_specifier -> 'register')
action("s175", 'signed') = Reduce(storage_class_specifier -> 'register')
action("s175", 'static') = Reduce(storage_class_specifier -> 'register')
action("s175", 'struct') = Reduce(storage_class_specifier -> 'register')
action("s175", 'typedef') = Reduce(storage_class_specifier -> 'register')
action("s175", 'union') = Reduce(storage_class_specifier -> 'register')
action("s175", 'unsigned') = Reduce(storage_class_specifier -> 'register')
action("s175", 'void') = Reduce(storage_class_specifier -> 'register')
action("s175", 'volatile') = Reduce(storage_class_specifier -> 'register')
action("s175", IDENTIFIER) = Reduce(storage_class_specifier -> 'register')
action("s175", TYPE_NAME) = Reduce(storage_class_specifier -> 'register')
action("s176", '!') = Reduce(jump_statement -> 'return' ';')
action("s176", '&') = Reduce(jump_statement -> 'return' ';')
action("s176", '(') = Reduce(jump_statement -> 'return' ';')
action("s176", '*') = Reduce(jump_statement -> 'return' ';')
action("s176", '+') = Reduce(jump_statement -> 'return' ';')
action("s176", '++') = Reduce(jump_statement -> 'return' ';')
action("s176", '-') = Reduce(jump_statement -> 'return' ';')
action("s176", '--') = Reduce(jump_statement -> 'return' ';')
action("s176", ';') = Reduce(jump_statement -> 'return' ';')
action("s176", 'break') = Reduce(jump_statement -> 'return' ';')
action("s176", 'case') = Reduce(jump_statement -> 'return' ';')
action("s176", 'continue') = Reduce(jump_statement -> 'return' ';')
action("s176", 'default') = Reduce(jump_statement -> 'return' ';')
action("s176", 'do') = Reduce(jump_statement -> 'return' ';')
action("s176", 'else') = Reduce(jump_statement -> 'return' ';')
action("s176", 'for') = Reduce(jump_statement -> 'return' ';')
action("s176", 'goto') = Reduce(jump_statement -> 'return' ';')
action("s176", 'if') = Reduce(jump_statement -> 'return' ';')
action("s176", 'return') = Reduce(jump_statement -> 'return' ';')
action("s176", 'sizeof') = Reduce(jump_statement -> 'return' ';')
action("s176", 'switch') = Reduce(jump_statement -> 'return' ';')
action("s176", 'while') = Reduce(jump_statement -> 'return' ';')
action("s176", '{') = Reduce(jump_statement -> 'return' ';')
action("s176", '}') = Reduce(jump_statement -> 'return' ';')
action("s176", '~') = Reduce(jump_statement -> 'return' ';')
action("s176", CONSTANT) = Reduce(jump_statement -> 'return' ';')
action("s176", IDENTIFIER) = Reduce(jump_statement -> 'return' ';')
action("s176", STRING_LITERAL) = Reduce(jump_statement -> 'return' ';')
action("s177", ',') = Shift("s37")
action("s177", ';') = Shift("s178")
action("s178", '!') = Reduce(jump_statement -> 'return' expression ';')
action("s178", '&') = Reduce(jump_statement -> 'return' expression ';')
action("s178", '(') = Reduce(jump_statement -> 'return' expression ';')
action("s178", '*') = Reduce(jump_statement -> 'return' expression ';')
action("s178", '+') = Reduce(jump_statement -> 'return' expression ';')
action("s178", '++') = Reduce(jump_statement -> 'return' expression ';')
action("s178", '-') = Reduce(jump_statement -> 'return' expression ';')
action("s178", '--') = Reduce(jump_statement -> 'return' expression ';')
action("s178", ';') = Reduce(jump_statement -> 'return' expression ';')
action("s178", 'break') = Reduce(jump_statement -> 'return' expression ';')
action("s178", 'case') = Reduce(jump_statement -> 'return' expression ';')
action("s178", 'continue') = Reduce(jump_statement -> 'return' expression ';')
action("s178", 'default') = Reduce(jump_statement -> 'return' expression ';')
action("s178", 'do') = Reduce(jump_statement -> 'return' expression ';')
action("s178", 'else') = Reduce(jump_statement -> 'return' expression ';')
action("s178", 'for') = Reduce(jump_statement -> 'return' expression ';')
action("s178", 'goto') = Reduce(jump_statement -> 'return' expression ';')
action("s178", 'if') = Reduce(jump_statement -> 'return' expression ';')
action("s178", 'return') = Reduce(jump_statement -> 'return' expression ';')
action("s178", 'sizeof') = Reduce(jump_statement -> 'return' expression ';')
action("s178", 'switch') = Reduce(jump_statement -> 'return' expression ';')
action("s178", 'while') = Reduce(jump_statement -> 'return' expression ';')
action("s178", '{') = Reduce(jump_statement -> 'return' expression ';')
action("s178", '}') = Reduce(jump_statement -> 'return' expression ';')
action("s178", '~') = Reduce(jump_statement -> 'return' expression ';')
action("s178", CONSTANT) = Reduce(jump_statement -> 'return' expression ';')
action("s178", IDENTIFIER) = Reduce(jump_statement -> 'return' expression ';')
action("s178", STRING_LITERAL) = Reduce(jump_statement -> 'return' expression ';')
action("s179", '(') = Reduce(type_specifier -> 'short')
action("s179", ')') = Reduce(type_specifier -> 'short')
action("s179", '*') = Reduce(type_specifier -> 'short')
action("s179", ',') = Reduce(type_specifier -> 'short')
action("s179", ':') = Reduce(type_specifier -> 'short')
action("s179", ';') = Reduce(type_specifier -> 'short')
action("s179", '[') = Reduce(type_specifier -> 'short')
action("s179", 'auto') = Reduce(type_specifier -> 'short')
action("s179", 'char') = Reduce(type_specifier -> 'short')
action("s179", 'const') = Reduce(type_specifier -> 'short')
action("s179", 'double') = Reduce(type_specifier -> 'short')
action("s179", 'enum') = Reduce(type_specifier -> 'short')
action("s179", 'extern') = Reduce(type_specifier -> 'short')
action("s179", 'float') = Reduce(type_specifier -> 'short')
action("s179", 'int') = Reduce(type_specifier -> 'short')
action("s179", 'long') = Reduce(type_specifier -> 'short')
action("s179", 'register') = Reduce(type_specifier -> 'short')
action("s179", 'short') = Reduce(type_specifier -> 'short')
action("s179", 'signed') = Reduce(type_specifier -> 'short')
action("s179", 'static') = Reduce(type_specifier -> 'short')
action("s179", 'struct') = Reduce(type_specifier -> 'short')
action("s179", 'typedef') = Reduce(type_specifier -> 'short')
action("s179", 'union') = Reduce(type_specifier -> 'short')
action("s179", 'unsigned') = Reduce(type_specifier -> 'short')
action("s179", 'void') = Reduce(type_specifier -> 'short')
action("s179", 'volatile') = Reduce(type_specifier -> 'short')
action("s179", IDENTIFIER) = Reduce(type_specifier -> 'short')
action("s179", TYPE_NAME) = Reduce(type_specifier -> 'short')
action("s180", '(') = Reduce(type_specifier -> 'signed')
action("s180", ')') = Reduce(type_specifier -> 'signed')
action("s180", '*') = Reduce(type_specifier -> 'signed')
action("s180", ',') = Reduce(type_specifier -> 'signed')
action("s180", ':') = Reduce(type_specifier -> 'signed')
action("s180", ';') = Reduce(type_specifier -> 'signed')
action("s180", '[') = Reduce(type_specifier -> 'signed')
action("s180", 'auto') = Reduce(type_specifier -> 'signed')
action("s180", 'char') = Reduce(type_specifier -> 'signed')
action("s180", 'const') = Reduce(type_specifier -> 'signed')
action("s180", 'double') = Reduce(type_specifier -> 'signed')
action("s180", 'enum') = Reduce(type_specifier -> 'signed')
action("s180", 'extern') = Reduce(type_specifier -> 'signed')
action("s180", 'float') = Reduce(type_specifier -> 'signed')
action("s180", 'int') = Reduce(type_specifier -> 'signed')
action("s180", 'long') = Reduce(type_specifier -> 'signed')
action("s180", 'register') = Reduce(type_specifier -> 'signed')
action("s180", 'short') = Reduce(type_specifier -> 'signed')
action("s180", 'signed') = Reduce(type_specifier -> 'signed')
action("s180", 'static') = Reduce(type_specifier -> 'signed')
action("s180", 'struct') = Reduce(type_specifier -> 'signed')
action("s180", 'typedef') = Reduce(type_specifier -> 'signed')
action("s180", 'union') = Reduce(type_specifier -> 'signed')
action("s180", 'unsigned') = Reduce(type_specifier -> 'signed')
action("s180", 'void') = Reduce(type_specifier -> 'signed')
action("s180", 'volatile') = Reduce(type_specifier -> 'signed')
action("s180", IDENTIFIER) = Reduce(type_specifier -> 'signed')
action("s180", TYPE_NAME) = Reduce(type_specifier -> 'signed')
action("s181", ')') = Shift("s182")
action("s182", '!=') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '%') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '%=') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '&&') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '&') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '&=') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", ')') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '*') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '*=') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '+') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '+=') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", ',') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '-') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '-=') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '/') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '/=') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", ':') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", ';') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '<') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '<<') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '<<=') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '<=') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '=') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '==') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '>') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '>=') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '>>') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '>>=') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '?') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", ']') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '^') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '^=') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '|') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '|=') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '||') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s182", '}') = Reduce(unary_expression -> 'sizeof' '(' type_name ')')
action("s183", '!=') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '%') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '%=') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '&&') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '&') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '&=') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", ')') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '*') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '*=') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '+') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '+=') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", ',') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '-') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '-=') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '/') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '/=') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", ':') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", ';') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '<') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '<<') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '<<=') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '<=') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '=') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '==') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '>') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '>=') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '>>') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '>>=') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '?') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", ']') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '^') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '^=') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '|') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '|=') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '||') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s183", '}') = Reduce(unary_expression -> 'sizeof' unary_expression)
action("s184", '(') = Reduce(storage_class_specifier -> 'static')
action("s184", ')') = Reduce(storage_class_specifier -> 'static')
action("s184", '*') = Reduce(storage_class_specifier -> 'static')
action("s184", ',') = Reduce(storage_class_specifier -> 'static')
action("s184", ';') = Reduce(storage_class_specifier -> 'static')
action("s184", '[') = Reduce(storage_class_specifier -> 'static')
action("s184", 'auto') = Reduce(storage_class_specifier -> 'static')
action("s184", 'char') = Reduce(storage_class_specifier -> 'static')
action("s184", 'const') = Reduce(storage_class_specifier -> 'static')
action("s184", 'double') = Reduce(storage_class_specifier -> 'static')
action("s184", 'enum') = Reduce(storage_class_specifier -> 'static')
action("s184", 'extern') = Reduce(storage_class_specifier -> 'static')
action("s184", 'float') = Reduce(storage_class_specifier -> 'static')
action("s184", 'int') = Reduce(storage_class_specifier -> 'static')
action("s184", 'long') = Reduce(storage_class_specifier -> 'static')
action("s184", 'register') = Reduce(storage_class_specifier -> 'static')
action("s184", 'short') = Reduce(storage_class_specifier -> 'static')
action("s184", 'signed') = Reduce(storage_class_specifier -> 'static')
action("s184", 'static') = Reduce(storage_class_specifier -> 'static')
action("s184", 'struct') = Reduce(storage_class_specifier -> 'static')
action("s184", 'typedef') = Reduce(storage_class_specifier -> 'static')
action("s184", 'union') = Reduce(storage_class_specifier -> 'static')
action("s184", 'unsigned') = Reduce(storage_class_specifier -> 'static')
action("s184", 'void') = Reduce(storage_class_specifier -> 'static')
action("s184", 'volatile') = Reduce(storage_class_specifier -> 'static')
action("s184", IDENTIFIER) = Reduce(storage_class_specifier -> 'static')
action("s184", TYPE_NAME) = Reduce(storage_class_specifier -> 'static')
action("s185", '{') = Reduce(struct_or_union -> 'struct')
action("s185", IDENTIFIER) = Reduce(struct_or_union -> 'struct')
action("s186", '(') = Shift("s29")
action("s187", ')') = Shift("s15")
action("s187", ',') = Shift("s37")
action("s188", '!') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", '&') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", '(') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", '*') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", '+') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", '++') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", '-') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", '--') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", ';') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", 'break') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", 'case') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", 'continue') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", 'default') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", 'do') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", 'else') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", 'for') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", 'goto') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", 'if') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", 'return') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", 'sizeof') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", 'switch') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", 'while') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", '{') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", '}') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", '~') = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", CONSTANT) = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", IDENTIFIER) = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s188", STRING_LITERAL) = Reduce(selection_statement -> 'switch' '(' expression ')' statement)
action("s189", '(') = Reduce(storage_class_specifier -> 'typedef')
action("s189", ')') = Reduce(storage_class_specifier -> 'typedef')
action("s189", '*') = Reduce(storage_class_specifier -> 'typedef')
action("s189", ',') = Reduce(storage_class_specifier -> 'typedef')
action("s189", ';') = Reduce(storage_class_specifier -> 'typedef')
action("s189", '[') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'auto') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'char') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'const') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'double') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'enum') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'extern') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'float') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'int') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'long') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'register') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'short') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'signed') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'static') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'struct') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'typedef') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'union') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'unsigned') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'void') = Reduce(storage_class_specifier -> 'typedef')
action("s189", 'volatile') = Reduce(storage_class_specifier -> 'typedef')
action("s189", IDENTIFIER) = Reduce(storage_class_specifier -> 'typedef')
action("s189", TYPE_NAME) = Reduce(storage_class_specifier -> 'typedef')
action("s190", '{') = Reduce(struct_or_union -> 'union')
action("s190", IDENTIFIER) = Reduce(struct_or_union -> 'union')
action("s191", '(') = Reduce(type_specifier -> 'unsigned')
action("s191", ')') = Reduce(type_specifier -> 'unsigned')
action("s191", '*') = Reduce(type_specifier -> 'unsigned')
action("s191", ',') = Reduce(type_specifier -> 'unsigned')
action("s191", ':') = Reduce(type_specifier -> 'unsigned')
action("s191", ';') = Reduce(type_specifier -> 'unsigned')
action("s191", '[') = Reduce(type_specifier -> 'unsigned')
action("s191", 'auto') = Reduce(type_specifier -> 'unsigned')
action("s191", 'char') = Reduce(type_specifier -> 'unsigned')
action("s191", 'const') = Reduce(type_specifier -> 'unsigned')
action("s191", 'double') = Reduce(type_specifier -> 'unsigned')
action("s191", 'enum') = Reduce(type_specifier -> 'unsigned')
action("s191", 'extern') = Reduce(type_specifier -> 'unsigned')
action("s191", 'float') = Reduce(type_specifier -> 'unsigned')
action("s191", 'int') = Reduce(type_specifier -> 'unsigned')
action("s191", 'long') = Reduce(type_specifier -> 'unsigned')
action("s191", 'register') = Reduce(type_specifier -> 'unsigned')
action("s191", 'short') = Reduce(type_specifier -> 'unsigned')
action("s191", 'signed') = Reduce(type_specifier -> 'unsigned')
action("s191", 'static') = Reduce(type_specifier -> 'unsigned')
action("s191", 'struct') = Reduce(type_specifier -> 'unsigned')
action("s191", 'typedef') = Reduce(type_specifier -> 'unsigned')
action("s191", 'union') = Reduce(type_specifier -> 'unsigned')
action("s191", 'unsigned') = Reduce(type_specifier -> 'unsigned')
action("s191", 'void') = Reduce(type_specifier -> 'unsigned')
action("s191", 'volatile') = Reduce(type_specifier -> 'unsigned')
action("s191", IDENTIFIER) = Reduce(type_specifier -> 'unsigned')
action("s191", TYPE_NAME) = Reduce(type_specifier -> 'unsigned')
action("s192", '(') = Reduce(type_specifier -> 'void')
action("s192", ')') = Reduce(type_specifier -> 'void')
action("s192", '*') = Reduce(type_specifier -> 'void')
action("s192", ',') = Reduce(type_specifier -> 'void')
action("s192", ':') = Reduce(type_specifier -> 'void')
action("s192", ';') = Reduce(type_specifier -> 'void')
action("s192", '[') = Reduce(type_specifier -> 'void')
action("s192", 'auto') = Reduce(type_specifier -> 'void')
action("s192", 'char') = Reduce(type_specifier -> 'void')
action("s192", 'const') = Reduce(type_specifier -> 'void')
action("s192", 'double') = Reduce(type_specifier -> 'void')
action("s192", 'enum') = Reduce(type_specifier -> 'void')
action("s192", 'extern') = Reduce(type_specifier -> 'void')
action("s192", 'float') = Reduce(type_specifier -> 'void')
action("s192", 'int') = Reduce(type_specifier -> 'void')
action("s192", 'long') = Reduce(type_specifier -> 'void')
action("s192", 'register') = Reduce(type_specifier -> 'void')
action("s192", 'short') = Reduce(type_specifier -> 'void')
action("s192", 'signed') = Reduce(type_specifier -> 'void')
action("s192", 'static') = Reduce(type_specifier -> 'void')
action("s192", 'struct') = Reduce(type_specifier -> 'void')
action("s192", 'typedef') = Reduce(type_specifier -> 'void')
action("s192", 'union') = Reduce(type_specifier -> 'void')
action("s192", 'unsigned') = Reduce(type_specifier -> 'void')
action("s192", 'void') = Reduce(type_specifier -> 'void')
action("s192", 'volatile') = Reduce(type_specifier -> 'void')
action("s192", IDENTIFIER) = Reduce(type_specifier -> 'void')
action("s192", TYPE_NAME) = Reduce(type_specifier -> 'void')
action("s193", '(') = Reduce(type_qualifier -> 'volatile')
action("s193", ')') = Reduce(type_qualifier -> 'volatile')
action("s193", '*') = Reduce(type_qualifier -> 'volatile')
action("s193", ',') = Reduce(type_qualifier -> 'volatile')
action("s193", ':') = Reduce(type_qualifier -> 'volatile')
action("s193", ';') = Reduce(type_qualifier -> 'volatile')
action("s193", '[') = Reduce(type_qualifier -> 'volatile')
action("s193", 'auto') = Reduce(type_qualifier -> 'volatile')
action("s193", 'char') = Reduce(type_qualifier -> 'volatile')
action("s193", 'const') = Reduce(type_qualifier -> 'volatile')
action("s193", 'double') = Reduce(type_qualifier -> 'volatile')
action("s193", 'enum') = Reduce(type_qualifier -> 'volatile')
action("s193", 'extern') = Reduce(type_qualifier -> 'volatile')
action("s193", 'float') = Reduce(type_qualifier -> 'volatile')
action("s193", 'int') = Reduce(type_qualifier -> 'volatile')
action("s193", 'long') = Reduce(type_qualifier -> 'volatile')
action("s193", 'register') = Reduce(type_qualifier -> 'volatile')
action("s193", 'short') = Reduce(type_qualifier -> 'volatile')
action("s193", 'signed') = Reduce(type_qualifier -> 'volatile')
action("s193", 'static') = Reduce(type_qualifier -> 'volatile')
action("s193", 'struct') = Reduce(type_qualifier -> 'volatile')
action("s193", 'typedef') = Reduce(type_qualifier -> 'volatile')
action("s193", 'union') = Reduce(type_qualifier -> 'volatile')
action("s193", 'unsigned') = Reduce(type_qualifier -> 'volatile')
action("s193", 'void') = Reduce(type_qualifier -> 'volatile')
action("s193", 'volatile') = Reduce(type_qualifier -> 'volatile')
action("s193", IDENTIFIER) = Reduce(type_qualifier -> 'volatile')
action("s193", TYPE_NAME) = Reduce(type_qualifier -> 'volatile')
action("s194", '(') = Shift("s30")
action("s195", ')') = Shift("s16")
action("s195", ',') = Shift("s37")
action("s196", '!') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", '&') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", '(') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", '*') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", '+') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", '++') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", '-') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", '--') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", ';') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", 'break') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", 'case') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", 'continue') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", 'default') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", 'do') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", 'else') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", 'for') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", 'goto') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", 'if') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", 'return') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", 'sizeof') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", 'switch') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", 'while') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", '{') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", '}') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", '~') = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", CONSTANT) = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", IDENTIFIER) = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s196", STRING_LITERAL) = Reduce(iteration_statement -> 'while' '(' expression ')' statement)
action("s197", $) = Reduce(compound_statement -> '{' '}')
action("s197", '!') = Reduce(compound_statement -> '{' '}')
action("s197", '&') = Reduce(compound_statement -> '{' '}')
action("s197", '(') = Reduce(compound_statement -> '{' '}')
action("s197", '*') = Reduce(compound_statement -> '{' '}')
action("s197", '+') = Reduce(compound_statement -> '{' '}')
action("s197", '++') = Reduce(compound_statement -> '{' '}')
action("s197", '-') = Reduce(compound_statement -> '{' '}')
action("s197", '--') = Reduce(compound_statement -> '{' '}')
action("s197", ';') = Reduce(compound_statement -> '{' '}')
action("s197", 'auto') = Reduce(compound_statement -> '{' '}')
action("s197", 'break') = Reduce(compound_statement -> '{' '}')
action("s197", 'case') = Reduce(compound_statement -> '{' '}')
action("s197", 'char') = Reduce(compound_statement -> '{' '}')
action("s197", 'const') = Reduce(compound_statement -> '{' '}')
action("s197", 'continue') = Reduce(compound_statement -> '{' '}')
action("s197", 'default') = Reduce(compound_statement -> '{' '}')
action("s197", 'do') = Reduce(compound_statement -> '{' '}')
action("s197", 'double') = Reduce(compound_statement -> '{' '}')
action("s197", 'else') = Reduce(compound_statement -> '{' '}')
action("s197", 'enum') = Reduce(compound_statement -> '{' '}')
action("s197", 'extern') = Reduce(compound_statement -> '{' '}')
action("s197", 'float') = Reduce(compound_statement -> '{' '}')
action("s197", 'for') = Reduce(compound_statement -> '{' '}')
action("s197", 'goto') = Reduce(compound_statement -> '{' '}')
action("s197", 'if') = Reduce(compound_statement -> '{' '}')
action("s197", 'int') = Reduce(compound_statement -> '{' '}')
action("s197", 'long') = Reduce(compound_statement -> '{' '}')
action("s197", 'register') = Reduce(compound_statement -> '{' '}')
action("s197", 'return') = Reduce(compound_statement -> '{' '}')
action("s197", 'short') = Reduce(compound_statement -> '{' '}')
action("s197", 'signed') = Reduce(compound_statement -> '{' '}')
action("s197", 'sizeof') = Reduce(compound_statement -> '{' '}')
action("s197", 'static') = Reduce(compound_statement -> '{' '}')
action("s197", 'struct') = Reduce(compound_statement -> '{' '}')
action("s197", 'switch') = Reduce(compound_statement -> '{' '}')
action("s197", 'typedef') = Reduce(compound_statement -> '{' '}')
action("s197", 'union') = Reduce(compound_statement -> '{' '}')
action("s197", 'unsigned') = Reduce(compound_statement -> '{' '}')
action("s197", 'void') = Reduce(compound_statement -> '{' '}')
action("s197", 'volatile') = Reduce(compound_statement -> '{' '}')
action("s197", 'while') = Reduce(compound_statement -> '{' '}')
action("s197", '{') = Reduce(compound_statement -> '{' '}')
action("s197", '}') = Reduce(compound_statement -> '{' '}')
action("s197", '~') = Reduce(compound_statement -> '{' '}')
action("s197", CONSTANT) = Reduce(compound_statement -> '{' '}')
action("s197", IDENTIFIER) = Reduce(compound_statement -> '{' '}')
action("s197", STRING_LITERAL) = Reduce(compound_statement -> '{' '}')
action("s197", TYPE_NAME) = Reduce(compound_statement -> '{' '}')
action("s198", $) = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", '!') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", '&') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", '(') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", '*') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", '+') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", '++') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", '-') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", '--') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", ';') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'auto') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'break') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'case') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'char') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'const') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'continue') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'default') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'do') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'double') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'else') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'enum') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'extern') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'float') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'for') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'goto') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'if') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'int') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'long') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'register') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'return') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'short') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'signed') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'sizeof') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'static') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'struct') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'switch') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'typedef') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'union') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'unsigned') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'void') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'volatile') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", 'while') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", '{') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", '}') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", '~') = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", CONSTANT) = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", IDENTIFIER) = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", STRING_LITERAL) = Reduce(compound_statement -> '{' declaration_list '}')
action("s198", TYPE_NAME) = Reduce(compound_statement -> '{' declaration_list '}')
action("s199", $) = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", '!') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", '&') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", '(') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", '*') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", '+') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", '++') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", '-') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", '--') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", ';') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'auto') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'break') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'case') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'char') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'const') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'continue') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'default') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'do') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'double') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'else') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'enum') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'extern') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'float') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'for') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'goto') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'if') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'int') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'long') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'register') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'return') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'short') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'signed') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'sizeof') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'static') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'struct') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'switch') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'typedef') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'union') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'unsigned') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'void') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'volatile') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", 'while') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", '{') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", '}') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", '~') = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", CONSTANT) = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", IDENTIFIER) = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", STRING_LITERAL) = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s199", TYPE_NAME) = Reduce(compound_statement -> '{' declaration_list statement_list '}')
action("s200", ',') = Shift("s34")
action("s200", '}') = Shift("s202")
action("s201", ',') = Reduce(initializer -> '{' initializer_list ',' '}')
action("s201", ';') = Reduce(initializer -> '{' initializer_list ',' '}')
action("s201", '}') = Reduce(initializer -> '{' initializer_list ',' '}')
action("s202", ',') = Reduce(initializer -> '{' initializer_list '}')
action("s202", ';') = Reduce(initializer -> '{' initializer_list '}')
action("s202", '}') = Reduce(initializer -> '{' initializer_list '}')
action("s203", $) = Reduce(compound_statement -> '{' statement_list '}')
action("s203", '!') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", '&') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", '(') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", '*') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", '+') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", '++') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", '-') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", '--') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", ';') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'auto') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'break') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'case') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'char') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'const') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'continue') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'default') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'do') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'double') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'else') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'enum') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'extern') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'float') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'for') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'goto') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'if') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'int') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'long') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'register') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'return') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'short') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'signed') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'sizeof') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'static') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'struct') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'switch') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'typedef') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'union') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'unsigned') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'void') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'volatile') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", 'while') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", '{') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", '}') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", '~') = Reduce(compound_statement -> '{' statement_list '}')
action("s203", CONSTANT) = Reduce(compound_statement -> '{' statement_list '}')
action("s203", IDENTIFIER) = Reduce(compound_statement -> '{' statement_list '}')
action("s203", STRING_LITERAL) = Reduce(compound_statement -> '{' statement_list '}')
action("s203", TYPE_NAME) = Reduce(compound_statement -> '{' statement_list '}')
action("s204", '!') = Reduce(assignment_operator -> '|=')
action("s204", '&') = Reduce(assignment_operator -> '|=')
action("s204", '(') = Reduce(assignment_operator -> '|=')
action("s204", '*') = Reduce(assignment_operator -> '|=')
action("s204", '+') = Reduce(assignment_operator -> '|=')
action("s204", '++') = Reduce(assignment_operator -> '|=')
action("s204", '-') = Reduce(assignment_operator -> '|=')
action("s204", '--') = Reduce(assignment_operator -> '|=')
action("s204", 'sizeof') = Reduce(assignment_operator -> '|=')
action("s204", '~') = Reduce(assignment_operator -> '|=')
action("s204", CONSTANT) = Reduce(assignment_operator -> '|=')
action("s204", IDENTIFIER) = Reduce(assignment_operator -> '|=')
action("s204", STRING_LITERAL) = Reduce(assignment_operator -> '|=')
action("s205", '!') = Reduce(unary_operator -> '~')
action("s205", '&') = Reduce(unary_operator -> '~')
action("s205", '(') = Reduce(unary_operator -> '~')
action("s205", '*') = Reduce(unary_operator -> '~')
action("s205", '+') = Reduce(unary_operator -> '~')
action("s205", '++') = Reduce(unary_operator -> '~')
action("s205", '-') = Reduce(unary_operator -> '~')
action("s205", '--') = Reduce(unary_operator -> '~')
action("s205", 'sizeof') = Reduce(unary_operator -> '~')
action("s205", '~') = Reduce(unary_operator -> '~')
action("s205", CONSTANT) = Reduce(unary_operator -> '~')
action("s205", IDENTIFIER) = Reduce(unary_operator -> '~')
action("s205", STRING_LITERAL) = Reduce(unary_operator -> '~')
action("s206", '!=') = Reduce(primary_expression -> CONSTANT)
action("s206", '%') = Reduce(primary_expression -> CONSTANT)
action("s206", '%=') = Reduce(primary_expression -> CONSTANT)
action("s206", '&&') = Reduce(primary_expression -> CONSTANT)
action("s206", '&') = Reduce(primary_expression -> CONSTANT)
action("s206", '&=') = Reduce(primary_expression -> CONSTANT)
action("s206", '(') = Reduce(primary_expression -> CONSTANT)
action("s206", ')') = Reduce(primary_expression -> CONSTANT)
action("s206", '*') = Reduce(primary_expression -> CONSTANT)
action("s206", '*=') = Reduce(primary_expression -> CONSTANT)
action("s206", '+') = Reduce(primary_expression -> CONSTANT)
action("s206", '++') = Reduce(primary_expression -> CONSTANT)
action("s206", '+=') = Reduce(primary_expression -> CONSTANT)
action("s206", ',') = Reduce(primary_expression -> CONSTANT)
action("s206", '-') = Reduce(primary_expression -> CONSTANT)
action("s206", '--') = Reduce(primary_expression -> CONSTANT)
action("s206", '-=') = Reduce(primary_expression -> CONSTANT)
action("s206", '->') = Reduce(primary_expression -> CONSTANT)
action("s206", '.') = Reduce(primary_expression -> CONSTANT)
action("s206", '/') = Reduce(primary_expression -> CONSTANT)
action("s206", '/=') = Reduce(primary_expression -> CONSTANT)
action("s206", ':') = Reduce(primary_expression -> CONSTANT)
action("s206", ';') = Reduce(primary_expression -> CONSTANT)
action("s206", '<') = Reduce(primary_expression -> CONSTANT)
action("s206", '<<') = Reduce(primary_expression -> CONSTANT)
action("s206", '<<=') = Reduce(primary_expression -> CONSTANT)
action("s206", '<=') = Reduce(primary_expression -> CONSTANT)
action("s206", '=') = Reduce(primary_expression -> CONSTANT)
action("s206", '==') = Reduce(primary_expression -> CONSTANT)
action("s206", '>') = Reduce(primary_expression -> CONSTANT)
action("s206", '>=') = Reduce(primary_expression -> CONSTANT)
action("s206", '>>') = Reduce(primary_expression -> CONSTANT)
action("s206", '>>=') = Reduce(primary_expression -> CONSTANT)
action("s206", '?') = Reduce(primary_expression -> CONSTANT)
action("s206", '[') = Reduce(primary_expression -> CONSTANT)
action("s206", ']') = Reduce(primary_expression -> CONSTANT)
action("s206", '^') = Reduce(primary_expression -> CONSTANT)
action("s206", '^=') = Reduce(primary_expression -> CONSTANT)
action("s206", '|') = Reduce(primary_expression -> CONSTANT)
action("s206", '|=') = Reduce(primary_expression -> CONSTANT)
action("s206", '||') = Reduce(primary_expression -> CONSTANT)
action("s206", '}') = Reduce(primary_expression -> CONSTANT)
action("s207", '(') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", ')') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", ',') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", ':') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", ';') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", '=') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", '[') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'auto') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'char') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'const') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'double') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'enum') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'extern') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'float') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'int') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'long') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'register') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'short') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'signed') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'static') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'struct') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'typedef') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'union') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'unsigned') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'void') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", 'volatile') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", '{') = Reduce(direct_declarator -> IDENTIFIER)
action("s207", TYPE_NAME) = Reduce(direct_declarator -> IDENTIFIER)
action("s208", '=') = Shift("s42")
action("s208", ',') = Reduce(enumerator -> IDENTIFIER)
action("s208", '}') = Reduce(enumerator -> IDENTIFIER)
action("s209", ')') = Reduce(identifier_list -> IDENTIFIER)
action("s209", ',') = Reduce(identifier_list -> IDENTIFIER)
action("s210", ':') = Shift("s19")
action("s210", '!=') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '%') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '%=') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '&&') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '&') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '&=') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '(') = Reduce(primary_expression -> IDENTIFIER)
action("s210", ')') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '*') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '*=') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '+') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '++') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '+=') = Reduce(primary_expression -> IDENTIFIER)
action("s210", ',') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '-') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '--') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '-=') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '->') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '.') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '/') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '/=') = Reduce(primary_expression -> IDENTIFIER)

conflict in state s210:
s210 = {labeled_statement -> IDENTIFIER (*) ':' statement, primary_expression -> IDENTIFIER (*)}
action("s210", ':') = Shift("s19")
action("s210", ':') = Reduce(primary_expression -> IDENTIFIER)

action("s210", ';') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '<') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '<<') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '<<=') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '<=') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '=') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '==') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '>') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '>=') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '>>') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '>>=') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '?') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '[') = Reduce(primary_expression -> IDENTIFIER)
action("s210", ']') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '^') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '^=') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '|') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '|=') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '||') = Reduce(primary_expression -> IDENTIFIER)
action("s210", '}') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '!=') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '%') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '%=') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '&&') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '&') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '&=') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '(') = Reduce(primary_expression -> IDENTIFIER)
action("s211", ')') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '*') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '*=') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '+') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '++') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '+=') = Reduce(primary_expression -> IDENTIFIER)
action("s211", ',') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '-') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '--') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '-=') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '->') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '.') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '/') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '/=') = Reduce(primary_expression -> IDENTIFIER)
action("s211", ':') = Reduce(primary_expression -> IDENTIFIER)
action("s211", ';') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '<') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '<<') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '<<=') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '<=') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '=') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '==') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '>') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '>=') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '>>') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '>>=') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '?') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '[') = Reduce(primary_expression -> IDENTIFIER)
action("s211", ']') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '^') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '^=') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '|') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '|=') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '||') = Reduce(primary_expression -> IDENTIFIER)
action("s211", '}') = Reduce(primary_expression -> IDENTIFIER)
action("s212", '!') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", '&') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", '(') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", '*') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", '+') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", '++') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", '-') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", '--') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", ';') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", 'break') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", 'case') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", 'continue') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", 'default') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", 'do') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", 'else') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", 'for') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", 'goto') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", 'if') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", 'return') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", 'sizeof') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", 'switch') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", 'while') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", '{') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", '}') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", '~') = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", CONSTANT) = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", IDENTIFIER) = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s212", STRING_LITERAL) = Reduce(labeled_statement -> IDENTIFIER ':' statement)
action("s213", ',') = Reduce(enumerator -> IDENTIFIER '=' constant_expression)
action("s213", '}') = Reduce(enumerator -> IDENTIFIER '=' constant_expression)
action("s214", '!=') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '%') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '%=') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '&&') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '&') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '&=') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '(') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", ')') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '*') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '*=') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '+') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '++') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '+=') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", ',') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '-') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '--') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '-=') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '->') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '.') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '/') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '/=') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", ':') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", ';') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '<') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '<<') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '<<=') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '<=') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '=') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '==') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '>') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '>=') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '>>') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '>>=') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '?') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '[') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", ']') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '^') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '^=') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '|') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '|=') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '||') = Reduce(primary_expression -> STRING_LITERAL)
action("s214", '}') = Reduce(primary_expression -> STRING_LITERAL)
action("s215", '(') = Reduce(type_specifier -> TYPE_NAME)
action("s215", ')') = Reduce(type_specifier -> TYPE_NAME)
action("s215", '*') = Reduce(type_specifier -> TYPE_NAME)
action("s215", ',') = Reduce(type_specifier -> TYPE_NAME)
action("s215", ':') = Reduce(type_specifier -> TYPE_NAME)
action("s215", ';') = Reduce(type_specifier -> TYPE_NAME)
action("s215", '[') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'auto') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'char') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'const') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'double') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'enum') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'extern') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'float') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'int') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'long') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'register') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'short') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'signed') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'static') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'struct') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'typedef') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'union') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'unsigned') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'void') = Reduce(type_specifier -> TYPE_NAME)
action("s215", 'volatile') = Reduce(type_specifier -> TYPE_NAME)
action("s215", IDENTIFIER) = Reduce(type_specifier -> TYPE_NAME)
action("s215", TYPE_NAME) = Reduce(type_specifier -> TYPE_NAME)
action("s216", '+') = Shift("s61")
action("s216", '-') = Shift("s62")
action("s216", '!=') = Reduce(shift_expression -> additive_expression)
action("s216", '&&') = Reduce(shift_expression -> additive_expression)
action("s216", '&') = Reduce(shift_expression -> additive_expression)
action("s216", ')') = Reduce(shift_expression -> additive_expression)
action("s216", ',') = Reduce(shift_expression -> additive_expression)
action("s216", ':') = Reduce(shift_expression -> additive_expression)
action("s216", ';') = Reduce(shift_expression -> additive_expression)
action("s216", '<') = Reduce(shift_expression -> additive_expression)
action("s216", '<<') = Reduce(shift_expression -> additive_expression)
action("s216", '<=') = Reduce(shift_expression -> additive_expression)
action("s216", '==') = Reduce(shift_expression -> additive_expression)
action("s216", '>') = Reduce(shift_expression -> additive_expression)
action("s216", '>=') = Reduce(shift_expression -> additive_expression)
action("s216", '>>') = Reduce(shift_expression -> additive_expression)
action("s216", '?') = Reduce(shift_expression -> additive_expression)
action("s216", ']') = Reduce(shift_expression -> additive_expression)
action("s216", '^') = Reduce(shift_expression -> additive_expression)
action("s216", '|') = Reduce(shift_expression -> additive_expression)
action("s216", '||') = Reduce(shift_expression -> additive_expression)
action("s216", '}') = Reduce(shift_expression -> additive_expression)
action("s217", '+') = Shift("s61")
action("s217", '-') = Shift("s62")
action("s217", '!=') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", '&&') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", '&') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", ')') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", ',') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", ':') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", ';') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", '<') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", '<<') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", '<=') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", '==') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", '>') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", '>=') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", '>>') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", '?') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", ']') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", '^') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", '|') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", '||') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s217", '}') = Reduce(shift_expression -> shift_expression '<<' additive_expression)
action("s218", '+') = Shift("s61")
action("s218", '-') = Shift("s62")
action("s218", '!=') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", '&&') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", '&') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", ')') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", ',') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", ':') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", ';') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", '<') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", '<<') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", '<=') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", '==') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", '>') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", '>=') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", '>>') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", '?') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", ']') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", '^') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", '|') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", '||') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s218", '}') = Reduce(shift_expression -> shift_expression '>>' additive_expression)
action("s219", '%') = Shift("s64")
action("s219", '*') = Shift("s65")
action("s219", '/') = Shift("s66")
action("s219", '!=') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", '&&') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", '&') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", ')') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", '+') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", ',') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", '-') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", ':') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", ';') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", '<') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", '<<') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", '<=') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", '==') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", '>') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", '>=') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", '>>') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", '?') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", ']') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", '^') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", '|') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", '||') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s219", '}') = Reduce(additive_expression -> additive_expression '+' multiplicative_expression)
action("s220", '%') = Shift("s64")
action("s220", '*') = Shift("s65")
action("s220", '/') = Shift("s66")
action("s220", '!=') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", '&&') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", '&') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", ')') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", '+') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", ',') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", '-') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", ':') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", ';') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", '<') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", '<<') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", '<=') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", '==') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", '>') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", '>=') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", '>>') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", '?') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", ']') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", '^') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", '|') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", '||') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s220", '}') = Reduce(additive_expression -> additive_expression '-' multiplicative_expression)
action("s221", '&') = Shift("s51")
action("s221", '&&') = Reduce(exclusive_or_expression -> and_expression)
action("s221", ')') = Reduce(exclusive_or_expression -> and_expression)
action("s221", ',') = Reduce(exclusive_or_expression -> and_expression)
action("s221", ':') = Reduce(exclusive_or_expression -> and_expression)
action("s221", ';') = Reduce(exclusive_or_expression -> and_expression)
action("s221", '?') = Reduce(exclusive_or_expression -> and_expression)
action("s221", ']') = Reduce(exclusive_or_expression -> and_expression)
action("s221", '^') = Reduce(exclusive_or_expression -> and_expression)
action("s221", '|') = Reduce(exclusive_or_expression -> and_expression)
action("s221", '||') = Reduce(exclusive_or_expression -> and_expression)
action("s221", '}') = Reduce(exclusive_or_expression -> and_expression)
action("s222", '&') = Shift("s51")
action("s222", '&&') = Reduce(exclusive_or_expression -> exclusive_or_expression '^' and_expression)
action("s222", ')') = Reduce(exclusive_or_expression -> exclusive_or_expression '^' and_expression)
action("s222", ',') = Reduce(exclusive_or_expression -> exclusive_or_expression '^' and_expression)
action("s222", ':') = Reduce(exclusive_or_expression -> exclusive_or_expression '^' and_expression)
action("s222", ';') = Reduce(exclusive_or_expression -> exclusive_or_expression '^' and_expression)
action("s222", '?') = Reduce(exclusive_or_expression -> exclusive_or_expression '^' and_expression)
action("s222", ']') = Reduce(exclusive_or_expression -> exclusive_or_expression '^' and_expression)
action("s222", '^') = Reduce(exclusive_or_expression -> exclusive_or_expression '^' and_expression)
action("s222", '|') = Reduce(exclusive_or_expression -> exclusive_or_expression '^' and_expression)
action("s222", '||') = Reduce(exclusive_or_expression -> exclusive_or_expression '^' and_expression)
action("s222", '}') = Reduce(exclusive_or_expression -> exclusive_or_expression '^' and_expression)
action("s223", '!=') = Shift("s52")
action("s223", '==') = Shift("s53")
action("s223", '&&') = Reduce(and_expression -> and_expression '&' equality_expression)
action("s223", '&') = Reduce(and_expression -> and_expression '&' equality_expression)
action("s223", ')') = Reduce(and_expression -> and_expression '&' equality_expression)
action("s223", ',') = Reduce(and_expression -> and_expression '&' equality_expression)
action("s223", ':') = Reduce(and_expression -> and_expression '&' equality_expression)
action("s223", ';') = Reduce(and_expression -> and_expression '&' equality_expression)
action("s223", '?') = Reduce(and_expression -> and_expression '&' equality_expression)
action("s223", ']') = Reduce(and_expression -> and_expression '&' equality_expression)
action("s223", '^') = Reduce(and_expression -> and_expression '&' equality_expression)
action("s223", '|') = Reduce(and_expression -> and_expression '&' equality_expression)
action("s223", '||') = Reduce(and_expression -> and_expression '&' equality_expression)
action("s223", '}') = Reduce(and_expression -> and_expression '&' equality_expression)
action("s224", ')') = Shift("s308")
action("s224", ',') = Shift("s36")
action("s225", ')') = Reduce(argument_expression_list -> argument_expression_list ',' assignment_expression)
action("s225", ',') = Reduce(argument_expression_list -> argument_expression_list ',' assignment_expression)
action("s226", ')') = Reduce(argument_expression_list -> assignment_expression)
action("s226", ',') = Reduce(argument_expression_list -> assignment_expression)
action("s227", ')') = Reduce(expression -> assignment_expression)
action("s227", ',') = Reduce(expression -> assignment_expression)
action("s227", ':') = Reduce(expression -> assignment_expression)
action("s227", ';') = Reduce(expression -> assignment_expression)
action("s227", ']') = Reduce(expression -> assignment_expression)
action("s228", ',') = Reduce(initializer -> assignment_expression)
action("s228", ';') = Reduce(initializer -> assignment_expression)
action("s228", '}') = Reduce(initializer -> assignment_expression)
action("s229", '!=') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '%') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '&&') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '&') = Reduce(multiplicative_expression -> cast_expression)
action("s229", ')') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '*') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '+') = Reduce(multiplicative_expression -> cast_expression)
action("s229", ',') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '-') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '/') = Reduce(multiplicative_expression -> cast_expression)
action("s229", ':') = Reduce(multiplicative_expression -> cast_expression)
action("s229", ';') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '<') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '<<') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '<=') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '==') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '>') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '>=') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '>>') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '?') = Reduce(multiplicative_expression -> cast_expression)
action("s229", ']') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '^') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '|') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '||') = Reduce(multiplicative_expression -> cast_expression)
action("s229", '}') = Reduce(multiplicative_expression -> cast_expression)
action("s230", '!') = Reduce(statement -> compound_statement)
action("s230", '&') = Reduce(statement -> compound_statement)
action("s230", '(') = Reduce(statement -> compound_statement)
action("s230", '*') = Reduce(statement -> compound_statement)
action("s230", '+') = Reduce(statement -> compound_statement)
action("s230", '++') = Reduce(statement -> compound_statement)
action("s230", '-') = Reduce(statement -> compound_statement)
action("s230", '--') = Reduce(statement -> compound_statement)
action("s230", ';') = Reduce(statement -> compound_statement)
action("s230", 'break') = Reduce(statement -> compound_statement)
action("s230", 'case') = Reduce(statement -> compound_statement)
action("s230", 'continue') = Reduce(statement -> compound_statement)
action("s230", 'default') = Reduce(statement -> compound_statement)
action("s230", 'do') = Reduce(statement -> compound_statement)
action("s230", 'else') = Reduce(statement -> compound_statement)
action("s230", 'for') = Reduce(statement -> compound_statement)
action("s230", 'goto') = Reduce(statement -> compound_statement)
action("s230", 'if') = Reduce(statement -> compound_statement)
action("s230", 'return') = Reduce(statement -> compound_statement)
action("s230", 'sizeof') = Reduce(statement -> compound_statement)
action("s230", 'switch') = Reduce(statement -> compound_statement)
action("s230", 'while') = Reduce(statement -> compound_statement)
action("s230", '{') = Reduce(statement -> compound_statement)
action("s230", '}') = Reduce(statement -> compound_statement)
action("s230", '~') = Reduce(statement -> compound_statement)
action("s230", CONSTANT) = Reduce(statement -> compound_statement)
action("s230", IDENTIFIER) = Reduce(statement -> compound_statement)
action("s230", STRING_LITERAL) = Reduce(statement -> compound_statement)
action("s231", ')') = Reduce(assignment_expression -> conditional_expression)
action("s231", ',') = Reduce(assignment_expression -> conditional_expression)
action("s231", ':') = Reduce(assignment_expression -> conditional_expression)
action("s231", ';') = Reduce(assignment_expression -> conditional_expression)
action("s231", ']') = Reduce(assignment_expression -> conditional_expression)
action("s231", '}') = Reduce(assignment_expression -> conditional_expression)
action("s232", ',') = Reduce(constant_expression -> conditional_expression)
action("s232", ':') = Reduce(constant_expression -> conditional_expression)
action("s232", ';') = Reduce(constant_expression -> conditional_expression)
action("s232", ']') = Reduce(constant_expression -> conditional_expression)
action("s232", '}') = Reduce(constant_expression -> conditional_expression)
action("s233", '!') = Reduce(declaration_list -> declaration)
action("s233", '&') = Reduce(declaration_list -> declaration)
action("s233", '(') = Reduce(declaration_list -> declaration)
action("s233", '*') = Reduce(declaration_list -> declaration)
action("s233", '+') = Reduce(declaration_list -> declaration)
action("s233", '++') = Reduce(declaration_list -> declaration)
action("s233", '-') = Reduce(declaration_list -> declaration)
action("s233", '--') = Reduce(declaration_list -> declaration)
action("s233", ';') = Reduce(declaration_list -> declaration)
action("s233", 'auto') = Reduce(declaration_list -> declaration)
action("s233", 'break') = Reduce(declaration_list -> declaration)
action("s233", 'case') = Reduce(declaration_list -> declaration)
action("s233", 'char') = Reduce(declaration_list -> declaration)
action("s233", 'const') = Reduce(declaration_list -> declaration)
action("s233", 'continue') = Reduce(declaration_list -> declaration)
action("s233", 'default') = Reduce(declaration_list -> declaration)
action("s233", 'do') = Reduce(declaration_list -> declaration)
action("s233", 'double') = Reduce(declaration_list -> declaration)
action("s233", 'enum') = Reduce(declaration_list -> declaration)
action("s233", 'extern') = Reduce(declaration_list -> declaration)
action("s233", 'float') = Reduce(declaration_list -> declaration)
action("s233", 'for') = Reduce(declaration_list -> declaration)
action("s233", 'goto') = Reduce(declaration_list -> declaration)
action("s233", 'if') = Reduce(declaration_list -> declaration)
action("s233", 'int') = Reduce(declaration_list -> declaration)
action("s233", 'long') = Reduce(declaration_list -> declaration)
action("s233", 'register') = Reduce(declaration_list -> declaration)
action("s233", 'return') = Reduce(declaration_list -> declaration)
action("s233", 'short') = Reduce(declaration_list -> declaration)
action("s233", 'signed') = Reduce(declaration_list -> declaration)
action("s233", 'sizeof') = Reduce(declaration_list -> declaration)
action("s233", 'static') = Reduce(declaration_list -> declaration)
action("s233", 'struct') = Reduce(declaration_list -> declaration)
action("s233", 'switch') = Reduce(declaration_list -> declaration)
action("s233", 'typedef') = Reduce(declaration_list -> declaration)
action("s233", 'union') = Reduce(declaration_list -> declaration)
action("s233", 'unsigned') = Reduce(declaration_list -> declaration)
action("s233", 'void') = Reduce(declaration_list -> declaration)
action("s233", 'volatile') = Reduce(declaration_list -> declaration)
action("s233", 'while') = Reduce(declaration_list -> declaration)
action("s233", '{') = Reduce(declaration_list -> declaration)
action("s233", '}') = Reduce(declaration_list -> declaration)
action("s233", '~') = Reduce(declaration_list -> declaration)
action("s233", CONSTANT) = Reduce(declaration_list -> declaration)
action("s233", IDENTIFIER) = Reduce(declaration_list -> declaration)
action("s233", STRING_LITERAL) = Reduce(declaration_list -> declaration)
action("s233", TYPE_NAME) = Reduce(declaration_list -> declaration)
action("s234", $) = Reduce(external_declaration -> declaration)
action("s234", '(') = Reduce(external_declaration -> declaration)
action("s234", '*') = Reduce(external_declaration -> declaration)
action("s234", 'auto') = Reduce(external_declaration -> declaration)
action("s234", 'char') = Reduce(external_declaration -> declaration)
action("s234", 'const') = Reduce(external_declaration -> declaration)
action("s234", 'double') = Reduce(external_declaration -> declaration)
action("s234", 'enum') = Reduce(external_declaration -> declaration)
action("s234", 'extern') = Reduce(external_declaration -> declaration)
action("s234", 'float') = Reduce(external_declaration -> declaration)
action("s234", 'int') = Reduce(external_declaration -> declaration)
action("s234", 'long') = Reduce(external_declaration -> declaration)
action("s234", 'register') = Reduce(external_declaration -> declaration)
action("s234", 'short') = Reduce(external_declaration -> declaration)
action("s234", 'signed') = Reduce(external_declaration -> declaration)
action("s234", 'static') = Reduce(external_declaration -> declaration)
action("s234", 'struct') = Reduce(external_declaration -> declaration)
action("s234", 'typedef') = Reduce(external_declaration -> declaration)
action("s234", 'union') = Reduce(external_declaration -> declaration)
action("s234", 'unsigned') = Reduce(external_declaration -> declaration)
action("s234", 'void') = Reduce(external_declaration -> declaration)
action("s234", 'volatile') = Reduce(external_declaration -> declaration)
action("s234", IDENTIFIER) = Reduce(external_declaration -> declaration)
action("s234", TYPE_NAME) = Reduce(external_declaration -> declaration)
action("s235", '!') = Reduce(declaration_list -> declaration_list declaration)
action("s235", '&') = Reduce(declaration_list -> declaration_list declaration)
action("s235", '(') = Reduce(declaration_list -> declaration_list declaration)
action("s235", '*') = Reduce(declaration_list -> declaration_list declaration)
action("s235", '+') = Reduce(declaration_list -> declaration_list declaration)
action("s235", '++') = Reduce(declaration_list -> declaration_list declaration)
action("s235", '-') = Reduce(declaration_list -> declaration_list declaration)
action("s235", '--') = Reduce(declaration_list -> declaration_list declaration)
action("s235", ';') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'auto') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'break') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'case') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'char') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'const') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'continue') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'default') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'do') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'double') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'enum') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'extern') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'float') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'for') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'goto') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'if') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'int') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'long') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'register') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'return') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'short') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'signed') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'sizeof') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'static') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'struct') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'switch') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'typedef') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'union') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'unsigned') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'void') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'volatile') = Reduce(declaration_list -> declaration_list declaration)
action("s235", 'while') = Reduce(declaration_list -> declaration_list declaration)
action("s235", '{') = Reduce(declaration_list -> declaration_list declaration)
action("s235", '}') = Reduce(declaration_list -> declaration_list declaration)
action("s235", '~') = Reduce(declaration_list -> declaration_list declaration)
action("s235", CONSTANT) = Reduce(declaration_list -> declaration_list declaration)
action("s235", IDENTIFIER) = Reduce(declaration_list -> declaration_list declaration)
action("s235", STRING_LITERAL) = Reduce(declaration_list -> declaration_list declaration)
action("s235", TYPE_NAME) = Reduce(declaration_list -> declaration_list declaration)
action("s236", $) = Reduce(declaration -> declaration_specifiers ';')
action("s236", '!') = Reduce(declaration -> declaration_specifiers ';')
action("s236", '&') = Reduce(declaration -> declaration_specifiers ';')
action("s236", '(') = Reduce(declaration -> declaration_specifiers ';')
action("s236", '*') = Reduce(declaration -> declaration_specifiers ';')
action("s236", '+') = Reduce(declaration -> declaration_specifiers ';')
action("s236", '++') = Reduce(declaration -> declaration_specifiers ';')
action("s236", '-') = Reduce(declaration -> declaration_specifiers ';')
action("s236", '--') = Reduce(declaration -> declaration_specifiers ';')
action("s236", ';') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'auto') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'break') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'case') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'char') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'const') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'continue') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'default') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'do') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'double') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'enum') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'extern') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'float') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'for') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'goto') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'if') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'int') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'long') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'register') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'return') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'short') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'signed') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'sizeof') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'static') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'struct') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'switch') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'typedef') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'union') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'unsigned') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'void') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'volatile') = Reduce(declaration -> declaration_specifiers ';')
action("s236", 'while') = Reduce(declaration -> declaration_specifiers ';')
action("s236", '{') = Reduce(declaration -> declaration_specifiers ';')
action("s236", '}') = Reduce(declaration -> declaration_specifiers ';')
action("s236", '~') = Reduce(declaration -> declaration_specifiers ';')
action("s236", CONSTANT) = Reduce(declaration -> declaration_specifiers ';')
action("s236", IDENTIFIER) = Reduce(declaration -> declaration_specifiers ';')
action("s236", STRING_LITERAL) = Reduce(declaration -> declaration_specifiers ';')
action("s236", TYPE_NAME) = Reduce(declaration -> declaration_specifiers ';')
action("s237", ')') = Reduce(parameter_declaration -> declaration_specifiers abstract_declarator)
action("s237", ',') = Reduce(parameter_declaration -> declaration_specifiers abstract_declarator)
action("s238", ')') = Reduce(parameter_declaration -> declaration_specifiers declarator)
action("s238", ',') = Reduce(parameter_declaration -> declaration_specifiers declarator)
action("s239", $) = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", '(') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", '*') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'auto') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'char') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'const') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'double') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'enum') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'extern') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'float') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'int') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'long') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'register') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'short') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'signed') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'static') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'struct') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'typedef') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'union') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'unsigned') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'void') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", 'volatile') = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", IDENTIFIER) = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s239", TYPE_NAME) = Reduce(function_definition -> declaration_specifiers declarator compound_statement)
action("s240", $) = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", '(') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", '*') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'auto') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'char') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'const') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'double') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'enum') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'extern') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'float') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'int') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'long') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'register') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'short') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'signed') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'static') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'struct') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'typedef') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'union') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'unsigned') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'void') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", 'volatile') = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", IDENTIFIER) = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s240", TYPE_NAME) = Reduce(function_definition -> declaration_specifiers declarator declaration_list compound_statement)
action("s241", ',') = Shift("s81")
action("s241", ';') = Shift("s242")
action("s242", $) = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", '!') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", '&') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", '(') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", '*') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", '+') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", '++') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", '-') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", '--') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", ';') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'auto') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'break') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'case') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'char') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'const') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'continue') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'default') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'do') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'double') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'enum') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'extern') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'float') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'for') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'goto') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'if') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'int') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'long') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'register') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'return') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'short') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'signed') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'sizeof') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'static') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'struct') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'switch') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'typedef') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'union') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'unsigned') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'void') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'volatile') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", 'while') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", '{') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", '}') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", '~') = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", CONSTANT) = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", IDENTIFIER) = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", STRING_LITERAL) = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s242", TYPE_NAME) = Reduce(declaration -> declaration_specifiers init_declarator_list ';')
action("s243", '=') = Shift("s35")
action("s243", ',') = Reduce(init_declarator -> declarator)
action("s243", ';') = Reduce(init_declarator -> declarator)
action("s244", ':') = Shift("s43")
action("s244", ',') = Reduce(struct_declarator -> declarator)
action("s244", ';') = Reduce(struct_declarator -> declarator)
action("s245", ',') = Reduce(struct_declarator -> declarator ':' constant_expression)
action("s245", ';') = Reduce(struct_declarator -> declarator ':' constant_expression)
action("s246", ',') = Reduce(init_declarator -> declarator '=' initializer)
action("s246", ';') = Reduce(init_declarator -> declarator '=' initializer)
action("s247", $) = Reduce(function_definition -> declarator compound_statement)
action("s247", '(') = Reduce(function_definition -> declarator compound_statement)
action("s247", '*') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'auto') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'char') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'const') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'double') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'enum') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'extern') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'float') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'int') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'long') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'register') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'short') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'signed') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'static') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'struct') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'typedef') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'union') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'unsigned') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'void') = Reduce(function_definition -> declarator compound_statement)
action("s247", 'volatile') = Reduce(function_definition -> declarator compound_statement)
action("s247", IDENTIFIER) = Reduce(function_definition -> declarator compound_statement)
action("s247", TYPE_NAME) = Reduce(function_definition -> declarator compound_statement)
action("s248", $) = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", '(') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", '*') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'auto') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'char') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'const') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'double') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'enum') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'extern') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'float') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'int') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'long') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'register') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'short') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'signed') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'static') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'struct') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'typedef') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'union') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'unsigned') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'void') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", 'volatile') = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", IDENTIFIER) = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s248", TYPE_NAME) = Reduce(function_definition -> declarator declaration_list compound_statement)
action("s249", '(') = Shift("s74")
action("s249", '[') = Shift("s44")
action("s249", ')') = Reduce(abstract_declarator -> direct_abstract_declarator)
action("s249", ',') = Reduce(abstract_declarator -> direct_abstract_declarator)
action("s250", '(') = Shift("s74")
action("s250", '[') = Shift("s44")
action("s250", ')') = Reduce(abstract_declarator -> pointer direct_abstract_declarator)
action("s250", ',') = Reduce(abstract_declarator -> pointer direct_abstract_declarator)
action("s251", '(') = Reduce(direct_abstract_declarator -> direct_abstract_declarator '(' ')')
action("s251", ')') = Reduce(direct_abstract_declarator -> direct_abstract_declarator '(' ')')
action("s251", ',') = Reduce(direct_abstract_declarator -> direct_abstract_declarator '(' ')')
action("s251", '[') = Reduce(direct_abstract_declarator -> direct_abstract_declarator '(' ')')
action("s252", ')') = Shift("s253")
action("s253", '(') = Reduce(direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')')
action("s253", ')') = Reduce(direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')')
action("s253", ',') = Reduce(direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')')
action("s253", '[') = Reduce(direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')')
action("s254", '(') = Reduce(direct_abstract_declarator -> direct_abstract_declarator '[' ']')
action("s254", ')') = Reduce(direct_abstract_declarator -> direct_abstract_declarator '[' ']')
action("s254", ',') = Reduce(direct_abstract_declarator -> direct_abstract_declarator '[' ']')
action("s254", '[') = Reduce(direct_abstract_declarator -> direct_abstract_declarator '[' ']')
action("s255", ']') = Shift("s256")
action("s256", '(') = Reduce(direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']')
action("s256", ')') = Reduce(direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']')
action("s256", ',') = Reduce(direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']')
action("s256", '[') = Reduce(direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']')
action("s257", '(') = Shift("s73")
action("s257", '[') = Shift("s45")
action("s257", ')') = Reduce(declarator -> direct_declarator)
action("s257", ',') = Reduce(declarator -> direct_declarator)
action("s257", ':') = Reduce(declarator -> direct_declarator)
action("s257", ';') = Reduce(declarator -> direct_declarator)
action("s257", '=') = Reduce(declarator -> direct_declarator)
action("s257", 'auto') = Reduce(declarator -> direct_declarator)
action("s257", 'char') = Reduce(declarator -> direct_declarator)
action("s257", 'const') = Reduce(declarator -> direct_declarator)
action("s257", 'double') = Reduce(declarator -> direct_declarator)
action("s257", 'enum') = Reduce(declarator -> direct_declarator)
action("s257", 'extern') = Reduce(declarator -> direct_declarator)
action("s257", 'float') = Reduce(declarator -> direct_declarator)
action("s257", 'int') = Reduce(declarator -> direct_declarator)
action("s257", 'long') = Reduce(declarator -> direct_declarator)
action("s257", 'register') = Reduce(declarator -> direct_declarator)
action("s257", 'short') = Reduce(declarator -> direct_declarator)
action("s257", 'signed') = Reduce(declarator -> direct_declarator)
action("s257", 'static') = Reduce(declarator -> direct_declarator)
action("s257", 'struct') = Reduce(declarator -> direct_declarator)
action("s257", 'typedef') = Reduce(declarator -> direct_declarator)
action("s257", 'union') = Reduce(declarator -> direct_declarator)
action("s257", 'unsigned') = Reduce(declarator -> direct_declarator)
action("s257", 'void') = Reduce(declarator -> direct_declarator)
action("s257", 'volatile') = Reduce(declarator -> direct_declarator)
action("s257", '{') = Reduce(declarator -> direct_declarator)
action("s257", TYPE_NAME) = Reduce(declarator -> direct_declarator)
action("s258", '(') = Shift("s73")
action("s258", '[') = Shift("s45")
action("s258", ')') = Reduce(declarator -> pointer direct_declarator)
action("s258", ',') = Reduce(declarator -> pointer direct_declarator)
action("s258", ':') = Reduce(declarator -> pointer direct_declarator)
action("s258", ';') = Reduce(declarator -> pointer direct_declarator)
action("s258", '=') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'auto') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'char') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'const') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'double') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'enum') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'extern') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'float') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'int') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'long') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'register') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'short') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'signed') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'static') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'struct') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'typedef') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'union') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'unsigned') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'void') = Reduce(declarator -> pointer direct_declarator)
action("s258", 'volatile') = Reduce(declarator -> pointer direct_declarator)
action("s258", '{') = Reduce(declarator -> pointer direct_declarator)
action("s258", TYPE_NAME) = Reduce(declarator -> pointer direct_declarator)
action("s259", '(') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", ')') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", ',') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", ':') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", ';') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", '=') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", '[') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'auto') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'char') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'const') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'double') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'enum') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'extern') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'float') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'int') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'long') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'register') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'short') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'signed') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'static') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'struct') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'typedef') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'union') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'unsigned') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'void') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", 'volatile') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", '{') = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s259", TYPE_NAME) = Reduce(direct_declarator -> direct_declarator '(' ')')
action("s260", ')') = Shift("s261")
action("s260", ',') = Shift("s283")
action("s261", '(') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", ')') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", ',') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", ':') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", ';') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", '=') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", '[') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'auto') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'char') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'const') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'double') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'enum') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'extern') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'float') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'int') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'long') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'register') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'short') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'signed') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'static') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'struct') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'typedef') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'union') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'unsigned') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'void') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", 'volatile') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", '{') = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s261", TYPE_NAME) = Reduce(direct_declarator -> direct_declarator '(' identifier_list ')')
action("s262", ')') = Shift("s263")
action("s263", '(') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", ')') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", ',') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", ':') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", ';') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", '=') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", '[') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'auto') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'char') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'const') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'double') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'enum') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'extern') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'float') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'int') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'long') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'register') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'short') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'signed') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'static') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'struct') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'typedef') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'union') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'unsigned') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'void') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", 'volatile') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", '{') = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s263", TYPE_NAME) = Reduce(direct_declarator -> direct_declarator '(' parameter_type_list ')')
action("s264", '(') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", ')') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", ',') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", ':') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", ';') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", '=') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", '[') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'auto') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'char') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'const') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'double') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'enum') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'extern') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'float') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'int') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'long') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'register') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'short') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'signed') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'static') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'struct') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'typedef') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'union') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'unsigned') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'void') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", 'volatile') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", '{') = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s264", TYPE_NAME) = Reduce(direct_declarator -> direct_declarator '[' ']')
action("s265", ']') = Shift("s266")
action("s266", '(') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", ')') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", ',') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", ':') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", ';') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", '=') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", '[') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'auto') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'char') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'const') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'double') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'enum') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'extern') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'float') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'int') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'long') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'register') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'short') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'signed') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'static') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'struct') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'typedef') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'union') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'unsigned') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'void') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", 'volatile') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", '{') = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s266", TYPE_NAME) = Reduce(direct_declarator -> direct_declarator '[' constant_expression ']')
action("s267", '(') = Reduce(type_specifier -> enum_specifier)
action("s267", ')') = Reduce(type_specifier -> enum_specifier)
action("s267", '*') = Reduce(type_specifier -> enum_specifier)
action("s267", ',') = Reduce(type_specifier -> enum_specifier)
action("s267", ':') = Reduce(type_specifier -> enum_specifier)
action("s267", ';') = Reduce(type_specifier -> enum_specifier)
action("s267", '[') = Reduce(type_specifier -> enum_specifier)
action("s267", 'auto') = Reduce(type_specifier -> enum_specifier)
action("s267", 'char') = Reduce(type_specifier -> enum_specifier)
action("s267", 'const') = Reduce(type_specifier -> enum_specifier)
action("s267", 'double') = Reduce(type_specifier -> enum_specifier)
action("s267", 'enum') = Reduce(type_specifier -> enum_specifier)
action("s267", 'extern') = Reduce(type_specifier -> enum_specifier)
action("s267", 'float') = Reduce(type_specifier -> enum_specifier)
action("s267", 'int') = Reduce(type_specifier -> enum_specifier)
action("s267", 'long') = Reduce(type_specifier -> enum_specifier)
action("s267", 'register') = Reduce(type_specifier -> enum_specifier)
action("s267", 'short') = Reduce(type_specifier -> enum_specifier)
action("s267", 'signed') = Reduce(type_specifier -> enum_specifier)
action("s267", 'static') = Reduce(type_specifier -> enum_specifier)
action("s267", 'struct') = Reduce(type_specifier -> enum_specifier)
action("s267", 'typedef') = Reduce(type_specifier -> enum_specifier)
action("s267", 'union') = Reduce(type_specifier -> enum_specifier)
action("s267", 'unsigned') = Reduce(type_specifier -> enum_specifier)
action("s267", 'void') = Reduce(type_specifier -> enum_specifier)
action("s267", 'volatile') = Reduce(type_specifier -> enum_specifier)
action("s267", IDENTIFIER) = Reduce(type_specifier -> enum_specifier)
action("s267", TYPE_NAME) = Reduce(type_specifier -> enum_specifier)
action("s268", ',') = Reduce(enumerator_list -> enumerator)
action("s268", '}') = Reduce(enumerator_list -> enumerator)
action("s269", ',') = Reduce(enumerator_list -> enumerator_list ',' enumerator)
action("s269", '}') = Reduce(enumerator_list -> enumerator_list ',' enumerator)
action("s270", '!=') = Shift("s52")
action("s270", '==') = Shift("s53")
action("s270", '&&') = Reduce(and_expression -> equality_expression)
action("s270", '&') = Reduce(and_expression -> equality_expression)
action("s270", ')') = Reduce(and_expression -> equality_expression)
action("s270", ',') = Reduce(and_expression -> equality_expression)
action("s270", ':') = Reduce(and_expression -> equality_expression)
action("s270", ';') = Reduce(and_expression -> equality_expression)
action("s270", '?') = Reduce(and_expression -> equality_expression)
action("s270", ']') = Reduce(and_expression -> equality_expression)
action("s270", '^') = Reduce(and_expression -> equality_expression)
action("s270", '|') = Reduce(and_expression -> equality_expression)
action("s270", '||') = Reduce(and_expression -> equality_expression)
action("s270", '}') = Reduce(and_expression -> equality_expression)
action("s271", '<') = Shift("s54")
action("s271", '<=') = Shift("s55")
action("s271", '>') = Shift("s56")
action("s271", '>=') = Shift("s57")
action("s271", '!=') = Reduce(equality_expression -> equality_expression '!=' relational_expression)
action("s271", '&&') = Reduce(equality_expression -> equality_expression '!=' relational_expression)
action("s271", '&') = Reduce(equality_expression -> equality_expression '!=' relational_expression)
action("s271", ')') = Reduce(equality_expression -> equality_expression '!=' relational_expression)
action("s271", ',') = Reduce(equality_expression -> equality_expression '!=' relational_expression)
action("s271", ':') = Reduce(equality_expression -> equality_expression '!=' relational_expression)
action("s271", ';') = Reduce(equality_expression -> equality_expression '!=' relational_expression)
action("s271", '==') = Reduce(equality_expression -> equality_expression '!=' relational_expression)
action("s271", '?') = Reduce(equality_expression -> equality_expression '!=' relational_expression)
action("s271", ']') = Reduce(equality_expression -> equality_expression '!=' relational_expression)
action("s271", '^') = Reduce(equality_expression -> equality_expression '!=' relational_expression)
action("s271", '|') = Reduce(equality_expression -> equality_expression '!=' relational_expression)
action("s271", '||') = Reduce(equality_expression -> equality_expression '!=' relational_expression)
action("s271", '}') = Reduce(equality_expression -> equality_expression '!=' relational_expression)
action("s272", '<') = Shift("s54")
action("s272", '<=') = Shift("s55")
action("s272", '>') = Shift("s56")
action("s272", '>=') = Shift("s57")
action("s272", '!=') = Reduce(equality_expression -> equality_expression '==' relational_expression)
action("s272", '&&') = Reduce(equality_expression -> equality_expression '==' relational_expression)
action("s272", '&') = Reduce(equality_expression -> equality_expression '==' relational_expression)
action("s272", ')') = Reduce(equality_expression -> equality_expression '==' relational_expression)
action("s272", ',') = Reduce(equality_expression -> equality_expression '==' relational_expression)
action("s272", ':') = Reduce(equality_expression -> equality_expression '==' relational_expression)
action("s272", ';') = Reduce(equality_expression -> equality_expression '==' relational_expression)
action("s272", '==') = Reduce(equality_expression -> equality_expression '==' relational_expression)
action("s272", '?') = Reduce(equality_expression -> equality_expression '==' relational_expression)
action("s272", ']') = Reduce(equality_expression -> equality_expression '==' relational_expression)
action("s272", '^') = Reduce(equality_expression -> equality_expression '==' relational_expression)
action("s272", '|') = Reduce(equality_expression -> equality_expression '==' relational_expression)
action("s272", '||') = Reduce(equality_expression -> equality_expression '==' relational_expression)
action("s272", '}') = Reduce(equality_expression -> equality_expression '==' relational_expression)
action("s273", '^') = Shift("s50")
action("s273", '&&') = Reduce(inclusive_or_expression -> exclusive_or_expression)
action("s273", ')') = Reduce(inclusive_or_expression -> exclusive_or_expression)
action("s273", ',') = Reduce(inclusive_or_expression -> exclusive_or_expression)
action("s273", ':') = Reduce(inclusive_or_expression -> exclusive_or_expression)
action("s273", ';') = Reduce(inclusive_or_expression -> exclusive_or_expression)
action("s273", '?') = Reduce(inclusive_or_expression -> exclusive_or_expression)
action("s273", ']') = Reduce(inclusive_or_expression -> exclusive_or_expression)
action("s273", '|') = Reduce(inclusive_or_expression -> exclusive_or_expression)
action("s273", '||') = Reduce(inclusive_or_expression -> exclusive_or_expression)
action("s273", '}') = Reduce(inclusive_or_expression -> exclusive_or_expression)
action("s274", '^') = Shift("s50")
action("s274", '&&') = Reduce(inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression)
action("s274", ')') = Reduce(inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression)
action("s274", ',') = Reduce(inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression)
action("s274", ':') = Reduce(inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression)
action("s274", ';') = Reduce(inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression)
action("s274", '?') = Reduce(inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression)
action("s274", ']') = Reduce(inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression)
action("s274", '|') = Reduce(inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression)
action("s274", '||') = Reduce(inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression)
action("s274", '}') = Reduce(inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression)
action("s275", ',') = Shift("s37")
action("s275", ';') = Shift("s279")
action("s276", ',') = Shift("s37")
action("s276", ':') = Shift("s46")
action("s277", ',') = Shift("s37")
action("s277", ']') = Shift("s315")
action("s278", ')') = Reduce(expression -> expression ',' assignment_expression)
action("s278", ',') = Reduce(expression -> expression ',' assignment_expression)
action("s278", ':') = Reduce(expression -> expression ',' assignment_expression)
action("s278", ';') = Reduce(expression -> expression ',' assignment_expression)
action("s278", ']') = Reduce(expression -> expression ',' assignment_expression)
action("s279", '!') = Reduce(expression_statement -> expression ';')
action("s279", '&') = Reduce(expression_statement -> expression ';')
action("s279", '(') = Reduce(expression_statement -> expression ';')
action("s279", ')') = Reduce(expression_statement -> expression ';')
action("s279", '*') = Reduce(expression_statement -> expression ';')
action("s279", '+') = Reduce(expression_statement -> expression ';')
action("s279", '++') = Reduce(expression_statement -> expression ';')
action("s279", '-') = Reduce(expression_statement -> expression ';')
action("s279", '--') = Reduce(expression_statement -> expression ';')
action("s279", ';') = Reduce(expression_statement -> expression ';')
action("s279", 'break') = Reduce(expression_statement -> expression ';')
action("s279", 'case') = Reduce(expression_statement -> expression ';')
action("s279", 'continue') = Reduce(expression_statement -> expression ';')
action("s279", 'default') = Reduce(expression_statement -> expression ';')
action("s279", 'do') = Reduce(expression_statement -> expression ';')
action("s279", 'else') = Reduce(expression_statement -> expression ';')
action("s279", 'for') = Reduce(expression_statement -> expression ';')
action("s279", 'goto') = Reduce(expression_statement -> expression ';')
action("s279", 'if') = Reduce(expression_statement -> expression ';')
action("s279", 'return') = Reduce(expression_statement -> expression ';')
action("s279", 'sizeof') = Reduce(expression_statement -> expression ';')
action("s279", 'switch') = Reduce(expression_statement -> expression ';')
action("s279", 'while') = Reduce(expression_statement -> expression ';')
action("s279", '{') = Reduce(expression_statement -> expression ';')
action("s279", '}') = Reduce(expression_statement -> expression ';')
action("s279", '~') = Reduce(expression_statement -> expression ';')
action("s279", CONSTANT) = Reduce(expression_statement -> expression ';')
action("s279", IDENTIFIER) = Reduce(expression_statement -> expression ';')
action("s279", STRING_LITERAL) = Reduce(expression_statement -> expression ';')
action("s280", '!') = Reduce(statement -> expression_statement)
action("s280", '&') = Reduce(statement -> expression_statement)
action("s280", '(') = Reduce(statement -> expression_statement)
action("s280", '*') = Reduce(statement -> expression_statement)
action("s280", '+') = Reduce(statement -> expression_statement)
action("s280", '++') = Reduce(statement -> expression_statement)
action("s280", '-') = Reduce(statement -> expression_statement)
action("s280", '--') = Reduce(statement -> expression_statement)
action("s280", ';') = Reduce(statement -> expression_statement)
action("s280", 'break') = Reduce(statement -> expression_statement)
action("s280", 'case') = Reduce(statement -> expression_statement)
action("s280", 'continue') = Reduce(statement -> expression_statement)
action("s280", 'default') = Reduce(statement -> expression_statement)
action("s280", 'do') = Reduce(statement -> expression_statement)
action("s280", 'else') = Reduce(statement -> expression_statement)
action("s280", 'for') = Reduce(statement -> expression_statement)
action("s280", 'goto') = Reduce(statement -> expression_statement)
action("s280", 'if') = Reduce(statement -> expression_statement)
action("s280", 'return') = Reduce(statement -> expression_statement)
action("s280", 'sizeof') = Reduce(statement -> expression_statement)
action("s280", 'switch') = Reduce(statement -> expression_statement)
action("s280", 'while') = Reduce(statement -> expression_statement)
action("s280", '{') = Reduce(statement -> expression_statement)
action("s280", '}') = Reduce(statement -> expression_statement)
action("s280", '~') = Reduce(statement -> expression_statement)
action("s280", CONSTANT) = Reduce(statement -> expression_statement)
action("s280", IDENTIFIER) = Reduce(statement -> expression_statement)
action("s280", STRING_LITERAL) = Reduce(statement -> expression_statement)
action("s281", $) = Reduce(translation_unit -> external_declaration)
action("s281", '(') = Reduce(translation_unit -> external_declaration)
action("s281", '*') = Reduce(translation_unit -> external_declaration)
action("s281", 'auto') = Reduce(translation_unit -> external_declaration)
action("s281", 'char') = Reduce(translation_unit -> external_declaration)
action("s281", 'const') = Reduce(translation_unit -> external_declaration)
action("s281", 'double') = Reduce(translation_unit -> external_declaration)
action("s281", 'enum') = Reduce(translation_unit -> external_declaration)
action("s281", 'extern') = Reduce(translation_unit -> external_declaration)
action("s281", 'float') = Reduce(translation_unit -> external_declaration)
action("s281", 'int') = Reduce(translation_unit -> external_declaration)
action("s281", 'long') = Reduce(translation_unit -> external_declaration)
action("s281", 'register') = Reduce(translation_unit -> external_declaration)
action("s281", 'short') = Reduce(translation_unit -> external_declaration)
action("s281", 'signed') = Reduce(translation_unit -> external_declaration)
action("s281", 'static') = Reduce(translation_unit -> external_declaration)
action("s281", 'struct') = Reduce(translation_unit -> external_declaration)
action("s281", 'typedef') = Reduce(translation_unit -> external_declaration)
action("s281", 'union') = Reduce(translation_unit -> external_declaration)
action("s281", 'unsigned') = Reduce(translation_unit -> external_declaration)
action("s281", 'void') = Reduce(translation_unit -> external_declaration)
action("s281", 'volatile') = Reduce(translation_unit -> external_declaration)
action("s281", IDENTIFIER) = Reduce(translation_unit -> external_declaration)
action("s281", TYPE_NAME) = Reduce(translation_unit -> external_declaration)
action("s282", $) = Reduce(external_declaration -> function_definition)
action("s282", '(') = Reduce(external_declaration -> function_definition)
action("s282", '*') = Reduce(external_declaration -> function_definition)
action("s282", 'auto') = Reduce(external_declaration -> function_definition)
action("s282", 'char') = Reduce(external_declaration -> function_definition)
action("s282", 'const') = Reduce(external_declaration -> function_definition)
action("s282", 'double') = Reduce(external_declaration -> function_definition)
action("s282", 'enum') = Reduce(external_declaration -> function_definition)
action("s282", 'extern') = Reduce(external_declaration -> function_definition)
action("s282", 'float') = Reduce(external_declaration -> function_definition)
action("s282", 'int') = Reduce(external_declaration -> function_definition)
action("s282", 'long') = Reduce(external_declaration -> function_definition)
action("s282", 'register') = Reduce(external_declaration -> function_definition)
action("s282", 'short') = Reduce(external_declaration -> function_definition)
action("s282", 'signed') = Reduce(external_declaration -> function_definition)
action("s282", 'static') = Reduce(external_declaration -> function_definition)
action("s282", 'struct') = Reduce(external_declaration -> function_definition)
action("s282", 'typedef') = Reduce(external_declaration -> function_definition)
action("s282", 'union') = Reduce(external_declaration -> function_definition)
action("s282", 'unsigned') = Reduce(external_declaration -> function_definition)
action("s282", 'void') = Reduce(external_declaration -> function_definition)
action("s282", 'volatile') = Reduce(external_declaration -> function_definition)
action("s282", IDENTIFIER) = Reduce(external_declaration -> function_definition)
action("s282", TYPE_NAME) = Reduce(external_declaration -> function_definition)
action("s283", IDENTIFIER) = Shift("s284")
action("s284", ')') = Reduce(identifier_list -> identifier_list ',' IDENTIFIER)
action("s284", ',') = Reduce(identifier_list -> identifier_list ',' IDENTIFIER)
action("s285", '|') = Shift("s49")
action("s285", '&&') = Reduce(logical_and_expression -> inclusive_or_expression)
action("s285", ')') = Reduce(logical_and_expression -> inclusive_or_expression)
action("s285", ',') = Reduce(logical_and_expression -> inclusive_or_expression)
action("s285", ':') = Reduce(logical_and_expression -> inclusive_or_expression)
action("s285", ';') = Reduce(logical_and_expression -> inclusive_or_expression)
action("s285", '?') = Reduce(logical_and_expression -> inclusive_or_expression)
action("s285", ']') = Reduce(logical_and_expression -> inclusive_or_expression)
action("s285", '||') = Reduce(logical_and_expression -> inclusive_or_expression)
action("s285", '}') = Reduce(logical_and_expression -> inclusive_or_expression)
action("s286", '|') = Shift("s49")
action("s286", '&&') = Reduce(logical_and_expression -> logical_and_expression '&&' inclusive_or_expression)
action("s286", ')') = Reduce(logical_and_expression -> logical_and_expression '&&' inclusive_or_expression)
action("s286", ',') = Reduce(logical_and_expression -> logical_and_expression '&&' inclusive_or_expression)
action("s286", ':') = Reduce(logical_and_expression -> logical_and_expression '&&' inclusive_or_expression)
action("s286", ';') = Reduce(logical_and_expression -> logical_and_expression '&&' inclusive_or_expression)
action("s286", '?') = Reduce(logical_and_expression -> logical_and_expression '&&' inclusive_or_expression)
action("s286", ']') = Reduce(logical_and_expression -> logical_and_expression '&&' inclusive_or_expression)
action("s286", '||') = Reduce(logical_and_expression -> logical_and_expression '&&' inclusive_or_expression)
action("s286", '}') = Reduce(logical_and_expression -> logical_and_expression '&&' inclusive_or_expression)
action("s287", ',') = Reduce(init_declarator_list -> init_declarator)
action("s287", ';') = Reduce(init_declarator_list -> init_declarator)
action("s288", ',') = Reduce(init_declarator_list -> init_declarator_list ',' init_declarator)
action("s288", ';') = Reduce(init_declarator_list -> init_declarator_list ',' init_declarator)
action("s289", ',') = Reduce(initializer_list -> initializer)
action("s289", '}') = Reduce(initializer_list -> initializer)
action("s290", ',') = Reduce(initializer_list -> initializer_list ',' initializer)
action("s290", '}') = Reduce(initializer_list -> initializer_list ',' initializer)
action("s291", '!') = Reduce(statement -> iteration_statement)
action("s291", '&') = Reduce(statement -> iteration_statement)
action("s291", '(') = Reduce(statement -> iteration_statement)
action("s291", '*') = Reduce(statement -> iteration_statement)
action("s291", '+') = Reduce(statement -> iteration_statement)
action("s291", '++') = Reduce(statement -> iteration_statement)
action("s291", '-') = Reduce(statement -> iteration_statement)
action("s291", '--') = Reduce(statement -> iteration_statement)
action("s291", ';') = Reduce(statement -> iteration_statement)
action("s291", 'break') = Reduce(statement -> iteration_statement)
action("s291", 'case') = Reduce(statement -> iteration_statement)
action("s291", 'continue') = Reduce(statement -> iteration_statement)
action("s291", 'default') = Reduce(statement -> iteration_statement)
action("s291", 'do') = Reduce(statement -> iteration_statement)
action("s291", 'else') = Reduce(statement -> iteration_statement)
action("s291", 'for') = Reduce(statement -> iteration_statement)
action("s291", 'goto') = Reduce(statement -> iteration_statement)
action("s291", 'if') = Reduce(statement -> iteration_statement)
action("s291", 'return') = Reduce(statement -> iteration_statement)
action("s291", 'sizeof') = Reduce(statement -> iteration_statement)
action("s291", 'switch') = Reduce(statement -> iteration_statement)
action("s291", 'while') = Reduce(statement -> iteration_statement)
action("s291", '{') = Reduce(statement -> iteration_statement)
action("s291", '}') = Reduce(statement -> iteration_statement)
action("s291", '~') = Reduce(statement -> iteration_statement)
action("s291", CONSTANT) = Reduce(statement -> iteration_statement)
action("s291", IDENTIFIER) = Reduce(statement -> iteration_statement)
action("s291", STRING_LITERAL) = Reduce(statement -> iteration_statement)
action("s292", '!') = Reduce(statement -> jump_statement)
action("s292", '&') = Reduce(statement -> jump_statement)
action("s292", '(') = Reduce(statement -> jump_statement)
action("s292", '*') = Reduce(statement -> jump_statement)
action("s292", '+') = Reduce(statement -> jump_statement)
action("s292", '++') = Reduce(statement -> jump_statement)
action("s292", '-') = Reduce(statement -> jump_statement)
action("s292", '--') = Reduce(statement -> jump_statement)
action("s292", ';') = Reduce(statement -> jump_statement)
action("s292", 'break') = Reduce(statement -> jump_statement)
action("s292", 'case') = Reduce(statement -> jump_statement)
action("s292", 'continue') = Reduce(statement -> jump_statement)
action("s292", 'default') = Reduce(statement -> jump_statement)
action("s292", 'do') = Reduce(statement -> jump_statement)
action("s292", 'else') = Reduce(statement -> jump_statement)
action("s292", 'for') = Reduce(statement -> jump_statement)
action("s292", 'goto') = Reduce(statement -> jump_statement)
action("s292", 'if') = Reduce(statement -> jump_statement)
action("s292", 'return') = Reduce(statement -> jump_statement)
action("s292", 'sizeof') = Reduce(statement -> jump_statement)
action("s292", 'switch') = Reduce(statement -> jump_statement)
action("s292", 'while') = Reduce(statement -> jump_statement)
action("s292", '{') = Reduce(statement -> jump_statement)
action("s292", '}') = Reduce(statement -> jump_statement)
action("s292", '~') = Reduce(statement -> jump_statement)
action("s292", CONSTANT) = Reduce(statement -> jump_statement)
action("s292", IDENTIFIER) = Reduce(statement -> jump_statement)
action("s292", STRING_LITERAL) = Reduce(statement -> jump_statement)
action("s293", '!') = Reduce(statement -> labeled_statement)
action("s293", '&') = Reduce(statement -> labeled_statement)
action("s293", '(') = Reduce(statement -> labeled_statement)
action("s293", '*') = Reduce(statement -> labeled_statement)
action("s293", '+') = Reduce(statement -> labeled_statement)
action("s293", '++') = Reduce(statement -> labeled_statement)
action("s293", '-') = Reduce(statement -> labeled_statement)
action("s293", '--') = Reduce(statement -> labeled_statement)
action("s293", ';') = Reduce(statement -> labeled_statement)
action("s293", 'break') = Reduce(statement -> labeled_statement)
action("s293", 'case') = Reduce(statement -> labeled_statement)
action("s293", 'continue') = Reduce(statement -> labeled_statement)
action("s293", 'default') = Reduce(statement -> labeled_statement)
action("s293", 'do') = Reduce(statement -> labeled_statement)
action("s293", 'else') = Reduce(statement -> labeled_statement)
action("s293", 'for') = Reduce(statement -> labeled_statement)
action("s293", 'goto') = Reduce(statement -> labeled_statement)
action("s293", 'if') = Reduce(statement -> labeled_statement)
action("s293", 'return') = Reduce(statement -> labeled_statement)
action("s293", 'sizeof') = Reduce(statement -> labeled_statement)
action("s293", 'switch') = Reduce(statement -> labeled_statement)
action("s293", 'while') = Reduce(statement -> labeled_statement)
action("s293", '{') = Reduce(statement -> labeled_statement)
action("s293", '}') = Reduce(statement -> labeled_statement)
action("s293", '~') = Reduce(statement -> labeled_statement)
action("s293", CONSTANT) = Reduce(statement -> labeled_statement)
action("s293", IDENTIFIER) = Reduce(statement -> labeled_statement)
action("s293", STRING_LITERAL) = Reduce(statement -> labeled_statement)
action("s294", '&&') = Shift("s48")
action("s294", ')') = Reduce(logical_or_expression -> logical_and_expression)
action("s294", ',') = Reduce(logical_or_expression -> logical_and_expression)
action("s294", ':') = Reduce(logical_or_expression -> logical_and_expression)
action("s294", ';') = Reduce(logical_or_expression -> logical_and_expression)
action("s294", '?') = Reduce(logical_or_expression -> logical_and_expression)
action("s294", ']') = Reduce(logical_or_expression -> logical_and_expression)
action("s294", '||') = Reduce(logical_or_expression -> logical_and_expression)
action("s294", '}') = Reduce(logical_or_expression -> logical_and_expression)
action("s295", '&&') = Shift("s48")
action("s295", ')') = Reduce(logical_or_expression -> logical_or_expression '||' logical_and_expression)
action("s295", ',') = Reduce(logical_or_expression -> logical_or_expression '||' logical_and_expression)
action("s295", ':') = Reduce(logical_or_expression -> logical_or_expression '||' logical_and_expression)
action("s295", ';') = Reduce(logical_or_expression -> logical_or_expression '||' logical_and_expression)
action("s295", '?') = Reduce(logical_or_expression -> logical_or_expression '||' logical_and_expression)
action("s295", ']') = Reduce(logical_or_expression -> logical_or_expression '||' logical_and_expression)
action("s295", '||') = Reduce(logical_or_expression -> logical_or_expression '||' logical_and_expression)
action("s295", '}') = Reduce(logical_or_expression -> logical_or_expression '||' logical_and_expression)
action("s296", '?') = Shift("s31")
action("s296", '||') = Shift("s47")
action("s296", ')') = Reduce(conditional_expression -> logical_or_expression)
action("s296", ',') = Reduce(conditional_expression -> logical_or_expression)
action("s296", ':') = Reduce(conditional_expression -> logical_or_expression)
action("s296", ';') = Reduce(conditional_expression -> logical_or_expression)
action("s296", ']') = Reduce(conditional_expression -> logical_or_expression)
action("s296", '}') = Reduce(conditional_expression -> logical_or_expression)
action("s297", ')') = Reduce(conditional_expression -> logical_or_expression '?' expression ':' conditional_expression)
action("s297", ',') = Reduce(conditional_expression -> logical_or_expression '?' expression ':' conditional_expression)
action("s297", ':') = Reduce(conditional_expression -> logical_or_expression '?' expression ':' conditional_expression)
action("s297", ';') = Reduce(conditional_expression -> logical_or_expression '?' expression ':' conditional_expression)
action("s297", ']') = Reduce(conditional_expression -> logical_or_expression '?' expression ':' conditional_expression)
action("s297", '}') = Reduce(conditional_expression -> logical_or_expression '?' expression ':' conditional_expression)
action("s298", '%') = Shift("s64")
action("s298", '*') = Shift("s65")
action("s298", '/') = Shift("s66")
action("s298", '!=') = Reduce(additive_expression -> multiplicative_expression)
action("s298", '&&') = Reduce(additive_expression -> multiplicative_expression)
action("s298", '&') = Reduce(additive_expression -> multiplicative_expression)
action("s298", ')') = Reduce(additive_expression -> multiplicative_expression)
action("s298", '+') = Reduce(additive_expression -> multiplicative_expression)
action("s298", ',') = Reduce(additive_expression -> multiplicative_expression)
action("s298", '-') = Reduce(additive_expression -> multiplicative_expression)
action("s298", ':') = Reduce(additive_expression -> multiplicative_expression)
action("s298", ';') = Reduce(additive_expression -> multiplicative_expression)
action("s298", '<') = Reduce(additive_expression -> multiplicative_expression)
action("s298", '<<') = Reduce(additive_expression -> multiplicative_expression)
action("s298", '<=') = Reduce(additive_expression -> multiplicative_expression)
action("s298", '==') = Reduce(additive_expression -> multiplicative_expression)
action("s298", '>') = Reduce(additive_expression -> multiplicative_expression)
action("s298", '>=') = Reduce(additive_expression -> multiplicative_expression)
action("s298", '>>') = Reduce(additive_expression -> multiplicative_expression)
action("s298", '?') = Reduce(additive_expression -> multiplicative_expression)
action("s298", ']') = Reduce(additive_expression -> multiplicative_expression)
action("s298", '^') = Reduce(additive_expression -> multiplicative_expression)
action("s298", '|') = Reduce(additive_expression -> multiplicative_expression)
action("s298", '||') = Reduce(additive_expression -> multiplicative_expression)
action("s298", '}') = Reduce(additive_expression -> multiplicative_expression)
action("s299", '!=') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '%') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '&&') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '&') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", ')') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '*') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '+') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", ',') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '-') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '/') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", ':') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", ';') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '<') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '<<') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '<=') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '==') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '>') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '>=') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '>>') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '?') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", ']') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '^') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '|') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '||') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s299", '}') = Reduce(multiplicative_expression -> multiplicative_expression '%' cast_expression)
action("s300", '!=') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '%') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '&&') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '&') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", ')') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '*') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '+') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", ',') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '-') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '/') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", ':') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", ';') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '<') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '<<') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '<=') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '==') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '>') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '>=') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '>>') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '?') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", ']') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '^') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '|') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '||') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s300", '}') = Reduce(multiplicative_expression -> multiplicative_expression '*' cast_expression)
action("s301", '!=') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '%') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '&&') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '&') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", ')') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '*') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '+') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", ',') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '-') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '/') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", ':') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", ';') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '<') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '<<') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '<=') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '==') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '>') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '>=') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '>>') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '?') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", ']') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '^') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '|') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '||') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s301", '}') = Reduce(multiplicative_expression -> multiplicative_expression '/' cast_expression)
action("s302", ')') = Reduce(parameter_list -> parameter_declaration)
action("s302", ',') = Reduce(parameter_list -> parameter_declaration)
action("s303", ',') = Shift("s75")
action("s303", ')') = Reduce(parameter_type_list -> parameter_list)
action("s304", ')') = Reduce(parameter_type_list -> parameter_list ',' '...')
action("s305", ')') = Reduce(parameter_list -> parameter_list ',' parameter_declaration)
action("s305", ',') = Reduce(parameter_list -> parameter_list ',' parameter_declaration)
action("s306", '(') = Shift("s5")
action("s306", '++') = Shift("s309")
action("s306", '--') = Shift("s310")
action("s306", '->') = Shift("s311")
action("s306", '.') = Shift("s313")
action("s306", '[') = Shift("s32")
action("s306", '!=') = Reduce(unary_expression -> postfix_expression)
action("s306", '%') = Reduce(unary_expression -> postfix_expression)
action("s306", '%=') = Reduce(unary_expression -> postfix_expression)
action("s306", '&&') = Reduce(unary_expression -> postfix_expression)
action("s306", '&') = Reduce(unary_expression -> postfix_expression)
action("s306", '&=') = Reduce(unary_expression -> postfix_expression)
action("s306", ')') = Reduce(unary_expression -> postfix_expression)
action("s306", '*') = Reduce(unary_expression -> postfix_expression)
action("s306", '*=') = Reduce(unary_expression -> postfix_expression)
action("s306", '+') = Reduce(unary_expression -> postfix_expression)
action("s306", '+=') = Reduce(unary_expression -> postfix_expression)
action("s306", ',') = Reduce(unary_expression -> postfix_expression)
action("s306", '-') = Reduce(unary_expression -> postfix_expression)
action("s306", '-=') = Reduce(unary_expression -> postfix_expression)
action("s306", '/') = Reduce(unary_expression -> postfix_expression)
action("s306", '/=') = Reduce(unary_expression -> postfix_expression)
action("s306", ':') = Reduce(unary_expression -> postfix_expression)
action("s306", ';') = Reduce(unary_expression -> postfix_expression)
action("s306", '<') = Reduce(unary_expression -> postfix_expression)
action("s306", '<<') = Reduce(unary_expression -> postfix_expression)
action("s306", '<<=') = Reduce(unary_expression -> postfix_expression)
action("s306", '<=') = Reduce(unary_expression -> postfix_expression)
action("s306", '=') = Reduce(unary_expression -> postfix_expression)
action("s306", '==') = Reduce(unary_expression -> postfix_expression)
action("s306", '>') = Reduce(unary_expression -> postfix_expression)
action("s306", '>=') = Reduce(unary_expression -> postfix_expression)
action("s306", '>>') = Reduce(unary_expression -> postfix_expression)
action("s306", '>>=') = Reduce(unary_expression -> postfix_expression)
action("s306", '?') = Reduce(unary_expression -> postfix_expression)
action("s306", ']') = Reduce(unary_expression -> postfix_expression)
action("s306", '^') = Reduce(unary_expression -> postfix_expression)
action("s306", '^=') = Reduce(unary_expression -> postfix_expression)
action("s306", '|') = Reduce(unary_expression -> postfix_expression)
action("s306", '|=') = Reduce(unary_expression -> postfix_expression)
action("s306", '||') = Reduce(unary_expression -> postfix_expression)
action("s306", '}') = Reduce(unary_expression -> postfix_expression)
action("s307", '!=') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '%') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '%=') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '&&') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '&') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '&=') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '(') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", ')') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '*') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '*=') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '+') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '++') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '+=') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", ',') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '-') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '--') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '-=') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '->') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '.') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '/') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '/=') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", ':') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", ';') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '<') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '<<') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '<<=') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '<=') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '=') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '==') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '>') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '>=') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '>>') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '>>=') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '?') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '[') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", ']') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '^') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '^=') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '|') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '|=') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '||') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s307", '}') = Reduce(postfix_expression -> postfix_expression '(' ')')
action("s308", '!=') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '%') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '%=') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '&&') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '&') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '&=') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '(') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", ')') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '*') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '*=') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '+') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '++') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '+=') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", ',') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '-') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '--') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '-=') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '->') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '.') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '/') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '/=') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", ':') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", ';') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '<') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '<<') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '<<=') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '<=') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '=') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '==') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '>') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '>=') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '>>') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '>>=') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '?') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '[') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", ']') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '^') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '^=') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '|') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '|=') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '||') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s308", '}') = Reduce(postfix_expression -> postfix_expression '(' argument_expression_list ')')
action("s309", '!=') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '%') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '%=') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '&&') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '&') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '&=') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '(') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", ')') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '*') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '*=') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '+') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '++') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '+=') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", ',') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '-') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '--') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '-=') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '->') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '.') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '/') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '/=') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", ':') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", ';') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '<') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '<<') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '<<=') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '<=') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '=') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '==') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '>') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '>=') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '>>') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '>>=') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '?') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '[') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", ']') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '^') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '^=') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '|') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '|=') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '||') = Reduce(postfix_expression -> postfix_expression '++')
action("s309", '}') = Reduce(postfix_expression -> postfix_expression '++')
action("s310", '!=') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '%') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '%=') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '&&') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '&') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '&=') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '(') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", ')') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '*') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '*=') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '+') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '++') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '+=') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", ',') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '-') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '--') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '-=') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '->') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '.') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '/') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '/=') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", ':') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", ';') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '<') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '<<') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '<<=') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '<=') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '=') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '==') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '>') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '>=') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '>>') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '>>=') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '?') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '[') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", ']') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '^') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '^=') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '|') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '|=') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '||') = Reduce(postfix_expression -> postfix_expression '--')
action("s310", '}') = Reduce(postfix_expression -> postfix_expression '--')
action("s311", IDENTIFIER) = Shift("s312")
action("s312", '!=') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '%') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '%=') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '&&') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '&') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '&=') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '(') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", ')') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '*') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '*=') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '+') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '++') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '+=') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", ',') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '-') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '--') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '-=') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '->') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '.') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '/') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '/=') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", ':') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", ';') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '<') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '<<') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '<<=') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '<=') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '=') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '==') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '>') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '>=') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '>>') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '>>=') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '?') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '[') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", ']') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '^') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '^=') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '|') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '|=') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '||') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s312", '}') = Reduce(postfix_expression -> postfix_expression '->' IDENTIFIER)
action("s313", IDENTIFIER) = Shift("s314")
action("s314", '!=') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '%') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '%=') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '&&') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '&') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '&=') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '(') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", ')') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '*') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '*=') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '+') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '++') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '+=') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", ',') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '-') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '--') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '-=') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '->') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '.') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '/') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '/=') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", ':') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", ';') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '<') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '<<') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '<<=') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '<=') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '=') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '==') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '>') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '>=') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '>>') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '>>=') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '?') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '[') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", ']') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '^') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '^=') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '|') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '|=') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '||') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s314", '}') = Reduce(postfix_expression -> postfix_expression '.' IDENTIFIER)
action("s315", '!=') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '%') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '%=') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '&&') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '&') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '&=') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '(') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", ')') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '*') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '*=') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '+') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '++') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '+=') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", ',') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '-') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '--') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '-=') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '->') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '.') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '/') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '/=') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", ':') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", ';') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '<') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '<<') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '<<=') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '<=') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '=') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '==') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '>') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '>=') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '>>') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '>>=') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '?') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '[') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", ']') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '^') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '^=') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '|') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '|=') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '||') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s315", '}') = Reduce(postfix_expression -> postfix_expression '[' expression ']')
action("s316", '!=') = Reduce(postfix_expression -> primary_expression)
action("s316", '%') = Reduce(postfix_expression -> primary_expression)
action("s316", '%=') = Reduce(postfix_expression -> primary_expression)
action("s316", '&&') = Reduce(postfix_expression -> primary_expression)
action("s316", '&') = Reduce(postfix_expression -> primary_expression)
action("s316", '&=') = Reduce(postfix_expression -> primary_expression)
action("s316", '(') = Reduce(postfix_expression -> primary_expression)
action("s316", ')') = Reduce(postfix_expression -> primary_expression)
action("s316", '*') = Reduce(postfix_expression -> primary_expression)
action("s316", '*=') = Reduce(postfix_expression -> primary_expression)
action("s316", '+') = Reduce(postfix_expression -> primary_expression)
action("s316", '++') = Reduce(postfix_expression -> primary_expression)
action("s316", '+=') = Reduce(postfix_expression -> primary_expression)
action("s316", ',') = Reduce(postfix_expression -> primary_expression)
action("s316", '-') = Reduce(postfix_expression -> primary_expression)
action("s316", '--') = Reduce(postfix_expression -> primary_expression)
action("s316", '-=') = Reduce(postfix_expression -> primary_expression)
action("s316", '->') = Reduce(postfix_expression -> primary_expression)
action("s316", '.') = Reduce(postfix_expression -> primary_expression)
action("s316", '/') = Reduce(postfix_expression -> primary_expression)
action("s316", '/=') = Reduce(postfix_expression -> primary_expression)
action("s316", ':') = Reduce(postfix_expression -> primary_expression)
action("s316", ';') = Reduce(postfix_expression -> primary_expression)
action("s316", '<') = Reduce(postfix_expression -> primary_expression)
action("s316", '<<') = Reduce(postfix_expression -> primary_expression)
action("s316", '<<=') = Reduce(postfix_expression -> primary_expression)
action("s316", '<=') = Reduce(postfix_expression -> primary_expression)
action("s316", '=') = Reduce(postfix_expression -> primary_expression)
action("s316", '==') = Reduce(postfix_expression -> primary_expression)
action("s316", '>') = Reduce(postfix_expression -> primary_expression)
action("s316", '>=') = Reduce(postfix_expression -> primary_expression)
action("s316", '>>') = Reduce(postfix_expression -> primary_expression)
action("s316", '>>=') = Reduce(postfix_expression -> primary_expression)
action("s316", '?') = Reduce(postfix_expression -> primary_expression)
action("s316", '[') = Reduce(postfix_expression -> primary_expression)
action("s316", ']') = Reduce(postfix_expression -> primary_expression)
action("s316", '^') = Reduce(postfix_expression -> primary_expression)
action("s316", '^=') = Reduce(postfix_expression -> primary_expression)
action("s316", '|') = Reduce(postfix_expression -> primary_expression)
action("s316", '|=') = Reduce(postfix_expression -> primary_expression)
action("s316", '||') = Reduce(postfix_expression -> primary_expression)
action("s316", '}') = Reduce(postfix_expression -> primary_expression)
action("s317", '<') = Shift("s54")
action("s317", '<=') = Shift("s55")
action("s317", '>') = Shift("s56")
action("s317", '>=') = Shift("s57")
action("s317", '!=') = Reduce(equality_expression -> relational_expression)
action("s317", '&&') = Reduce(equality_expression -> relational_expression)
action("s317", '&') = Reduce(equality_expression -> relational_expression)
action("s317", ')') = Reduce(equality_expression -> relational_expression)
action("s317", ',') = Reduce(equality_expression -> relational_expression)
action("s317", ':') = Reduce(equality_expression -> relational_expression)
action("s317", ';') = Reduce(equality_expression -> relational_expression)
action("s317", '==') = Reduce(equality_expression -> relational_expression)
action("s317", '?') = Reduce(equality_expression -> relational_expression)
action("s317", ']') = Reduce(equality_expression -> relational_expression)
action("s317", '^') = Reduce(equality_expression -> relational_expression)
action("s317", '|') = Reduce(equality_expression -> relational_expression)
action("s317", '||') = Reduce(equality_expression -> relational_expression)
action("s317", '}') = Reduce(equality_expression -> relational_expression)
action("s318", '<<') = Shift("s58")
action("s318", '>>') = Shift("s59")
action("s318", '!=') = Reduce(relational_expression -> relational_expression '<' shift_expression)
action("s318", '&&') = Reduce(relational_expression -> relational_expression '<' shift_expression)
action("s318", '&') = Reduce(relational_expression -> relational_expression '<' shift_expression)
action("s318", ')') = Reduce(relational_expression -> relational_expression '<' shift_expression)
action("s318", ',') = Reduce(relational_expression -> relational_expression '<' shift_expression)
action("s318", ':') = Reduce(relational_expression -> relational_expression '<' shift_expression)
action("s318", ';') = Reduce(relational_expression -> relational_expression '<' shift_expression)
action("s318", '<') = Reduce(relational_expression -> relational_expression '<' shift_expression)
action("s318", '<=') = Reduce(relational_expression -> relational_expression '<' shift_expression)
action("s318", '==') = Reduce(relational_expression -> relational_expression '<' shift_expression)
action("s318", '>') = Reduce(relational_expression -> relational_expression '<' shift_expression)
action("s318", '>=') = Reduce(relational_expression -> relational_expression '<' shift_expression)
action("s318", '?') = Reduce(relational_expression -> relational_expression '<' shift_expression)
action("s318", ']') = Reduce(relational_expression -> relational_expression '<' shift_expression)
action("s318", '^') = Reduce(relational_expression -> relational_expression '<' shift_expression)
action("s318", '|') = Reduce(relational_expression -> relational_expression '<' shift_expression)
action("s318", '||') = Reduce(relational_expression -> relational_expression '<' shift_expression)
action("s318", '}') = Reduce(relational_expression -> relational_expression '<' shift_expression)
action("s319", '<<') = Shift("s58")
action("s319", '>>') = Shift("s59")
action("s319", '!=') = Reduce(relational_expression -> relational_expression '<=' shift_expression)
action("s319", '&&') = Reduce(relational_expression -> relational_expression '<=' shift_expression)
action("s319", '&') = Reduce(relational_expression -> relational_expression '<=' shift_expression)
action("s319", ')') = Reduce(relational_expression -> relational_expression '<=' shift_expression)
action("s319", ',') = Reduce(relational_expression -> relational_expression '<=' shift_expression)
action("s319", ':') = Reduce(relational_expression -> relational_expression '<=' shift_expression)
action("s319", ';') = Reduce(relational_expression -> relational_expression '<=' shift_expression)
action("s319", '<') = Reduce(relational_expression -> relational_expression '<=' shift_expression)
action("s319", '<=') = Reduce(relational_expression -> relational_expression '<=' shift_expression)
action("s319", '==') = Reduce(relational_expression -> relational_expression '<=' shift_expression)
action("s319", '>') = Reduce(relational_expression -> relational_expression '<=' shift_expression)
action("s319", '>=') = Reduce(relational_expression -> relational_expression '<=' shift_expression)
action("s319", '?') = Reduce(relational_expression -> relational_expression '<=' shift_expression)
action("s319", ']') = Reduce(relational_expression -> relational_expression '<=' shift_expression)
action("s319", '^') = Reduce(relational_expression -> relational_expression '<=' shift_expression)
action("s319", '|') = Reduce(relational_expression -> relational_expression '<=' shift_expression)
action("s319", '||') = Reduce(relational_expression -> relational_expression '<=' shift_expression)
action("s319", '}') = Reduce(relational_expression -> relational_expression '<=' shift_expression)
action("s320", '<<') = Shift("s58")
action("s320", '>>') = Shift("s59")
action("s320", '!=') = Reduce(relational_expression -> relational_expression '>' shift_expression)
action("s320", '&&') = Reduce(relational_expression -> relational_expression '>' shift_expression)
action("s320", '&') = Reduce(relational_expression -> relational_expression '>' shift_expression)
action("s320", ')') = Reduce(relational_expression -> relational_expression '>' shift_expression)
action("s320", ',') = Reduce(relational_expression -> relational_expression '>' shift_expression)
action("s320", ':') = Reduce(relational_expression -> relational_expression '>' shift_expression)
action("s320", ';') = Reduce(relational_expression -> relational_expression '>' shift_expression)
action("s320", '<') = Reduce(relational_expression -> relational_expression '>' shift_expression)
action("s320", '<=') = Reduce(relational_expression -> relational_expression '>' shift_expression)
action("s320", '==') = Reduce(relational_expression -> relational_expression '>' shift_expression)
action("s320", '>') = Reduce(relational_expression -> relational_expression '>' shift_expression)
action("s320", '>=') = Reduce(relational_expression -> relational_expression '>' shift_expression)
action("s320", '?') = Reduce(relational_expression -> relational_expression '>' shift_expression)
action("s320", ']') = Reduce(relational_expression -> relational_expression '>' shift_expression)
action("s320", '^') = Reduce(relational_expression -> relational_expression '>' shift_expression)
action("s320", '|') = Reduce(relational_expression -> relational_expression '>' shift_expression)
action("s320", '||') = Reduce(relational_expression -> relational_expression '>' shift_expression)
action("s320", '}') = Reduce(relational_expression -> relational_expression '>' shift_expression)
action("s321", '<<') = Shift("s58")
action("s321", '>>') = Shift("s59")
action("s321", '!=') = Reduce(relational_expression -> relational_expression '>=' shift_expression)
action("s321", '&&') = Reduce(relational_expression -> relational_expression '>=' shift_expression)
action("s321", '&') = Reduce(relational_expression -> relational_expression '>=' shift_expression)
action("s321", ')') = Reduce(relational_expression -> relational_expression '>=' shift_expression)
action("s321", ',') = Reduce(relational_expression -> relational_expression '>=' shift_expression)
action("s321", ':') = Reduce(relational_expression -> relational_expression '>=' shift_expression)
action("s321", ';') = Reduce(relational_expression -> relational_expression '>=' shift_expression)
action("s321", '<') = Reduce(relational_expression -> relational_expression '>=' shift_expression)
action("s321", '<=') = Reduce(relational_expression -> relational_expression '>=' shift_expression)
action("s321", '==') = Reduce(relational_expression -> relational_expression '>=' shift_expression)
action("s321", '>') = Reduce(relational_expression -> relational_expression '>=' shift_expression)
action("s321", '>=') = Reduce(relational_expression -> relational_expression '>=' shift_expression)
action("s321", '?') = Reduce(relational_expression -> relational_expression '>=' shift_expression)
action("s321", ']') = Reduce(relational_expression -> relational_expression '>=' shift_expression)
action("s321", '^') = Reduce(relational_expression -> relational_expression '>=' shift_expression)
action("s321", '|') = Reduce(relational_expression -> relational_expression '>=' shift_expression)
action("s321", '||') = Reduce(relational_expression -> relational_expression '>=' shift_expression)
action("s321", '}') = Reduce(relational_expression -> relational_expression '>=' shift_expression)
action("s322", '!') = Reduce(statement -> selection_statement)
action("s322", '&') = Reduce(statement -> selection_statement)
action("s322", '(') = Reduce(statement -> selection_statement)
action("s322", '*') = Reduce(statement -> selection_statement)
action("s322", '+') = Reduce(statement -> selection_statement)
action("s322", '++') = Reduce(statement -> selection_statement)
action("s322", '-') = Reduce(statement -> selection_statement)
action("s322", '--') = Reduce(statement -> selection_statement)
action("s322", ';') = Reduce(statement -> selection_statement)
action("s322", 'break') = Reduce(statement -> selection_statement)
action("s322", 'case') = Reduce(statement -> selection_statement)
action("s322", 'continue') = Reduce(statement -> selection_statement)
action("s322", 'default') = Reduce(statement -> selection_statement)
action("s322", 'do') = Reduce(statement -> selection_statement)
action("s322", 'else') = Reduce(statement -> selection_statement)
action("s322", 'for') = Reduce(statement -> selection_statement)
action("s322", 'goto') = Reduce(statement -> selection_statement)
action("s322", 'if') = Reduce(statement -> selection_statement)
action("s322", 'return') = Reduce(statement -> selection_statement)
action("s322", 'sizeof') = Reduce(statement -> selection_statement)
action("s322", 'switch') = Reduce(statement -> selection_statement)
action("s322", 'while') = Reduce(statement -> selection_statement)
action("s322", '{') = Reduce(statement -> selection_statement)
action("s322", '}') = Reduce(statement -> selection_statement)
action("s322", '~') = Reduce(statement -> selection_statement)
action("s322", CONSTANT) = Reduce(statement -> selection_statement)
action("s322", IDENTIFIER) = Reduce(statement -> selection_statement)
action("s322", STRING_LITERAL) = Reduce(statement -> selection_statement)
action("s323", '<<') = Shift("s58")
action("s323", '>>') = Shift("s59")
action("s323", '!=') = Reduce(relational_expression -> shift_expression)
action("s323", '&&') = Reduce(relational_expression -> shift_expression)
action("s323", '&') = Reduce(relational_expression -> shift_expression)
action("s323", ')') = Reduce(relational_expression -> shift_expression)
action("s323", ',') = Reduce(relational_expression -> shift_expression)
action("s323", ':') = Reduce(relational_expression -> shift_expression)
action("s323", ';') = Reduce(relational_expression -> shift_expression)
action("s323", '<') = Reduce(relational_expression -> shift_expression)
action("s323", '<=') = Reduce(relational_expression -> shift_expression)
action("s323", '==') = Reduce(relational_expression -> shift_expression)
action("s323", '>') = Reduce(relational_expression -> shift_expression)
action("s323", '>=') = Reduce(relational_expression -> shift_expression)
action("s323", '?') = Reduce(relational_expression -> shift_expression)
action("s323", ']') = Reduce(relational_expression -> shift_expression)
action("s323", '^') = Reduce(relational_expression -> shift_expression)
action("s323", '|') = Reduce(relational_expression -> shift_expression)
action("s323", '||') = Reduce(relational_expression -> shift_expression)
action("s323", '}') = Reduce(relational_expression -> shift_expression)
action("s324", ')') = Reduce(type_name -> specifier_qualifier_list abstract_declarator)
action("s325", ',') = Shift("s83")
action("s325", ';') = Shift("s326")
action("s326", 'char') = Reduce(struct_declaration -> specifier_qualifier_list struct_declarator_list ';')
action("s326", 'const') = Reduce(struct_declaration -> specifier_qualifier_list struct_declarator_list ';')
action("s326", 'double') = Reduce(struct_declaration -> specifier_qualifier_list struct_declarator_list ';')
action("s326", 'enum') = Reduce(struct_declaration -> specifier_qualifier_list struct_declarator_list ';')
action("s326", 'float') = Reduce(struct_declaration -> specifier_qualifier_list struct_declarator_list ';')
action("s326", 'int') = Reduce(struct_declaration -> specifier_qualifier_list struct_declarator_list ';')
action("s326", 'long') = Reduce(struct_declaration -> specifier_qualifier_list struct_declarator_list ';')
action("s326", 'short') = Reduce(struct_declaration -> specifier_qualifier_list struct_declarator_list ';')
action("s326", 'signed') = Reduce(struct_declaration -> specifier_qualifier_list struct_declarator_list ';')
action("s326", 'struct') = Reduce(struct_declaration -> specifier_qualifier_list struct_declarator_list ';')
action("s326", 'union') = Reduce(struct_declaration -> specifier_qualifier_list struct_declarator_list ';')
action("s326", 'unsigned') = Reduce(struct_declaration -> specifier_qualifier_list struct_declarator_list ';')
action("s326", 'void') = Reduce(struct_declaration -> specifier_qualifier_list struct_declarator_list ';')
action("s326", 'volatile') = Reduce(struct_declaration -> specifier_qualifier_list struct_declarator_list ';')
action("s326", '}') = Reduce(struct_declaration -> specifier_qualifier_list struct_declarator_list ';')
action("s326", TYPE_NAME) = Reduce(struct_declaration -> specifier_qualifier_list struct_declarator_list ';')
action("s327", '!') = Reduce(statement_list -> statement)
action("s327", '&') = Reduce(statement_list -> statement)
action("s327", '(') = Reduce(statement_list -> statement)
action("s327", '*') = Reduce(statement_list -> statement)
action("s327", '+') = Reduce(statement_list -> statement)
action("s327", '++') = Reduce(statement_list -> statement)
action("s327", '-') = Reduce(statement_list -> statement)
action("s327", '--') = Reduce(statement_list -> statement)
action("s327", ';') = Reduce(statement_list -> statement)
action("s327", 'break') = Reduce(statement_list -> statement)
action("s327", 'case') = Reduce(statement_list -> statement)
action("s327", 'continue') = Reduce(statement_list -> statement)
action("s327", 'default') = Reduce(statement_list -> statement)
action("s327", 'do') = Reduce(statement_list -> statement)
action("s327", 'for') = Reduce(statement_list -> statement)
action("s327", 'goto') = Reduce(statement_list -> statement)
action("s327", 'if') = Reduce(statement_list -> statement)
action("s327", 'return') = Reduce(statement_list -> statement)
action("s327", 'sizeof') = Reduce(statement_list -> statement)
action("s327", 'switch') = Reduce(statement_list -> statement)
action("s327", 'while') = Reduce(statement_list -> statement)
action("s327", '{') = Reduce(statement_list -> statement)
action("s327", '}') = Reduce(statement_list -> statement)
action("s327", '~') = Reduce(statement_list -> statement)
action("s327", CONSTANT) = Reduce(statement_list -> statement)
action("s327", IDENTIFIER) = Reduce(statement_list -> statement)
action("s327", STRING_LITERAL) = Reduce(statement_list -> statement)
action("s328", '!') = Reduce(statement_list -> statement_list statement)
action("s328", '&') = Reduce(statement_list -> statement_list statement)
action("s328", '(') = Reduce(statement_list -> statement_list statement)
action("s328", '*') = Reduce(statement_list -> statement_list statement)
action("s328", '+') = Reduce(statement_list -> statement_list statement)
action("s328", '++') = Reduce(statement_list -> statement_list statement)
action("s328", '-') = Reduce(statement_list -> statement_list statement)
action("s328", '--') = Reduce(statement_list -> statement_list statement)
action("s328", ';') = Reduce(statement_list -> statement_list statement)
action("s328", 'break') = Reduce(statement_list -> statement_list statement)
action("s328", 'case') = Reduce(statement_list -> statement_list statement)
action("s328", 'continue') = Reduce(statement_list -> statement_list statement)
action("s328", 'default') = Reduce(statement_list -> statement_list statement)
action("s328", 'do') = Reduce(statement_list -> statement_list statement)
action("s328", 'for') = Reduce(statement_list -> statement_list statement)
action("s328", 'goto') = Reduce(statement_list -> statement_list statement)
action("s328", 'if') = Reduce(statement_list -> statement_list statement)
action("s328", 'return') = Reduce(statement_list -> statement_list statement)
action("s328", 'sizeof') = Reduce(statement_list -> statement_list statement)
action("s328", 'switch') = Reduce(statement_list -> statement_list statement)
action("s328", 'while') = Reduce(statement_list -> statement_list statement)
action("s328", '{') = Reduce(statement_list -> statement_list statement)
action("s328", '}') = Reduce(statement_list -> statement_list statement)
action("s328", '~') = Reduce(statement_list -> statement_list statement)
action("s328", CONSTANT) = Reduce(statement_list -> statement_list statement)
action("s328", IDENTIFIER) = Reduce(statement_list -> statement_list statement)
action("s328", STRING_LITERAL) = Reduce(statement_list -> statement_list statement)
action("s329", '(') = Reduce(declaration_specifiers -> storage_class_specifier declaration_specifiers)
action("s329", ')') = Reduce(declaration_specifiers -> storage_class_specifier declaration_specifiers)
action("s329", '*') = Reduce(declaration_specifiers -> storage_class_specifier declaration_specifiers)
action("s329", ',') = Reduce(declaration_specifiers -> storage_class_specifier declaration_specifiers)
action("s329", ';') = Reduce(declaration_specifiers -> storage_class_specifier declaration_specifiers)
action("s329", '[') = Reduce(declaration_specifiers -> storage_class_specifier declaration_specifiers)
action("s329", IDENTIFIER) = Reduce(declaration_specifiers -> storage_class_specifier declaration_specifiers)
action("s330", 'char') = Reduce(struct_declaration_list -> struct_declaration)
action("s330", 'const') = Reduce(struct_declaration_list -> struct_declaration)
action("s330", 'double') = Reduce(struct_declaration_list -> struct_declaration)
action("s330", 'enum') = Reduce(struct_declaration_list -> struct_declaration)
action("s330", 'float') = Reduce(struct_declaration_list -> struct_declaration)
action("s330", 'int') = Reduce(struct_declaration_list -> struct_declaration)
action("s330", 'long') = Reduce(struct_declaration_list -> struct_declaration)
action("s330", 'short') = Reduce(struct_declaration_list -> struct_declaration)
action("s330", 'signed') = Reduce(struct_declaration_list -> struct_declaration)
action("s330", 'struct') = Reduce(struct_declaration_list -> struct_declaration)
action("s330", 'union') = Reduce(struct_declaration_list -> struct_declaration)
action("s330", 'unsigned') = Reduce(struct_declaration_list -> struct_declaration)
action("s330", 'void') = Reduce(struct_declaration_list -> struct_declaration)
action("s330", 'volatile') = Reduce(struct_declaration_list -> struct_declaration)
action("s330", '}') = Reduce(struct_declaration_list -> struct_declaration)
action("s330", TYPE_NAME) = Reduce(struct_declaration_list -> struct_declaration)
action("s331", 'char') = Reduce(struct_declaration_list -> struct_declaration_list struct_declaration)
action("s331", 'const') = Reduce(struct_declaration_list -> struct_declaration_list struct_declaration)
action("s331", 'double') = Reduce(struct_declaration_list -> struct_declaration_list struct_declaration)
action("s331", 'enum') = Reduce(struct_declaration_list -> struct_declaration_list struct_declaration)
action("s331", 'float') = Reduce(struct_declaration_list -> struct_declaration_list struct_declaration)
action("s331", 'int') = Reduce(struct_declaration_list -> struct_declaration_list struct_declaration)
action("s331", 'long') = Reduce(struct_declaration_list -> struct_declaration_list struct_declaration)
action("s331", 'short') = Reduce(struct_declaration_list -> struct_declaration_list struct_declaration)
action("s331", 'signed') = Reduce(struct_declaration_list -> struct_declaration_list struct_declaration)
action("s331", 'struct') = Reduce(struct_declaration_list -> struct_declaration_list struct_declaration)
action("s331", 'union') = Reduce(struct_declaration_list -> struct_declaration_list struct_declaration)
action("s331", 'unsigned') = Reduce(struct_declaration_list -> struct_declaration_list struct_declaration)
action("s331", 'void') = Reduce(struct_declaration_list -> struct_declaration_list struct_declaration)
action("s331", 'volatile') = Reduce(struct_declaration_list -> struct_declaration_list struct_declaration)
action("s331", '}') = Reduce(struct_declaration_list -> struct_declaration_list struct_declaration)
action("s331", TYPE_NAME) = Reduce(struct_declaration_list -> struct_declaration_list struct_declaration)
action("s332", ',') = Reduce(struct_declarator_list -> struct_declarator)
action("s332", ';') = Reduce(struct_declarator_list -> struct_declarator)
action("s333", ',') = Reduce(struct_declarator_list -> struct_declarator_list ',' struct_declarator)
action("s333", ';') = Reduce(struct_declarator_list -> struct_declarator_list ',' struct_declarator)
action("s334", '{') = Shift("s88")
action("s334", IDENTIFIER) = Shift("s336")
action("s335", '(') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", ')') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", '*') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", ',') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", ':') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", ';') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", '[') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'auto') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'char') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'const') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'double') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'enum') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'extern') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'float') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'int') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'long') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'register') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'short') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'signed') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'static') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'struct') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'typedef') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'union') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'unsigned') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'void') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", 'volatile') = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", IDENTIFIER) = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s335", TYPE_NAME) = Reduce(struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}')
action("s336", '{') = Shift("s89")
action("s336", '(') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", ')') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", '*') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", ',') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", ':') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", ';') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", '[') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'auto') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'char') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'const') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'double') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'enum') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'extern') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'float') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'int') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'long') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'register') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'short') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'signed') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'static') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'struct') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'typedef') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'union') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'unsigned') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'void') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", 'volatile') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", IDENTIFIER) = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s336", TYPE_NAME) = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER)
action("s337", '(') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", ')') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", '*') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", ',') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", ':') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", ';') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", '[') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'auto') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'char') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'const') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'double') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'enum') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'extern') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'float') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'int') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'long') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'register') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'short') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'signed') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'static') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'struct') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'typedef') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'union') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'unsigned') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'void') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", 'volatile') = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", IDENTIFIER) = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s337", TYPE_NAME) = Reduce(struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}')
action("s338", '(') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", ')') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", '*') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", ',') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", ':') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", ';') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", '[') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'auto') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'char') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'const') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'double') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'enum') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'extern') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'float') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'int') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'long') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'register') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'short') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'signed') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'static') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'struct') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'typedef') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'union') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'unsigned') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'void') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", 'volatile') = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", IDENTIFIER) = Reduce(type_specifier -> struct_or_union_specifier)
action("s338", TYPE_NAME) = Reduce(type_specifier -> struct_or_union_specifier)
action("s339", $) = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", '(') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", '*') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'auto') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'char') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'const') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'double') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'enum') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'extern') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'float') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'int') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'long') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'register') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'short') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'signed') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'static') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'struct') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'typedef') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'union') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'unsigned') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'void') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", 'volatile') = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", IDENTIFIER) = Reduce(translation_unit -> translation_unit external_declaration)
action("s339", TYPE_NAME) = Reduce(translation_unit -> translation_unit external_declaration)
action("s340", '(') = Reduce(type_qualifier_list -> type_qualifier)
action("s340", ')') = Reduce(type_qualifier_list -> type_qualifier)
action("s340", '*') = Reduce(type_qualifier_list -> type_qualifier)
action("s340", ',') = Reduce(type_qualifier_list -> type_qualifier)
action("s340", '[') = Reduce(type_qualifier_list -> type_qualifier)
action("s340", 'const') = Reduce(type_qualifier_list -> type_qualifier)
action("s340", 'volatile') = Reduce(type_qualifier_list -> type_qualifier)
action("s340", IDENTIFIER) = Reduce(type_qualifier_list -> type_qualifier)
action("s341", '(') = Reduce(declaration_specifiers -> type_qualifier declaration_specifiers)
action("s341", ')') = Reduce(declaration_specifiers -> type_qualifier declaration_specifiers)
action("s341", '*') = Reduce(declaration_specifiers -> type_qualifier declaration_specifiers)
action("s341", ',') = Reduce(declaration_specifiers -> type_qualifier declaration_specifiers)
action("s341", ';') = Reduce(declaration_specifiers -> type_qualifier declaration_specifiers)
action("s341", '[') = Reduce(declaration_specifiers -> type_qualifier declaration_specifiers)
action("s341", IDENTIFIER) = Reduce(declaration_specifiers -> type_qualifier declaration_specifiers)
action("s342", '(') = Reduce(specifier_qualifier_list -> type_qualifier specifier_qualifier_list)
action("s342", ')') = Reduce(specifier_qualifier_list -> type_qualifier specifier_qualifier_list)
action("s342", '*') = Reduce(specifier_qualifier_list -> type_qualifier specifier_qualifier_list)
action("s342", ':') = Reduce(specifier_qualifier_list -> type_qualifier specifier_qualifier_list)
action("s342", '[') = Reduce(specifier_qualifier_list -> type_qualifier specifier_qualifier_list)
action("s342", IDENTIFIER) = Reduce(specifier_qualifier_list -> type_qualifier specifier_qualifier_list)
action("s343", '(') = Reduce(type_qualifier_list -> type_qualifier_list type_qualifier)
action("s343", ')') = Reduce(type_qualifier_list -> type_qualifier_list type_qualifier)
action("s343", '*') = Reduce(type_qualifier_list -> type_qualifier_list type_qualifier)
action("s343", ',') = Reduce(type_qualifier_list -> type_qualifier_list type_qualifier)
action("s343", '[') = Reduce(type_qualifier_list -> type_qualifier_list type_qualifier)
action("s343", 'const') = Reduce(type_qualifier_list -> type_qualifier_list type_qualifier)
action("s343", 'volatile') = Reduce(type_qualifier_list -> type_qualifier_list type_qualifier)
action("s343", IDENTIFIER) = Reduce(type_qualifier_list -> type_qualifier_list type_qualifier)
action("s344", '(') = Reduce(declaration_specifiers -> type_specifier declaration_specifiers)
action("s344", ')') = Reduce(declaration_specifiers -> type_specifier declaration_specifiers)
action("s344", '*') = Reduce(declaration_specifiers -> type_specifier declaration_specifiers)
action("s344", ',') = Reduce(declaration_specifiers -> type_specifier declaration_specifiers)
action("s344", ';') = Reduce(declaration_specifiers -> type_specifier declaration_specifiers)
action("s344", '[') = Reduce(declaration_specifiers -> type_specifier declaration_specifiers)
action("s344", IDENTIFIER) = Reduce(declaration_specifiers -> type_specifier declaration_specifiers)
action("s345", '(') = Reduce(specifier_qualifier_list -> type_specifier specifier_qualifier_list)
action("s345", ')') = Reduce(specifier_qualifier_list -> type_specifier specifier_qualifier_list)
action("s345", '*') = Reduce(specifier_qualifier_list -> type_specifier specifier_qualifier_list)
action("s345", ':') = Reduce(specifier_qualifier_list -> type_specifier specifier_qualifier_list)
action("s345", '[') = Reduce(specifier_qualifier_list -> type_specifier specifier_qualifier_list)
action("s345", IDENTIFIER) = Reduce(specifier_qualifier_list -> type_specifier specifier_qualifier_list)
action("s346", '!=') = Reduce(cast_expression -> unary_expression)
action("s346", '%') = Reduce(cast_expression -> unary_expression)
action("s346", '%=') = Reduce(cast_expression -> unary_expression)
action("s346", '&&') = Reduce(cast_expression -> unary_expression)
action("s346", '&') = Reduce(cast_expression -> unary_expression)
action("s346", '&=') = Reduce(cast_expression -> unary_expression)
action("s346", ')') = Reduce(cast_expression -> unary_expression)
action("s346", '*') = Reduce(cast_expression -> unary_expression)
action("s346", '*=') = Reduce(cast_expression -> unary_expression)
action("s346", '+') = Reduce(cast_expression -> unary_expression)
action("s346", '+=') = Reduce(cast_expression -> unary_expression)
action("s346", ',') = Reduce(cast_expression -> unary_expression)
action("s346", '-') = Reduce(cast_expression -> unary_expression)
action("s346", '-=') = Reduce(cast_expression -> unary_expression)
action("s346", '/') = Reduce(cast_expression -> unary_expression)
action("s346", '/=') = Reduce(cast_expression -> unary_expression)
action("s346", ':') = Reduce(cast_expression -> unary_expression)
action("s346", ';') = Reduce(cast_expression -> unary_expression)
action("s346", '<') = Reduce(cast_expression -> unary_expression)
action("s346", '<<') = Reduce(cast_expression -> unary_expression)
action("s346", '<<=') = Reduce(cast_expression -> unary_expression)
action("s346", '<=') = Reduce(cast_expression -> unary_expression)
action("s346", '=') = Reduce(cast_expression -> unary_expression)
action("s346", '==') = Reduce(cast_expression -> unary_expression)
action("s346", '>') = Reduce(cast_expression -> unary_expression)
action("s346", '>=') = Reduce(cast_expression -> unary_expression)
action("s346", '>>') = Reduce(cast_expression -> unary_expression)
action("s346", '>>=') = Reduce(cast_expression -> unary_expression)
action("s346", '?') = Reduce(cast_expression -> unary_expression)
action("s346", ']') = Reduce(cast_expression -> unary_expression)
action("s346", '^') = Reduce(cast_expression -> unary_expression)
action("s346", '^=') = Reduce(cast_expression -> unary_expression)
action("s346", '|') = Reduce(cast_expression -> unary_expression)
action("s346", '|=') = Reduce(cast_expression -> unary_expression)
action("s346", '||') = Reduce(cast_expression -> unary_expression)
action("s346", '}') = Reduce(cast_expression -> unary_expression)
action("s347", ')') = Reduce(assignment_expression -> unary_expression assignment_operator assignment_expression)
action("s347", ',') = Reduce(assignment_expression -> unary_expression assignment_operator assignment_expression)
action("s347", ':') = Reduce(assignment_expression -> unary_expression assignment_operator assignment_expression)
action("s347", ';') = Reduce(assignment_expression -> unary_expression assignment_operator assignment_expression)
action("s347", ']') = Reduce(assignment_expression -> unary_expression assignment_operator assignment_expression)
action("s347", '}') = Reduce(assignment_expression -> unary_expression assignment_operator assignment_expression)
action("s348", '!=') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '%') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '%=') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '&&') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '&') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '&=') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", ')') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '*') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '*=') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '+') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '+=') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", ',') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '-') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '-=') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '/') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '/=') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", ':') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", ';') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '<') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '<<') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '<<=') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '<=') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '=') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '==') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '>') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '>=') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '>>') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '>>=') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '?') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", ']') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '^') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '^=') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '|') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '|=') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '||') = Reduce(unary_expression -> unary_operator cast_expression)
action("s348", '}') = Reduce(unary_expression -> unary_operator cast_expression)

Goto Table:
goto(s0, declaration) = s234
goto(s0, declaration_specifiers) = s80
goto(s0, declarator) = s69
goto(s0, direct_declarator) = s257
goto(s0, enum_specifier) = s267
goto(s0, external_declaration) = s281
goto(s0, function_definition) = s282
goto(s0, pointer) = s87
goto(s0, storage_class_specifier) = s76
goto(s0, struct_or_union) = s334
goto(s0, struct_or_union_specifier) = s338
goto(s0, translation_unit) = s72
goto(s0, type_qualifier) = s77
goto(s0, type_specifier) = s78
goto(s1, abstract_declarator) = s107
goto(s1, declaration_specifiers) = s3
goto(s1, declarator) = s109
goto(s1, direct_abstract_declarator) = s249
goto(s1, direct_declarator) = s257
goto(s1, enum_specifier) = s267
goto(s1, parameter_declaration) = s302
goto(s1, parameter_list) = s303
goto(s1, parameter_type_list) = s113
goto(s1, pointer) = s85
goto(s1, storage_class_specifier) = s76
goto(s1, struct_or_union) = s334
goto(s1, struct_or_union_specifier) = s338
goto(s1, type_qualifier) = s77
goto(s1, type_specifier) = s78
goto(s2, abstract_declarator) = s107
goto(s2, declaration_specifiers) = s3
goto(s2, direct_abstract_declarator) = s249
goto(s2, enum_specifier) = s267
goto(s2, parameter_declaration) = s302
goto(s2, parameter_list) = s303
goto(s2, parameter_type_list) = s113
goto(s2, pointer) = s86
goto(s2, storage_class_specifier) = s76
goto(s2, struct_or_union) = s334
goto(s2, struct_or_union_specifier) = s338
goto(s2, type_qualifier) = s77
goto(s2, type_specifier) = s78
goto(s3, abstract_declarator) = s237
goto(s3, declarator) = s238
goto(s3, direct_abstract_declarator) = s249
goto(s3, direct_declarator) = s257
goto(s3, pointer) = s85
goto(s4, abstract_declarator) = s324
goto(s4, direct_abstract_declarator) = s249
goto(s4, pointer) = s86
goto(s5, additive_expression) = s216
goto(s5, and_expression) = s221
goto(s5, argument_expression_list) = s224
goto(s5, assignment_expression) = s226
goto(s5, cast_expression) = s229
goto(s5, conditional_expression) = s231
goto(s5, equality_expression) = s270
goto(s5, exclusive_or_expression) = s273
goto(s5, inclusive_or_expression) = s285
goto(s5, logical_and_expression) = s294
goto(s5, logical_or_expression) = s296
goto(s5, multiplicative_expression) = s298
goto(s5, postfix_expression) = s306
goto(s5, primary_expression) = s316
goto(s5, relational_expression) = s317
goto(s5, shift_expression) = s323
goto(s5, unary_expression) = s60
goto(s5, unary_operator) = s67
goto(s6, additive_expression) = s216
goto(s6, and_expression) = s221
goto(s6, assignment_expression) = s227
goto(s6, cast_expression) = s229
goto(s6, compound_statement) = s230
goto(s6, conditional_expression) = s231
goto(s6, declaration) = s233
goto(s6, declaration_list) = s7
goto(s6, declaration_specifiers) = s79
goto(s6, enum_specifier) = s267
goto(s6, equality_expression) = s270
goto(s6, exclusive_or_expression) = s273
goto(s6, expression) = s275
goto(s6, expression_statement) = s280
goto(s6, inclusive_or_expression) = s285
goto(s6, iteration_statement) = s291
goto(s6, jump_statement) = s292
goto(s6, labeled_statement) = s293
goto(s6, logical_and_expression) = s294
goto(s6, logical_or_expression) = s296
goto(s6, multiplicative_expression) = s298
goto(s6, postfix_expression) = s306
goto(s6, primary_expression) = s316
goto(s6, relational_expression) = s317
goto(s6, selection_statement) = s322
goto(s6, shift_expression) = s323
goto(s6, statement) = s327
goto(s6, statement_list) = s18
goto(s6, storage_class_specifier) = s76
goto(s6, struct_or_union) = s334
goto(s6, struct_or_union_specifier) = s338
goto(s6, type_qualifier) = s77
goto(s6, type_specifier) = s78
goto(s6, unary_expression) = s60
goto(s6, unary_operator) = s67
goto(s7, additive_expression) = s216
goto(s7, and_expression) = s221
goto(s7, assignment_expression) = s227
goto(s7, cast_expression) = s229
goto(s7, compound_statement) = s230
goto(s7, conditional_expression) = s231
goto(s7, declaration) = s235
goto(s7, declaration_specifiers) = s79
goto(s7, enum_specifier) = s267
goto(s7, equality_expression) = s270
goto(s7, exclusive_or_expression) = s273
goto(s7, expression) = s275
goto(s7, expression_statement) = s280
goto(s7, inclusive_or_expression) = s285
goto(s7, iteration_statement) = s291
goto(s7, jump_statement) = s292
goto(s7, labeled_statement) = s293
goto(s7, logical_and_expression) = s294
goto(s7, logical_or_expression) = s296
goto(s7, multiplicative_expression) = s298
goto(s7, postfix_expression) = s306
goto(s7, primary_expression) = s316
goto(s7, relational_expression) = s317
goto(s7, selection_statement) = s322
goto(s7, shift_expression) = s323
goto(s7, statement) = s327
goto(s7, statement_list) = s17
goto(s7, storage_class_specifier) = s76
goto(s7, struct_or_union) = s334
goto(s7, struct_or_union_specifier) = s338
goto(s7, type_qualifier) = s77
goto(s7, type_specifier) = s78
goto(s7, unary_expression) = s60
goto(s7, unary_operator) = s67
goto(s8, additive_expression) = s216
goto(s8, and_expression) = s221
goto(s8, assignment_expression) = s227
goto(s8, cast_expression) = s229
goto(s8, compound_statement) = s230
goto(s8, conditional_expression) = s231
goto(s8, equality_expression) = s270
goto(s8, exclusive_or_expression) = s273
goto(s8, expression) = s275
goto(s8, expression_statement) = s280
goto(s8, inclusive_or_expression) = s285
goto(s8, iteration_statement) = s291
goto(s8, jump_statement) = s292
goto(s8, labeled_statement) = s293
goto(s8, logical_and_expression) = s294
goto(s8, logical_or_expression) = s296
goto(s8, multiplicative_expression) = s298
goto(s8, postfix_expression) = s306
goto(s8, primary_expression) = s316
goto(s8, relational_expression) = s317
goto(s8, selection_statement) = s322
goto(s8, shift_expression) = s323
goto(s8, statement) = s141
goto(s8, unary_expression) = s60
goto(s8, unary_operator) = s67
goto(s9, additive_expression) = s216
goto(s9, and_expression) = s221
goto(s9, assignment_expression) = s227
goto(s9, cast_expression) = s229
goto(s9, compound_statement) = s230
goto(s9, conditional_expression) = s231
goto(s9, equality_expression) = s270
goto(s9, exclusive_or_expression) = s273
goto(s9, expression) = s275
goto(s9, expression_statement) = s280
goto(s9, inclusive_or_expression) = s285
goto(s9, iteration_statement) = s291
goto(s9, jump_statement) = s292
goto(s9, labeled_statement) = s293
goto(s9, logical_and_expression) = s294
goto(s9, logical_or_expression) = s296
goto(s9, multiplicative_expression) = s298
goto(s9, postfix_expression) = s306
goto(s9, primary_expression) = s316
goto(s9, relational_expression) = s317
goto(s9, selection_statement) = s322
goto(s9, shift_expression) = s323
goto(s9, statement) = s147
goto(s9, unary_expression) = s60
goto(s9, unary_operator) = s67
goto(s10, additive_expression) = s216
goto(s10, and_expression) = s221
goto(s10, assignment_expression) = s227
goto(s10, cast_expression) = s229
goto(s10, compound_statement) = s230
goto(s10, conditional_expression) = s231
goto(s10, equality_expression) = s270
goto(s10, exclusive_or_expression) = s273
goto(s10, expression) = s275
goto(s10, expression_statement) = s280
goto(s10, inclusive_or_expression) = s285
goto(s10, iteration_statement) = s291
goto(s10, jump_statement) = s292
goto(s10, labeled_statement) = s293
goto(s10, logical_and_expression) = s294
goto(s10, logical_or_expression) = s296
goto(s10, multiplicative_expression) = s298
goto(s10, postfix_expression) = s306
goto(s10, primary_expression) = s316
goto(s10, relational_expression) = s317
goto(s10, selection_statement) = s322
goto(s10, shift_expression) = s323
goto(s10, statement) = s148
goto(s10, unary_expression) = s60
goto(s10, unary_operator) = s67
goto(s11, additive_expression) = s216
goto(s11, and_expression) = s221
goto(s11, assignment_expression) = s227
goto(s11, cast_expression) = s229
goto(s11, compound_statement) = s230
goto(s11, conditional_expression) = s231
goto(s11, equality_expression) = s270
goto(s11, exclusive_or_expression) = s273
goto(s11, expression) = s275
goto(s11, expression_statement) = s280
goto(s11, inclusive_or_expression) = s285
goto(s11, iteration_statement) = s291
goto(s11, jump_statement) = s292
goto(s11, labeled_statement) = s293
goto(s11, logical_and_expression) = s294
goto(s11, logical_or_expression) = s296
goto(s11, multiplicative_expression) = s298
goto(s11, postfix_expression) = s306
goto(s11, primary_expression) = s316
goto(s11, relational_expression) = s317
goto(s11, selection_statement) = s322
goto(s11, shift_expression) = s323
goto(s11, statement) = s163
goto(s11, unary_expression) = s60
goto(s11, unary_operator) = s67
goto(s12, additive_expression) = s216
goto(s12, and_expression) = s221
goto(s12, assignment_expression) = s227
goto(s12, cast_expression) = s229
goto(s12, compound_statement) = s230
goto(s12, conditional_expression) = s231
goto(s12, equality_expression) = s270
goto(s12, exclusive_or_expression) = s273
goto(s12, expression) = s275
goto(s12, expression_statement) = s280
goto(s12, inclusive_or_expression) = s285
goto(s12, iteration_statement) = s291
goto(s12, jump_statement) = s292
goto(s12, labeled_statement) = s293
goto(s12, logical_and_expression) = s294
goto(s12, logical_or_expression) = s296
goto(s12, multiplicative_expression) = s298
goto(s12, postfix_expression) = s306
goto(s12, primary_expression) = s316
goto(s12, relational_expression) = s317
goto(s12, selection_statement) = s322
goto(s12, shift_expression) = s323
goto(s12, statement) = s165
goto(s12, unary_expression) = s60
goto(s12, unary_operator) = s67
goto(s13, additive_expression) = s216
goto(s13, and_expression) = s221
goto(s13, assignment_expression) = s227
goto(s13, cast_expression) = s229
goto(s13, compound_statement) = s230
goto(s13, conditional_expression) = s231
goto(s13, equality_expression) = s270
goto(s13, exclusive_or_expression) = s273
goto(s13, expression) = s275
goto(s13, expression_statement) = s280
goto(s13, inclusive_or_expression) = s285
goto(s13, iteration_statement) = s291
goto(s13, jump_statement) = s292
goto(s13, labeled_statement) = s293
goto(s13, logical_and_expression) = s294
goto(s13, logical_or_expression) = s296
goto(s13, multiplicative_expression) = s298
goto(s13, postfix_expression) = s306
goto(s13, primary_expression) = s316
goto(s13, relational_expression) = s317
goto(s13, selection_statement) = s322
goto(s13, shift_expression) = s323
goto(s13, statement) = s171
goto(s13, unary_expression) = s60
goto(s13, unary_operator) = s67
goto(s14, additive_expression) = s216
goto(s14, and_expression) = s221
goto(s14, assignment_expression) = s227
goto(s14, cast_expression) = s229
goto(s14, compound_statement) = s230
goto(s14, conditional_expression) = s231
goto(s14, equality_expression) = s270
goto(s14, exclusive_or_expression) = s273
goto(s14, expression) = s275
goto(s14, expression_statement) = s280
goto(s14, inclusive_or_expression) = s285
goto(s14, iteration_statement) = s291
goto(s14, jump_statement) = s292
goto(s14, labeled_statement) = s293
goto(s14, logical_and_expression) = s294
goto(s14, logical_or_expression) = s296
goto(s14, multiplicative_expression) = s298
goto(s14, postfix_expression) = s306
goto(s14, primary_expression) = s316
goto(s14, relational_expression) = s317
goto(s14, selection_statement) = s322
goto(s14, shift_expression) = s323
goto(s14, statement) = s172
goto(s14, unary_expression) = s60
goto(s14, unary_operator) = s67
goto(s15, additive_expression) = s216
goto(s15, and_expression) = s221
goto(s15, assignment_expression) = s227
goto(s15, cast_expression) = s229
goto(s15, compound_statement) = s230
goto(s15, conditional_expression) = s231
goto(s15, equality_expression) = s270
goto(s15, exclusive_or_expression) = s273
goto(s15, expression) = s275
goto(s15, expression_statement) = s280
goto(s15, inclusive_or_expression) = s285
goto(s15, iteration_statement) = s291
goto(s15, jump_statement) = s292
goto(s15, labeled_statement) = s293
goto(s15, logical_and_expression) = s294
goto(s15, logical_or_expression) = s296
goto(s15, multiplicative_expression) = s298
goto(s15, postfix_expression) = s306
goto(s15, primary_expression) = s316
goto(s15, relational_expression) = s317
goto(s15, selection_statement) = s322
goto(s15, shift_expression) = s323
goto(s15, statement) = s188
goto(s15, unary_expression) = s60
goto(s15, unary_operator) = s67
goto(s16, additive_expression) = s216
goto(s16, and_expression) = s221
goto(s16, assignment_expression) = s227
goto(s16, cast_expression) = s229
goto(s16, compound_statement) = s230
goto(s16, conditional_expression) = s231
goto(s16, equality_expression) = s270
goto(s16, exclusive_or_expression) = s273
goto(s16, expression) = s275
goto(s16, expression_statement) = s280
goto(s16, inclusive_or_expression) = s285
goto(s16, iteration_statement) = s291
goto(s16, jump_statement) = s292
goto(s16, labeled_statement) = s293
goto(s16, logical_and_expression) = s294
goto(s16, logical_or_expression) = s296
goto(s16, multiplicative_expression) = s298
goto(s16, postfix_expression) = s306
goto(s16, primary_expression) = s316
goto(s16, relational_expression) = s317
goto(s16, selection_statement) = s322
goto(s16, shift_expression) = s323
goto(s16, statement) = s196
goto(s16, unary_expression) = s60
goto(s16, unary_operator) = s67
goto(s17, additive_expression) = s216
goto(s17, and_expression) = s221
goto(s17, assignment_expression) = s227
goto(s17, cast_expression) = s229
goto(s17, compound_statement) = s230
goto(s17, conditional_expression) = s231
goto(s17, equality_expression) = s270
goto(s17, exclusive_or_expression) = s273
goto(s17, expression) = s275
goto(s17, expression_statement) = s280
goto(s17, inclusive_or_expression) = s285
goto(s17, iteration_statement) = s291
goto(s17, jump_statement) = s292
goto(s17, labeled_statement) = s293
goto(s17, logical_and_expression) = s294
goto(s17, logical_or_expression) = s296
goto(s17, multiplicative_expression) = s298
goto(s17, postfix_expression) = s306
goto(s17, primary_expression) = s316
goto(s17, relational_expression) = s317
goto(s17, selection_statement) = s322
goto(s17, shift_expression) = s323
goto(s17, statement) = s328
goto(s17, unary_expression) = s60
goto(s17, unary_operator) = s67
goto(s18, additive_expression) = s216
goto(s18, and_expression) = s221
goto(s18, assignment_expression) = s227
goto(s18, cast_expression) = s229
goto(s18, compound_statement) = s230
goto(s18, conditional_expression) = s231
goto(s18, equality_expression) = s270
goto(s18, exclusive_or_expression) = s273
goto(s18, expression) = s275
goto(s18, expression_statement) = s280
goto(s18, inclusive_or_expression) = s285
goto(s18, iteration_statement) = s291
goto(s18, jump_statement) = s292
goto(s18, labeled_statement) = s293
goto(s18, logical_and_expression) = s294
goto(s18, logical_or_expression) = s296
goto(s18, multiplicative_expression) = s298
goto(s18, postfix_expression) = s306
goto(s18, primary_expression) = s316
goto(s18, relational_expression) = s317
goto(s18, selection_statement) = s322
goto(s18, shift_expression) = s323
goto(s18, statement) = s328
goto(s18, unary_expression) = s60
goto(s18, unary_operator) = s67
goto(s19, additive_expression) = s216
goto(s19, and_expression) = s221
goto(s19, assignment_expression) = s227
goto(s19, cast_expression) = s229
goto(s19, compound_statement) = s230
goto(s19, conditional_expression) = s231
goto(s19, equality_expression) = s270
goto(s19, exclusive_or_expression) = s273
goto(s19, expression) = s275
goto(s19, expression_statement) = s280
goto(s19, inclusive_or_expression) = s285
goto(s19, iteration_statement) = s291
goto(s19, jump_statement) = s292
goto(s19, labeled_statement) = s293
goto(s19, logical_and_expression) = s294
goto(s19, logical_or_expression) = s296
goto(s19, multiplicative_expression) = s298
goto(s19, postfix_expression) = s306
goto(s19, primary_expression) = s316
goto(s19, relational_expression) = s317
goto(s19, selection_statement) = s322
goto(s19, shift_expression) = s323
goto(s19, statement) = s212
goto(s19, unary_expression) = s60
goto(s19, unary_operator) = s67
goto(s20, additive_expression) = s216
goto(s20, and_expression) = s221
goto(s20, assignment_expression) = s227
goto(s20, cast_expression) = s229
goto(s20, conditional_expression) = s231
goto(s20, enum_specifier) = s267
goto(s20, equality_expression) = s270
goto(s20, exclusive_or_expression) = s273
goto(s20, expression) = s111
goto(s20, inclusive_or_expression) = s285
goto(s20, logical_and_expression) = s294
goto(s20, logical_or_expression) = s296
goto(s20, multiplicative_expression) = s298
goto(s20, postfix_expression) = s306
goto(s20, primary_expression) = s316
goto(s20, relational_expression) = s317
goto(s20, shift_expression) = s323
goto(s20, specifier_qualifier_list) = s4
goto(s20, struct_or_union) = s334
goto(s20, struct_or_union_specifier) = s338
goto(s20, type_name) = s115
goto(s20, type_qualifier) = s92
goto(s20, type_specifier) = s93
goto(s20, unary_expression) = s60
goto(s20, unary_operator) = s67
goto(s21, additive_expression) = s216
goto(s21, and_expression) = s221
goto(s21, assignment_expression) = s227
goto(s21, cast_expression) = s229
goto(s21, conditional_expression) = s231
goto(s21, enum_specifier) = s267
goto(s21, equality_expression) = s270
goto(s21, exclusive_or_expression) = s273
goto(s21, expression) = s111
goto(s21, inclusive_or_expression) = s285
goto(s21, logical_and_expression) = s294
goto(s21, logical_or_expression) = s296
goto(s21, multiplicative_expression) = s298
goto(s21, postfix_expression) = s306
goto(s21, primary_expression) = s316
goto(s21, relational_expression) = s317
goto(s21, shift_expression) = s323
goto(s21, specifier_qualifier_list) = s4
goto(s21, struct_or_union) = s334
goto(s21, struct_or_union_specifier) = s338
goto(s21, type_name) = s181
goto(s21, type_qualifier) = s92
goto(s21, type_specifier) = s93
goto(s21, unary_expression) = s60
goto(s21, unary_operator) = s67
goto(s22, additive_expression) = s216
goto(s22, and_expression) = s221
goto(s22, assignment_expression) = s227
goto(s22, cast_expression) = s229
goto(s22, conditional_expression) = s231
goto(s22, equality_expression) = s270
goto(s22, exclusive_or_expression) = s273
goto(s22, expression) = s275
goto(s22, expression_statement) = s23
goto(s22, inclusive_or_expression) = s285
goto(s22, logical_and_expression) = s294
goto(s22, logical_or_expression) = s296
goto(s22, multiplicative_expression) = s298
goto(s22, postfix_expression) = s306
goto(s22, primary_expression) = s316
goto(s22, relational_expression) = s317
goto(s22, shift_expression) = s323
goto(s22, unary_expression) = s60
goto(s22, unary_operator) = s67
goto(s23, additive_expression) = s216
goto(s23, and_expression) = s221
goto(s23, assignment_expression) = s227
goto(s23, cast_expression) = s229
goto(s23, conditional_expression) = s231
goto(s23, equality_expression) = s270
goto(s23, exclusive_or_expression) = s273
goto(s23, expression) = s275
goto(s23, expression_statement) = s26
goto(s23, inclusive_or_expression) = s285
goto(s23, logical_and_expression) = s294
goto(s23, logical_or_expression) = s296
goto(s23, multiplicative_expression) = s298
goto(s23, postfix_expression) = s306
goto(s23, primary_expression) = s316
goto(s23, relational_expression) = s317
goto(s23, shift_expression) = s323
goto(s23, unary_expression) = s60
goto(s23, unary_operator) = s67
goto(s24, additive_expression) = s216
goto(s24, and_expression) = s221
goto(s24, assignment_expression) = s227
goto(s24, cast_expression) = s229
goto(s24, conditional_expression) = s231
goto(s24, equality_expression) = s270
goto(s24, exclusive_or_expression) = s273
goto(s24, expression) = s111
goto(s24, inclusive_or_expression) = s285
goto(s24, logical_and_expression) = s294
goto(s24, logical_or_expression) = s296
goto(s24, multiplicative_expression) = s298
goto(s24, postfix_expression) = s306
goto(s24, primary_expression) = s316
goto(s24, relational_expression) = s317
goto(s24, shift_expression) = s323
goto(s24, unary_expression) = s60
goto(s24, unary_operator) = s67
goto(s25, additive_expression) = s216
goto(s25, and_expression) = s221
goto(s25, assignment_expression) = s227
goto(s25, cast_expression) = s229
goto(s25, conditional_expression) = s231
goto(s25, equality_expression) = s270
goto(s25, exclusive_or_expression) = s273
goto(s25, expression) = s150
goto(s25, inclusive_or_expression) = s285
goto(s25, logical_and_expression) = s294
goto(s25, logical_or_expression) = s296
goto(s25, multiplicative_expression) = s298
goto(s25, postfix_expression) = s306
goto(s25, primary_expression) = s316
goto(s25, relational_expression) = s317
goto(s25, shift_expression) = s323
goto(s25, unary_expression) = s60
goto(s25, unary_operator) = s67
goto(s26, additive_expression) = s216
goto(s26, and_expression) = s221
goto(s26, assignment_expression) = s227
goto(s26, cast_expression) = s229
goto(s26, conditional_expression) = s231
goto(s26, equality_expression) = s270
goto(s26, exclusive_or_expression) = s273
goto(s26, expression) = s164
goto(s26, inclusive_or_expression) = s285
goto(s26, logical_and_expression) = s294
goto(s26, logical_or_expression) = s296
goto(s26, multiplicative_expression) = s298
goto(s26, postfix_expression) = s306
goto(s26, primary_expression) = s316
goto(s26, relational_expression) = s317
goto(s26, shift_expression) = s323
goto(s26, unary_expression) = s60
goto(s26, unary_operator) = s67
goto(s27, additive_expression) = s216
goto(s27, and_expression) = s221
goto(s27, assignment_expression) = s227
goto(s27, cast_expression) = s229
goto(s27, conditional_expression) = s231
goto(s27, equality_expression) = s270
goto(s27, exclusive_or_expression) = s273
goto(s27, expression) = s170
goto(s27, inclusive_or_expression) = s285
goto(s27, logical_and_expression) = s294
goto(s27, logical_or_expression) = s296
goto(s27, multiplicative_expression) = s298
goto(s27, postfix_expression) = s306
goto(s27, primary_expression) = s316
goto(s27, relational_expression) = s317
goto(s27, shift_expression) = s323
goto(s27, unary_expression) = s60
goto(s27, unary_operator) = s67
goto(s28, additive_expression) = s216
goto(s28, and_expression) = s221
goto(s28, assignment_expression) = s227
goto(s28, cast_expression) = s229
goto(s28, conditional_expression) = s231
goto(s28, equality_expression) = s270
goto(s28, exclusive_or_expression) = s273
goto(s28, expression) = s177
goto(s28, inclusive_or_expression) = s285
goto(s28, logical_and_expression) = s294
goto(s28, logical_or_expression) = s296
goto(s28, multiplicative_expression) = s298
goto(s28, postfix_expression) = s306
goto(s28, primary_expression) = s316
goto(s28, relational_expression) = s317
goto(s28, shift_expression) = s323
goto(s28, unary_expression) = s60
goto(s28, unary_operator) = s67
goto(s29, additive_expression) = s216
goto(s29, and_expression) = s221
goto(s29, assignment_expression) = s227
goto(s29, cast_expression) = s229
goto(s29, conditional_expression) = s231
goto(s29, equality_expression) = s270
goto(s29, exclusive_or_expression) = s273
goto(s29, expression) = s187
goto(s29, inclusive_or_expression) = s285
goto(s29, logical_and_expression) = s294
goto(s29, logical_or_expression) = s296
goto(s29, multiplicative_expression) = s298
goto(s29, postfix_expression) = s306
goto(s29, primary_expression) = s316
goto(s29, relational_expression) = s317
goto(s29, shift_expression) = s323
goto(s29, unary_expression) = s60
goto(s29, unary_operator) = s67
goto(s30, additive_expression) = s216
goto(s30, and_expression) = s221
goto(s30, assignment_expression) = s227
goto(s30, cast_expression) = s229
goto(s30, conditional_expression) = s231
goto(s30, equality_expression) = s270
goto(s30, exclusive_or_expression) = s273
goto(s30, expression) = s195
goto(s30, inclusive_or_expression) = s285
goto(s30, logical_and_expression) = s294
goto(s30, logical_or_expression) = s296
goto(s30, multiplicative_expression) = s298
goto(s30, postfix_expression) = s306
goto(s30, primary_expression) = s316
goto(s30, relational_expression) = s317
goto(s30, shift_expression) = s323
goto(s30, unary_expression) = s60
goto(s30, unary_operator) = s67
goto(s31, additive_expression) = s216
goto(s31, and_expression) = s221
goto(s31, assignment_expression) = s227
goto(s31, cast_expression) = s229
goto(s31, conditional_expression) = s231
goto(s31, equality_expression) = s270
goto(s31, exclusive_or_expression) = s273
goto(s31, expression) = s276
goto(s31, inclusive_or_expression) = s285
goto(s31, logical_and_expression) = s294
goto(s31, logical_or_expression) = s296
goto(s31, multiplicative_expression) = s298
goto(s31, postfix_expression) = s306
goto(s31, primary_expression) = s316
goto(s31, relational_expression) = s317
goto(s31, shift_expression) = s323
goto(s31, unary_expression) = s60
goto(s31, unary_operator) = s67
goto(s32, additive_expression) = s216
goto(s32, and_expression) = s221
goto(s32, assignment_expression) = s227
goto(s32, cast_expression) = s229
goto(s32, conditional_expression) = s231
goto(s32, equality_expression) = s270
goto(s32, exclusive_or_expression) = s273
goto(s32, expression) = s277
goto(s32, inclusive_or_expression) = s285
goto(s32, logical_and_expression) = s294
goto(s32, logical_or_expression) = s296
goto(s32, multiplicative_expression) = s298
goto(s32, postfix_expression) = s306
goto(s32, primary_expression) = s316
goto(s32, relational_expression) = s317
goto(s32, shift_expression) = s323
goto(s32, unary_expression) = s60
goto(s32, unary_operator) = s67
goto(s33, additive_expression) = s216
goto(s33, and_expression) = s221
goto(s33, assignment_expression) = s228
goto(s33, cast_expression) = s229
goto(s33, conditional_expression) = s231
goto(s33, equality_expression) = s270
goto(s33, exclusive_or_expression) = s273
goto(s33, inclusive_or_expression) = s285
goto(s33, initializer) = s289
goto(s33, initializer_list) = s200
goto(s33, logical_and_expression) = s294
goto(s33, logical_or_expression) = s296
goto(s33, multiplicative_expression) = s298
goto(s33, postfix_expression) = s306
goto(s33, primary_expression) = s316
goto(s33, relational_expression) = s317
goto(s33, shift_expression) = s323
goto(s33, unary_expression) = s60
goto(s33, unary_operator) = s67
goto(s34, additive_expression) = s216
goto(s34, and_expression) = s221
goto(s34, assignment_expression) = s228
goto(s34, cast_expression) = s229
goto(s34, conditional_expression) = s231
goto(s34, equality_expression) = s270
goto(s34, exclusive_or_expression) = s273
goto(s34, inclusive_or_expression) = s285
goto(s34, initializer) = s290
goto(s34, logical_and_expression) = s294
goto(s34, logical_or_expression) = s296
goto(s34, multiplicative_expression) = s298
goto(s34, postfix_expression) = s306
goto(s34, primary_expression) = s316
goto(s34, relational_expression) = s317
goto(s34, shift_expression) = s323
goto(s34, unary_expression) = s60
goto(s34, unary_operator) = s67
goto(s35, additive_expression) = s216
goto(s35, and_expression) = s221
goto(s35, assignment_expression) = s228
goto(s35, cast_expression) = s229
goto(s35, conditional_expression) = s231
goto(s35, equality_expression) = s270
goto(s35, exclusive_or_expression) = s273
goto(s35, inclusive_or_expression) = s285
goto(s35, initializer) = s246
goto(s35, logical_and_expression) = s294
goto(s35, logical_or_expression) = s296
goto(s35, multiplicative_expression) = s298
goto(s35, postfix_expression) = s306
goto(s35, primary_expression) = s316
goto(s35, relational_expression) = s317
goto(s35, shift_expression) = s323
goto(s35, unary_expression) = s60
goto(s35, unary_operator) = s67
goto(s36, additive_expression) = s216
goto(s36, and_expression) = s221
goto(s36, assignment_expression) = s225
goto(s36, cast_expression) = s229
goto(s36, conditional_expression) = s231
goto(s36, equality_expression) = s270
goto(s36, exclusive_or_expression) = s273
goto(s36, inclusive_or_expression) = s285
goto(s36, logical_and_expression) = s294
goto(s36, logical_or_expression) = s296
goto(s36, multiplicative_expression) = s298
goto(s36, postfix_expression) = s306
goto(s36, primary_expression) = s316
goto(s36, relational_expression) = s317
goto(s36, shift_expression) = s323
goto(s36, unary_expression) = s60
goto(s36, unary_operator) = s67
goto(s37, additive_expression) = s216
goto(s37, and_expression) = s221
goto(s37, assignment_expression) = s278
goto(s37, cast_expression) = s229
goto(s37, conditional_expression) = s231
goto(s37, equality_expression) = s270
goto(s37, exclusive_or_expression) = s273
goto(s37, inclusive_or_expression) = s285
goto(s37, logical_and_expression) = s294
goto(s37, logical_or_expression) = s296
goto(s37, multiplicative_expression) = s298
goto(s37, postfix_expression) = s306
goto(s37, primary_expression) = s316
goto(s37, relational_expression) = s317
goto(s37, shift_expression) = s323
goto(s37, unary_expression) = s60
goto(s37, unary_operator) = s67
goto(s38, additive_expression) = s216
goto(s38, and_expression) = s221
goto(s38, assignment_expression) = s347
goto(s38, cast_expression) = s229
goto(s38, conditional_expression) = s231
goto(s38, equality_expression) = s270
goto(s38, exclusive_or_expression) = s273
goto(s38, inclusive_or_expression) = s285
goto(s38, logical_and_expression) = s294
goto(s38, logical_or_expression) = s296
goto(s38, multiplicative_expression) = s298
goto(s38, postfix_expression) = s306
goto(s38, primary_expression) = s316
goto(s38, relational_expression) = s317
goto(s38, shift_expression) = s323
goto(s38, unary_expression) = s60
goto(s38, unary_operator) = s67
goto(s39, additive_expression) = s216
goto(s39, and_expression) = s221
goto(s39, cast_expression) = s229
goto(s39, conditional_expression) = s232
goto(s39, constant_expression) = s128
goto(s39, equality_expression) = s270
goto(s39, exclusive_or_expression) = s273
goto(s39, inclusive_or_expression) = s285
goto(s39, logical_and_expression) = s294
goto(s39, logical_or_expression) = s296
goto(s39, multiplicative_expression) = s298
goto(s39, postfix_expression) = s306
goto(s39, primary_expression) = s316
goto(s39, relational_expression) = s317
goto(s39, shift_expression) = s323
goto(s39, unary_expression) = s346
goto(s39, unary_operator) = s67
goto(s40, additive_expression) = s216
goto(s40, and_expression) = s221
goto(s40, cast_expression) = s229
goto(s40, conditional_expression) = s232
goto(s40, constant_expression) = s134
goto(s40, equality_expression) = s270
goto(s40, exclusive_or_expression) = s273
goto(s40, inclusive_or_expression) = s285
goto(s40, logical_and_expression) = s294
goto(s40, logical_or_expression) = s296
goto(s40, multiplicative_expression) = s298
goto(s40, postfix_expression) = s306
goto(s40, primary_expression) = s316
goto(s40, relational_expression) = s317
goto(s40, shift_expression) = s323
goto(s40, unary_expression) = s346
goto(s40, unary_operator) = s67
goto(s41, additive_expression) = s216
goto(s41, and_expression) = s221
goto(s41, cast_expression) = s229
goto(s41, conditional_expression) = s232
goto(s41, constant_expression) = s140
goto(s41, equality_expression) = s270
goto(s41, exclusive_or_expression) = s273
goto(s41, inclusive_or_expression) = s285
goto(s41, logical_and_expression) = s294
goto(s41, logical_or_expression) = s296
goto(s41, multiplicative_expression) = s298
goto(s41, postfix_expression) = s306
goto(s41, primary_expression) = s316
goto(s41, relational_expression) = s317
goto(s41, shift_expression) = s323
goto(s41, unary_expression) = s346
goto(s41, unary_operator) = s67
goto(s42, additive_expression) = s216
goto(s42, and_expression) = s221
goto(s42, cast_expression) = s229
goto(s42, conditional_expression) = s232
goto(s42, constant_expression) = s213
goto(s42, equality_expression) = s270
goto(s42, exclusive_or_expression) = s273
goto(s42, inclusive_or_expression) = s285
goto(s42, logical_and_expression) = s294
goto(s42, logical_or_expression) = s296
goto(s42, multiplicative_expression) = s298
goto(s42, postfix_expression) = s306
goto(s42, primary_expression) = s316
goto(s42, relational_expression) = s317
goto(s42, shift_expression) = s323
goto(s42, unary_expression) = s346
goto(s42, unary_operator) = s67
goto(s43, additive_expression) = s216
goto(s43, and_expression) = s221
goto(s43, cast_expression) = s229
goto(s43, conditional_expression) = s232
goto(s43, constant_expression) = s245
goto(s43, equality_expression) = s270
goto(s43, exclusive_or_expression) = s273
goto(s43, inclusive_or_expression) = s285
goto(s43, logical_and_expression) = s294
goto(s43, logical_or_expression) = s296
goto(s43, multiplicative_expression) = s298
goto(s43, postfix_expression) = s306
goto(s43, primary_expression) = s316
goto(s43, relational_expression) = s317
goto(s43, shift_expression) = s323
goto(s43, unary_expression) = s346
goto(s43, unary_operator) = s67
goto(s44, additive_expression) = s216
goto(s44, and_expression) = s221
goto(s44, cast_expression) = s229
goto(s44, conditional_expression) = s232
goto(s44, constant_expression) = s255
goto(s44, equality_expression) = s270
goto(s44, exclusive_or_expression) = s273
goto(s44, inclusive_or_expression) = s285
goto(s44, logical_and_expression) = s294
goto(s44, logical_or_expression) = s296
goto(s44, multiplicative_expression) = s298
goto(s44, postfix_expression) = s306
goto(s44, primary_expression) = s316
goto(s44, relational_expression) = s317
goto(s44, shift_expression) = s323
goto(s44, unary_expression) = s346
goto(s44, unary_operator) = s67
goto(s45, additive_expression) = s216
goto(s45, and_expression) = s221
goto(s45, cast_expression) = s229
goto(s45, conditional_expression) = s232
goto(s45, constant_expression) = s265
goto(s45, equality_expression) = s270
goto(s45, exclusive_or_expression) = s273
goto(s45, inclusive_or_expression) = s285
goto(s45, logical_and_expression) = s294
goto(s45, logical_or_expression) = s296
goto(s45, multiplicative_expression) = s298
goto(s45, postfix_expression) = s306
goto(s45, primary_expression) = s316
goto(s45, relational_expression) = s317
goto(s45, shift_expression) = s323
goto(s45, unary_expression) = s346
goto(s45, unary_operator) = s67
goto(s46, additive_expression) = s216
goto(s46, and_expression) = s221
goto(s46, cast_expression) = s229
goto(s46, conditional_expression) = s297
goto(s46, equality_expression) = s270
goto(s46, exclusive_or_expression) = s273
goto(s46, inclusive_or_expression) = s285
goto(s46, logical_and_expression) = s294
goto(s46, logical_or_expression) = s296
goto(s46, multiplicative_expression) = s298
goto(s46, postfix_expression) = s306
goto(s46, primary_expression) = s316
goto(s46, relational_expression) = s317
goto(s46, shift_expression) = s323
goto(s46, unary_expression) = s346
goto(s46, unary_operator) = s67
goto(s47, additive_expression) = s216
goto(s47, and_expression) = s221
goto(s47, cast_expression) = s229
goto(s47, equality_expression) = s270
goto(s47, exclusive_or_expression) = s273
goto(s47, inclusive_or_expression) = s285
goto(s47, logical_and_expression) = s295
goto(s47, multiplicative_expression) = s298
goto(s47, postfix_expression) = s306
goto(s47, primary_expression) = s316
goto(s47, relational_expression) = s317
goto(s47, shift_expression) = s323
goto(s47, unary_expression) = s346
goto(s47, unary_operator) = s67
goto(s48, additive_expression) = s216
goto(s48, and_expression) = s221
goto(s48, cast_expression) = s229
goto(s48, equality_expression) = s270
goto(s48, exclusive_or_expression) = s273
goto(s48, inclusive_or_expression) = s286
goto(s48, multiplicative_expression) = s298
goto(s48, postfix_expression) = s306
goto(s48, primary_expression) = s316
goto(s48, relational_expression) = s317
goto(s48, shift_expression) = s323
goto(s48, unary_expression) = s346
goto(s48, unary_operator) = s67
goto(s49, additive_expression) = s216
goto(s49, and_expression) = s221
goto(s49, cast_expression) = s229
goto(s49, equality_expression) = s270
goto(s49, exclusive_or_expression) = s274
goto(s49, multiplicative_expression) = s298
goto(s49, postfix_expression) = s306
goto(s49, primary_expression) = s316
goto(s49, relational_expression) = s317
goto(s49, shift_expression) = s323
goto(s49, unary_expression) = s346
goto(s49, unary_operator) = s67
goto(s50, additive_expression) = s216
goto(s50, and_expression) = s222
goto(s50, cast_expression) = s229
goto(s50, equality_expression) = s270
goto(s50, multiplicative_expression) = s298
goto(s50, postfix_expression) = s306
goto(s50, primary_expression) = s316
goto(s50, relational_expression) = s317
goto(s50, shift_expression) = s323
goto(s50, unary_expression) = s346
goto(s50, unary_operator) = s67
goto(s51, additive_expression) = s216
goto(s51, cast_expression) = s229
goto(s51, equality_expression) = s223
goto(s51, multiplicative_expression) = s298
goto(s51, postfix_expression) = s306
goto(s51, primary_expression) = s316
goto(s51, relational_expression) = s317
goto(s51, shift_expression) = s323
goto(s51, unary_expression) = s346
goto(s51, unary_operator) = s67
goto(s52, additive_expression) = s216
goto(s52, cast_expression) = s229
goto(s52, multiplicative_expression) = s298
goto(s52, postfix_expression) = s306
goto(s52, primary_expression) = s316
goto(s52, relational_expression) = s271
goto(s52, shift_expression) = s323
goto(s52, unary_expression) = s346
goto(s52, unary_operator) = s67
goto(s53, additive_expression) = s216
goto(s53, cast_expression) = s229
goto(s53, multiplicative_expression) = s298
goto(s53, postfix_expression) = s306
goto(s53, primary_expression) = s316
goto(s53, relational_expression) = s272
goto(s53, shift_expression) = s323
goto(s53, unary_expression) = s346
goto(s53, unary_operator) = s67
goto(s54, additive_expression) = s216
goto(s54, cast_expression) = s229
goto(s54, multiplicative_expression) = s298
goto(s54, postfix_expression) = s306
goto(s54, primary_expression) = s316
goto(s54, shift_expression) = s318
goto(s54, unary_expression) = s346
goto(s54, unary_operator) = s67
goto(s55, additive_expression) = s216
goto(s55, cast_expression) = s229
goto(s55, multiplicative_expression) = s298
goto(s55, postfix_expression) = s306
goto(s55, primary_expression) = s316
goto(s55, shift_expression) = s319
goto(s55, unary_expression) = s346
goto(s55, unary_operator) = s67
goto(s56, additive_expression) = s216
goto(s56, cast_expression) = s229
goto(s56, multiplicative_expression) = s298
goto(s56, postfix_expression) = s306
goto(s56, primary_expression) = s316
goto(s56, shift_expression) = s320
goto(s56, unary_expression) = s346
goto(s56, unary_operator) = s67
goto(s57, additive_expression) = s216
goto(s57, cast_expression) = s229
goto(s57, multiplicative_expression) = s298
goto(s57, postfix_expression) = s306
goto(s57, primary_expression) = s316
goto(s57, shift_expression) = s321
goto(s57, unary_expression) = s346
goto(s57, unary_operator) = s67
goto(s58, additive_expression) = s217
goto(s58, cast_expression) = s229
goto(s58, multiplicative_expression) = s298
goto(s58, postfix_expression) = s306
goto(s58, primary_expression) = s316
goto(s58, unary_expression) = s346
goto(s58, unary_operator) = s67
goto(s59, additive_expression) = s218
goto(s59, cast_expression) = s229
goto(s59, multiplicative_expression) = s298
goto(s59, postfix_expression) = s306
goto(s59, primary_expression) = s316
goto(s59, unary_expression) = s346
goto(s59, unary_operator) = s67
goto(s60, assignment_operator) = s38
goto(s61, cast_expression) = s229
goto(s61, multiplicative_expression) = s219
goto(s61, postfix_expression) = s306
goto(s61, primary_expression) = s316
goto(s61, unary_expression) = s346
goto(s61, unary_operator) = s67
goto(s62, cast_expression) = s229
goto(s62, multiplicative_expression) = s220
goto(s62, postfix_expression) = s306
goto(s62, primary_expression) = s316
goto(s62, unary_expression) = s346
goto(s62, unary_operator) = s67
goto(s63, cast_expression) = s116
goto(s63, postfix_expression) = s306
goto(s63, primary_expression) = s316
goto(s63, unary_expression) = s346
goto(s63, unary_operator) = s67
goto(s64, cast_expression) = s299
goto(s64, postfix_expression) = s306
goto(s64, primary_expression) = s316
goto(s64, unary_expression) = s346
goto(s64, unary_operator) = s67
goto(s65, cast_expression) = s300
goto(s65, postfix_expression) = s306
goto(s65, primary_expression) = s316
goto(s65, unary_expression) = s346
goto(s65, unary_operator) = s67
goto(s66, cast_expression) = s301
goto(s66, postfix_expression) = s306
goto(s66, primary_expression) = s316
goto(s66, unary_expression) = s346
goto(s66, unary_operator) = s67
goto(s67, cast_expression) = s348
goto(s67, postfix_expression) = s306
goto(s67, primary_expression) = s316
goto(s67, unary_expression) = s346
goto(s67, unary_operator) = s67
goto(s68, compound_statement) = s239
goto(s68, declaration) = s233
goto(s68, declaration_list) = s70
goto(s68, declaration_specifiers) = s79
goto(s68, enum_specifier) = s267
goto(s68, storage_class_specifier) = s76
goto(s68, struct_or_union) = s334
goto(s68, struct_or_union_specifier) = s338
goto(s68, type_qualifier) = s77
goto(s68, type_specifier) = s78
goto(s69, compound_statement) = s247
goto(s69, declaration) = s233
goto(s69, declaration_list) = s71
goto(s69, declaration_specifiers) = s79
goto(s69, enum_specifier) = s267
goto(s69, storage_class_specifier) = s76
goto(s69, struct_or_union) = s334
goto(s69, struct_or_union_specifier) = s338
goto(s69, type_qualifier) = s77
goto(s69, type_specifier) = s78
goto(s70, compound_statement) = s240
goto(s70, declaration) = s235
goto(s70, declaration_specifiers) = s79
goto(s70, enum_specifier) = s267
goto(s70, storage_class_specifier) = s76
goto(s70, struct_or_union) = s334
goto(s70, struct_or_union_specifier) = s338
goto(s70, type_qualifier) = s77
goto(s70, type_specifier) = s78
goto(s71, compound_statement) = s248
goto(s71, declaration) = s235
goto(s71, declaration_specifiers) = s79
goto(s71, enum_specifier) = s267
goto(s71, storage_class_specifier) = s76
goto(s71, struct_or_union) = s334
goto(s71, struct_or_union_specifier) = s338
goto(s71, type_qualifier) = s77
goto(s71, type_specifier) = s78
goto(s72, declaration) = s234
goto(s72, declaration_specifiers) = s80
goto(s72, declarator) = s69
goto(s72, direct_declarator) = s257
goto(s72, enum_specifier) = s267
goto(s72, external_declaration) = s339
goto(s72, function_definition) = s282
goto(s72, pointer) = s87
goto(s72, storage_class_specifier) = s76
goto(s72, struct_or_union) = s334
goto(s72, struct_or_union_specifier) = s338
goto(s72, type_qualifier) = s77
goto(s72, type_specifier) = s78
goto(s73, declaration_specifiers) = s3
goto(s73, enum_specifier) = s267
goto(s73, identifier_list) = s260
goto(s73, parameter_declaration) = s302
goto(s73, parameter_list) = s303
goto(s73, parameter_type_list) = s262
goto(s73, storage_class_specifier) = s76
goto(s73, struct_or_union) = s334
goto(s73, struct_or_union_specifier) = s338
goto(s73, type_qualifier) = s77
goto(s73, type_specifier) = s78
goto(s74, declaration_specifiers) = s3
goto(s74, enum_specifier) = s267
goto(s74, parameter_declaration) = s302
goto(s74, parameter_list) = s303
goto(s74, parameter_type_list) = s252
goto(s74, storage_class_specifier) = s76
goto(s74, struct_or_union) = s334
goto(s74, struct_or_union_specifier) = s338
goto(s74, type_qualifier) = s77
goto(s74, type_specifier) = s78
goto(s75, declaration_specifiers) = s3
goto(s75, enum_specifier) = s267
goto(s75, parameter_declaration) = s305
goto(s75, storage_class_specifier) = s76
goto(s75, struct_or_union) = s334
goto(s75, struct_or_union_specifier) = s338
goto(s75, type_qualifier) = s77
goto(s75, type_specifier) = s78
goto(s76, declaration_specifiers) = s329
goto(s76, enum_specifier) = s267
goto(s76, storage_class_specifier) = s76
goto(s76, struct_or_union) = s334
goto(s76, struct_or_union_specifier) = s338
goto(s76, type_qualifier) = s77
goto(s76, type_specifier) = s78
goto(s77, declaration_specifiers) = s341
goto(s77, enum_specifier) = s267
goto(s77, storage_class_specifier) = s76
goto(s77, struct_or_union) = s334
goto(s77, struct_or_union_specifier) = s338
goto(s77, type_qualifier) = s77
goto(s77, type_specifier) = s78
goto(s78, declaration_specifiers) = s344
goto(s78, enum_specifier) = s267
goto(s78, storage_class_specifier) = s76
goto(s78, struct_or_union) = s334
goto(s78, struct_or_union_specifier) = s338
goto(s78, type_qualifier) = s77
goto(s78, type_specifier) = s78
goto(s79, declarator) = s243
goto(s79, direct_declarator) = s257
goto(s79, init_declarator) = s287
goto(s79, init_declarator_list) = s241
goto(s79, pointer) = s87
goto(s80, declarator) = s68
goto(s80, direct_declarator) = s257
goto(s80, init_declarator) = s287
goto(s80, init_declarator_list) = s241
goto(s80, pointer) = s87
goto(s81, declarator) = s243
goto(s81, direct_declarator) = s257
goto(s81, init_declarator) = s288
goto(s81, pointer) = s87
goto(s82, declarator) = s244
goto(s82, direct_declarator) = s257
goto(s82, pointer) = s87
goto(s82, struct_declarator) = s332
goto(s82, struct_declarator_list) = s325
goto(s83, declarator) = s244
goto(s83, direct_declarator) = s257
goto(s83, pointer) = s87
goto(s83, struct_declarator) = s333
goto(s84, declarator) = s109
goto(s84, direct_declarator) = s257
goto(s84, pointer) = s87
goto(s85, direct_abstract_declarator) = s250
goto(s85, direct_declarator) = s258
goto(s86, direct_abstract_declarator) = s250
goto(s87, direct_declarator) = s258
goto(s88, enum_specifier) = s267
goto(s88, specifier_qualifier_list) = s82
goto(s88, struct_declaration) = s330
goto(s88, struct_declaration_list) = s90
goto(s88, struct_or_union) = s334
goto(s88, struct_or_union_specifier) = s338
goto(s88, type_qualifier) = s92
goto(s88, type_specifier) = s93
goto(s89, enum_specifier) = s267
goto(s89, specifier_qualifier_list) = s82
goto(s89, struct_declaration) = s330
goto(s89, struct_declaration_list) = s91
goto(s89, struct_or_union) = s334
goto(s89, struct_or_union_specifier) = s338
goto(s89, type_qualifier) = s92
goto(s89, type_specifier) = s93
goto(s90, enum_specifier) = s267
goto(s90, specifier_qualifier_list) = s82
goto(s90, struct_declaration) = s331
goto(s90, struct_or_union) = s334
goto(s90, struct_or_union_specifier) = s338
goto(s90, type_qualifier) = s92
goto(s90, type_specifier) = s93
goto(s91, enum_specifier) = s267
goto(s91, specifier_qualifier_list) = s82
goto(s91, struct_declaration) = s331
goto(s91, struct_or_union) = s334
goto(s91, struct_or_union_specifier) = s338
goto(s91, type_qualifier) = s92
goto(s91, type_specifier) = s93
goto(s92, enum_specifier) = s267
goto(s92, specifier_qualifier_list) = s342
goto(s92, struct_or_union) = s334
goto(s92, struct_or_union_specifier) = s338
goto(s92, type_qualifier) = s92
goto(s92, type_specifier) = s93
goto(s93, enum_specifier) = s267
goto(s93, specifier_qualifier_list) = s345
goto(s93, struct_or_union) = s334
goto(s93, struct_or_union_specifier) = s338
goto(s93, type_qualifier) = s92
goto(s93, type_specifier) = s93
goto(s94, enumerator) = s268
goto(s94, enumerator_list) = s155
goto(s95, enumerator) = s268
goto(s95, enumerator_list) = s158
goto(s96, enumerator) = s269
goto(s97, pointer) = s118
goto(s97, type_qualifier) = s340
goto(s97, type_qualifier_list) = s98
goto(s98, pointer) = s119
goto(s98, type_qualifier) = s343
goto(s99, postfix_expression) = s306
goto(s99, primary_expression) = s316
goto(s99, unary_expression) = s122
goto(s99, unary_operator) = s67
goto(s100, postfix_expression) = s306
goto(s100, primary_expression) = s316
goto(s100, unary_expression) = s125
goto(s100, unary_operator) = s67
goto(s101, postfix_expression) = s306
goto(s101, primary_expression) = s316
goto(s101, unary_expression) = s183
goto(s101, unary_operator) = s67
The grammar is not an SLR grammar!
