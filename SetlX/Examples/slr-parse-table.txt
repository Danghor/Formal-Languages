Given grammar:
program -> program defOrStmnt;
program -> defOrStmnt;
defOrStmnt -> 'function' ID '(' paramList ')' '{' stmntList '}';
defOrStmnt -> statement;
stmntList -> stmntList statement;
stmntList ->;
statement -> 'if' '(' boolExpr ')' '{' stmntList '}';
statement -> 'while' '(' boolExpr ')' '{' stmntList '}';
statement -> 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}';
statement -> 'return' optExpr ';';
statement -> assignment ';';
statement -> expr ';';
optExpr -> expr;
optExpr ->;
assignment -> ID ':=' expr;
paramList -> neParamList;
paramList ->;
neParamList -> neParamList ',' ID;
neParamList -> ID;
boolExpr -> boolExpr '||' conjunction;
boolExpr -> conjunction;
conjunction -> conjunction '&&' literal;
conjunction -> literal;
literal -> '!' boolFactor;
literal -> boolFactor;
boolFactor -> '(' boolExpr ')';
boolFactor -> expr '==' expr;
boolFactor -> expr '<=' expr;
expr -> expr '+' product;
expr -> expr '-' product;
expr -> product;
product -> product '*' factor;
product -> product '/' factor;
product -> factor;
factor -> NUMBER;
factor -> ID;
factor -> ID '(' exprList ')';
factor -> '(' expr ')';
exprList -> neExprList;
exprList ->;
neExprList -> neExprList ',' expr;
neExprList -> expr;
S -> program;

First sets:
First(S) = {"'('", "'for'", "'function'", "'if'", "'return'", "'while'", "ID", "NUMBER"}
First(assignment) = {"ID"}
First(boolExpr) = {"'!'", "'('", "ID", "NUMBER"}
First(boolFactor) = {"'('", "ID", "NUMBER"}
First(conjunction) = {"'!'", "'('", "ID", "NUMBER"}
First(defOrStmnt) = {"'('", "'for'", "'function'", "'if'", "'return'", "'while'", "ID", "NUMBER"}
First(expr) = {"'('", "ID", "NUMBER"}
First(exprList) = {"", "'('", "ID", "NUMBER"}
First(factor) = {"'('", "ID", "NUMBER"}
First(literal) = {"'!'", "'('", "ID", "NUMBER"}
First(neExprList) = {"'('", "ID", "NUMBER"}
First(neParamList) = {"ID"}
First(optExpr) = {"", "'('", "ID", "NUMBER"}
First(paramList) = {"", "ID"}
First(product) = {"'('", "ID", "NUMBER"}
First(program) = {"'('", "'for'", "'function'", "'if'", "'return'", "'while'", "ID", "NUMBER"}
First(statement) = {"'('", "'for'", "'if'", "'return'", "'while'", "ID", "NUMBER"}
First(stmntList) = {"", "'('", "'for'", "'if'", "'return'", "'while'", "ID", "NUMBER"}

Follow sets:
Follow(S) = {"$"}
Follow(assignment) = {"')'", "';'"}
Follow(boolExpr) = {"')'", "';'", "'||'"}
Follow(boolFactor) = {"'&&'", "')'", "';'", "'||'"}
Follow(conjunction) = {"'&&'", "')'", "';'", "'||'"}
Follow(defOrStmnt) = {"$", "'('", "'for'", "'function'", "'if'", "'return'", "'while'", "ID", "NUMBER"}
Follow(expr) = {"'&&'", "')'", "'+'", "','", "'-'", "';'", "'<='", "'=='", "'||'"}
Follow(exprList) = {"')'"}
Follow(factor) = {"'&&'", "')'", "'*'", "'+'", "','", "'-'", "'/'", "';'", "'<='", "'=='", "'||'"}
Follow(literal) = {"'&&'", "')'", "';'", "'||'"}
Follow(neExprList) = {"')'", "','"}
Follow(neParamList) = {"')'", "','"}
Follow(optExpr) = {"';'"}
Follow(paramList) = {"')'"}
Follow(product) = {"'&&'", "')'", "'*'", "'+'", "','", "'-'", "'/'", "';'", "'<='", "'=='", "'||'"}
Follow(program) = {"$", "'('", "'for'", "'function'", "'if'", "'return'", "'while'", "ID", "NUMBER"}
Follow(statement) = {"$", "'('", "'for'", "'function'", "'if'", "'return'", "'while'", "'}'", "ID", "NUMBER"}
Follow(stmntList) = {"'('", "'for'", "'if'", "'return'", "'while'", "'}'", "ID", "NUMBER"}

All SLR-states:
s0 = {S -> (*) program, assignment -> (*) ID ':=' expr, defOrStmnt -> (*) 'function' ID '(' paramList ')' '{' stmntList '}', defOrStmnt -> (*) statement, expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, program -> (*) defOrStmnt, program -> (*) program defOrStmnt, statement -> (*) 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}', statement -> (*) 'if' '(' boolExpr ')' '{' stmntList '}', statement -> (*) 'return' optExpr ';', statement -> (*) 'while' '(' boolExpr ')' '{' stmntList '}', statement -> (*) assignment ';', statement -> (*) expr ';'}
s1 = {assignment -> (*) ID ':=' expr, defOrStmnt -> (*) 'function' ID '(' paramList ')' '{' stmntList '}', defOrStmnt -> (*) statement, expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, statement -> (*) 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}', statement -> (*) 'if' '(' boolExpr ')' '{' stmntList '}', statement -> (*) 'return' optExpr ';', statement -> (*) 'while' '(' boolExpr ')' '{' stmntList '}', statement -> (*) assignment ';', statement -> (*) expr ';', S -> program (*), program -> program (*) defOrStmnt}
s2 = {assignment -> (*) ID ':=' expr, expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, statement -> (*) 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}', statement -> (*) 'if' '(' boolExpr ')' '{' stmntList '}', statement -> (*) 'return' optExpr ';', statement -> (*) 'while' '(' boolExpr ')' '{' stmntList '}', statement -> (*) assignment ';', statement -> (*) expr ';', statement -> 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList (*) '}', stmntList -> stmntList (*) statement}
s3 = {assignment -> (*) ID ':=' expr, expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, statement -> (*) 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}', statement -> (*) 'if' '(' boolExpr ')' '{' stmntList '}', statement -> (*) 'return' optExpr ';', statement -> (*) 'while' '(' boolExpr ')' '{' stmntList '}', statement -> (*) assignment ';', statement -> (*) expr ';', defOrStmnt -> 'function' ID '(' paramList ')' '{' stmntList (*) '}', stmntList -> stmntList (*) statement}
s4 = {assignment -> (*) ID ':=' expr, expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, statement -> (*) 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}', statement -> (*) 'if' '(' boolExpr ')' '{' stmntList '}', statement -> (*) 'return' optExpr ';', statement -> (*) 'while' '(' boolExpr ')' '{' stmntList '}', statement -> (*) assignment ';', statement -> (*) expr ';', statement -> 'if' '(' boolExpr ')' '{' stmntList (*) '}', stmntList -> stmntList (*) statement}
s5 = {assignment -> (*) ID ':=' expr, expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, statement -> (*) 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}', statement -> (*) 'if' '(' boolExpr ')' '{' stmntList '}', statement -> (*) 'return' optExpr ';', statement -> (*) 'while' '(' boolExpr ')' '{' stmntList '}', statement -> (*) assignment ';', statement -> (*) expr ';', statement -> 'while' '(' boolExpr ')' '{' stmntList (*) '}', stmntList -> stmntList (*) statement}
s6 = {assignment -> (*) ID ':=' expr, statement -> 'for' '(' (*) assignment ';' boolExpr ';' assignment ')' '{' stmntList '}'}
s7 = {assignment -> (*) ID ':=' expr, statement -> 'for' '(' assignment ';' boolExpr ';' (*) assignment ')' '{' stmntList '}'}
s8 = {boolExpr -> (*) boolExpr '||' conjunction, boolExpr -> (*) conjunction, boolFactor -> (*) '(' boolExpr ')', boolFactor -> (*) expr '<=' expr, boolFactor -> (*) expr '==' expr, conjunction -> (*) conjunction '&&' literal, conjunction -> (*) literal, expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, literal -> (*) '!' boolFactor, literal -> (*) boolFactor, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, boolFactor -> '(' (*) boolExpr ')', factor -> '(' (*) expr ')'}
s9 = {boolExpr -> (*) boolExpr '||' conjunction, boolExpr -> (*) conjunction, boolFactor -> (*) '(' boolExpr ')', boolFactor -> (*) expr '<=' expr, boolFactor -> (*) expr '==' expr, conjunction -> (*) conjunction '&&' literal, conjunction -> (*) literal, expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, literal -> (*) '!' boolFactor, literal -> (*) boolFactor, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, statement -> 'for' '(' assignment ';' (*) boolExpr ';' assignment ')' '{' stmntList '}'}
s10 = {boolExpr -> (*) boolExpr '||' conjunction, boolExpr -> (*) conjunction, boolFactor -> (*) '(' boolExpr ')', boolFactor -> (*) expr '<=' expr, boolFactor -> (*) expr '==' expr, conjunction -> (*) conjunction '&&' literal, conjunction -> (*) literal, expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, literal -> (*) '!' boolFactor, literal -> (*) boolFactor, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, statement -> 'if' '(' (*) boolExpr ')' '{' stmntList '}'}
s11 = {boolExpr -> (*) boolExpr '||' conjunction, boolExpr -> (*) conjunction, boolFactor -> (*) '(' boolExpr ')', boolFactor -> (*) expr '<=' expr, boolFactor -> (*) expr '==' expr, conjunction -> (*) conjunction '&&' literal, conjunction -> (*) literal, expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, literal -> (*) '!' boolFactor, literal -> (*) boolFactor, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, statement -> 'while' '(' (*) boolExpr ')' '{' stmntList '}'}
s12 = {boolFactor -> (*) '(' boolExpr ')', boolFactor -> (*) expr '<=' expr, boolFactor -> (*) expr '==' expr, conjunction -> (*) conjunction '&&' literal, conjunction -> (*) literal, expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, literal -> (*) '!' boolFactor, literal -> (*) boolFactor, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, boolExpr -> boolExpr '||' (*) conjunction}
s13 = {boolFactor -> (*) '(' boolExpr ')', boolFactor -> (*) expr '<=' expr, boolFactor -> (*) expr '==' expr, expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, literal -> (*) '!' boolFactor, literal -> (*) boolFactor, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, conjunction -> conjunction '&&' (*) literal}
s14 = {boolFactor -> (*) '(' boolExpr ')', boolFactor -> (*) expr '<=' expr, boolFactor -> (*) expr '==' expr, expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, literal -> '!' (*) boolFactor}
s15 = {expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, exprList -> (*), exprList -> (*) neExprList, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, neExprList -> (*) expr, neExprList -> (*) neExprList ',' expr, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, factor -> ID '(' (*) exprList ')'}
s16 = {expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, optExpr -> (*), optExpr -> (*) expr, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, statement -> 'return' (*) optExpr ';'}
s17 = {expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, factor -> '(' (*) expr ')'}
s18 = {expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, assignment -> ID ':=' (*) expr}
s19 = {expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, boolFactor -> expr '<=' (*) expr}
s20 = {expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, boolFactor -> expr '==' (*) expr}
s21 = {expr -> (*) expr '+' product, expr -> (*) expr '-' product, expr -> (*) product, factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, neExprList -> neExprList ',' (*) expr}
s22 = {factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, expr -> expr '+' (*) product}
s23 = {factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, product -> (*) factor, product -> (*) product '*' factor, product -> (*) product '/' factor, expr -> expr '-' (*) product}
s24 = {factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, product -> product '*' (*) factor}
s25 = {factor -> (*) '(' expr ')', factor -> (*) ID, factor -> (*) ID '(' exprList ')', factor -> (*) NUMBER, product -> product '/' (*) factor}
s26 = {neParamList -> (*) ID, neParamList -> (*) neParamList ',' ID, paramList -> (*), paramList -> (*) neParamList, defOrStmnt -> 'function' ID '(' (*) paramList ')' '{' stmntList '}'}
s27 = {stmntList -> (*), stmntList -> (*) stmntList statement, statement -> 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' (*) stmntList '}'}
s28 = {stmntList -> (*), stmntList -> (*) stmntList statement, defOrStmnt -> 'function' ID '(' paramList ')' '{' (*) stmntList '}'}
s29 = {stmntList -> (*), stmntList -> (*) stmntList statement, statement -> 'if' '(' boolExpr ')' '{' (*) stmntList '}'}
s30 = {stmntList -> (*), stmntList -> (*) stmntList statement, statement -> 'while' '(' boolExpr ')' '{' (*) stmntList '}'}
s31 = {literal -> '!' boolFactor (*)}
s32 = {boolFactor -> '(' boolExpr (*) ')', boolExpr -> boolExpr (*) '||' conjunction}
s33 = {boolFactor -> '(' boolExpr ')' (*)}
s34 = {factor -> '(' expr (*) ')', boolFactor -> expr (*) '<=' expr, boolFactor -> expr (*) '==' expr, expr -> expr (*) '+' product, expr -> expr (*) '-' product}
s35 = {factor -> '(' expr (*) ')', expr -> expr (*) '+' product, expr -> expr (*) '-' product}
s36 = {factor -> '(' expr ')' (*)}
s37 = {statement -> 'for' (*) '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}'}
s38 = {statement -> 'for' '(' assignment (*) ';' boolExpr ';' assignment ')' '{' stmntList '}'}
s39 = {statement -> 'for' '(' assignment ';' boolExpr (*) ';' assignment ')' '{' stmntList '}', boolExpr -> boolExpr (*) '||' conjunction}
s40 = {statement -> 'for' '(' assignment ';' boolExpr ';' assignment (*) ')' '{' stmntList '}'}
s41 = {statement -> 'for' '(' assignment ';' boolExpr ';' assignment ')' (*) '{' stmntList '}'}
s42 = {statement -> 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}' (*)}
s43 = {defOrStmnt -> 'function' (*) ID '(' paramList ')' '{' stmntList '}'}
s44 = {defOrStmnt -> 'function' ID (*) '(' paramList ')' '{' stmntList '}'}
s45 = {defOrStmnt -> 'function' ID '(' paramList (*) ')' '{' stmntList '}'}
s46 = {defOrStmnt -> 'function' ID '(' paramList ')' (*) '{' stmntList '}'}
s47 = {defOrStmnt -> 'function' ID '(' paramList ')' '{' stmntList '}' (*)}
s48 = {statement -> 'if' (*) '(' boolExpr ')' '{' stmntList '}'}
s49 = {statement -> 'if' '(' boolExpr (*) ')' '{' stmntList '}', boolExpr -> boolExpr (*) '||' conjunction}
s50 = {statement -> 'if' '(' boolExpr ')' (*) '{' stmntList '}'}
s51 = {statement -> 'if' '(' boolExpr ')' '{' stmntList '}' (*)}
s52 = {statement -> 'return' optExpr (*) ';'}
s53 = {statement -> 'return' optExpr ';' (*)}
s54 = {statement -> 'while' (*) '(' boolExpr ')' '{' stmntList '}'}
s55 = {statement -> 'while' '(' boolExpr (*) ')' '{' stmntList '}', boolExpr -> boolExpr (*) '||' conjunction}
s56 = {statement -> 'while' '(' boolExpr ')' (*) '{' stmntList '}'}
s57 = {statement -> 'while' '(' boolExpr ')' '{' stmntList '}' (*)}
s58 = {assignment -> ID (*) ':=' expr}
s59 = {assignment -> ID (*) ':=' expr, factor -> ID (*), factor -> ID (*) '(' exprList ')'}
s60 = {factor -> ID (*), factor -> ID (*) '(' exprList ')'}
s61 = {neParamList -> ID (*)}
s62 = {factor -> ID '(' exprList (*) ')'}
s63 = {factor -> ID '(' exprList ')' (*)}
s64 = {assignment -> ID ':=' expr (*), expr -> expr (*) '+' product, expr -> expr (*) '-' product}
s65 = {factor -> NUMBER (*)}
s66 = {statement -> assignment (*) ';'}
s67 = {statement -> assignment ';' (*)}
s68 = {boolExpr -> boolExpr '||' conjunction (*), conjunction -> conjunction (*) '&&' literal}
s69 = {literal -> boolFactor (*)}
s70 = {boolExpr -> conjunction (*), conjunction -> conjunction (*) '&&' literal}
s71 = {conjunction -> conjunction '&&' literal (*)}
s72 = {program -> defOrStmnt (*)}
s73 = {boolFactor -> expr (*) '<=' expr, boolFactor -> expr (*) '==' expr, expr -> expr (*) '+' product, expr -> expr (*) '-' product}
s74 = {expr -> expr (*) '+' product, expr -> expr (*) '-' product, neExprList -> expr (*)}
s75 = {expr -> expr (*) '+' product, expr -> expr (*) '-' product, optExpr -> expr (*)}
s76 = {expr -> expr (*) '+' product, expr -> expr (*) '-' product, statement -> expr (*) ';'}
s77 = {expr -> expr (*) '+' product, expr -> expr (*) '-' product, boolFactor -> expr '<=' expr (*)}
s78 = {expr -> expr (*) '+' product, expr -> expr (*) '-' product, boolFactor -> expr '==' expr (*)}
s79 = {expr -> expr (*) '+' product, expr -> expr (*) '-' product, neExprList -> neExprList ',' expr (*)}
s80 = {expr -> expr '+' product (*), product -> product (*) '*' factor, product -> product (*) '/' factor}
s81 = {expr -> expr '-' product (*), product -> product (*) '*' factor, product -> product (*) '/' factor}
s82 = {statement -> expr ';' (*)}
s83 = {product -> factor (*)}
s84 = {conjunction -> literal (*)}
s85 = {exprList -> neExprList (*), neExprList -> neExprList (*) ',' expr}
s86 = {neParamList -> neParamList (*) ',' ID, paramList -> neParamList (*)}
s87 = {neParamList -> neParamList ',' (*) ID}
s88 = {neParamList -> neParamList ',' ID (*)}
s89 = {expr -> product (*), product -> product (*) '*' factor, product -> product (*) '/' factor}
s90 = {product -> product '*' factor (*)}
s91 = {product -> product '/' factor (*)}
s92 = {program -> program defOrStmnt (*)}
s93 = {defOrStmnt -> statement (*)}
s94 = {stmntList -> stmntList statement (*)}

Action Table:
action("s0", '(') = Shift("s17")
action("s0", 'for') = Shift("s37")
action("s0", 'function') = Shift("s43")
action("s0", 'if') = Shift("s48")
action("s0", 'return') = Shift("s16")
action("s0", 'while') = Shift("s54")
action("s0", ID) = Shift("s59")
action("s0", NUMBER) = Shift("s65")
action("s1", $) = Reduce(S -> program)
action("s1", '(') = Shift("s17")
action("s1", 'for') = Shift("s37")
action("s1", 'function') = Shift("s43")
action("s1", 'if') = Shift("s48")
action("s1", 'return') = Shift("s16")
action("s1", 'while') = Shift("s54")
action("s1", ID) = Shift("s59")
action("s1", NUMBER) = Shift("s65")
action("s2", '(') = Shift("s17")
action("s2", 'for') = Shift("s37")
action("s2", 'if') = Shift("s48")
action("s2", 'return') = Shift("s16")
action("s2", 'while') = Shift("s54")
action("s2", '}') = Shift("s42")
action("s2", ID) = Shift("s59")
action("s2", NUMBER) = Shift("s65")
action("s3", '(') = Shift("s17")
action("s3", 'for') = Shift("s37")
action("s3", 'if') = Shift("s48")
action("s3", 'return') = Shift("s16")
action("s3", 'while') = Shift("s54")
action("s3", '}') = Shift("s47")
action("s3", ID) = Shift("s59")
action("s3", NUMBER) = Shift("s65")
action("s4", '(') = Shift("s17")
action("s4", 'for') = Shift("s37")
action("s4", 'if') = Shift("s48")
action("s4", 'return') = Shift("s16")
action("s4", 'while') = Shift("s54")
action("s4", '}') = Shift("s51")
action("s4", ID) = Shift("s59")
action("s4", NUMBER) = Shift("s65")
action("s5", '(') = Shift("s17")
action("s5", 'for') = Shift("s37")
action("s5", 'if') = Shift("s48")
action("s5", 'return') = Shift("s16")
action("s5", 'while') = Shift("s54")
action("s5", '}') = Shift("s57")
action("s5", ID) = Shift("s59")
action("s5", NUMBER) = Shift("s65")
action("s6", ID) = Shift("s58")
action("s7", ID) = Shift("s58")
action("s8", '!') = Shift("s14")
action("s8", '(') = Shift("s8")
action("s8", ID) = Shift("s60")
action("s8", NUMBER) = Shift("s65")
action("s9", '!') = Shift("s14")
action("s9", '(') = Shift("s8")
action("s9", ID) = Shift("s60")
action("s9", NUMBER) = Shift("s65")
action("s10", '!') = Shift("s14")
action("s10", '(') = Shift("s8")
action("s10", ID) = Shift("s60")
action("s10", NUMBER) = Shift("s65")
action("s11", '!') = Shift("s14")
action("s11", '(') = Shift("s8")
action("s11", ID) = Shift("s60")
action("s11", NUMBER) = Shift("s65")
action("s12", '!') = Shift("s14")
action("s12", '(') = Shift("s8")
action("s12", ID) = Shift("s60")
action("s12", NUMBER) = Shift("s65")
action("s13", '!') = Shift("s14")
action("s13", '(') = Shift("s8")
action("s13", ID) = Shift("s60")
action("s13", NUMBER) = Shift("s65")
action("s14", '(') = Shift("s8")
action("s14", ID) = Shift("s60")
action("s14", NUMBER) = Shift("s65")
action("s15", ')') = Reduce(exprList ->)
action("s15", '(') = Shift("s17")
action("s15", ID) = Shift("s60")
action("s15", NUMBER) = Shift("s65")
action("s16", ';') = Reduce(optExpr ->)
action("s16", '(') = Shift("s17")
action("s16", ID) = Shift("s60")
action("s16", NUMBER) = Shift("s65")
action("s17", '(') = Shift("s17")
action("s17", ID) = Shift("s60")
action("s17", NUMBER) = Shift("s65")
action("s18", '(') = Shift("s17")
action("s18", ID) = Shift("s60")
action("s18", NUMBER) = Shift("s65")
action("s19", '(') = Shift("s17")
action("s19", ID) = Shift("s60")
action("s19", NUMBER) = Shift("s65")
action("s20", '(') = Shift("s17")
action("s20", ID) = Shift("s60")
action("s20", NUMBER) = Shift("s65")
action("s21", '(') = Shift("s17")
action("s21", ID) = Shift("s60")
action("s21", NUMBER) = Shift("s65")
action("s22", '(') = Shift("s17")
action("s22", ID) = Shift("s60")
action("s22", NUMBER) = Shift("s65")
action("s23", '(') = Shift("s17")
action("s23", ID) = Shift("s60")
action("s23", NUMBER) = Shift("s65")
action("s24", '(') = Shift("s17")
action("s24", ID) = Shift("s60")
action("s24", NUMBER) = Shift("s65")
action("s25", '(') = Shift("s17")
action("s25", ID) = Shift("s60")
action("s25", NUMBER) = Shift("s65")
action("s26", ')') = Reduce(paramList ->)
action("s26", ID) = Shift("s61")
action("s27", '(') = Reduce(stmntList ->)
action("s27", 'for') = Reduce(stmntList ->)
action("s27", 'if') = Reduce(stmntList ->)
action("s27", 'return') = Reduce(stmntList ->)
action("s27", 'while') = Reduce(stmntList ->)
action("s27", '}') = Reduce(stmntList ->)
action("s27", ID) = Reduce(stmntList ->)
action("s27", NUMBER) = Reduce(stmntList ->)
action("s28", '(') = Reduce(stmntList ->)
action("s28", 'for') = Reduce(stmntList ->)
action("s28", 'if') = Reduce(stmntList ->)
action("s28", 'return') = Reduce(stmntList ->)
action("s28", 'while') = Reduce(stmntList ->)
action("s28", '}') = Reduce(stmntList ->)
action("s28", ID) = Reduce(stmntList ->)
action("s28", NUMBER) = Reduce(stmntList ->)
action("s29", '(') = Reduce(stmntList ->)
action("s29", 'for') = Reduce(stmntList ->)
action("s29", 'if') = Reduce(stmntList ->)
action("s29", 'return') = Reduce(stmntList ->)
action("s29", 'while') = Reduce(stmntList ->)
action("s29", '}') = Reduce(stmntList ->)
action("s29", ID) = Reduce(stmntList ->)
action("s29", NUMBER) = Reduce(stmntList ->)
action("s30", '(') = Reduce(stmntList ->)
action("s30", 'for') = Reduce(stmntList ->)
action("s30", 'if') = Reduce(stmntList ->)
action("s30", 'return') = Reduce(stmntList ->)
action("s30", 'while') = Reduce(stmntList ->)
action("s30", '}') = Reduce(stmntList ->)
action("s30", ID) = Reduce(stmntList ->)
action("s30", NUMBER) = Reduce(stmntList ->)
action("s31", '&&') = Reduce(literal -> '!' boolFactor)
action("s31", ')') = Reduce(literal -> '!' boolFactor)
action("s31", ';') = Reduce(literal -> '!' boolFactor)
action("s31", '||') = Reduce(literal -> '!' boolFactor)
action("s32", ')') = Shift("s33")
action("s32", '||') = Shift("s12")
action("s33", '&&') = Reduce(boolFactor -> '(' boolExpr ')')
action("s33", ')') = Reduce(boolFactor -> '(' boolExpr ')')
action("s33", ';') = Reduce(boolFactor -> '(' boolExpr ')')
action("s33", '||') = Reduce(boolFactor -> '(' boolExpr ')')
action("s34", ')') = Shift("s36")
action("s34", '+') = Shift("s22")
action("s34", '-') = Shift("s23")
action("s34", '<=') = Shift("s19")
action("s34", '==') = Shift("s20")
action("s35", ')') = Shift("s36")
action("s35", '+') = Shift("s22")
action("s35", '-') = Shift("s23")
action("s36", '&&') = Reduce(factor -> '(' expr ')')
action("s36", ')') = Reduce(factor -> '(' expr ')')
action("s36", '*') = Reduce(factor -> '(' expr ')')
action("s36", '+') = Reduce(factor -> '(' expr ')')
action("s36", ',') = Reduce(factor -> '(' expr ')')
action("s36", '-') = Reduce(factor -> '(' expr ')')
action("s36", '/') = Reduce(factor -> '(' expr ')')
action("s36", ';') = Reduce(factor -> '(' expr ')')
action("s36", '<=') = Reduce(factor -> '(' expr ')')
action("s36", '==') = Reduce(factor -> '(' expr ')')
action("s36", '||') = Reduce(factor -> '(' expr ')')
action("s37", '(') = Shift("s6")
action("s38", ';') = Shift("s9")
action("s39", ';') = Shift("s7")
action("s39", '||') = Shift("s12")
action("s40", ')') = Shift("s41")
action("s41", '{') = Shift("s27")
action("s42", $) = Reduce(statement -> 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}')
action("s42", '(') = Reduce(statement -> 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}')
action("s42", 'for') = Reduce(statement -> 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}')
action("s42", 'function') = Reduce(statement -> 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}')
action("s42", 'if') = Reduce(statement -> 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}')
action("s42", 'return') = Reduce(statement -> 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}')
action("s42", 'while') = Reduce(statement -> 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}')
action("s42", '}') = Reduce(statement -> 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}')
action("s42", ID) = Reduce(statement -> 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}')
action("s42", NUMBER) = Reduce(statement -> 'for' '(' assignment ';' boolExpr ';' assignment ')' '{' stmntList '}')
action("s43", ID) = Shift("s44")
action("s44", '(') = Shift("s26")
action("s45", ')') = Shift("s46")
action("s46", '{') = Shift("s28")
action("s47", $) = Reduce(defOrStmnt -> 'function' ID '(' paramList ')' '{' stmntList '}')
action("s47", '(') = Reduce(defOrStmnt -> 'function' ID '(' paramList ')' '{' stmntList '}')
action("s47", 'for') = Reduce(defOrStmnt -> 'function' ID '(' paramList ')' '{' stmntList '}')
action("s47", 'function') = Reduce(defOrStmnt -> 'function' ID '(' paramList ')' '{' stmntList '}')
action("s47", 'if') = Reduce(defOrStmnt -> 'function' ID '(' paramList ')' '{' stmntList '}')
action("s47", 'return') = Reduce(defOrStmnt -> 'function' ID '(' paramList ')' '{' stmntList '}')
action("s47", 'while') = Reduce(defOrStmnt -> 'function' ID '(' paramList ')' '{' stmntList '}')
action("s47", ID) = Reduce(defOrStmnt -> 'function' ID '(' paramList ')' '{' stmntList '}')
action("s47", NUMBER) = Reduce(defOrStmnt -> 'function' ID '(' paramList ')' '{' stmntList '}')
action("s48", '(') = Shift("s10")
action("s49", ')') = Shift("s50")
action("s49", '||') = Shift("s12")
action("s50", '{') = Shift("s29")
action("s51", $) = Reduce(statement -> 'if' '(' boolExpr ')' '{' stmntList '}')
action("s51", '(') = Reduce(statement -> 'if' '(' boolExpr ')' '{' stmntList '}')
action("s51", 'for') = Reduce(statement -> 'if' '(' boolExpr ')' '{' stmntList '}')
action("s51", 'function') = Reduce(statement -> 'if' '(' boolExpr ')' '{' stmntList '}')
action("s51", 'if') = Reduce(statement -> 'if' '(' boolExpr ')' '{' stmntList '}')
action("s51", 'return') = Reduce(statement -> 'if' '(' boolExpr ')' '{' stmntList '}')
action("s51", 'while') = Reduce(statement -> 'if' '(' boolExpr ')' '{' stmntList '}')
action("s51", '}') = Reduce(statement -> 'if' '(' boolExpr ')' '{' stmntList '}')
action("s51", ID) = Reduce(statement -> 'if' '(' boolExpr ')' '{' stmntList '}')
action("s51", NUMBER) = Reduce(statement -> 'if' '(' boolExpr ')' '{' stmntList '}')
action("s52", ';') = Shift("s53")
action("s53", $) = Reduce(statement -> 'return' optExpr ';')
action("s53", '(') = Reduce(statement -> 'return' optExpr ';')
action("s53", 'for') = Reduce(statement -> 'return' optExpr ';')
action("s53", 'function') = Reduce(statement -> 'return' optExpr ';')
action("s53", 'if') = Reduce(statement -> 'return' optExpr ';')
action("s53", 'return') = Reduce(statement -> 'return' optExpr ';')
action("s53", 'while') = Reduce(statement -> 'return' optExpr ';')
action("s53", '}') = Reduce(statement -> 'return' optExpr ';')
action("s53", ID) = Reduce(statement -> 'return' optExpr ';')
action("s53", NUMBER) = Reduce(statement -> 'return' optExpr ';')
action("s54", '(') = Shift("s11")
action("s55", ')') = Shift("s56")
action("s55", '||') = Shift("s12")
action("s56", '{') = Shift("s30")
action("s57", $) = Reduce(statement -> 'while' '(' boolExpr ')' '{' stmntList '}')
action("s57", '(') = Reduce(statement -> 'while' '(' boolExpr ')' '{' stmntList '}')
action("s57", 'for') = Reduce(statement -> 'while' '(' boolExpr ')' '{' stmntList '}')
action("s57", 'function') = Reduce(statement -> 'while' '(' boolExpr ')' '{' stmntList '}')
action("s57", 'if') = Reduce(statement -> 'while' '(' boolExpr ')' '{' stmntList '}')
action("s57", 'return') = Reduce(statement -> 'while' '(' boolExpr ')' '{' stmntList '}')
action("s57", 'while') = Reduce(statement -> 'while' '(' boolExpr ')' '{' stmntList '}')
action("s57", '}') = Reduce(statement -> 'while' '(' boolExpr ')' '{' stmntList '}')
action("s57", ID) = Reduce(statement -> 'while' '(' boolExpr ')' '{' stmntList '}')
action("s57", NUMBER) = Reduce(statement -> 'while' '(' boolExpr ')' '{' stmntList '}')
action("s58", ':=') = Shift("s18")
action("s59", '&&') = Reduce(factor -> ID)
action("s59", ')') = Reduce(factor -> ID)
action("s59", '*') = Reduce(factor -> ID)
action("s59", '+') = Reduce(factor -> ID)
action("s59", ',') = Reduce(factor -> ID)
action("s59", '-') = Reduce(factor -> ID)
action("s59", '/') = Reduce(factor -> ID)
action("s59", ';') = Reduce(factor -> ID)
action("s59", '<=') = Reduce(factor -> ID)
action("s59", '==') = Reduce(factor -> ID)
action("s59", '||') = Reduce(factor -> ID)
action("s59", '(') = Shift("s15")
action("s59", ':=') = Shift("s18")
action("s60", '&&') = Reduce(factor -> ID)
action("s60", ')') = Reduce(factor -> ID)
action("s60", '*') = Reduce(factor -> ID)
action("s60", '+') = Reduce(factor -> ID)
action("s60", ',') = Reduce(factor -> ID)
action("s60", '-') = Reduce(factor -> ID)
action("s60", '/') = Reduce(factor -> ID)
action("s60", ';') = Reduce(factor -> ID)
action("s60", '<=') = Reduce(factor -> ID)
action("s60", '==') = Reduce(factor -> ID)
action("s60", '||') = Reduce(factor -> ID)
action("s60", '(') = Shift("s15")
action("s61", ')') = Reduce(neParamList -> ID)
action("s61", ',') = Reduce(neParamList -> ID)
action("s62", ')') = Shift("s63")
action("s63", '&&') = Reduce(factor -> ID '(' exprList ')')
action("s63", ')') = Reduce(factor -> ID '(' exprList ')')
action("s63", '*') = Reduce(factor -> ID '(' exprList ')')
action("s63", '+') = Reduce(factor -> ID '(' exprList ')')
action("s63", ',') = Reduce(factor -> ID '(' exprList ')')
action("s63", '-') = Reduce(factor -> ID '(' exprList ')')
action("s63", '/') = Reduce(factor -> ID '(' exprList ')')
action("s63", ';') = Reduce(factor -> ID '(' exprList ')')
action("s63", '<=') = Reduce(factor -> ID '(' exprList ')')
action("s63", '==') = Reduce(factor -> ID '(' exprList ')')
action("s63", '||') = Reduce(factor -> ID '(' exprList ')')
action("s64", ')') = Reduce(assignment -> ID ':=' expr)
action("s64", ';') = Reduce(assignment -> ID ':=' expr)
action("s64", '+') = Shift("s22")
action("s64", '-') = Shift("s23")
action("s65", '&&') = Reduce(factor -> NUMBER)
action("s65", ')') = Reduce(factor -> NUMBER)
action("s65", '*') = Reduce(factor -> NUMBER)
action("s65", '+') = Reduce(factor -> NUMBER)
action("s65", ',') = Reduce(factor -> NUMBER)
action("s65", '-') = Reduce(factor -> NUMBER)
action("s65", '/') = Reduce(factor -> NUMBER)
action("s65", ';') = Reduce(factor -> NUMBER)
action("s65", '<=') = Reduce(factor -> NUMBER)
action("s65", '==') = Reduce(factor -> NUMBER)
action("s65", '||') = Reduce(factor -> NUMBER)
action("s66", ';') = Shift("s67")
action("s67", $) = Reduce(statement -> assignment ';')
action("s67", '(') = Reduce(statement -> assignment ';')
action("s67", 'for') = Reduce(statement -> assignment ';')
action("s67", 'function') = Reduce(statement -> assignment ';')
action("s67", 'if') = Reduce(statement -> assignment ';')
action("s67", 'return') = Reduce(statement -> assignment ';')
action("s67", 'while') = Reduce(statement -> assignment ';')
action("s67", '}') = Reduce(statement -> assignment ';')
action("s67", ID) = Reduce(statement -> assignment ';')
action("s67", NUMBER) = Reduce(statement -> assignment ';')
action("s68", ')') = Reduce(boolExpr -> boolExpr '||' conjunction)
action("s68", ';') = Reduce(boolExpr -> boolExpr '||' conjunction)
action("s68", '||') = Reduce(boolExpr -> boolExpr '||' conjunction)
action("s68", '&&') = Shift("s13")
action("s69", '&&') = Reduce(literal -> boolFactor)
action("s69", ')') = Reduce(literal -> boolFactor)
action("s69", ';') = Reduce(literal -> boolFactor)
action("s69", '||') = Reduce(literal -> boolFactor)
action("s70", ')') = Reduce(boolExpr -> conjunction)
action("s70", ';') = Reduce(boolExpr -> conjunction)
action("s70", '||') = Reduce(boolExpr -> conjunction)
action("s70", '&&') = Shift("s13")
action("s71", '&&') = Reduce(conjunction -> conjunction '&&' literal)
action("s71", ')') = Reduce(conjunction -> conjunction '&&' literal)
action("s71", ';') = Reduce(conjunction -> conjunction '&&' literal)
action("s71", '||') = Reduce(conjunction -> conjunction '&&' literal)
action("s72", $) = Reduce(program -> defOrStmnt)
action("s72", '(') = Reduce(program -> defOrStmnt)
action("s72", 'for') = Reduce(program -> defOrStmnt)
action("s72", 'function') = Reduce(program -> defOrStmnt)
action("s72", 'if') = Reduce(program -> defOrStmnt)
action("s72", 'return') = Reduce(program -> defOrStmnt)
action("s72", 'while') = Reduce(program -> defOrStmnt)
action("s72", ID) = Reduce(program -> defOrStmnt)
action("s72", NUMBER) = Reduce(program -> defOrStmnt)
action("s73", '+') = Shift("s22")
action("s73", '-') = Shift("s23")
action("s73", '<=') = Shift("s19")
action("s73", '==') = Shift("s20")
action("s74", ')') = Reduce(neExprList -> expr)
action("s74", ',') = Reduce(neExprList -> expr)
action("s74", '+') = Shift("s22")
action("s74", '-') = Shift("s23")
action("s75", ';') = Reduce(optExpr -> expr)
action("s75", '+') = Shift("s22")
action("s75", '-') = Shift("s23")
action("s76", '+') = Shift("s22")
action("s76", '-') = Shift("s23")
action("s76", ';') = Shift("s82")
action("s77", '&&') = Reduce(boolFactor -> expr '<=' expr)
action("s77", ')') = Reduce(boolFactor -> expr '<=' expr)
action("s77", ';') = Reduce(boolFactor -> expr '<=' expr)
action("s77", '||') = Reduce(boolFactor -> expr '<=' expr)
action("s77", '+') = Shift("s22")
action("s77", '-') = Shift("s23")
action("s78", '&&') = Reduce(boolFactor -> expr '==' expr)
action("s78", ')') = Reduce(boolFactor -> expr '==' expr)
action("s78", ';') = Reduce(boolFactor -> expr '==' expr)
action("s78", '||') = Reduce(boolFactor -> expr '==' expr)
action("s78", '+') = Shift("s22")
action("s78", '-') = Shift("s23")
action("s79", ')') = Reduce(neExprList -> neExprList ',' expr)
action("s79", ',') = Reduce(neExprList -> neExprList ',' expr)
action("s79", '+') = Shift("s22")
action("s79", '-') = Shift("s23")
action("s80", '&&') = Reduce(expr -> expr '+' product)
action("s80", ')') = Reduce(expr -> expr '+' product)
action("s80", '+') = Reduce(expr -> expr '+' product)
action("s80", ',') = Reduce(expr -> expr '+' product)
action("s80", '-') = Reduce(expr -> expr '+' product)
action("s80", ';') = Reduce(expr -> expr '+' product)
action("s80", '<=') = Reduce(expr -> expr '+' product)
action("s80", '==') = Reduce(expr -> expr '+' product)
action("s80", '||') = Reduce(expr -> expr '+' product)
action("s80", '*') = Shift("s24")
action("s80", '/') = Shift("s25")
action("s81", '&&') = Reduce(expr -> expr '-' product)
action("s81", ')') = Reduce(expr -> expr '-' product)
action("s81", '+') = Reduce(expr -> expr '-' product)
action("s81", ',') = Reduce(expr -> expr '-' product)
action("s81", '-') = Reduce(expr -> expr '-' product)
action("s81", ';') = Reduce(expr -> expr '-' product)
action("s81", '<=') = Reduce(expr -> expr '-' product)
action("s81", '==') = Reduce(expr -> expr '-' product)
action("s81", '||') = Reduce(expr -> expr '-' product)
action("s81", '*') = Shift("s24")
action("s81", '/') = Shift("s25")
action("s82", $) = Reduce(statement -> expr ';')
action("s82", '(') = Reduce(statement -> expr ';')
action("s82", 'for') = Reduce(statement -> expr ';')
action("s82", 'function') = Reduce(statement -> expr ';')
action("s82", 'if') = Reduce(statement -> expr ';')
action("s82", 'return') = Reduce(statement -> expr ';')
action("s82", 'while') = Reduce(statement -> expr ';')
action("s82", '}') = Reduce(statement -> expr ';')
action("s82", ID) = Reduce(statement -> expr ';')
action("s82", NUMBER) = Reduce(statement -> expr ';')
action("s83", '&&') = Reduce(product -> factor)
action("s83", ')') = Reduce(product -> factor)
action("s83", '*') = Reduce(product -> factor)
action("s83", '+') = Reduce(product -> factor)
action("s83", ',') = Reduce(product -> factor)
action("s83", '-') = Reduce(product -> factor)
action("s83", '/') = Reduce(product -> factor)
action("s83", ';') = Reduce(product -> factor)
action("s83", '<=') = Reduce(product -> factor)
action("s83", '==') = Reduce(product -> factor)
action("s83", '||') = Reduce(product -> factor)
action("s84", '&&') = Reduce(conjunction -> literal)
action("s84", ')') = Reduce(conjunction -> literal)
action("s84", ';') = Reduce(conjunction -> literal)
action("s84", '||') = Reduce(conjunction -> literal)
action("s85", ')') = Reduce(exprList -> neExprList)
action("s85", ',') = Shift("s21")
action("s86", ')') = Reduce(paramList -> neParamList)
action("s86", ',') = Shift("s87")
action("s87", ID) = Shift("s88")
action("s88", ')') = Reduce(neParamList -> neParamList ',' ID)
action("s88", ',') = Reduce(neParamList -> neParamList ',' ID)
action("s89", '&&') = Reduce(expr -> product)
action("s89", ')') = Reduce(expr -> product)
action("s89", '+') = Reduce(expr -> product)
action("s89", ',') = Reduce(expr -> product)
action("s89", '-') = Reduce(expr -> product)
action("s89", ';') = Reduce(expr -> product)
action("s89", '<=') = Reduce(expr -> product)
action("s89", '==') = Reduce(expr -> product)
action("s89", '||') = Reduce(expr -> product)
action("s89", '*') = Shift("s24")
action("s89", '/') = Shift("s25")
action("s90", '&&') = Reduce(product -> product '*' factor)
action("s90", ')') = Reduce(product -> product '*' factor)
action("s90", '*') = Reduce(product -> product '*' factor)
action("s90", '+') = Reduce(product -> product '*' factor)
action("s90", ',') = Reduce(product -> product '*' factor)
action("s90", '-') = Reduce(product -> product '*' factor)
action("s90", '/') = Reduce(product -> product '*' factor)
action("s90", ';') = Reduce(product -> product '*' factor)
action("s90", '<=') = Reduce(product -> product '*' factor)
action("s90", '==') = Reduce(product -> product '*' factor)
action("s90", '||') = Reduce(product -> product '*' factor)
action("s91", '&&') = Reduce(product -> product '/' factor)
action("s91", ')') = Reduce(product -> product '/' factor)
action("s91", '*') = Reduce(product -> product '/' factor)
action("s91", '+') = Reduce(product -> product '/' factor)
action("s91", ',') = Reduce(product -> product '/' factor)
action("s91", '-') = Reduce(product -> product '/' factor)
action("s91", '/') = Reduce(product -> product '/' factor)
action("s91", ';') = Reduce(product -> product '/' factor)
action("s91", '<=') = Reduce(product -> product '/' factor)
action("s91", '==') = Reduce(product -> product '/' factor)
action("s91", '||') = Reduce(product -> product '/' factor)
action("s92", $) = Reduce(program -> program defOrStmnt)
action("s92", '(') = Reduce(program -> program defOrStmnt)
action("s92", 'for') = Reduce(program -> program defOrStmnt)
action("s92", 'function') = Reduce(program -> program defOrStmnt)
action("s92", 'if') = Reduce(program -> program defOrStmnt)
action("s92", 'return') = Reduce(program -> program defOrStmnt)
action("s92", 'while') = Reduce(program -> program defOrStmnt)
action("s92", ID) = Reduce(program -> program defOrStmnt)
action("s92", NUMBER) = Reduce(program -> program defOrStmnt)
action("s93", $) = Reduce(defOrStmnt -> statement)
action("s93", '(') = Reduce(defOrStmnt -> statement)
action("s93", 'for') = Reduce(defOrStmnt -> statement)
action("s93", 'function') = Reduce(defOrStmnt -> statement)
action("s93", 'if') = Reduce(defOrStmnt -> statement)
action("s93", 'return') = Reduce(defOrStmnt -> statement)
action("s93", 'while') = Reduce(defOrStmnt -> statement)
action("s93", ID) = Reduce(defOrStmnt -> statement)
action("s93", NUMBER) = Reduce(defOrStmnt -> statement)
action("s94", '(') = Reduce(stmntList -> stmntList statement)
action("s94", 'for') = Reduce(stmntList -> stmntList statement)
action("s94", 'if') = Reduce(stmntList -> stmntList statement)
action("s94", 'return') = Reduce(stmntList -> stmntList statement)
action("s94", 'while') = Reduce(stmntList -> stmntList statement)
action("s94", '}') = Reduce(stmntList -> stmntList statement)
action("s94", ID) = Reduce(stmntList -> stmntList statement)
action("s94", NUMBER) = Reduce(stmntList -> stmntList statement)

Goto Table:
goto(s0, assignment) = s66
goto(s0, defOrStmnt) = s72
goto(s0, expr) = s76
goto(s0, factor) = s83
goto(s0, product) = s89
goto(s0, program) = s1
goto(s0, statement) = s93
goto(s1, assignment) = s66
goto(s1, defOrStmnt) = s92
goto(s1, expr) = s76
goto(s1, factor) = s83
goto(s1, product) = s89
goto(s1, statement) = s93
goto(s2, assignment) = s66
goto(s2, expr) = s76
goto(s2, factor) = s83
goto(s2, product) = s89
goto(s2, statement) = s94
goto(s3, assignment) = s66
goto(s3, expr) = s76
goto(s3, factor) = s83
goto(s3, product) = s89
goto(s3, statement) = s94
goto(s4, assignment) = s66
goto(s4, expr) = s76
goto(s4, factor) = s83
goto(s4, product) = s89
goto(s4, statement) = s94
goto(s5, assignment) = s66
goto(s5, expr) = s76
goto(s5, factor) = s83
goto(s5, product) = s89
goto(s5, statement) = s94
goto(s6, assignment) = s38
goto(s7, assignment) = s40
goto(s8, boolExpr) = s32
goto(s8, boolFactor) = s69
goto(s8, conjunction) = s70
goto(s8, expr) = s34
goto(s8, factor) = s83
goto(s8, literal) = s84
goto(s8, product) = s89
goto(s9, boolExpr) = s39
goto(s9, boolFactor) = s69
goto(s9, conjunction) = s70
goto(s9, expr) = s73
goto(s9, factor) = s83
goto(s9, literal) = s84
goto(s9, product) = s89
goto(s10, boolExpr) = s49
goto(s10, boolFactor) = s69
goto(s10, conjunction) = s70
goto(s10, expr) = s73
goto(s10, factor) = s83
goto(s10, literal) = s84
goto(s10, product) = s89
goto(s11, boolExpr) = s55
goto(s11, boolFactor) = s69
goto(s11, conjunction) = s70
goto(s11, expr) = s73
goto(s11, factor) = s83
goto(s11, literal) = s84
goto(s11, product) = s89
goto(s12, boolFactor) = s69
goto(s12, conjunction) = s68
goto(s12, expr) = s73
goto(s12, factor) = s83
goto(s12, literal) = s84
goto(s12, product) = s89
goto(s13, boolFactor) = s69
goto(s13, expr) = s73
goto(s13, factor) = s83
goto(s13, literal) = s71
goto(s13, product) = s89
goto(s14, boolFactor) = s31
goto(s14, expr) = s73
goto(s14, factor) = s83
goto(s14, product) = s89
goto(s15, expr) = s74
goto(s15, exprList) = s62
goto(s15, factor) = s83
goto(s15, neExprList) = s85
goto(s15, product) = s89
goto(s16, expr) = s75
goto(s16, factor) = s83
goto(s16, optExpr) = s52
goto(s16, product) = s89
goto(s17, expr) = s35
goto(s17, factor) = s83
goto(s17, product) = s89
goto(s18, expr) = s64
goto(s18, factor) = s83
goto(s18, product) = s89
goto(s19, expr) = s77
goto(s19, factor) = s83
goto(s19, product) = s89
goto(s20, expr) = s78
goto(s20, factor) = s83
goto(s20, product) = s89
goto(s21, expr) = s79
goto(s21, factor) = s83
goto(s21, product) = s89
goto(s22, factor) = s83
goto(s22, product) = s80
goto(s23, factor) = s83
goto(s23, product) = s81
goto(s24, factor) = s90
goto(s25, factor) = s91
goto(s26, neParamList) = s86
goto(s26, paramList) = s45
goto(s27, stmntList) = s2
goto(s28, stmntList) = s3
goto(s29, stmntList) = s4
goto(s30, stmntList) = s5
The grammar is an SLR grammar.
