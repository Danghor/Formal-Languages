load("dfa-2-string-set.stlx");
load("minimize.stlx");

delta := { [ [0, "a"], 1 ],
           [ [0, "b"], 6 ],
           [ [1, "a"], 2 ],
           [ [1, "b"], 7 ],
           [ [2, "a"], 3 ],
           [ [2, "b"], 6 ],
           [ [3, "a"], 0 ],
           [ [3, "b"], 7 ],
           [ [4, "a"], 5 ],
           [ [4, "b"], 2 ],
           [ [5, "a"], 6 ],
           [ [5, "b"], 8 ],
           [ [6, "a"], 7 ],
           [ [6, "b"], 2 ],
           [ [7, "a"], 0 ],
           [ [7, "b"], 3 ],
           [ [8, "a"], 4 ],
           [ [8, "b"], 8 ]
};

prettyPrintFA := procedure(fa) {
    [states, sigma, delta, q0, final] := fa;
    print();
    print("set of states:       $states$");
    print("start state:         $q0$"    );
    print("transition function:" );
    for (p in states) {
        for (c in sigma) {
            print("$p$ |-\"$c$\"-> $delta[[p, c]]$");
        }
    }
    print("accepting states:    $final$" );
};

fa := [ [0..8], {"a", "b"}, delta, 0, {2,3,6,7} ];
dfa2dot(fa, "dfa-old");
fm := minimize(fa);
print(fm);
prettyPrintFA(fm);
dfa2dot(fm, "dfa");

