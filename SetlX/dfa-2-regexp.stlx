// This function computes a regular expression that is equivalent to the
// deterministic finite state machine given as argument.
dfa2RegExp := procedure(dfa) {
    [states, sigma, delta, q0, accepting] := dfa;
    return simplify(regexpSum({ rpq(q0, p, sigma, delta, states) : p in accepting }));
};
// This function takes a set s = { r1, ..., rn } of regular expressions
// as argument.  It returns the regular expression r1 + ... + rn.
regexpSum := procedure(s) {
    match (s) {
        case {}:
             return 0;
        case { r }:
             return r;
        case { r | rs }:
             return @or(r, regexpSum(rs));
    }
};
// compute the regular expression to get from state p1 to state p2
// using states from the set of states allowed inbetween.
rpq := procedure(p1, p2, sigma, delta, allowed) {
    match (allowed) {
        case {}: 
             allChars := { c : c in sigma | delta(p1, c) == p2 };
             sum := regexpSum(allChars);
             if (p1 == p2) {
                 if (allChars == {}) {
                     return "";
                 } else {
                     return @or("", sum);
                 }
             } else {
                 return sum;
             }
        case { qk | restAllowed }:
             rkp1p2 := rpq(p1, p2, sigma, delta, restAllowed);
             rkp1qk := rpq(p1, qk, sigma, delta, restAllowed);
             rkqkqk := rpq(qk, qk, sigma, delta, restAllowed);
             rkqkp2 := rpq(qk, p2, sigma, delta, restAllowed);
             return simplify(@or(rkp1p2, @cat(@cat(rkp1qk, @star(rkqkqk)), rkqkp2)));
    }    
};
simplify := procedure(r) {
    while (true) {
        oldR := r;
        r    := simplifyOnce(r);
        if (r == oldR) {
            return r;
        }
    }
};
simplifyOnce := procedure(r) {
    match (r) {
        case 0:
             return 0;
        case "": 
             return "";
        case c | isString(c):
             return c;
        case @or(0, s):  
             return simplifyOnce(s);
        case @or(s, 0):  
             return simplifyOnce(s);
        case @or(s, s):  
             return simplifyOnce(s);
        case @or("", @cat(t, @star(t))):
             return @star(t);
        case @or("", @cat(@star(t), t)):
             return @star(t);
        case @or(@cat(t, @star(t)), ""):
             return @star(t);
        case @or(@cat(@star(t), t), ""):
             return @star(t);
        case @or(s, @cat(s,t)):
             return simplifyOnce(@cat(s, @or("", t)));
        case @or(s, @cat(t,s)):
             return simplifyOnce(@cat(@or("", t), s));
        case @or(s, t):  
             return @or(simplifyOnce(s), simplifyOnce(t));
        case @cat(0, s): 
             return 0;
        case @cat(s, 0): 
             return 0;
        case @cat("", s): 
             return s;
        case @cat(s, ""): 
             return s;
        case @cat(@or("", s), @star(s)):
             return @star(simplifyOnce(s));
        case @cat(@or(s, ""), @star(s)):
             return @star(simplifyOnce(s));
        case @cat(@star(s), @or(s, "")):
             return @star(simplifyOnce(s));
        case @cat(@star(s), @or("", s)):
             return @star(simplifyOnce(s));
        case @cat(s, t): 
             return @cat(simplifyOnce(s), simplifyOnce(t));
        case @star(0):
             return "";
        case @star(""):
             return "";
        case @star(@or("", s)):
             return simplifyOnce(@star(s));
        case @star(@or(s, "")):
             return simplifyOnce(@star(s));
        case @star(c):
             return @star(simplifyOnce(c));
        default:        
        abort("Syntax error in simplifyOnce($r$)");
    }
};

