load("regexp-parser.stlx");
load("nfa-2-string-set.stlx");

class regexp2NFA(sigma) {
    this.gStateCount := -1;
    this.mSigma      := sigma;

    toNFA := procedure(r) {
        match (r) {
        case 0:
             return genEmptyNFA();
        case "":
             return genEpsilonNFA();
        case c | isString(c): 
             return genCharNFA(c);
        case Cat(r1, r2): 
             return catenate(toNFA(r1), toNFA(r2)); 
        case Or(r1, r2): 
             return disjunction(toNFA(r1), toNFA(r2));
        case Star(r0): 
             return kleene(toNFA(r0));
        }
    };

    genEmptyNFA := procedure() {
        q0 := getNewState();
        q1 := getNewState();
        return [ {q0, q1}, mSigma, {}, q0, q1 ];
    };

    genEpsilonNFA := procedure() {
        q0 := getNewState();
        q1 := getNewState();
        delta := { [ [q0, ""], {q1} ] };
        return [ {q0, q1}, mSigma, delta, q0, q1 ];
    };
    
    genCharNFA := procedure(c) {
        q0 := getNewState();
        q1 := getNewState();
        delta := { [[q0, c], {q1}] };
        return [ {q0, q1}, mSigma, delta, q0, q1 ];
    };

    catenate := procedure(f1, f2) {
        [m1, _, delta1, q1, q2] := f1;
        [m2, _, delta2, q3, q4] := f2;
        delta := { [[q2, ""], {q3}] } + delta1 + delta2; 
        return [ m1 + m2, mSigma, delta, q1, q4 ];
    };

    disjunction := procedure(f1, f2) {
        [m1, _, delta1, q1, q3] := f1;
        [m2, _, delta2, q2, q4] := f2;
        q0 := getNewState(); 
        q5 := getNewState(); 
        delta := delta1 + delta2;
        delta += { [[q0, ""], {q1, q2}], [[q3, ""], {q5}], [[q4, ""], {q5}] };
        return [ { q0, q5 } + m1 + m2, mSigma, delta, q0, q5 ];
    };

    kleene := procedure(f) {
        [m, _, delta0, q1, q2] := f;
        q0 := getNewState(); 
        q3 := getNewState(); 
        delta := { [[q0, ""], {q1, q3}], [[q2, ""], {q1, q3}] } + delta0;
        return [ { q0, q3 } + m, mSigma, delta, q0, q3 ];
    };

    getNewState := procedure() {
        this.gStateCount += 1;
        return "q" + gStateCount;
    };
}

// The input s is a string representing a regular expression.  This string is 
// parsed into a term representing the regular expression. Then, the resulting
// regular expression is transformed into an equivalent non-deterministic 
// finite state
testRegexp2NFA := procedure(s, sigma, file) {
    regexp  := myParse(s);
    print("regular expression: $regexp$");
    cnvrtr  := regexp2NFA(sigma);
    nfa     := cnvrtr.toNFA(regexp);
    print("The regular expression $s$ is recognized by the following NFA:");
    print(nfa2string(nfa));
    nfa2dot(nfa, file);
};

testRegexp2NFA("(a+b)"        , {"a", "b"}, "fsm1"); 
testRegexp2NFA("a*"           , {"a", "b"}, "fsm2"); 
testRegexp2NFA("(ab)*"        , {"a", "b"}, "fsm3"); 
testRegexp2NFA("(a+b)*(a*b*)*", {"a", "b"}, "fsm4"); 
