// expr    : product exprRest
//         ;
// 
// exprRest: '+' product exprRest
//         | '-' product exprRest
//         |
//         ;
//
// product : factor prodRest
//         ;
//
// prodRest: '*' factor prodRest
//         | '/' factor prodRest
//         |
//         ;
//
// factor  : '(' expr ')'
//         | NUMBER
//         ;
r01 := [ "expr"    , [ Var("product"), Var("exprRest")               ] ];
r02 := [ "exprRest", [ Literal("+"), Var("product"), Var("exprRest") ] ];
r03 := [ "exprRest", [ Literal("-"), Var("product"), Var("exprRest") ] ];
r04 := [ "exprRest", [                                               ] ];
r05 := [ "product" , [ Var("factor"), Var("prodRest")                ] ];
r06 := [ "prodRest", [ Literal("*"), Var("factor"), Var("prodRest")  ] ];
r07 := [ "prodRest", [ Literal("/"), Var("factor"), Var("prodRest")  ] ];
r08 := [ "prodRest", [                                               ] ];
r09 := [ "factor"  , [ Literal("("), Var("expr"), Literal(")")       ] ];
r10 := [ "factor"  , [ Number()                                      ] ];

parseTable := {};

parseTable[ "expr"    , Literal("(") ] := r01;
parseTable[ "expr"    , Number()     ] := r01;

parseTable[ "exprRest", Literal("+") ] := r02;
parseTable[ "exprRest", Literal("-") ] := r03;
parseTable[ "exprRest", Literal(")") ] := r04;
parseTable[ "exprRest", Token("EOF") ] := r04;

parseTable[ "product" , Literal("(") ] := r05;
parseTable[ "product" , Number()     ] := r05;

parseTable[ "prodRest", Literal("*") ] := r06;
parseTable[ "prodRest", Literal("/") ] := r07;
parseTable[ "prodRest", Literal("+") ] := r08;
parseTable[ "prodRest", Literal("-") ] := r08;
parseTable[ "prodRest", Literal(")") ] := r08;
parseTable[ "prodRest", Token("EOF") ] := r08;

parseTable[ "factor"  , Literal("(") ] := r09;
parseTable[ "factor"  , Number()     ] := r10;

myParse := closure(string, start) {
    tokenList := tokenizeString(string);
    itemList  := [ Var(start) ];
    while (#itemList > 0) {
        lat := tokenList[1];
        print("lat = $lat$");
        match (itemList[1]) {
        case Var(varName):
            rule := parseTable[varName, removeNumber(lat)];
             if (rule != om) {
                 print("reducing with:   $rule[1]$ -> $cleanList(rule[2])$");
                 s1 := cleanList(itemList);
                 itemList := rule[2] + itemList[2..];
                 s2 := cleanList(itemList);
                 print("$s1$ => $s2$");
                 continue;
             } else {
                 print("ERROR: unexpected token $lat$.");
                 return;
             }
        case Number():
             if (isNumber(lat)) {
                 print("read $getNumber(lat)$");
                 s1 := cleanList(itemList);
                 itemList  := itemList[2..];
                 tokenList := tokenList[2..];
                 s2 := cleanList(itemList);
                 print("$s1$ => $s2$");
             } else {
                 print("ERROR: number expected but found $lat$");
                 return;
             }
        default:
             if (lat == tokenList[1]) {                
                 s1 := cleanList(itemList);
                 itemList  := itemList [2..];
                 tokenList := tokenList[2..];
                 s2 := cleanList(itemList);
                 print("recognizing $lat$");
                 print("$s1$ => $s2$");
                 continue;
             } else {
                 print("Parse error at token $tokenList[1]$.");
                 print("Expecting $tokenList[1]$");
                 return;
             }
        }
    }
    if (tokenList == [Token("EOF")]) {
        print("Parse successful");
    } else {
        print("Parse Error: $tokenList$");
    }
};

isNumber := procedure(item) {
    return fct(item) == "Number";
};

getNumber := procedure(item) {
    return args(item)[1];
};

// This procedure partitions the string s into a list of tokens.
// It recognizes numbers, the operator symbols "+", "-", "*", "/",
// and the parentheses "(" and ")".
tokenizeString := procedure(s) {
    tokenList := [];
    scan (s) {
        regex '0|[1-9][0-9]*' as [ n ]: tokenList += [ Number(int(n)) ];
        regex '[-+*/()]'      as [ o ]: tokenList += [ Literal(o)     ];
        regex '[ \t\v\n\r]+'          : // skip
    }
    return tokenList + [ Token("EOF") ];
};

    
cleanList := procedure(il) {
    return join([cleanItem(i) : i in il], " ");
};

cleanItem := procedure(item) {
    match (item) {
        case Var(v)     : return v;
        case Number(n)  : return n;
        case Number()   : return "NUMBER";
        case Literal(l) : return l;
    }
};

removeNumber := procedure(item) {
    match (item) {
        case Number(n) : return Number();
    }
    return item;
};

myParse("1+2*3", "expr");
