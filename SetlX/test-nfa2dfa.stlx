////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// The code below is used to test the function nfa2dfa.                       //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
load("nfa-2-dfa.stlx");
load("nfa-2-string-set.stlx");
load("dfa-2-string-set.stlx");

// Transition function of a finite state automaton that recognizes whether
// a binary string is divisable by three.
delta45 := { [ [0, "" ], {1, 2} ],
             [ [1, "b"], {3} ],
             [ [2, "a"], {4} ],
             [ [3, "a"], {5} ],
             [ [4, "b"], {6} ],
             [ [5, "" ], {7} ],
             [ [6, "" ], {7} ],
             [ [7, "" ], {0} ]
           };

nfa45 := [{0 .. 7}, {"a", "b"}, delta45, 0, {7}];

test := procedure(nfa) {
    print("\nnon-deterministic finite state machine:");
    print(nfa2string(nfa));
    nfa2dot(nfa, "nfa");
    dfa := nfa2dfa(nfa);
    print("\ndeterministic finite state machine:");
    print(dfa2string(dfa));
    dfa2dot(dfa, "dfa");
};

test(nfa45);
