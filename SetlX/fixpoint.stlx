// Computes the smallest set s such 
//   s0 <= s                   and
//   s = +/ { f(x) : x in s }  
// holds.  s is computed via fixpoint iteration.

fixpoint := procedure(s0, f) {
    result := newElements := s0;
    while (true) {
        newElements := {} +/ { f(q) : q in newElements };
        if (newElements <= result) {
            return result;
        }
        result += newElements;
    }
};

// This function takes two parameters:
//    * m is a binary relation, that serves as a map
//    * f is a function taking a map as an rw parameter 
//      and updating this map.  f will return true if 
//      it did change the map and false otherwise.
// The function fpMap computes a fixpoint of f: It returns 
// a map m such that f(m) = false.
fpMap := procedure(rw map, f) {
    change := true;
    while (change) {
        change := f(map);    
    }
    return map;
};

