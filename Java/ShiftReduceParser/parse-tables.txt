cd /Users/stroetma/Kurse/FormaleSprachen/JavaCup/Calculator/
make
jflex calc.jflex
/Users/stroetma/Software/JFlex/jflex-1.4.1/lib/JFlex.jar
Reading "calc.jflex"
Constructing NFA : 28 states in NFA
Converting NFA to DFA : 
............
14 states before minimization, 12 states in minimized DFA
Old file "Yylex.java" saved as "Yylex.java~"
Writing code to "Yylex.java"
java java_cup.Main -dump calc.cup
Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Terminal "UMINUS" was declared but never used
Warning: Terminal "MOD" was declared but never used
Warning: Terminal "SEMI" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
  Checking for non-reduced productions...
Writing parser...
===== Terminals =====
[0]EOF [1]error [2]SEMI [3]PLUS [4]MINUS 
[5]TIMES [6]DIVIDE [7]MOD [8]UMINUS [9]LPAREN 
[10]RPAREN [11]NUMBER 

===== Non terminals =====
[0]$START [1]expr [2]product [3]factor 

===== Productions =====
[0] expr ::= expr PLUS product 
[1] $START ::= expr EOF 
[2] expr ::= expr MINUS product 
[3] expr ::= product 
[4] product ::= product TIMES factor 
[5] product ::= product DIVIDE factor 
[6] product ::= factor 
[7] factor ::= NUMBER 
[8] factor ::= LPAREN expr RPAREN 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [factor ::= (*) LPAREN expr RPAREN , {EOF PLUS MINUS TIMES DIVIDE }]
  [product ::= (*) product DIVIDE factor , {EOF PLUS MINUS TIMES DIVIDE }]
  [expr ::= (*) expr MINUS product , {EOF PLUS MINUS }]
  [factor ::= (*) NUMBER , {EOF PLUS MINUS TIMES DIVIDE }]
  [product ::= (*) product TIMES factor , {EOF PLUS MINUS TIMES DIVIDE }]
  [$START ::= (*) expr EOF , {EOF }]
  [product ::= (*) factor , {EOF PLUS MINUS TIMES DIVIDE }]
  [expr ::= (*) product , {EOF PLUS MINUS }]
  [expr ::= (*) expr PLUS product , {EOF PLUS MINUS }]
}
transition on LPAREN to state [5]
transition on expr to state [4]
transition on product to state [3]
transition on NUMBER to state [2]
transition on factor to state [1]

-------------------
lalr_state [1]: {
  [product ::= factor (*) , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}

-------------------
lalr_state [2]: {
  [factor ::= NUMBER (*) , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}

-------------------
lalr_state [3]: {
  [product ::= product (*) DIVIDE factor , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [product ::= product (*) TIMES factor , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= product (*) , {EOF PLUS MINUS RPAREN }]
}
transition on TIMES to state [12]
transition on DIVIDE to state [11]

-------------------
lalr_state [4]: {
  [expr ::= expr (*) MINUS product , {EOF PLUS MINUS }]
  [$START ::= expr (*) EOF , {EOF }]
  [expr ::= expr (*) PLUS product , {EOF PLUS MINUS }]
}
transition on EOF to state [16]
transition on MINUS to state [9]
transition on PLUS to state [8]

-------------------
lalr_state [5]: {
  [factor ::= LPAREN (*) expr RPAREN , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [factor ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [product ::= (*) product DIVIDE factor , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr MINUS product , {PLUS MINUS RPAREN }]
  [factor ::= (*) NUMBER , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [product ::= (*) product TIMES factor , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [product ::= (*) factor , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) product , {PLUS MINUS RPAREN }]
  [expr ::= (*) expr PLUS product , {PLUS MINUS RPAREN }]
}
transition on expr to state [6]
transition on LPAREN to state [5]
transition on product to state [3]
transition on NUMBER to state [2]
transition on factor to state [1]

-------------------
lalr_state [6]: {
  [expr ::= expr (*) MINUS product , {PLUS MINUS RPAREN }]
  [expr ::= expr (*) PLUS product , {PLUS MINUS RPAREN }]
  [factor ::= LPAREN expr (*) RPAREN , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}
transition on MINUS to state [9]
transition on PLUS to state [8]
transition on RPAREN to state [7]

-------------------
lalr_state [7]: {
  [factor ::= LPAREN expr RPAREN (*) , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}

-------------------
lalr_state [8]: {
  [factor ::= (*) LPAREN expr RPAREN , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [product ::= (*) product DIVIDE factor , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [factor ::= (*) NUMBER , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [product ::= (*) product TIMES factor , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [product ::= (*) factor , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr PLUS (*) product , {EOF PLUS MINUS RPAREN }]
}
transition on LPAREN to state [5]
transition on product to state [15]
transition on NUMBER to state [2]
transition on factor to state [1]

-------------------
lalr_state [9]: {
  [factor ::= (*) LPAREN expr RPAREN , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr MINUS (*) product , {EOF PLUS MINUS RPAREN }]
  [product ::= (*) product DIVIDE factor , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [factor ::= (*) NUMBER , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [product ::= (*) product TIMES factor , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [product ::= (*) factor , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}
transition on LPAREN to state [5]
transition on product to state [10]
transition on NUMBER to state [2]
transition on factor to state [1]

-------------------
lalr_state [10]: {
  [product ::= product (*) DIVIDE factor , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [product ::= product (*) TIMES factor , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr MINUS product (*) , {EOF PLUS MINUS RPAREN }]
}
transition on TIMES to state [12]
transition on DIVIDE to state [11]

-------------------
lalr_state [11]: {
  [factor ::= (*) LPAREN expr RPAREN , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [factor ::= (*) NUMBER , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [product ::= product DIVIDE (*) factor , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}
transition on LPAREN to state [5]
transition on NUMBER to state [2]
transition on factor to state [14]

-------------------
lalr_state [12]: {
  [factor ::= (*) LPAREN expr RPAREN , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [product ::= product TIMES (*) factor , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [factor ::= (*) NUMBER , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}
transition on LPAREN to state [5]
transition on NUMBER to state [2]
transition on factor to state [13]

-------------------
lalr_state [13]: {
  [product ::= product TIMES factor (*) , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}

-------------------
lalr_state [14]: {
  [product ::= product DIVIDE factor (*) , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}

-------------------
lalr_state [15]: {
  [product ::= product (*) DIVIDE factor , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [product ::= product (*) TIMES factor , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr PLUS product (*) , {EOF PLUS MINUS RPAREN }]
}
transition on TIMES to state [12]
transition on DIVIDE to state [11]

-------------------
lalr_state [16]: {
  [$START ::= expr EOF (*) , {EOF }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 9:SHIFT(to state 5)] [term 11:SHIFT(to state 2)]
From state #1
 [term 0:REDUCE(with prod 6)] [term 3:REDUCE(with prod 6)]
 [term 4:REDUCE(with prod 6)] [term 5:REDUCE(with prod 6)]
 [term 6:REDUCE(with prod 6)] [term 10:REDUCE(with prod 6)]
From state #2
 [term 0:REDUCE(with prod 7)] [term 3:REDUCE(with prod 7)]
 [term 4:REDUCE(with prod 7)] [term 5:REDUCE(with prod 7)]
 [term 6:REDUCE(with prod 7)] [term 10:REDUCE(with prod 7)]
From state #3
 [term 0:REDUCE(with prod 3)] [term 3:REDUCE(with prod 3)]
 [term 4:REDUCE(with prod 3)] [term 5:SHIFT(to state 12)]
 [term 6:SHIFT(to state 11)] [term 10:REDUCE(with prod 3)]
From state #4
 [term 0:SHIFT(to state 16)] [term 3:SHIFT(to state 8)]
 [term 4:SHIFT(to state 9)]
From state #5
 [term 9:SHIFT(to state 5)] [term 11:SHIFT(to state 2)]
From state #6
 [term 3:SHIFT(to state 8)] [term 4:SHIFT(to state 9)]
 [term 10:SHIFT(to state 7)]
From state #7
 [term 0:REDUCE(with prod 8)] [term 3:REDUCE(with prod 8)]
 [term 4:REDUCE(with prod 8)] [term 5:REDUCE(with prod 8)]
 [term 6:REDUCE(with prod 8)] [term 10:REDUCE(with prod 8)]
From state #8
 [term 9:SHIFT(to state 5)] [term 11:SHIFT(to state 2)]
From state #9
 [term 9:SHIFT(to state 5)] [term 11:SHIFT(to state 2)]
From state #10
 [term 0:REDUCE(with prod 2)] [term 3:REDUCE(with prod 2)]
 [term 4:REDUCE(with prod 2)] [term 5:SHIFT(to state 12)]
 [term 6:SHIFT(to state 11)] [term 10:REDUCE(with prod 2)]
From state #11
 [term 9:SHIFT(to state 5)] [term 11:SHIFT(to state 2)]
From state #12
 [term 9:SHIFT(to state 5)] [term 11:SHIFT(to state 2)]
From state #13
 [term 0:REDUCE(with prod 4)] [term 3:REDUCE(with prod 4)]
 [term 4:REDUCE(with prod 4)] [term 5:REDUCE(with prod 4)]
 [term 6:REDUCE(with prod 4)] [term 10:REDUCE(with prod 4)]
From state #14
 [term 0:REDUCE(with prod 5)] [term 3:REDUCE(with prod 5)]
 [term 4:REDUCE(with prod 5)] [term 5:REDUCE(with prod 5)]
 [term 6:REDUCE(with prod 5)] [term 10:REDUCE(with prod 5)]
From state #15
 [term 0:REDUCE(with prod 0)] [term 3:REDUCE(with prod 0)]
 [term 4:REDUCE(with prod 0)] [term 5:SHIFT(to state 12)]
 [term 6:SHIFT(to state 11)] [term 10:REDUCE(with prod 0)]
From state #16
 [term 0:REDUCE(with prod 1)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 1->state 4] [non term 2->state 3] [non term 3->state 1]
From state #1
From state #2
From state #3
From state #4
From state #5
 [non term 1->state 6] [non term 2->state 3] [non term 3->state 1]
From state #6
From state #7
From state #8
 [non term 2->state 15] [non term 3->state 1]
From state #9
 [non term 2->state 10] [non term 3->state 1]
From state #10
From state #11
 [non term 3->state 14]
From state #12
 [non term 3->state 13]
From state #13
From state #14
From state #15
From state #16
-----------------------------
Closing files...
------- CUP v0.10k Parser Generation Summary -------
  0 errors and 3 warnings
  12 terminals, 4 non-terminals, and 9 productions declared, 
  producing 17 unique parse states.
  3 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (v0.10k)
Compilation finished at Mon Jan 14 21:49:28
