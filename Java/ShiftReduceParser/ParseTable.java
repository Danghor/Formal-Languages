import java.util.*;

public class ParseTable {
    Map<Pair<State, Symbol>, Action> mActionTable;
    Map<Pair<State, Symbol>, State>  mGotoTable;  
    public ParseTable() {
        mActionTable = new TreeMap<Pair<State, Symbol>,  Action>();
        State s0 = new State(0);
        State s1 = new State(1);
        State s2 = new State(2);
        State s3 = new State(3);
        State s4 = new State(4);
        State s5 = new State(5);
        State s6 = new State(6);
        State s7 = new State(7);
        State s8 = new State(8);
        State s9 = new State(9);
        State s10 = new State(10);
        State s11 = new State(11);
        State s12 = new State(12);
        State s13 = new State(13);
        State s14 = new State(14);
        State s15 = new State(15);
        Symbol t0 = new Symbol( 0, "EOF");
        Symbol t1 = new Symbol( 1, "(");
        Symbol t2 = new Symbol( 2, ")");
        Symbol t3 = new Symbol( 3, "*");
        Symbol t4 = new Symbol( 4, "+");
        Symbol t5 = new Symbol( 5, "-");
        Symbol t6 = new Symbol( 6, "/");
        Symbol t7 = new Symbol( 7, "NUMBER");
        Symbol expr = new Symbol(Symbol.EXPR, "expr" );
        Symbol factor = new Symbol(Symbol.FACTOR, "factor" );
        Symbol product = new Symbol(Symbol.PRODUCT, "product" );
        // expr -> expr '+' product
        List<Symbol> body2 = new ArrayList<Symbol>();
        Symbol head2 = expr;
        body2.add(expr);
        body2.add(t4);
        body2.add(product);
        Rule rule2 = new Rule(head2, body2);
        // expr -> expr '-' product
        List<Symbol> body3 = new ArrayList<Symbol>();
        Symbol head3 = expr;
        body3.add(expr);
        body3.add(t5);
        body3.add(product);
        Rule rule3 = new Rule(head3, body3);
        // expr -> product
        List<Symbol> body4 = new ArrayList<Symbol>();
        Symbol head4 = expr;
        body4.add(product);
        Rule rule4 = new Rule(head4, body4);
        // factor -> '(' expr ')'
        List<Symbol> body5 = new ArrayList<Symbol>();
        Symbol head5 = factor;
        body5.add(t1);
        body5.add(expr);
        body5.add(t2);
        Rule rule5 = new Rule(head5, body5);
        // factor -> NUMBER
        List<Symbol> body6 = new ArrayList<Symbol>();
        Symbol head6 = factor;
        body6.add(t7);
        Rule rule6 = new Rule(head6, body6);
        // product -> factor
        List<Symbol> body7 = new ArrayList<Symbol>();
        Symbol head7 = product;
        body7.add(factor);
        Rule rule7 = new Rule(head7, body7);
        // product -> product '*' factor
        List<Symbol> body8 = new ArrayList<Symbol>();
        Symbol head8 = product;
        body8.add(product);
        body8.add(t3);
        body8.add(factor);
        Rule rule8 = new Rule(head8, body8);
        // product -> product '/' factor
        List<Symbol> body9 = new ArrayList<Symbol>();
        Symbol head9 = product;
        body9.add(product);
        body9.add(t6);
        body9.add(factor);
        Rule rule9 = new Rule(head9, body9);
        mActionTable.put(new Pair<State, Symbol>(s0, t1), new Shift(s2));
        mActionTable.put(new Pair<State, Symbol>(s0, t7), new Shift(s12));
        mActionTable.put(new Pair<State, Symbol>(s1, t0), new Accept());
        mActionTable.put(new Pair<State, Symbol>(s1, t4), new Shift(s4));
        mActionTable.put(new Pair<State, Symbol>(s1, t5), new Shift(s6));
        mActionTable.put(new Pair<State, Symbol>(s2, t1), new Shift(s2));
        mActionTable.put(new Pair<State, Symbol>(s2, t7), new Shift(s12));
        mActionTable.put(new Pair<State, Symbol>(s3, t2), new Shift(s11));
        mActionTable.put(new Pair<State, Symbol>(s3, t4), new Shift(s4));
        mActionTable.put(new Pair<State, Symbol>(s3, t5), new Shift(s6));
        mActionTable.put(new Pair<State, Symbol>(s4, t1), new Shift(s2));
        mActionTable.put(new Pair<State, Symbol>(s4, t7), new Shift(s12));
        mActionTable.put(new Pair<State, Symbol>(s5, t0), new Reduce(rule2));
        mActionTable.put(new Pair<State, Symbol>(s5, t2), new Reduce(rule2));
        mActionTable.put(new Pair<State, Symbol>(s5, t3), new Shift(s9));
        mActionTable.put(new Pair<State, Symbol>(s5, t4), new Reduce(rule2));
        mActionTable.put(new Pair<State, Symbol>(s5, t5), new Reduce(rule2));
        mActionTable.put(new Pair<State, Symbol>(s5, t6), new Shift(s10));
        mActionTable.put(new Pair<State, Symbol>(s6, t1), new Shift(s2));
        mActionTable.put(new Pair<State, Symbol>(s6, t7), new Shift(s12));
        mActionTable.put(new Pair<State, Symbol>(s7, t0), new Reduce(rule3));
        mActionTable.put(new Pair<State, Symbol>(s7, t2), new Reduce(rule3));
        mActionTable.put(new Pair<State, Symbol>(s7, t3), new Shift(s9));
        mActionTable.put(new Pair<State, Symbol>(s7, t4), new Reduce(rule3));
        mActionTable.put(new Pair<State, Symbol>(s7, t5), new Reduce(rule3));
        mActionTable.put(new Pair<State, Symbol>(s7, t6), new Shift(s10));
        mActionTable.put(new Pair<State, Symbol>(s8, t0), new Reduce(rule4));
        mActionTable.put(new Pair<State, Symbol>(s8, t2), new Reduce(rule4));
        mActionTable.put(new Pair<State, Symbol>(s8, t3), new Shift(s9));
        mActionTable.put(new Pair<State, Symbol>(s8, t4), new Reduce(rule4));
        mActionTable.put(new Pair<State, Symbol>(s8, t5), new Reduce(rule4));
        mActionTable.put(new Pair<State, Symbol>(s8, t6), new Shift(s10));
        mActionTable.put(new Pair<State, Symbol>(s9, t1), new Shift(s2));
        mActionTable.put(new Pair<State, Symbol>(s9, t7), new Shift(s12));
        mActionTable.put(new Pair<State, Symbol>(s10, t1), new Shift(s2));
        mActionTable.put(new Pair<State, Symbol>(s10, t7), new Shift(s12));
        mActionTable.put(new Pair<State, Symbol>(s11, t0), new Reduce(rule5));
        mActionTable.put(new Pair<State, Symbol>(s11, t2), new Reduce(rule5));
        mActionTable.put(new Pair<State, Symbol>(s11, t3), new Reduce(rule5));
        mActionTable.put(new Pair<State, Symbol>(s11, t4), new Reduce(rule5));
        mActionTable.put(new Pair<State, Symbol>(s11, t5), new Reduce(rule5));
        mActionTable.put(new Pair<State, Symbol>(s11, t6), new Reduce(rule5));
        mActionTable.put(new Pair<State, Symbol>(s12, t0), new Reduce(rule6));
        mActionTable.put(new Pair<State, Symbol>(s12, t2), new Reduce(rule6));
        mActionTable.put(new Pair<State, Symbol>(s12, t3), new Reduce(rule6));
        mActionTable.put(new Pair<State, Symbol>(s12, t4), new Reduce(rule6));
        mActionTable.put(new Pair<State, Symbol>(s12, t5), new Reduce(rule6));
        mActionTable.put(new Pair<State, Symbol>(s12, t6), new Reduce(rule6));
        mActionTable.put(new Pair<State, Symbol>(s13, t0), new Reduce(rule7));
        mActionTable.put(new Pair<State, Symbol>(s13, t2), new Reduce(rule7));
        mActionTable.put(new Pair<State, Symbol>(s13, t3), new Reduce(rule7));
        mActionTable.put(new Pair<State, Symbol>(s13, t4), new Reduce(rule7));
        mActionTable.put(new Pair<State, Symbol>(s13, t5), new Reduce(rule7));
        mActionTable.put(new Pair<State, Symbol>(s13, t6), new Reduce(rule7));
        mActionTable.put(new Pair<State, Symbol>(s14, t0), new Reduce(rule8));
        mActionTable.put(new Pair<State, Symbol>(s14, t2), new Reduce(rule8));
        mActionTable.put(new Pair<State, Symbol>(s14, t3), new Reduce(rule8));
        mActionTable.put(new Pair<State, Symbol>(s14, t4), new Reduce(rule8));
        mActionTable.put(new Pair<State, Symbol>(s14, t5), new Reduce(rule8));
        mActionTable.put(new Pair<State, Symbol>(s14, t6), new Reduce(rule8));
        mActionTable.put(new Pair<State, Symbol>(s15, t0), new Reduce(rule9));
        mActionTable.put(new Pair<State, Symbol>(s15, t2), new Reduce(rule9));
        mActionTable.put(new Pair<State, Symbol>(s15, t3), new Reduce(rule9));
        mActionTable.put(new Pair<State, Symbol>(s15, t4), new Reduce(rule9));
        mActionTable.put(new Pair<State, Symbol>(s15, t5), new Reduce(rule9));
        mActionTable.put(new Pair<State, Symbol>(s15, t6), new Reduce(rule9));
        mGotoTable = new TreeMap<Pair<State, Symbol>, State>();
        mGotoTable.put(new Pair<State, Symbol>(s0, expr), s1);
        mGotoTable.put(new Pair<State, Symbol>(s0, factor), s13);
        mGotoTable.put(new Pair<State, Symbol>(s0, product), s8);
        mGotoTable.put(new Pair<State, Symbol>(s2, expr), s3);
        mGotoTable.put(new Pair<State, Symbol>(s2, factor), s13);
        mGotoTable.put(new Pair<State, Symbol>(s2, product), s8);
        mGotoTable.put(new Pair<State, Symbol>(s4, factor), s13);
        mGotoTable.put(new Pair<State, Symbol>(s4, product), s5);
        mGotoTable.put(new Pair<State, Symbol>(s6, factor), s13);
        mGotoTable.put(new Pair<State, Symbol>(s6, product), s7);
        mGotoTable.put(new Pair<State, Symbol>(s9, factor), s14);
        mGotoTable.put(new Pair<State, Symbol>(s10, factor), s15);
    }
}
