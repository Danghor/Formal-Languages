Tokens:    [$, '!', '!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '...', '/', '/=', ':', ';', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', 'auto', 'break', 'case', 'char', 'const', 'continue', 'default', 'do', 'double', 'else', 'enum', 'extern', 'float', 'for', 'goto', 'if', 'int', 'long', 'register', 'return', 'short', 'signed', 'sizeof', 'static', 'struct', 'switch', 'typedef', 'union', 'unsigned', 'void', 'volatile', 'while', '{', '|', '|=', '||', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL, TYPE_NAME]

Variables: [S, abstract_declarator, additive_expression, and_expression, argument_expression_list, assignment_expression, assignment_operator, cast_expression, compound_statement, conditional_expression, constant_expression, declaration, declaration_list, declaration_specifiers, declarator, direct_abstract_declarator, direct_declarator, enum_specifier, enumerator, enumerator_list, equality_expression, exclusive_or_expression, expression, expression_statement, external_declaration, function_definition, identifier_list, inclusive_or_expression, init_declarator, init_declarator_list, initializer, initializer_list, iteration_statement, jump_statement, labeled_statement, logical_and_expression, logical_or_expression, multiplicative_expression, parameter_declaration, parameter_list, parameter_type_list, pointer, postfix_expression, primary_expression, relational_expression, selection_statement, shift_expression, specifier_qualifier_list, statement, statement_list, storage_class_specifier, struct_declaration, struct_declaration_list, struct_declarator, struct_declarator_list, struct_or_union, struct_or_union_specifier, translation_unit, type_name, type_qualifier, type_qualifier_list, type_specifier, unary_expression, unary_operator]

Grammar: 
S -> primary_expression
abstract_declarator -> direct_abstract_declarator
abstract_declarator -> pointer
abstract_declarator -> pointer direct_abstract_declarator
additive_expression -> additive_expression '+' multiplicative_expression
additive_expression -> additive_expression '-' multiplicative_expression
additive_expression -> multiplicative_expression
and_expression -> and_expression '&' equality_expression
and_expression -> equality_expression
argument_expression_list -> argument_expression_list ',' assignment_expression
argument_expression_list -> assignment_expression
assignment_expression -> conditional_expression
assignment_expression -> unary_expression assignment_operator assignment_expression
assignment_operator -> '%='
assignment_operator -> '&='
assignment_operator -> '*='
assignment_operator -> '+='
assignment_operator -> '-='
assignment_operator -> '/='
assignment_operator -> '<<='
assignment_operator -> '='
assignment_operator -> '>>='
assignment_operator -> '^='
assignment_operator -> '|='
cast_expression -> '(' type_name ')' cast_expression
cast_expression -> unary_expression
compound_statement -> '{' '}'
compound_statement -> '{' declaration_list '}'
compound_statement -> '{' declaration_list statement_list '}'
compound_statement -> '{' statement_list '}'
conditional_expression -> logical_or_expression
conditional_expression -> logical_or_expression '?' expression ':' conditional_expression
constant_expression -> conditional_expression
declaration -> declaration_specifiers ';'
declaration -> declaration_specifiers init_declarator_list ';'
declaration_list -> declaration
declaration_list -> declaration_list declaration
declaration_specifiers -> storage_class_specifier
declaration_specifiers -> storage_class_specifier declaration_specifiers
declaration_specifiers -> type_qualifier
declaration_specifiers -> type_qualifier declaration_specifiers
declaration_specifiers -> type_specifier
declaration_specifiers -> type_specifier declaration_specifiers
declarator -> direct_declarator
declarator -> pointer direct_declarator
direct_abstract_declarator -> '(' ')'
direct_abstract_declarator -> '(' abstract_declarator ')'
direct_abstract_declarator -> '(' parameter_type_list ')'
direct_abstract_declarator -> '[' ']'
direct_abstract_declarator -> '[' constant_expression ']'
direct_abstract_declarator -> direct_abstract_declarator '(' ')'
direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'
direct_abstract_declarator -> direct_abstract_declarator '[' ']'
direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']'
direct_declarator -> '(' declarator ')'
direct_declarator -> IDENTIFIER
direct_declarator -> direct_declarator '(' ')'
direct_declarator -> direct_declarator '(' identifier_list ')'
direct_declarator -> direct_declarator '(' parameter_type_list ')'
direct_declarator -> direct_declarator '[' ']'
direct_declarator -> direct_declarator '[' constant_expression ']'
enum_specifier -> 'enum' '{' enumerator_list '}'
enum_specifier -> 'enum' IDENTIFIER
enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'
enumerator -> IDENTIFIER
enumerator -> IDENTIFIER '=' constant_expression
enumerator_list -> enumerator
enumerator_list -> enumerator_list ',' enumerator
equality_expression -> equality_expression '!=' relational_expression
equality_expression -> equality_expression '==' relational_expression
equality_expression -> relational_expression
exclusive_or_expression -> and_expression
exclusive_or_expression -> exclusive_or_expression '^' and_expression
expression -> assignment_expression
expression -> expression ',' assignment_expression
expression_statement -> ';'
expression_statement -> expression ';'
external_declaration -> declaration
external_declaration -> function_definition
function_definition -> declaration_specifiers declarator compound_statement
function_definition -> declaration_specifiers declarator declaration_list compound_statement
function_definition -> declarator compound_statement
function_definition -> declarator declaration_list compound_statement
identifier_list -> IDENTIFIER
identifier_list -> identifier_list ',' IDENTIFIER
inclusive_or_expression -> exclusive_or_expression
inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression
init_declarator -> declarator
init_declarator -> declarator '=' initializer
init_declarator_list -> init_declarator
init_declarator_list -> init_declarator_list ',' init_declarator
initializer -> '{' initializer_list ',' '}'
initializer -> '{' initializer_list '}'
initializer -> assignment_expression
initializer_list -> initializer
initializer_list -> initializer_list ',' initializer
iteration_statement -> 'do' statement 'while' '(' expression ')' ';'
iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement
iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement
iteration_statement -> 'while' '(' expression ')' statement
jump_statement -> 'break' ';'
jump_statement -> 'continue' ';'
jump_statement -> 'goto' IDENTIFIER ';'
jump_statement -> 'return' ';'
jump_statement -> 'return' expression ';'
labeled_statement -> 'case' constant_expression ':' statement
labeled_statement -> 'default' ':' statement
labeled_statement -> IDENTIFIER ':' statement
logical_and_expression -> inclusive_or_expression
logical_and_expression -> logical_and_expression '&&' inclusive_or_expression
logical_or_expression -> logical_and_expression
logical_or_expression -> logical_or_expression '||' logical_and_expression
multiplicative_expression -> cast_expression
multiplicative_expression -> multiplicative_expression '%' cast_expression
multiplicative_expression -> multiplicative_expression '*' cast_expression
multiplicative_expression -> multiplicative_expression '/' cast_expression
parameter_declaration -> declaration_specifiers
parameter_declaration -> declaration_specifiers abstract_declarator
parameter_declaration -> declaration_specifiers declarator
parameter_list -> parameter_declaration
parameter_list -> parameter_list ',' parameter_declaration
parameter_type_list -> parameter_list
parameter_type_list -> parameter_list ',' '...'
pointer -> '*'
pointer -> '*' pointer
pointer -> '*' type_qualifier_list
pointer -> '*' type_qualifier_list pointer
postfix_expression -> postfix_expression '(' ')'
postfix_expression -> postfix_expression '(' argument_expression_list ')'
postfix_expression -> postfix_expression '++'
postfix_expression -> postfix_expression '--'
postfix_expression -> postfix_expression '->' IDENTIFIER
postfix_expression -> postfix_expression '.' IDENTIFIER
postfix_expression -> postfix_expression '[' expression ']'
postfix_expression -> primary_expression
primary_expression -> '(' expression ')'
primary_expression -> CONSTANT
primary_expression -> IDENTIFIER
primary_expression -> STRING_LITERAL
relational_expression -> relational_expression '<' shift_expression
relational_expression -> relational_expression '<=' shift_expression
relational_expression -> relational_expression '>' shift_expression
relational_expression -> relational_expression '>=' shift_expression
relational_expression -> shift_expression
selection_statement -> 'if' '(' expression ')' statement
selection_statement -> 'if' '(' expression ')' statement 'else' statement
selection_statement -> 'switch' '(' expression ')' statement
shift_expression -> additive_expression
shift_expression -> shift_expression '<<' additive_expression
shift_expression -> shift_expression '>>' additive_expression
specifier_qualifier_list -> type_qualifier
specifier_qualifier_list -> type_qualifier specifier_qualifier_list
specifier_qualifier_list -> type_specifier
specifier_qualifier_list -> type_specifier specifier_qualifier_list
statement -> compound_statement
statement -> expression_statement
statement -> iteration_statement
statement -> jump_statement
statement -> labeled_statement
statement -> selection_statement
statement_list -> statement
statement_list -> statement_list statement
storage_class_specifier -> 'auto'
storage_class_specifier -> 'extern'
storage_class_specifier -> 'register'
storage_class_specifier -> 'static'
storage_class_specifier -> 'typedef'
struct_declaration -> specifier_qualifier_list struct_declarator_list ';'
struct_declaration_list -> struct_declaration
struct_declaration_list -> struct_declaration_list struct_declaration
struct_declarator -> ':' constant_expression
struct_declarator -> declarator
struct_declarator -> declarator ':' constant_expression
struct_declarator_list -> struct_declarator
struct_declarator_list -> struct_declarator_list ',' struct_declarator
struct_or_union -> 'struct'
struct_or_union -> 'union'
struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'
struct_or_union_specifier -> struct_or_union IDENTIFIER
struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'
translation_unit -> external_declaration
translation_unit -> translation_unit external_declaration
type_name -> specifier_qualifier_list
type_name -> specifier_qualifier_list abstract_declarator
type_qualifier -> 'const'
type_qualifier -> 'volatile'
type_qualifier_list -> type_qualifier
type_qualifier_list -> type_qualifier_list type_qualifier
type_specifier -> 'char'
type_specifier -> 'double'
type_specifier -> 'float'
type_specifier -> 'int'
type_specifier -> 'long'
type_specifier -> 'short'
type_specifier -> 'signed'
type_specifier -> 'unsigned'
type_specifier -> 'void'
type_specifier -> TYPE_NAME
type_specifier -> enum_specifier
type_specifier -> struct_or_union_specifier
unary_expression -> '++' unary_expression
unary_expression -> '--' unary_expression
unary_expression -> 'sizeof' '(' type_name ')'
unary_expression -> 'sizeof' unary_expression
unary_expression -> postfix_expression
unary_expression -> unary_operator cast_expression
unary_operator -> '!'
unary_operator -> '&'
unary_operator -> '*'
unary_operator -> '+'
unary_operator -> '-'
unary_operator -> '~'


Follow(  S) = []
Follow(  abstract_declarator) = [')', ',']
Follow(  additive_expression) = ['!=', '&&', '&', ')', '+', ',', '-', ':', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||', '}']
Follow(  and_expression) = ['&&', '&', ')', ',', ':', ';', '?', ']', '^', '|', '||', '}']
Follow(  argument_expression_list) = [')', ',']
Follow(  assignment_expression) = [')', ',', ':', ';', ']', '}']
Follow(  assignment_operator) = ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  cast_expression) = ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', ';', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||', '}']
Follow(  compound_statement) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'auto', 'break', 'case', 'char', 'const', 'continue', 'default', 'do', 'double', 'else', 'enum', 'extern', 'float', 'for', 'goto', 'if', 'int', 'long', 'register', 'return', 'short', 'signed', 'sizeof', 'static', 'struct', 'switch', 'typedef', 'union', 'unsigned', 'void', 'volatile', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL, TYPE_NAME]
Follow(  conditional_expression) = [')', ',', ':', ';', ']', '}']
Follow(  constant_expression) = [',', ':', ';', ']', '}']
Follow(  declaration) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'auto', 'break', 'case', 'char', 'const', 'continue', 'default', 'do', 'double', 'enum', 'extern', 'float', 'for', 'goto', 'if', 'int', 'long', 'register', 'return', 'short', 'signed', 'sizeof', 'static', 'struct', 'switch', 'typedef', 'union', 'unsigned', 'void', 'volatile', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL, TYPE_NAME]
Follow(  declaration_list) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'auto', 'break', 'case', 'char', 'const', 'continue', 'default', 'do', 'double', 'enum', 'extern', 'float', 'for', 'goto', 'if', 'int', 'long', 'register', 'return', 'short', 'signed', 'sizeof', 'static', 'struct', 'switch', 'typedef', 'union', 'unsigned', 'void', 'volatile', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL, TYPE_NAME]
Follow(  declaration_specifiers) = ['(', ')', '*', ',', ';', '[', IDENTIFIER]
Follow(  declarator) = [')', ',', ':', ';', '=', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', '{', TYPE_NAME]
Follow(  direct_abstract_declarator) = ['(', ')', ',', '[']
Follow(  direct_declarator) = ['(', ')', ',', ':', ';', '=', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', '{', TYPE_NAME]
Follow(  enum_specifier) = ['(', ')', '*', ',', ':', ';', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  enumerator) = [',', '}']
Follow(  enumerator_list) = [',', '}']
Follow(  equality_expression) = ['!=', '&&', '&', ')', ',', ':', ';', '==', '?', ']', '^', '|', '||', '}']
Follow(  exclusive_or_expression) = ['&&', ')', ',', ':', ';', '?', ']', '^', '|', '||', '}']
Follow(  expression) = [')', ',', ':', ';', ']']
Follow(  expression_statement) = ['!', '&', '(', ')', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'else', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  external_declaration) = ['(', '*', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  function_definition) = ['(', '*', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  identifier_list) = [')', ',']
Follow(  inclusive_or_expression) = ['&&', ')', ',', ':', ';', '?', ']', '|', '||', '}']
Follow(  init_declarator) = [',', ';']
Follow(  init_declarator_list) = [',', ';']
Follow(  initializer) = [',', ';', '}']
Follow(  initializer_list) = [',', '}']
Follow(  iteration_statement) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'else', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  jump_statement) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'else', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  labeled_statement) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'else', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  logical_and_expression) = ['&&', ')', ',', ':', ';', '?', ']', '||', '}']
Follow(  logical_or_expression) = [')', ',', ':', ';', '?', ']', '||', '}']
Follow(  multiplicative_expression) = ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', ':', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||', '}']
Follow(  parameter_declaration) = [')', ',']
Follow(  parameter_list) = [')', ',']
Follow(  parameter_type_list) = [')']
Follow(  pointer) = ['(', ')', ',', '[', IDENTIFIER]
Follow(  postfix_expression) = ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', ';', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||', '}']
Follow(  primary_expression) = ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', ';', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||', '}']
Follow(  relational_expression) = ['!=', '&&', '&', ')', ',', ':', ';', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||', '}']
Follow(  selection_statement) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'else', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  shift_expression) = ['!=', '&&', '&', ')', ',', ':', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||', '}']
Follow(  specifier_qualifier_list) = ['(', ')', '*', ':', '[', IDENTIFIER]
Follow(  statement) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'else', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  statement_list) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  storage_class_specifier) = ['(', ')', '*', ',', ';', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  struct_declaration) = ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME]
Follow(  struct_declaration_list) = ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME]
Follow(  struct_declarator) = [',', ';']
Follow(  struct_declarator_list) = [',', ';']
Follow(  struct_or_union) = ['{', IDENTIFIER]
Follow(  struct_or_union_specifier) = ['(', ')', '*', ',', ':', ';', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  translation_unit) = ['(', '*', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  type_name) = [')']
Follow(  type_qualifier) = ['(', ')', '*', ',', ':', ';', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  type_qualifier_list) = ['(', ')', '*', ',', '[', 'const', 'volatile', IDENTIFIER]
Follow(  type_specifier) = ['(', ')', '*', ',', ':', ';', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  unary_expression) = ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', ';', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||', '}']
Follow(  unary_operator) = ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]


s0 = { S -> <*> primary_expression,
       primary_expression -> <*> '(' expression ')',
       primary_expression -> <*> CONSTANT,
       primary_expression -> <*> IDENTIFIER,
       primary_expression -> <*> STRING_LITERAL
     }

s1 = { S -> primary_expression <*> }

s2 = { abstract_declarator -> <*> direct_abstract_declarator,
       abstract_declarator -> <*> pointer,
       abstract_declarator -> <*> pointer direct_abstract_declarator,
       declaration_specifiers -> <*> storage_class_specifier,
       declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
       declaration_specifiers -> <*> type_qualifier,
       declaration_specifiers -> <*> type_qualifier declaration_specifiers,
       declaration_specifiers -> <*> type_specifier,
       declaration_specifiers -> <*> type_specifier declaration_specifiers,
       declarator -> <*> direct_declarator,
       declarator -> <*> pointer direct_declarator,
       direct_abstract_declarator -> <*> '(' ')',
       direct_abstract_declarator -> <*> '(' abstract_declarator ')',
       direct_abstract_declarator -> <*> '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> '[' ']',
       direct_abstract_declarator -> <*> '[' constant_expression ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']',
       direct_abstract_declarator -> '(' <*> ')',
       direct_abstract_declarator -> '(' <*> abstract_declarator ')',
       direct_abstract_declarator -> '(' <*> parameter_type_list ')',
       direct_declarator -> <*> '(' declarator ')',
       direct_declarator -> <*> IDENTIFIER,
       direct_declarator -> <*> direct_declarator '(' ')',
       direct_declarator -> <*> direct_declarator '(' identifier_list ')',
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
       direct_declarator -> <*> direct_declarator '[' ']',
       direct_declarator -> <*> direct_declarator '[' constant_expression ']',
       direct_declarator -> '(' <*> declarator ')',
       enum_specifier -> <*> 'enum' '{' enumerator_list '}',
       enum_specifier -> <*> 'enum' IDENTIFIER,
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
       parameter_declaration -> <*> declaration_specifiers,
       parameter_declaration -> <*> declaration_specifiers abstract_declarator,
       parameter_declaration -> <*> declaration_specifiers declarator,
       parameter_list -> <*> parameter_declaration,
       parameter_list -> <*> parameter_list ',' parameter_declaration,
       parameter_type_list -> <*> parameter_list,
       parameter_type_list -> <*> parameter_list ',' '...',
       pointer -> <*> '*',
       pointer -> <*> '*' pointer,
       pointer -> <*> '*' type_qualifier_list,
       pointer -> <*> '*' type_qualifier_list pointer,
       storage_class_specifier -> <*> 'auto',
       storage_class_specifier -> <*> 'extern',
       storage_class_specifier -> <*> 'register',
       storage_class_specifier -> <*> 'static',
       storage_class_specifier -> <*> 'typedef',
       struct_or_union -> <*> 'struct',
       struct_or_union -> <*> 'union',
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
       type_qualifier -> <*> 'const',
       type_qualifier -> <*> 'volatile',
       type_specifier -> <*> 'char',
       type_specifier -> <*> 'double',
       type_specifier -> <*> 'float',
       type_specifier -> <*> 'int',
       type_specifier -> <*> 'long',
       type_specifier -> <*> 'short',
       type_specifier -> <*> 'signed',
       type_specifier -> <*> 'unsigned',
       type_specifier -> <*> 'void',
       type_specifier -> <*> TYPE_NAME,
       type_specifier -> <*> enum_specifier,
       type_specifier -> <*> struct_or_union_specifier
     }

s3 = { abstract_declarator -> <*> direct_abstract_declarator,
       abstract_declarator -> <*> pointer,
       abstract_declarator -> <*> pointer direct_abstract_declarator,
       declaration_specifiers -> <*> storage_class_specifier,
       declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
       declaration_specifiers -> <*> type_qualifier,
       declaration_specifiers -> <*> type_qualifier declaration_specifiers,
       declaration_specifiers -> <*> type_specifier,
       declaration_specifiers -> <*> type_specifier declaration_specifiers,
       direct_abstract_declarator -> <*> '(' ')',
       direct_abstract_declarator -> <*> '(' abstract_declarator ')',
       direct_abstract_declarator -> <*> '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> '[' ']',
       direct_abstract_declarator -> <*> '[' constant_expression ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']',
       direct_abstract_declarator -> '(' <*> ')',
       direct_abstract_declarator -> '(' <*> abstract_declarator ')',
       direct_abstract_declarator -> '(' <*> parameter_type_list ')',
       enum_specifier -> <*> 'enum' '{' enumerator_list '}',
       enum_specifier -> <*> 'enum' IDENTIFIER,
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
       parameter_declaration -> <*> declaration_specifiers,
       parameter_declaration -> <*> declaration_specifiers abstract_declarator,
       parameter_declaration -> <*> declaration_specifiers declarator,
       parameter_list -> <*> parameter_declaration,
       parameter_list -> <*> parameter_list ',' parameter_declaration,
       parameter_type_list -> <*> parameter_list,
       parameter_type_list -> <*> parameter_list ',' '...',
       pointer -> <*> '*',
       pointer -> <*> '*' pointer,
       pointer -> <*> '*' type_qualifier_list,
       pointer -> <*> '*' type_qualifier_list pointer,
       storage_class_specifier -> <*> 'auto',
       storage_class_specifier -> <*> 'extern',
       storage_class_specifier -> <*> 'register',
       storage_class_specifier -> <*> 'static',
       storage_class_specifier -> <*> 'typedef',
       struct_or_union -> <*> 'struct',
       struct_or_union -> <*> 'union',
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
       type_qualifier -> <*> 'const',
       type_qualifier -> <*> 'volatile',
       type_specifier -> <*> 'char',
       type_specifier -> <*> 'double',
       type_specifier -> <*> 'float',
       type_specifier -> <*> 'int',
       type_specifier -> <*> 'long',
       type_specifier -> <*> 'short',
       type_specifier -> <*> 'signed',
       type_specifier -> <*> 'unsigned',
       type_specifier -> <*> 'void',
       type_specifier -> <*> TYPE_NAME,
       type_specifier -> <*> enum_specifier,
       type_specifier -> <*> struct_or_union_specifier
     }

s4 = { abstract_declarator -> <*> direct_abstract_declarator,
       abstract_declarator -> <*> pointer,
       abstract_declarator -> <*> pointer direct_abstract_declarator,
       declarator -> <*> direct_declarator,
       declarator -> <*> pointer direct_declarator,
       direct_abstract_declarator -> <*> '(' ')',
       direct_abstract_declarator -> <*> '(' abstract_declarator ')',
       direct_abstract_declarator -> <*> '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> '[' ']',
       direct_abstract_declarator -> <*> '[' constant_expression ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']',
       direct_declarator -> <*> '(' declarator ')',
       direct_declarator -> <*> IDENTIFIER,
       direct_declarator -> <*> direct_declarator '(' ')',
       direct_declarator -> <*> direct_declarator '(' identifier_list ')',
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
       direct_declarator -> <*> direct_declarator '[' ']',
       direct_declarator -> <*> direct_declarator '[' constant_expression ']',
       parameter_declaration -> declaration_specifiers <*>,
       parameter_declaration -> declaration_specifiers <*> abstract_declarator,
       parameter_declaration -> declaration_specifiers <*> declarator,
       pointer -> <*> '*',
       pointer -> <*> '*' pointer,
       pointer -> <*> '*' type_qualifier_list,
       pointer -> <*> '*' type_qualifier_list pointer
     }

s5 = { abstract_declarator -> <*> direct_abstract_declarator,
       abstract_declarator -> <*> pointer,
       abstract_declarator -> <*> pointer direct_abstract_declarator,
       direct_abstract_declarator -> <*> '(' ')',
       direct_abstract_declarator -> <*> '(' abstract_declarator ')',
       direct_abstract_declarator -> <*> '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> '[' ']',
       direct_abstract_declarator -> <*> '[' constant_expression ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']',
       pointer -> <*> '*',
       pointer -> <*> '*' pointer,
       pointer -> <*> '*' type_qualifier_list,
       pointer -> <*> '*' type_qualifier_list pointer,
       type_name -> specifier_qualifier_list <*>,
       type_name -> specifier_qualifier_list <*> abstract_declarator
     }

s6 = { abstract_declarator -> direct_abstract_declarator <*>,
       direct_abstract_declarator -> direct_abstract_declarator <*> '(' ')',
       direct_abstract_declarator -> direct_abstract_declarator <*> '(' parameter_type_list ')',
       direct_abstract_declarator -> direct_abstract_declarator <*> '[' ']',
       direct_abstract_declarator -> direct_abstract_declarator <*> '[' constant_expression ']'
     }

s7 = { abstract_declarator -> pointer <*>,
       abstract_declarator -> pointer <*> direct_abstract_declarator,
       declarator -> pointer <*> direct_declarator,
       direct_abstract_declarator -> <*> '(' ')',
       direct_abstract_declarator -> <*> '(' abstract_declarator ')',
       direct_abstract_declarator -> <*> '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> '[' ']',
       direct_abstract_declarator -> <*> '[' constant_expression ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']',
       direct_declarator -> <*> '(' declarator ')',
       direct_declarator -> <*> IDENTIFIER,
       direct_declarator -> <*> direct_declarator '(' ')',
       direct_declarator -> <*> direct_declarator '(' identifier_list ')',
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
       direct_declarator -> <*> direct_declarator '[' ']',
       direct_declarator -> <*> direct_declarator '[' constant_expression ']'
     }

s8 = { abstract_declarator -> pointer <*>,
       abstract_declarator -> pointer <*> direct_abstract_declarator,
       direct_abstract_declarator -> <*> '(' ')',
       direct_abstract_declarator -> <*> '(' abstract_declarator ')',
       direct_abstract_declarator -> <*> '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> '[' ']',
       direct_abstract_declarator -> <*> '[' constant_expression ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']'
     }

s9 = { abstract_declarator -> pointer direct_abstract_declarator <*>,
       direct_abstract_declarator -> direct_abstract_declarator <*> '(' ')',
       direct_abstract_declarator -> direct_abstract_declarator <*> '(' parameter_type_list ')',
       direct_abstract_declarator -> direct_abstract_declarator <*> '[' ']',
       direct_abstract_declarator -> direct_abstract_declarator <*> '[' constant_expression ']'
     }

s10 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        argument_expression_list -> <*> argument_expression_list ',' assignment_expression,
        argument_expression_list -> <*> assignment_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        postfix_expression -> postfix_expression '(' <*> ')',
        postfix_expression -> postfix_expression '(' <*> argument_expression_list ')',
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s11 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        argument_expression_list -> argument_expression_list ',' <*> assignment_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s12 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        assignment_expression -> unary_expression assignment_operator <*> assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s13 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        cast_expression -> '(' <*> type_name ')' cast_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        enum_specifier -> <*> 'enum' '{' enumerator_list '}',
        enum_specifier -> <*> 'enum' IDENTIFIER,
        enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        primary_expression -> '(' <*> expression ')',
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        specifier_qualifier_list -> <*> type_qualifier,
        specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list,
        specifier_qualifier_list -> <*> type_specifier,
        specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list,
        struct_or_union -> <*> 'struct',
        struct_or_union -> <*> 'union',
        struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
        type_name -> <*> specifier_qualifier_list,
        type_name -> <*> specifier_qualifier_list abstract_declarator,
        type_qualifier -> <*> 'const',
        type_qualifier -> <*> 'volatile',
        type_specifier -> <*> 'char',
        type_specifier -> <*> 'double',
        type_specifier -> <*> 'float',
        type_specifier -> <*> 'int',
        type_specifier -> <*> 'long',
        type_specifier -> <*> 'short',
        type_specifier -> <*> 'signed',
        type_specifier -> <*> 'unsigned',
        type_specifier -> <*> 'void',
        type_specifier -> <*> TYPE_NAME,
        type_specifier -> <*> enum_specifier,
        type_specifier -> <*> struct_or_union_specifier,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s14 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        conditional_expression -> logical_or_expression '?' <*> expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s15 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        enum_specifier -> <*> 'enum' '{' enumerator_list '}',
        enum_specifier -> <*> 'enum' IDENTIFIER,
        enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        primary_expression -> '(' <*> expression ')',
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        specifier_qualifier_list -> <*> type_qualifier,
        specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list,
        specifier_qualifier_list -> <*> type_specifier,
        specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list,
        struct_or_union -> <*> 'struct',
        struct_or_union -> <*> 'union',
        struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
        type_name -> <*> specifier_qualifier_list,
        type_name -> <*> specifier_qualifier_list abstract_declarator,
        type_qualifier -> <*> 'const',
        type_qualifier -> <*> 'volatile',
        type_specifier -> <*> 'char',
        type_specifier -> <*> 'double',
        type_specifier -> <*> 'float',
        type_specifier -> <*> 'int',
        type_specifier -> <*> 'long',
        type_specifier -> <*> 'short',
        type_specifier -> <*> 'signed',
        type_specifier -> <*> 'unsigned',
        type_specifier -> <*> 'void',
        type_specifier -> <*> TYPE_NAME,
        type_specifier -> <*> enum_specifier,
        type_specifier -> <*> struct_or_union_specifier,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_expression -> 'sizeof' '(' <*> type_name ')',
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s16 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        postfix_expression -> postfix_expression '[' <*> expression ']',
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s17 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        primary_expression -> '(' <*> expression ')',
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s18 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> expression ',' <*> assignment_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s19 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        conditional_expression -> logical_or_expression '?' expression ':' <*> conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s20 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        constant_expression -> <*> conditional_expression,
        direct_abstract_declarator -> '[' <*> ']',
        direct_abstract_declarator -> '[' <*> constant_expression ']',
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s21 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        constant_expression -> <*> conditional_expression,
        direct_abstract_declarator -> direct_abstract_declarator '[' <*> ']',
        direct_abstract_declarator -> direct_abstract_declarator '[' <*> constant_expression ']',
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s22 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        constant_expression -> <*> conditional_expression,
        direct_declarator -> direct_declarator '[' <*> ']',
        direct_declarator -> direct_declarator '[' <*> constant_expression ']',
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s23 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        constant_expression -> <*> conditional_expression,
        enumerator -> IDENTIFIER '=' <*> constant_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s24 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        constant_expression -> <*> conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        struct_declarator -> ':' <*> constant_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s25 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        constant_expression -> <*> conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        struct_declarator -> declarator ':' <*> constant_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s26 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> logical_or_expression '||' <*> logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s27 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> logical_and_expression '&&' <*> inclusive_or_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s28 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> inclusive_or_expression '|' <*> exclusive_or_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s29 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> exclusive_or_expression '^' <*> and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s30 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> and_expression '&' <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s31 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        equality_expression -> equality_expression '!=' <*> relational_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s32 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        equality_expression -> equality_expression '==' <*> relational_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s33 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> relational_expression '<' <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s34 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> relational_expression '<=' <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s35 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> relational_expression '>' <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s36 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> relational_expression '>=' <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s37 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        shift_expression -> shift_expression '<<' <*> additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s38 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        shift_expression -> shift_expression '>>' <*> additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s39 = { additive_expression -> additive_expression <*> '+' multiplicative_expression,
        additive_expression -> additive_expression <*> '-' multiplicative_expression,
        shift_expression -> additive_expression <*>
      }

s40 = { additive_expression -> additive_expression <*> '+' multiplicative_expression,
        additive_expression -> additive_expression <*> '-' multiplicative_expression,
        shift_expression -> shift_expression '<<' additive_expression <*>
      }

s41 = { additive_expression -> additive_expression <*> '+' multiplicative_expression,
        additive_expression -> additive_expression <*> '-' multiplicative_expression,
        shift_expression -> shift_expression '>>' additive_expression <*>
      }

s42 = { additive_expression -> additive_expression '+' <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s43 = { additive_expression -> additive_expression '+' multiplicative_expression <*>,
        multiplicative_expression -> multiplicative_expression <*> '%' cast_expression,
        multiplicative_expression -> multiplicative_expression <*> '*' cast_expression,
        multiplicative_expression -> multiplicative_expression <*> '/' cast_expression
      }

s44 = { additive_expression -> additive_expression '-' <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s45 = { additive_expression -> additive_expression '-' multiplicative_expression <*>,
        multiplicative_expression -> multiplicative_expression <*> '%' cast_expression,
        multiplicative_expression -> multiplicative_expression <*> '*' cast_expression,
        multiplicative_expression -> multiplicative_expression <*> '/' cast_expression
      }

s46 = { additive_expression -> multiplicative_expression <*>,
        multiplicative_expression -> multiplicative_expression <*> '%' cast_expression,
        multiplicative_expression -> multiplicative_expression <*> '*' cast_expression,
        multiplicative_expression -> multiplicative_expression <*> '/' cast_expression
      }

s47 = { and_expression -> and_expression <*> '&' equality_expression,
        exclusive_or_expression -> and_expression <*>
      }

s48 = { and_expression -> and_expression <*> '&' equality_expression,
        exclusive_or_expression -> exclusive_or_expression '^' and_expression <*>
      }

s49 = { and_expression -> and_expression '&' equality_expression <*>,
        equality_expression -> equality_expression <*> '!=' relational_expression,
        equality_expression -> equality_expression <*> '==' relational_expression
      }

s50 = { and_expression -> equality_expression <*>,
        equality_expression -> equality_expression <*> '!=' relational_expression,
        equality_expression -> equality_expression <*> '==' relational_expression
      }

s51 = { argument_expression_list -> argument_expression_list <*> ',' assignment_expression,
        postfix_expression -> postfix_expression '(' argument_expression_list <*> ')'
      }

s52 = { argument_expression_list -> argument_expression_list ',' assignment_expression <*> }

s53 = { argument_expression_list -> assignment_expression <*> }

s54 = { assignment_expression -> conditional_expression <*> }

s55 = { assignment_expression -> unary_expression <*> assignment_operator assignment_expression,
        assignment_operator -> <*> '%=',
        assignment_operator -> <*> '&=',
        assignment_operator -> <*> '*=',
        assignment_operator -> <*> '+=',
        assignment_operator -> <*> '-=',
        assignment_operator -> <*> '/=',
        assignment_operator -> <*> '<<=',
        assignment_operator -> <*> '=',
        assignment_operator -> <*> '>>=',
        assignment_operator -> <*> '^=',
        assignment_operator -> <*> '|=',
        cast_expression -> unary_expression <*>
      }

s56 = { assignment_expression -> unary_expression assignment_operator assignment_expression <*> }

s57 = { assignment_operator -> '%=' <*> }

s58 = { assignment_operator -> '&=' <*> }

s59 = { assignment_operator -> '*=' <*> }

s60 = { assignment_operator -> '+=' <*> }

s61 = { assignment_operator -> '-=' <*> }

s62 = { assignment_operator -> '/=' <*> }

s63 = { assignment_operator -> '<<=' <*> }

s64 = { assignment_operator -> '=' <*> }

s65 = { assignment_operator -> '>>=' <*> }

s66 = { assignment_operator -> '^=' <*> }

s67 = { assignment_operator -> '|=' <*> }

s68 = { cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        cast_expression -> '(' type_name ')' <*> cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s69 = { cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> multiplicative_expression '%' <*> cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s70 = { cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> multiplicative_expression '*' <*> cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s71 = { cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> multiplicative_expression '/' <*> cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s72 = { cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_expression -> unary_operator <*> cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s73 = { cast_expression -> '(' type_name <*> ')' cast_expression }

s74 = { cast_expression -> '(' type_name ')' cast_expression <*> }

s75 = { cast_expression -> unary_expression <*> }

s76 = { conditional_expression -> logical_or_expression <*>,
        conditional_expression -> logical_or_expression <*> '?' expression ':' conditional_expression,
        logical_or_expression -> logical_or_expression <*> '||' logical_and_expression
      }

s77 = { conditional_expression -> logical_or_expression '?' expression <*> ':' conditional_expression,
        expression -> expression <*> ',' assignment_expression
      }

s78 = { conditional_expression -> logical_or_expression '?' expression ':' conditional_expression <*> }

s79 = { constant_expression -> conditional_expression <*> }

s80 = { declaration_specifiers -> <*> storage_class_specifier,
        declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
        declaration_specifiers -> <*> type_qualifier,
        declaration_specifiers -> <*> type_qualifier declaration_specifiers,
        declaration_specifiers -> <*> type_specifier,
        declaration_specifiers -> <*> type_specifier declaration_specifiers,
        declaration_specifiers -> storage_class_specifier <*>,
        declaration_specifiers -> storage_class_specifier <*> declaration_specifiers,
        enum_specifier -> <*> 'enum' '{' enumerator_list '}',
        enum_specifier -> <*> 'enum' IDENTIFIER,
        enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
        storage_class_specifier -> <*> 'auto',
        storage_class_specifier -> <*> 'extern',
        storage_class_specifier -> <*> 'register',
        storage_class_specifier -> <*> 'static',
        storage_class_specifier -> <*> 'typedef',
        struct_or_union -> <*> 'struct',
        struct_or_union -> <*> 'union',
        struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
        type_qualifier -> <*> 'const',
        type_qualifier -> <*> 'volatile',
        type_specifier -> <*> 'char',
        type_specifier -> <*> 'double',
        type_specifier -> <*> 'float',
        type_specifier -> <*> 'int',
        type_specifier -> <*> 'long',
        type_specifier -> <*> 'short',
        type_specifier -> <*> 'signed',
        type_specifier -> <*> 'unsigned',
        type_specifier -> <*> 'void',
        type_specifier -> <*> TYPE_NAME,
        type_specifier -> <*> enum_specifier,
        type_specifier -> <*> struct_or_union_specifier
      }

s81 = { declaration_specifiers -> <*> storage_class_specifier,
        declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
        declaration_specifiers -> <*> type_qualifier,
        declaration_specifiers -> <*> type_qualifier declaration_specifiers,
        declaration_specifiers -> <*> type_specifier,
        declaration_specifiers -> <*> type_specifier declaration_specifiers,
        declaration_specifiers -> type_qualifier <*>,
        declaration_specifiers -> type_qualifier <*> declaration_specifiers,
        enum_specifier -> <*> 'enum' '{' enumerator_list '}',
        enum_specifier -> <*> 'enum' IDENTIFIER,
        enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
        storage_class_specifier -> <*> 'auto',
        storage_class_specifier -> <*> 'extern',
        storage_class_specifier -> <*> 'register',
        storage_class_specifier -> <*> 'static',
        storage_class_specifier -> <*> 'typedef',
        struct_or_union -> <*> 'struct',
        struct_or_union -> <*> 'union',
        struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
        type_qualifier -> <*> 'const',
        type_qualifier -> <*> 'volatile',
        type_specifier -> <*> 'char',
        type_specifier -> <*> 'double',
        type_specifier -> <*> 'float',
        type_specifier -> <*> 'int',
        type_specifier -> <*> 'long',
        type_specifier -> <*> 'short',
        type_specifier -> <*> 'signed',
        type_specifier -> <*> 'unsigned',
        type_specifier -> <*> 'void',
        type_specifier -> <*> TYPE_NAME,
        type_specifier -> <*> enum_specifier,
        type_specifier -> <*> struct_or_union_specifier
      }

s82 = { declaration_specifiers -> <*> storage_class_specifier,
        declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
        declaration_specifiers -> <*> type_qualifier,
        declaration_specifiers -> <*> type_qualifier declaration_specifiers,
        declaration_specifiers -> <*> type_specifier,
        declaration_specifiers -> <*> type_specifier declaration_specifiers,
        declaration_specifiers -> type_specifier <*>,
        declaration_specifiers -> type_specifier <*> declaration_specifiers,
        enum_specifier -> <*> 'enum' '{' enumerator_list '}',
        enum_specifier -> <*> 'enum' IDENTIFIER,
        enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
        storage_class_specifier -> <*> 'auto',
        storage_class_specifier -> <*> 'extern',
        storage_class_specifier -> <*> 'register',
        storage_class_specifier -> <*> 'static',
        storage_class_specifier -> <*> 'typedef',
        struct_or_union -> <*> 'struct',
        struct_or_union -> <*> 'union',
        struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
        type_qualifier -> <*> 'const',
        type_qualifier -> <*> 'volatile',
        type_specifier -> <*> 'char',
        type_specifier -> <*> 'double',
        type_specifier -> <*> 'float',
        type_specifier -> <*> 'int',
        type_specifier -> <*> 'long',
        type_specifier -> <*> 'short',
        type_specifier -> <*> 'signed',
        type_specifier -> <*> 'unsigned',
        type_specifier -> <*> 'void',
        type_specifier -> <*> TYPE_NAME,
        type_specifier -> <*> enum_specifier,
        type_specifier -> <*> struct_or_union_specifier
      }

s83 = { declaration_specifiers -> <*> storage_class_specifier,
        declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
        declaration_specifiers -> <*> type_qualifier,
        declaration_specifiers -> <*> type_qualifier declaration_specifiers,
        declaration_specifiers -> <*> type_specifier,
        declaration_specifiers -> <*> type_specifier declaration_specifiers,
        direct_abstract_declarator -> direct_abstract_declarator '(' <*> ')',
        direct_abstract_declarator -> direct_abstract_declarator '(' <*> parameter_type_list ')',
        enum_specifier -> <*> 'enum' '{' enumerator_list '}',
        enum_specifier -> <*> 'enum' IDENTIFIER,
        enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
        parameter_declaration -> <*> declaration_specifiers,
        parameter_declaration -> <*> declaration_specifiers abstract_declarator,
        parameter_declaration -> <*> declaration_specifiers declarator,
        parameter_list -> <*> parameter_declaration,
        parameter_list -> <*> parameter_list ',' parameter_declaration,
        parameter_type_list -> <*> parameter_list,
        parameter_type_list -> <*> parameter_list ',' '...',
        storage_class_specifier -> <*> 'auto',
        storage_class_specifier -> <*> 'extern',
        storage_class_specifier -> <*> 'register',
        storage_class_specifier -> <*> 'static',
        storage_class_specifier -> <*> 'typedef',
        struct_or_union -> <*> 'struct',
        struct_or_union -> <*> 'union',
        struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
        type_qualifier -> <*> 'const',
        type_qualifier -> <*> 'volatile',
        type_specifier -> <*> 'char',
        type_specifier -> <*> 'double',
        type_specifier -> <*> 'float',
        type_specifier -> <*> 'int',
        type_specifier -> <*> 'long',
        type_specifier -> <*> 'short',
        type_specifier -> <*> 'signed',
        type_specifier -> <*> 'unsigned',
        type_specifier -> <*> 'void',
        type_specifier -> <*> TYPE_NAME,
        type_specifier -> <*> enum_specifier,
        type_specifier -> <*> struct_or_union_specifier
      }

s84 = { declaration_specifiers -> <*> storage_class_specifier,
        declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
        declaration_specifiers -> <*> type_qualifier,
        declaration_specifiers -> <*> type_qualifier declaration_specifiers,
        declaration_specifiers -> <*> type_specifier,
        declaration_specifiers -> <*> type_specifier declaration_specifiers,
        direct_declarator -> direct_declarator '(' <*> ')',
        direct_declarator -> direct_declarator '(' <*> identifier_list ')',
        direct_declarator -> direct_declarator '(' <*> parameter_type_list ')',
        enum_specifier -> <*> 'enum' '{' enumerator_list '}',
        enum_specifier -> <*> 'enum' IDENTIFIER,
        enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
        identifier_list -> <*> IDENTIFIER,
        identifier_list -> <*> identifier_list ',' IDENTIFIER,
        parameter_declaration -> <*> declaration_specifiers,
        parameter_declaration -> <*> declaration_specifiers abstract_declarator,
        parameter_declaration -> <*> declaration_specifiers declarator,
        parameter_list -> <*> parameter_declaration,
        parameter_list -> <*> parameter_list ',' parameter_declaration,
        parameter_type_list -> <*> parameter_list,
        parameter_type_list -> <*> parameter_list ',' '...',
        storage_class_specifier -> <*> 'auto',
        storage_class_specifier -> <*> 'extern',
        storage_class_specifier -> <*> 'register',
        storage_class_specifier -> <*> 'static',
        storage_class_specifier -> <*> 'typedef',
        struct_or_union -> <*> 'struct',
        struct_or_union -> <*> 'union',
        struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
        type_qualifier -> <*> 'const',
        type_qualifier -> <*> 'volatile',
        type_specifier -> <*> 'char',
        type_specifier -> <*> 'double',
        type_specifier -> <*> 'float',
        type_specifier -> <*> 'int',
        type_specifier -> <*> 'long',
        type_specifier -> <*> 'short',
        type_specifier -> <*> 'signed',
        type_specifier -> <*> 'unsigned',
        type_specifier -> <*> 'void',
        type_specifier -> <*> TYPE_NAME,
        type_specifier -> <*> enum_specifier,
        type_specifier -> <*> struct_or_union_specifier
      }

s85 = { declaration_specifiers -> <*> storage_class_specifier,
        declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
        declaration_specifiers -> <*> type_qualifier,
        declaration_specifiers -> <*> type_qualifier declaration_specifiers,
        declaration_specifiers -> <*> type_specifier,
        declaration_specifiers -> <*> type_specifier declaration_specifiers,
        enum_specifier -> <*> 'enum' '{' enumerator_list '}',
        enum_specifier -> <*> 'enum' IDENTIFIER,
        enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
        parameter_declaration -> <*> declaration_specifiers,
        parameter_declaration -> <*> declaration_specifiers abstract_declarator,
        parameter_declaration -> <*> declaration_specifiers declarator,
        parameter_list -> parameter_list ',' <*> parameter_declaration,
        parameter_type_list -> parameter_list ',' <*> '...',
        storage_class_specifier -> <*> 'auto',
        storage_class_specifier -> <*> 'extern',
        storage_class_specifier -> <*> 'register',
        storage_class_specifier -> <*> 'static',
        storage_class_specifier -> <*> 'typedef',
        struct_or_union -> <*> 'struct',
        struct_or_union -> <*> 'union',
        struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
        type_qualifier -> <*> 'const',
        type_qualifier -> <*> 'volatile',
        type_specifier -> <*> 'char',
        type_specifier -> <*> 'double',
        type_specifier -> <*> 'float',
        type_specifier -> <*> 'int',
        type_specifier -> <*> 'long',
        type_specifier -> <*> 'short',
        type_specifier -> <*> 'signed',
        type_specifier -> <*> 'unsigned',
        type_specifier -> <*> 'void',
        type_specifier -> <*> TYPE_NAME,
        type_specifier -> <*> enum_specifier,
        type_specifier -> <*> struct_or_union_specifier
      }

s86 = { declaration_specifiers -> storage_class_specifier declaration_specifiers <*> }

s87 = { declaration_specifiers -> type_qualifier declaration_specifiers <*> }

s88 = { declaration_specifiers -> type_specifier declaration_specifiers <*> }

s89 = { declarator -> <*> direct_declarator,
        declarator -> <*> pointer direct_declarator,
        direct_declarator -> <*> '(' declarator ')',
        direct_declarator -> <*> IDENTIFIER,
        direct_declarator -> <*> direct_declarator '(' ')',
        direct_declarator -> <*> direct_declarator '(' identifier_list ')',
        direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
        direct_declarator -> <*> direct_declarator '[' ']',
        direct_declarator -> <*> direct_declarator '[' constant_expression ']',
        direct_declarator -> '(' <*> declarator ')',
        pointer -> <*> '*',
        pointer -> <*> '*' pointer,
        pointer -> <*> '*' type_qualifier_list,
        pointer -> <*> '*' type_qualifier_list pointer
      }

s90 = { declarator -> <*> direct_declarator,
        declarator -> <*> pointer direct_declarator,
        direct_declarator -> <*> '(' declarator ')',
        direct_declarator -> <*> IDENTIFIER,
        direct_declarator -> <*> direct_declarator '(' ')',
        direct_declarator -> <*> direct_declarator '(' identifier_list ')',
        direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
        direct_declarator -> <*> direct_declarator '[' ']',
        direct_declarator -> <*> direct_declarator '[' constant_expression ']',
        pointer -> <*> '*',
        pointer -> <*> '*' pointer,
        pointer -> <*> '*' type_qualifier_list,
        pointer -> <*> '*' type_qualifier_list pointer,
        struct_declaration -> specifier_qualifier_list <*> struct_declarator_list ';',
        struct_declarator -> <*> ':' constant_expression,
        struct_declarator -> <*> declarator,
        struct_declarator -> <*> declarator ':' constant_expression,
        struct_declarator_list -> <*> struct_declarator,
        struct_declarator_list -> <*> struct_declarator_list ',' struct_declarator
      }

s91 = { declarator -> <*> direct_declarator,
        declarator -> <*> pointer direct_declarator,
        direct_declarator -> <*> '(' declarator ')',
        direct_declarator -> <*> IDENTIFIER,
        direct_declarator -> <*> direct_declarator '(' ')',
        direct_declarator -> <*> direct_declarator '(' identifier_list ')',
        direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
        direct_declarator -> <*> direct_declarator '[' ']',
        direct_declarator -> <*> direct_declarator '[' constant_expression ']',
        pointer -> <*> '*',
        pointer -> <*> '*' pointer,
        pointer -> <*> '*' type_qualifier_list,
        pointer -> <*> '*' type_qualifier_list pointer,
        struct_declarator -> <*> ':' constant_expression,
        struct_declarator -> <*> declarator,
        struct_declarator -> <*> declarator ':' constant_expression,
        struct_declarator_list -> struct_declarator_list ',' <*> struct_declarator
      }

s92 = { declarator -> direct_declarator <*>,
        direct_declarator -> direct_declarator <*> '(' ')',
        direct_declarator -> direct_declarator <*> '(' identifier_list ')',
        direct_declarator -> direct_declarator <*> '(' parameter_type_list ')',
        direct_declarator -> direct_declarator <*> '[' ']',
        direct_declarator -> direct_declarator <*> '[' constant_expression ']'
      }

s93 = { declarator -> pointer <*> direct_declarator,
        direct_declarator -> <*> '(' declarator ')',
        direct_declarator -> <*> IDENTIFIER,
        direct_declarator -> <*> direct_declarator '(' ')',
        direct_declarator -> <*> direct_declarator '(' identifier_list ')',
        direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
        direct_declarator -> <*> direct_declarator '[' ']',
        direct_declarator -> <*> direct_declarator '[' constant_expression ']'
      }

s94 = { declarator -> pointer direct_declarator <*>,
        direct_declarator -> direct_declarator <*> '(' ')',
        direct_declarator -> direct_declarator <*> '(' identifier_list ')',
        direct_declarator -> direct_declarator <*> '(' parameter_type_list ')',
        direct_declarator -> direct_declarator <*> '[' ']',
        direct_declarator -> direct_declarator <*> '[' constant_expression ']'
      }

s95 = { direct_abstract_declarator -> '(' ')' <*> }

s96 = { direct_abstract_declarator -> '(' abstract_declarator <*> ')' }

s97 = { direct_abstract_declarator -> '(' abstract_declarator ')' <*> }

s98 = { direct_abstract_declarator -> '(' parameter_type_list <*> ')' }

s99 = { direct_abstract_declarator -> '(' parameter_type_list ')' <*> }

s100 = { direct_abstract_declarator -> '[' ']' <*> }

s101 = { direct_abstract_declarator -> '[' constant_expression <*> ']' }

s102 = { direct_abstract_declarator -> '[' constant_expression ']' <*> }

s103 = { direct_abstract_declarator -> direct_abstract_declarator '(' ')' <*> }

s104 = { direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list <*> ')' }

s105 = { direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')' <*> }

s106 = { direct_abstract_declarator -> direct_abstract_declarator '[' ']' <*> }

s107 = { direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression <*> ']' }

s108 = { direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']' <*> }

s109 = { direct_declarator -> '(' declarator <*> ')' }

s110 = { direct_declarator -> '(' declarator ')' <*> }

s111 = { direct_declarator -> IDENTIFIER <*> }

s112 = { direct_declarator -> direct_declarator '(' ')' <*> }

s113 = { direct_declarator -> direct_declarator '(' identifier_list <*> ')',
         identifier_list -> identifier_list <*> ',' IDENTIFIER
       }

s114 = { direct_declarator -> direct_declarator '(' identifier_list ')' <*> }

s115 = { direct_declarator -> direct_declarator '(' parameter_type_list <*> ')' }

s116 = { direct_declarator -> direct_declarator '(' parameter_type_list ')' <*> }

s117 = { direct_declarator -> direct_declarator '[' ']' <*> }

s118 = { direct_declarator -> direct_declarator '[' constant_expression <*> ']' }

s119 = { direct_declarator -> direct_declarator '[' constant_expression ']' <*> }

s120 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         specifier_qualifier_list -> <*> type_qualifier,
         specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list,
         specifier_qualifier_list -> <*> type_specifier,
         specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list,
         specifier_qualifier_list -> type_qualifier <*>,
         specifier_qualifier_list -> type_qualifier <*> specifier_qualifier_list,
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s121 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         specifier_qualifier_list -> <*> type_qualifier,
         specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list,
         specifier_qualifier_list -> <*> type_specifier,
         specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list,
         specifier_qualifier_list -> type_specifier <*>,
         specifier_qualifier_list -> type_specifier <*> specifier_qualifier_list,
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s122 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         specifier_qualifier_list -> <*> type_qualifier,
         specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list,
         specifier_qualifier_list -> <*> type_specifier,
         specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list,
         struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';',
         struct_declaration_list -> <*> struct_declaration,
         struct_declaration_list -> <*> struct_declaration_list struct_declaration,
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         struct_or_union_specifier -> struct_or_union '{' <*> struct_declaration_list '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s123 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         specifier_qualifier_list -> <*> type_qualifier,
         specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list,
         specifier_qualifier_list -> <*> type_specifier,
         specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list,
         struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';',
         struct_declaration_list -> <*> struct_declaration,
         struct_declaration_list -> <*> struct_declaration_list struct_declaration,
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         struct_or_union_specifier -> struct_or_union IDENTIFIER '{' <*> struct_declaration_list '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s124 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         specifier_qualifier_list -> <*> type_qualifier,
         specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list,
         specifier_qualifier_list -> <*> type_specifier,
         specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list,
         struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';',
         struct_declaration_list -> struct_declaration_list <*> struct_declaration,
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         struct_or_union_specifier -> struct_or_union '{' struct_declaration_list <*> '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s125 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         specifier_qualifier_list -> <*> type_qualifier,
         specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list,
         specifier_qualifier_list -> <*> type_specifier,
         specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list,
         struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';',
         struct_declaration_list -> struct_declaration_list <*> struct_declaration,
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list <*> '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s126 = { enum_specifier -> 'enum' <*> '{' enumerator_list '}',
         enum_specifier -> 'enum' <*> IDENTIFIER,
         enum_specifier -> 'enum' <*> IDENTIFIER '{' enumerator_list '}'
       }

s127 = { enum_specifier -> 'enum' '{' <*> enumerator_list '}',
         enumerator -> <*> IDENTIFIER,
         enumerator -> <*> IDENTIFIER '=' constant_expression,
         enumerator_list -> <*> enumerator,
         enumerator_list -> <*> enumerator_list ',' enumerator
       }

s128 = { enum_specifier -> 'enum' '{' enumerator_list <*> '}',
         enumerator_list -> enumerator_list <*> ',' enumerator
       }

s129 = { enum_specifier -> 'enum' '{' enumerator_list '}' <*> }

s130 = { enum_specifier -> 'enum' IDENTIFIER <*>,
         enum_specifier -> 'enum' IDENTIFIER <*> '{' enumerator_list '}'
       }

s131 = { enum_specifier -> 'enum' IDENTIFIER '{' <*> enumerator_list '}',
         enumerator -> <*> IDENTIFIER,
         enumerator -> <*> IDENTIFIER '=' constant_expression,
         enumerator_list -> <*> enumerator,
         enumerator_list -> <*> enumerator_list ',' enumerator
       }

s132 = { enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list <*> '}',
         enumerator_list -> enumerator_list <*> ',' enumerator
       }

s133 = { enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}' <*> }

s134 = { enumerator -> <*> IDENTIFIER,
         enumerator -> <*> IDENTIFIER '=' constant_expression,
         enumerator_list -> enumerator_list ',' <*> enumerator
       }

s135 = { enumerator -> IDENTIFIER <*>,
         enumerator -> IDENTIFIER <*> '=' constant_expression
       }

s136 = { enumerator -> IDENTIFIER '=' constant_expression <*> }

s137 = { enumerator_list -> enumerator <*> }

s138 = { enumerator_list -> enumerator_list ',' enumerator <*> }

s139 = { equality_expression -> equality_expression '!=' relational_expression <*>,
         relational_expression -> relational_expression <*> '<' shift_expression,
         relational_expression -> relational_expression <*> '<=' shift_expression,
         relational_expression -> relational_expression <*> '>' shift_expression,
         relational_expression -> relational_expression <*> '>=' shift_expression
       }

s140 = { equality_expression -> equality_expression '==' relational_expression <*>,
         relational_expression -> relational_expression <*> '<' shift_expression,
         relational_expression -> relational_expression <*> '<=' shift_expression,
         relational_expression -> relational_expression <*> '>' shift_expression,
         relational_expression -> relational_expression <*> '>=' shift_expression
       }

s141 = { equality_expression -> relational_expression <*>,
         relational_expression -> relational_expression <*> '<' shift_expression,
         relational_expression -> relational_expression <*> '<=' shift_expression,
         relational_expression -> relational_expression <*> '>' shift_expression,
         relational_expression -> relational_expression <*> '>=' shift_expression
       }

s142 = { exclusive_or_expression -> exclusive_or_expression <*> '^' and_expression,
         inclusive_or_expression -> exclusive_or_expression <*>
       }

s143 = { exclusive_or_expression -> exclusive_or_expression <*> '^' and_expression,
         inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression <*>
       }

s144 = { expression -> assignment_expression <*> }

s145 = { expression -> expression <*> ',' assignment_expression,
         postfix_expression -> postfix_expression '[' expression <*> ']'
       }

s146 = { expression -> expression <*> ',' assignment_expression,
         primary_expression -> '(' expression <*> ')'
       }

s147 = { expression -> expression ',' assignment_expression <*> }

s148 = { identifier_list -> IDENTIFIER <*> }

s149 = { identifier_list -> identifier_list ',' <*> IDENTIFIER }

s150 = { identifier_list -> identifier_list ',' IDENTIFIER <*> }

s151 = { inclusive_or_expression -> inclusive_or_expression <*> '|' exclusive_or_expression,
         logical_and_expression -> inclusive_or_expression <*>
       }

s152 = { inclusive_or_expression -> inclusive_or_expression <*> '|' exclusive_or_expression,
         logical_and_expression -> logical_and_expression '&&' inclusive_or_expression <*>
       }

s153 = { logical_and_expression -> logical_and_expression <*> '&&' inclusive_or_expression,
         logical_or_expression -> logical_and_expression <*>
       }

s154 = { logical_and_expression -> logical_and_expression <*> '&&' inclusive_or_expression,
         logical_or_expression -> logical_or_expression '||' logical_and_expression <*>
       }

s155 = { multiplicative_expression -> cast_expression <*> }

s156 = { multiplicative_expression -> multiplicative_expression '%' cast_expression <*> }

s157 = { multiplicative_expression -> multiplicative_expression '*' cast_expression <*> }

s158 = { multiplicative_expression -> multiplicative_expression '/' cast_expression <*> }

s159 = { parameter_declaration -> declaration_specifiers abstract_declarator <*> }

s160 = { parameter_declaration -> declaration_specifiers declarator <*> }

s161 = { parameter_list -> parameter_declaration <*> }

s162 = { parameter_list -> parameter_list <*> ',' parameter_declaration,
         parameter_type_list -> parameter_list <*>,
         parameter_type_list -> parameter_list <*> ',' '...'
       }

s163 = { parameter_list -> parameter_list ',' parameter_declaration <*> }

s164 = { parameter_type_list -> parameter_list ',' '...' <*> }

s165 = { pointer -> <*> '*',
         pointer -> <*> '*' pointer,
         pointer -> <*> '*' type_qualifier_list,
         pointer -> <*> '*' type_qualifier_list pointer,
         pointer -> '*' <*>,
         pointer -> '*' <*> pointer,
         pointer -> '*' <*> type_qualifier_list,
         pointer -> '*' <*> type_qualifier_list pointer,
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_qualifier_list -> <*> type_qualifier,
         type_qualifier_list -> <*> type_qualifier_list type_qualifier
       }

s166 = { pointer -> <*> '*',
         pointer -> <*> '*' pointer,
         pointer -> <*> '*' type_qualifier_list,
         pointer -> <*> '*' type_qualifier_list pointer,
         pointer -> '*' type_qualifier_list <*>,
         pointer -> '*' type_qualifier_list <*> pointer,
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_qualifier_list -> type_qualifier_list <*> type_qualifier
       }

s167 = { pointer -> '*' pointer <*> }

s168 = { pointer -> '*' type_qualifier_list pointer <*> }

s169 = { postfix_expression -> <*> postfix_expression '(' ')',
         postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
         postfix_expression -> <*> postfix_expression '++',
         postfix_expression -> <*> postfix_expression '--',
         postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
         postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
         postfix_expression -> <*> postfix_expression '[' expression ']',
         postfix_expression -> <*> primary_expression,
         primary_expression -> <*> '(' expression ')',
         primary_expression -> <*> CONSTANT,
         primary_expression -> <*> IDENTIFIER,
         primary_expression -> <*> STRING_LITERAL,
         unary_expression -> <*> '++' unary_expression,
         unary_expression -> <*> '--' unary_expression,
         unary_expression -> <*> 'sizeof' '(' type_name ')',
         unary_expression -> <*> 'sizeof' unary_expression,
         unary_expression -> <*> postfix_expression,
         unary_expression -> <*> unary_operator cast_expression,
         unary_expression -> '++' <*> unary_expression,
         unary_operator -> <*> '!',
         unary_operator -> <*> '&',
         unary_operator -> <*> '*',
         unary_operator -> <*> '+',
         unary_operator -> <*> '-',
         unary_operator -> <*> '~'
       }

s170 = { postfix_expression -> <*> postfix_expression '(' ')',
         postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
         postfix_expression -> <*> postfix_expression '++',
         postfix_expression -> <*> postfix_expression '--',
         postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
         postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
         postfix_expression -> <*> postfix_expression '[' expression ']',
         postfix_expression -> <*> primary_expression,
         primary_expression -> <*> '(' expression ')',
         primary_expression -> <*> CONSTANT,
         primary_expression -> <*> IDENTIFIER,
         primary_expression -> <*> STRING_LITERAL,
         unary_expression -> <*> '++' unary_expression,
         unary_expression -> <*> '--' unary_expression,
         unary_expression -> <*> 'sizeof' '(' type_name ')',
         unary_expression -> <*> 'sizeof' unary_expression,
         unary_expression -> <*> postfix_expression,
         unary_expression -> <*> unary_operator cast_expression,
         unary_expression -> '--' <*> unary_expression,
         unary_operator -> <*> '!',
         unary_operator -> <*> '&',
         unary_operator -> <*> '*',
         unary_operator -> <*> '+',
         unary_operator -> <*> '-',
         unary_operator -> <*> '~'
       }

s171 = { postfix_expression -> <*> postfix_expression '(' ')',
         postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
         postfix_expression -> <*> postfix_expression '++',
         postfix_expression -> <*> postfix_expression '--',
         postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
         postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
         postfix_expression -> <*> postfix_expression '[' expression ']',
         postfix_expression -> <*> primary_expression,
         primary_expression -> <*> '(' expression ')',
         primary_expression -> <*> CONSTANT,
         primary_expression -> <*> IDENTIFIER,
         primary_expression -> <*> STRING_LITERAL,
         unary_expression -> <*> '++' unary_expression,
         unary_expression -> <*> '--' unary_expression,
         unary_expression -> <*> 'sizeof' '(' type_name ')',
         unary_expression -> <*> 'sizeof' unary_expression,
         unary_expression -> <*> postfix_expression,
         unary_expression -> <*> unary_operator cast_expression,
         unary_expression -> 'sizeof' <*> '(' type_name ')',
         unary_expression -> 'sizeof' <*> unary_expression,
         unary_operator -> <*> '!',
         unary_operator -> <*> '&',
         unary_operator -> <*> '*',
         unary_operator -> <*> '+',
         unary_operator -> <*> '-',
         unary_operator -> <*> '~'
       }

s172 = { postfix_expression -> postfix_expression <*> '(' ')',
         postfix_expression -> postfix_expression <*> '(' argument_expression_list ')',
         postfix_expression -> postfix_expression <*> '++',
         postfix_expression -> postfix_expression <*> '--',
         postfix_expression -> postfix_expression <*> '->' IDENTIFIER,
         postfix_expression -> postfix_expression <*> '.' IDENTIFIER,
         postfix_expression -> postfix_expression <*> '[' expression ']',
         unary_expression -> postfix_expression <*>
       }

s173 = { postfix_expression -> postfix_expression '(' ')' <*> }

s174 = { postfix_expression -> postfix_expression '(' argument_expression_list ')' <*> }

s175 = { postfix_expression -> postfix_expression '++' <*> }

s176 = { postfix_expression -> postfix_expression '--' <*> }

s177 = { postfix_expression -> postfix_expression '->' <*> IDENTIFIER }

s178 = { postfix_expression -> postfix_expression '->' IDENTIFIER <*> }

s179 = { postfix_expression -> postfix_expression '.' <*> IDENTIFIER }

s180 = { postfix_expression -> postfix_expression '.' IDENTIFIER <*> }

s181 = { postfix_expression -> postfix_expression '[' expression ']' <*> }

s182 = { postfix_expression -> primary_expression <*> }

s183 = { primary_expression -> '(' expression ')' <*> }

s184 = { primary_expression -> CONSTANT <*> }

s185 = { primary_expression -> IDENTIFIER <*> }

s186 = { primary_expression -> STRING_LITERAL <*> }

s187 = { relational_expression -> relational_expression '<' shift_expression <*>,
         shift_expression -> shift_expression <*> '<<' additive_expression,
         shift_expression -> shift_expression <*> '>>' additive_expression
       }

s188 = { relational_expression -> relational_expression '<=' shift_expression <*>,
         shift_expression -> shift_expression <*> '<<' additive_expression,
         shift_expression -> shift_expression <*> '>>' additive_expression
       }

s189 = { relational_expression -> relational_expression '>' shift_expression <*>,
         shift_expression -> shift_expression <*> '<<' additive_expression,
         shift_expression -> shift_expression <*> '>>' additive_expression
       }

s190 = { relational_expression -> relational_expression '>=' shift_expression <*>,
         shift_expression -> shift_expression <*> '<<' additive_expression,
         shift_expression -> shift_expression <*> '>>' additive_expression
       }

s191 = { relational_expression -> shift_expression <*>,
         shift_expression -> shift_expression <*> '<<' additive_expression,
         shift_expression -> shift_expression <*> '>>' additive_expression
       }

s192 = { specifier_qualifier_list -> type_qualifier specifier_qualifier_list <*> }

s193 = { specifier_qualifier_list -> type_specifier specifier_qualifier_list <*> }

s194 = { storage_class_specifier -> 'auto' <*> }

s195 = { storage_class_specifier -> 'extern' <*> }

s196 = { storage_class_specifier -> 'register' <*> }

s197 = { storage_class_specifier -> 'static' <*> }

s198 = { storage_class_specifier -> 'typedef' <*> }

s199 = { struct_declaration -> specifier_qualifier_list struct_declarator_list <*> ';',
         struct_declarator_list -> struct_declarator_list <*> ',' struct_declarator
       }

s200 = { struct_declaration -> specifier_qualifier_list struct_declarator_list ';' <*> }

s201 = { struct_declaration_list -> struct_declaration <*> }

s202 = { struct_declaration_list -> struct_declaration_list struct_declaration <*> }

s203 = { struct_declarator -> ':' constant_expression <*> }

s204 = { struct_declarator -> declarator <*>,
         struct_declarator -> declarator <*> ':' constant_expression
       }

s205 = { struct_declarator -> declarator ':' constant_expression <*> }

s206 = { struct_declarator_list -> struct_declarator <*> }

s207 = { struct_declarator_list -> struct_declarator_list ',' struct_declarator <*> }

s208 = { struct_or_union -> 'struct' <*> }

s209 = { struct_or_union -> 'union' <*> }

s210 = { struct_or_union_specifier -> struct_or_union <*> '{' struct_declaration_list '}',
         struct_or_union_specifier -> struct_or_union <*> IDENTIFIER,
         struct_or_union_specifier -> struct_or_union <*> IDENTIFIER '{' struct_declaration_list '}'
       }

s211 = { struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}' <*> }

s212 = { struct_or_union_specifier -> struct_or_union IDENTIFIER <*>,
         struct_or_union_specifier -> struct_or_union IDENTIFIER <*> '{' struct_declaration_list '}'
       }

s213 = { struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}' <*> }

s214 = { type_name -> specifier_qualifier_list abstract_declarator <*> }

s215 = { type_qualifier -> 'const' <*> }

s216 = { type_qualifier -> 'volatile' <*> }

s217 = { type_qualifier_list -> type_qualifier <*> }

s218 = { type_qualifier_list -> type_qualifier_list type_qualifier <*> }

s219 = { type_specifier -> 'char' <*> }

s220 = { type_specifier -> 'double' <*> }

s221 = { type_specifier -> 'float' <*> }

s222 = { type_specifier -> 'int' <*> }

s223 = { type_specifier -> 'long' <*> }

s224 = { type_specifier -> 'short' <*> }

s225 = { type_specifier -> 'signed' <*> }

s226 = { type_specifier -> 'unsigned' <*> }

s227 = { type_specifier -> 'void' <*> }

s228 = { type_specifier -> TYPE_NAME <*> }

s229 = { type_specifier -> enum_specifier <*> }

s230 = { type_specifier -> struct_or_union_specifier <*> }

s231 = { unary_expression -> '++' unary_expression <*> }

s232 = { unary_expression -> '--' unary_expression <*> }

s233 = { unary_expression -> 'sizeof' '(' type_name <*> ')' }

s234 = { unary_expression -> 'sizeof' '(' type_name ')' <*> }

s235 = { unary_expression -> 'sizeof' unary_expression <*> }

s236 = { unary_expression -> unary_operator cast_expression <*> }

s237 = { unary_operator -> '!' <*> }

s238 = { unary_operator -> '&' <*> }

s239 = { unary_operator -> '*' <*> }

s240 = { unary_operator -> '+' <*> }

s241 = { unary_operator -> '-' <*> }

s242 = { unary_operator -> '~' <*> }

Action Table:
action(s0, '(') = <shift, s17>
action(s0, CONSTANT) = <shift, s184>
action(s0, IDENTIFIER) = <shift, s185>
action(s0, STRING_LITERAL) = <shift, s186>
action(s1, $) = <accept>
action(s2, '(') = <shift, s2>
action(s2, ')') = <shift, s95>
action(s2, '*') = <shift, s165>
action(s2, '[') = <shift, s20>
action(s2, 'auto') = <shift, s194>
action(s2, 'char') = <shift, s219>
action(s2, 'const') = <shift, s215>
action(s2, 'double') = <shift, s220>
action(s2, 'enum') = <shift, s126>
action(s2, 'extern') = <shift, s195>
action(s2, 'float') = <shift, s221>
action(s2, 'int') = <shift, s222>
action(s2, 'long') = <shift, s223>
action(s2, 'register') = <shift, s196>
action(s2, 'short') = <shift, s224>
action(s2, 'signed') = <shift, s225>
action(s2, 'static') = <shift, s197>
action(s2, 'struct') = <shift, s208>
action(s2, 'typedef') = <shift, s198>
action(s2, 'union') = <shift, s209>
action(s2, 'unsigned') = <shift, s226>
action(s2, 'void') = <shift, s227>
action(s2, 'volatile') = <shift, s216>
action(s2, IDENTIFIER) = <shift, s111>
action(s2, TYPE_NAME) = <shift, s228>
action(s3, '(') = <shift, s3>
action(s3, ')') = <shift, s95>
action(s3, '*') = <shift, s165>
action(s3, '[') = <shift, s20>
action(s3, 'auto') = <shift, s194>
action(s3, 'char') = <shift, s219>
action(s3, 'const') = <shift, s215>
action(s3, 'double') = <shift, s220>
action(s3, 'enum') = <shift, s126>
action(s3, 'extern') = <shift, s195>
action(s3, 'float') = <shift, s221>
action(s3, 'int') = <shift, s222>
action(s3, 'long') = <shift, s223>
action(s3, 'register') = <shift, s196>
action(s3, 'short') = <shift, s224>
action(s3, 'signed') = <shift, s225>
action(s3, 'static') = <shift, s197>
action(s3, 'struct') = <shift, s208>
action(s3, 'typedef') = <shift, s198>
action(s3, 'union') = <shift, s209>
action(s3, 'unsigned') = <shift, s226>
action(s3, 'void') = <shift, s227>
action(s3, 'volatile') = <shift, s216>
action(s3, TYPE_NAME) = <shift, s228>
action(s4, '(') = <shift, s2>
action(s4, ')') = <reduce, parameter_declaration -> declaration_specifiers>
action(s4, '*') = <shift, s165>
action(s4, ',') = <reduce, parameter_declaration -> declaration_specifiers>
action(s4, '[') = <shift, s20>
action(s4, IDENTIFIER) = <shift, s111>
action(s5, '(') = <shift, s3>
action(s5, ')') = <reduce, type_name -> specifier_qualifier_list>
action(s5, '*') = <shift, s165>
action(s5, '[') = <shift, s20>
action(s6, '(') = <shift, s83>
action(s6, ')') = <reduce, abstract_declarator -> direct_abstract_declarator>
action(s6, ',') = <reduce, abstract_declarator -> direct_abstract_declarator>
action(s6, '[') = <shift, s21>
action(s7, '(') = <shift, s2>
action(s7, ')') = <reduce, abstract_declarator -> pointer>
action(s7, ',') = <reduce, abstract_declarator -> pointer>
action(s7, '[') = <shift, s20>
action(s7, IDENTIFIER) = <shift, s111>
action(s8, '(') = <shift, s3>
action(s8, ')') = <reduce, abstract_declarator -> pointer>
action(s8, ',') = <reduce, abstract_declarator -> pointer>
action(s8, '[') = <shift, s20>
action(s9, '(') = <shift, s83>
action(s9, ')') = <reduce, abstract_declarator -> pointer direct_abstract_declarator>
action(s9, ',') = <reduce, abstract_declarator -> pointer direct_abstract_declarator>
action(s9, '[') = <shift, s21>
action(s10, '!') = <shift, s237>
action(s10, '&') = <shift, s238>
action(s10, '(') = <shift, s13>
action(s10, ')') = <shift, s173>
action(s10, '*') = <shift, s239>
action(s10, '+') = <shift, s240>
action(s10, '++') = <shift, s169>
action(s10, '-') = <shift, s241>
action(s10, '--') = <shift, s170>
action(s10, 'sizeof') = <shift, s171>
action(s10, '~') = <shift, s242>
action(s10, CONSTANT) = <shift, s184>
action(s10, IDENTIFIER) = <shift, s185>
action(s10, STRING_LITERAL) = <shift, s186>
action(s11, '!') = <shift, s237>
action(s11, '&') = <shift, s238>
action(s11, '(') = <shift, s13>
action(s11, '*') = <shift, s239>
action(s11, '+') = <shift, s240>
action(s11, '++') = <shift, s169>
action(s11, '-') = <shift, s241>
action(s11, '--') = <shift, s170>
action(s11, 'sizeof') = <shift, s171>
action(s11, '~') = <shift, s242>
action(s11, CONSTANT) = <shift, s184>
action(s11, IDENTIFIER) = <shift, s185>
action(s11, STRING_LITERAL) = <shift, s186>
action(s12, '!') = <shift, s237>
action(s12, '&') = <shift, s238>
action(s12, '(') = <shift, s13>
action(s12, '*') = <shift, s239>
action(s12, '+') = <shift, s240>
action(s12, '++') = <shift, s169>
action(s12, '-') = <shift, s241>
action(s12, '--') = <shift, s170>
action(s12, 'sizeof') = <shift, s171>
action(s12, '~') = <shift, s242>
action(s12, CONSTANT) = <shift, s184>
action(s12, IDENTIFIER) = <shift, s185>
action(s12, STRING_LITERAL) = <shift, s186>
action(s13, '!') = <shift, s237>
action(s13, '&') = <shift, s238>
action(s13, '(') = <shift, s13>
action(s13, '*') = <shift, s239>
action(s13, '+') = <shift, s240>
action(s13, '++') = <shift, s169>
action(s13, '-') = <shift, s241>
action(s13, '--') = <shift, s170>
action(s13, 'char') = <shift, s219>
action(s13, 'const') = <shift, s215>
action(s13, 'double') = <shift, s220>
action(s13, 'enum') = <shift, s126>
action(s13, 'float') = <shift, s221>
action(s13, 'int') = <shift, s222>
action(s13, 'long') = <shift, s223>
action(s13, 'short') = <shift, s224>
action(s13, 'signed') = <shift, s225>
action(s13, 'sizeof') = <shift, s171>
action(s13, 'struct') = <shift, s208>
action(s13, 'union') = <shift, s209>
action(s13, 'unsigned') = <shift, s226>
action(s13, 'void') = <shift, s227>
action(s13, 'volatile') = <shift, s216>
action(s13, '~') = <shift, s242>
action(s13, CONSTANT) = <shift, s184>
action(s13, IDENTIFIER) = <shift, s185>
action(s13, STRING_LITERAL) = <shift, s186>
action(s13, TYPE_NAME) = <shift, s228>
action(s14, '!') = <shift, s237>
action(s14, '&') = <shift, s238>
action(s14, '(') = <shift, s13>
action(s14, '*') = <shift, s239>
action(s14, '+') = <shift, s240>
action(s14, '++') = <shift, s169>
action(s14, '-') = <shift, s241>
action(s14, '--') = <shift, s170>
action(s14, 'sizeof') = <shift, s171>
action(s14, '~') = <shift, s242>
action(s14, CONSTANT) = <shift, s184>
action(s14, IDENTIFIER) = <shift, s185>
action(s14, STRING_LITERAL) = <shift, s186>
action(s15, '!') = <shift, s237>
action(s15, '&') = <shift, s238>
action(s15, '(') = <shift, s13>
action(s15, '*') = <shift, s239>
action(s15, '+') = <shift, s240>
action(s15, '++') = <shift, s169>
action(s15, '-') = <shift, s241>
action(s15, '--') = <shift, s170>
action(s15, 'char') = <shift, s219>
action(s15, 'const') = <shift, s215>
action(s15, 'double') = <shift, s220>
action(s15, 'enum') = <shift, s126>
action(s15, 'float') = <shift, s221>
action(s15, 'int') = <shift, s222>
action(s15, 'long') = <shift, s223>
action(s15, 'short') = <shift, s224>
action(s15, 'signed') = <shift, s225>
action(s15, 'sizeof') = <shift, s171>
action(s15, 'struct') = <shift, s208>
action(s15, 'union') = <shift, s209>
action(s15, 'unsigned') = <shift, s226>
action(s15, 'void') = <shift, s227>
action(s15, 'volatile') = <shift, s216>
action(s15, '~') = <shift, s242>
action(s15, CONSTANT) = <shift, s184>
action(s15, IDENTIFIER) = <shift, s185>
action(s15, STRING_LITERAL) = <shift, s186>
action(s15, TYPE_NAME) = <shift, s228>
action(s16, '!') = <shift, s237>
action(s16, '&') = <shift, s238>
action(s16, '(') = <shift, s13>
action(s16, '*') = <shift, s239>
action(s16, '+') = <shift, s240>
action(s16, '++') = <shift, s169>
action(s16, '-') = <shift, s241>
action(s16, '--') = <shift, s170>
action(s16, 'sizeof') = <shift, s171>
action(s16, '~') = <shift, s242>
action(s16, CONSTANT) = <shift, s184>
action(s16, IDENTIFIER) = <shift, s185>
action(s16, STRING_LITERAL) = <shift, s186>
action(s17, '!') = <shift, s237>
action(s17, '&') = <shift, s238>
action(s17, '(') = <shift, s13>
action(s17, '*') = <shift, s239>
action(s17, '+') = <shift, s240>
action(s17, '++') = <shift, s169>
action(s17, '-') = <shift, s241>
action(s17, '--') = <shift, s170>
action(s17, 'sizeof') = <shift, s171>
action(s17, '~') = <shift, s242>
action(s17, CONSTANT) = <shift, s184>
action(s17, IDENTIFIER) = <shift, s185>
action(s17, STRING_LITERAL) = <shift, s186>
action(s18, '!') = <shift, s237>
action(s18, '&') = <shift, s238>
action(s18, '(') = <shift, s13>
action(s18, '*') = <shift, s239>
action(s18, '+') = <shift, s240>
action(s18, '++') = <shift, s169>
action(s18, '-') = <shift, s241>
action(s18, '--') = <shift, s170>
action(s18, 'sizeof') = <shift, s171>
action(s18, '~') = <shift, s242>
action(s18, CONSTANT) = <shift, s184>
action(s18, IDENTIFIER) = <shift, s185>
action(s18, STRING_LITERAL) = <shift, s186>
action(s19, '!') = <shift, s237>
action(s19, '&') = <shift, s238>
action(s19, '(') = <shift, s13>
action(s19, '*') = <shift, s239>
action(s19, '+') = <shift, s240>
action(s19, '++') = <shift, s169>
action(s19, '-') = <shift, s241>
action(s19, '--') = <shift, s170>
action(s19, 'sizeof') = <shift, s171>
action(s19, '~') = <shift, s242>
action(s19, CONSTANT) = <shift, s184>
action(s19, IDENTIFIER) = <shift, s185>
action(s19, STRING_LITERAL) = <shift, s186>
action(s20, '!') = <shift, s237>
action(s20, '&') = <shift, s238>
action(s20, '(') = <shift, s13>
action(s20, '*') = <shift, s239>
action(s20, '+') = <shift, s240>
action(s20, '++') = <shift, s169>
action(s20, '-') = <shift, s241>
action(s20, '--') = <shift, s170>
action(s20, ']') = <shift, s100>
action(s20, 'sizeof') = <shift, s171>
action(s20, '~') = <shift, s242>
action(s20, CONSTANT) = <shift, s184>
action(s20, IDENTIFIER) = <shift, s185>
action(s20, STRING_LITERAL) = <shift, s186>
action(s21, '!') = <shift, s237>
action(s21, '&') = <shift, s238>
action(s21, '(') = <shift, s13>
action(s21, '*') = <shift, s239>
action(s21, '+') = <shift, s240>
action(s21, '++') = <shift, s169>
action(s21, '-') = <shift, s241>
action(s21, '--') = <shift, s170>
action(s21, ']') = <shift, s106>
action(s21, 'sizeof') = <shift, s171>
action(s21, '~') = <shift, s242>
action(s21, CONSTANT) = <shift, s184>
action(s21, IDENTIFIER) = <shift, s185>
action(s21, STRING_LITERAL) = <shift, s186>
action(s22, '!') = <shift, s237>
action(s22, '&') = <shift, s238>
action(s22, '(') = <shift, s13>
action(s22, '*') = <shift, s239>
action(s22, '+') = <shift, s240>
action(s22, '++') = <shift, s169>
action(s22, '-') = <shift, s241>
action(s22, '--') = <shift, s170>
action(s22, ']') = <shift, s117>
action(s22, 'sizeof') = <shift, s171>
action(s22, '~') = <shift, s242>
action(s22, CONSTANT) = <shift, s184>
action(s22, IDENTIFIER) = <shift, s185>
action(s22, STRING_LITERAL) = <shift, s186>
action(s23, '!') = <shift, s237>
action(s23, '&') = <shift, s238>
action(s23, '(') = <shift, s13>
action(s23, '*') = <shift, s239>
action(s23, '+') = <shift, s240>
action(s23, '++') = <shift, s169>
action(s23, '-') = <shift, s241>
action(s23, '--') = <shift, s170>
action(s23, 'sizeof') = <shift, s171>
action(s23, '~') = <shift, s242>
action(s23, CONSTANT) = <shift, s184>
action(s23, IDENTIFIER) = <shift, s185>
action(s23, STRING_LITERAL) = <shift, s186>
action(s24, '!') = <shift, s237>
action(s24, '&') = <shift, s238>
action(s24, '(') = <shift, s13>
action(s24, '*') = <shift, s239>
action(s24, '+') = <shift, s240>
action(s24, '++') = <shift, s169>
action(s24, '-') = <shift, s241>
action(s24, '--') = <shift, s170>
action(s24, 'sizeof') = <shift, s171>
action(s24, '~') = <shift, s242>
action(s24, CONSTANT) = <shift, s184>
action(s24, IDENTIFIER) = <shift, s185>
action(s24, STRING_LITERAL) = <shift, s186>
action(s25, '!') = <shift, s237>
action(s25, '&') = <shift, s238>
action(s25, '(') = <shift, s13>
action(s25, '*') = <shift, s239>
action(s25, '+') = <shift, s240>
action(s25, '++') = <shift, s169>
action(s25, '-') = <shift, s241>
action(s25, '--') = <shift, s170>
action(s25, 'sizeof') = <shift, s171>
action(s25, '~') = <shift, s242>
action(s25, CONSTANT) = <shift, s184>
action(s25, IDENTIFIER) = <shift, s185>
action(s25, STRING_LITERAL) = <shift, s186>
action(s26, '!') = <shift, s237>
action(s26, '&') = <shift, s238>
action(s26, '(') = <shift, s13>
action(s26, '*') = <shift, s239>
action(s26, '+') = <shift, s240>
action(s26, '++') = <shift, s169>
action(s26, '-') = <shift, s241>
action(s26, '--') = <shift, s170>
action(s26, 'sizeof') = <shift, s171>
action(s26, '~') = <shift, s242>
action(s26, CONSTANT) = <shift, s184>
action(s26, IDENTIFIER) = <shift, s185>
action(s26, STRING_LITERAL) = <shift, s186>
action(s27, '!') = <shift, s237>
action(s27, '&') = <shift, s238>
action(s27, '(') = <shift, s13>
action(s27, '*') = <shift, s239>
action(s27, '+') = <shift, s240>
action(s27, '++') = <shift, s169>
action(s27, '-') = <shift, s241>
action(s27, '--') = <shift, s170>
action(s27, 'sizeof') = <shift, s171>
action(s27, '~') = <shift, s242>
action(s27, CONSTANT) = <shift, s184>
action(s27, IDENTIFIER) = <shift, s185>
action(s27, STRING_LITERAL) = <shift, s186>
action(s28, '!') = <shift, s237>
action(s28, '&') = <shift, s238>
action(s28, '(') = <shift, s13>
action(s28, '*') = <shift, s239>
action(s28, '+') = <shift, s240>
action(s28, '++') = <shift, s169>
action(s28, '-') = <shift, s241>
action(s28, '--') = <shift, s170>
action(s28, 'sizeof') = <shift, s171>
action(s28, '~') = <shift, s242>
action(s28, CONSTANT) = <shift, s184>
action(s28, IDENTIFIER) = <shift, s185>
action(s28, STRING_LITERAL) = <shift, s186>
action(s29, '!') = <shift, s237>
action(s29, '&') = <shift, s238>
action(s29, '(') = <shift, s13>
action(s29, '*') = <shift, s239>
action(s29, '+') = <shift, s240>
action(s29, '++') = <shift, s169>
action(s29, '-') = <shift, s241>
action(s29, '--') = <shift, s170>
action(s29, 'sizeof') = <shift, s171>
action(s29, '~') = <shift, s242>
action(s29, CONSTANT) = <shift, s184>
action(s29, IDENTIFIER) = <shift, s185>
action(s29, STRING_LITERAL) = <shift, s186>
action(s30, '!') = <shift, s237>
action(s30, '&') = <shift, s238>
action(s30, '(') = <shift, s13>
action(s30, '*') = <shift, s239>
action(s30, '+') = <shift, s240>
action(s30, '++') = <shift, s169>
action(s30, '-') = <shift, s241>
action(s30, '--') = <shift, s170>
action(s30, 'sizeof') = <shift, s171>
action(s30, '~') = <shift, s242>
action(s30, CONSTANT) = <shift, s184>
action(s30, IDENTIFIER) = <shift, s185>
action(s30, STRING_LITERAL) = <shift, s186>
action(s31, '!') = <shift, s237>
action(s31, '&') = <shift, s238>
action(s31, '(') = <shift, s13>
action(s31, '*') = <shift, s239>
action(s31, '+') = <shift, s240>
action(s31, '++') = <shift, s169>
action(s31, '-') = <shift, s241>
action(s31, '--') = <shift, s170>
action(s31, 'sizeof') = <shift, s171>
action(s31, '~') = <shift, s242>
action(s31, CONSTANT) = <shift, s184>
action(s31, IDENTIFIER) = <shift, s185>
action(s31, STRING_LITERAL) = <shift, s186>
action(s32, '!') = <shift, s237>
action(s32, '&') = <shift, s238>
action(s32, '(') = <shift, s13>
action(s32, '*') = <shift, s239>
action(s32, '+') = <shift, s240>
action(s32, '++') = <shift, s169>
action(s32, '-') = <shift, s241>
action(s32, '--') = <shift, s170>
action(s32, 'sizeof') = <shift, s171>
action(s32, '~') = <shift, s242>
action(s32, CONSTANT) = <shift, s184>
action(s32, IDENTIFIER) = <shift, s185>
action(s32, STRING_LITERAL) = <shift, s186>
action(s33, '!') = <shift, s237>
action(s33, '&') = <shift, s238>
action(s33, '(') = <shift, s13>
action(s33, '*') = <shift, s239>
action(s33, '+') = <shift, s240>
action(s33, '++') = <shift, s169>
action(s33, '-') = <shift, s241>
action(s33, '--') = <shift, s170>
action(s33, 'sizeof') = <shift, s171>
action(s33, '~') = <shift, s242>
action(s33, CONSTANT) = <shift, s184>
action(s33, IDENTIFIER) = <shift, s185>
action(s33, STRING_LITERAL) = <shift, s186>
action(s34, '!') = <shift, s237>
action(s34, '&') = <shift, s238>
action(s34, '(') = <shift, s13>
action(s34, '*') = <shift, s239>
action(s34, '+') = <shift, s240>
action(s34, '++') = <shift, s169>
action(s34, '-') = <shift, s241>
action(s34, '--') = <shift, s170>
action(s34, 'sizeof') = <shift, s171>
action(s34, '~') = <shift, s242>
action(s34, CONSTANT) = <shift, s184>
action(s34, IDENTIFIER) = <shift, s185>
action(s34, STRING_LITERAL) = <shift, s186>
action(s35, '!') = <shift, s237>
action(s35, '&') = <shift, s238>
action(s35, '(') = <shift, s13>
action(s35, '*') = <shift, s239>
action(s35, '+') = <shift, s240>
action(s35, '++') = <shift, s169>
action(s35, '-') = <shift, s241>
action(s35, '--') = <shift, s170>
action(s35, 'sizeof') = <shift, s171>
action(s35, '~') = <shift, s242>
action(s35, CONSTANT) = <shift, s184>
action(s35, IDENTIFIER) = <shift, s185>
action(s35, STRING_LITERAL) = <shift, s186>
action(s36, '!') = <shift, s237>
action(s36, '&') = <shift, s238>
action(s36, '(') = <shift, s13>
action(s36, '*') = <shift, s239>
action(s36, '+') = <shift, s240>
action(s36, '++') = <shift, s169>
action(s36, '-') = <shift, s241>
action(s36, '--') = <shift, s170>
action(s36, 'sizeof') = <shift, s171>
action(s36, '~') = <shift, s242>
action(s36, CONSTANT) = <shift, s184>
action(s36, IDENTIFIER) = <shift, s185>
action(s36, STRING_LITERAL) = <shift, s186>
action(s37, '!') = <shift, s237>
action(s37, '&') = <shift, s238>
action(s37, '(') = <shift, s13>
action(s37, '*') = <shift, s239>
action(s37, '+') = <shift, s240>
action(s37, '++') = <shift, s169>
action(s37, '-') = <shift, s241>
action(s37, '--') = <shift, s170>
action(s37, 'sizeof') = <shift, s171>
action(s37, '~') = <shift, s242>
action(s37, CONSTANT) = <shift, s184>
action(s37, IDENTIFIER) = <shift, s185>
action(s37, STRING_LITERAL) = <shift, s186>
action(s38, '!') = <shift, s237>
action(s38, '&') = <shift, s238>
action(s38, '(') = <shift, s13>
action(s38, '*') = <shift, s239>
action(s38, '+') = <shift, s240>
action(s38, '++') = <shift, s169>
action(s38, '-') = <shift, s241>
action(s38, '--') = <shift, s170>
action(s38, 'sizeof') = <shift, s171>
action(s38, '~') = <shift, s242>
action(s38, CONSTANT) = <shift, s184>
action(s38, IDENTIFIER) = <shift, s185>
action(s38, STRING_LITERAL) = <shift, s186>
action(s39, '!=') = <reduce, shift_expression -> additive_expression>
action(s39, '&&') = <reduce, shift_expression -> additive_expression>
action(s39, '&') = <reduce, shift_expression -> additive_expression>
action(s39, ')') = <reduce, shift_expression -> additive_expression>
action(s39, '+') = <shift, s42>
action(s39, ',') = <reduce, shift_expression -> additive_expression>
action(s39, '-') = <shift, s44>
action(s39, ':') = <reduce, shift_expression -> additive_expression>
action(s39, ';') = <reduce, shift_expression -> additive_expression>
action(s39, '<') = <reduce, shift_expression -> additive_expression>
action(s39, '<<') = <reduce, shift_expression -> additive_expression>
action(s39, '<=') = <reduce, shift_expression -> additive_expression>
action(s39, '==') = <reduce, shift_expression -> additive_expression>
action(s39, '>') = <reduce, shift_expression -> additive_expression>
action(s39, '>=') = <reduce, shift_expression -> additive_expression>
action(s39, '>>') = <reduce, shift_expression -> additive_expression>
action(s39, '?') = <reduce, shift_expression -> additive_expression>
action(s39, ']') = <reduce, shift_expression -> additive_expression>
action(s39, '^') = <reduce, shift_expression -> additive_expression>
action(s39, '|') = <reduce, shift_expression -> additive_expression>
action(s39, '||') = <reduce, shift_expression -> additive_expression>
action(s39, '}') = <reduce, shift_expression -> additive_expression>
action(s40, '!=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, '&&') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, '&') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, ')') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, '+') = <shift, s42>
action(s40, ',') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, '-') = <shift, s44>
action(s40, ':') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, ';') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, '<') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, '<<') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, '<=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, '==') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, '>') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, '>=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, '>>') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, '?') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, ']') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, '^') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, '|') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, '||') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s40, '}') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s41, '!=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, '&&') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, '&') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, ')') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, '+') = <shift, s42>
action(s41, ',') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, '-') = <shift, s44>
action(s41, ':') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, ';') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, '<') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, '<<') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, '<=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, '==') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, '>') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, '>=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, '>>') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, '?') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, ']') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, '^') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, '|') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, '||') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s41, '}') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s42, '!') = <shift, s237>
action(s42, '&') = <shift, s238>
action(s42, '(') = <shift, s13>
action(s42, '*') = <shift, s239>
action(s42, '+') = <shift, s240>
action(s42, '++') = <shift, s169>
action(s42, '-') = <shift, s241>
action(s42, '--') = <shift, s170>
action(s42, 'sizeof') = <shift, s171>
action(s42, '~') = <shift, s242>
action(s42, CONSTANT) = <shift, s184>
action(s42, IDENTIFIER) = <shift, s185>
action(s42, STRING_LITERAL) = <shift, s186>
action(s43, '!=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, '%') = <shift, s69>
action(s43, '&&') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, '&') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, ')') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, '*') = <shift, s70>
action(s43, '+') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, ',') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, '-') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, '/') = <shift, s71>
action(s43, ':') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, ';') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, '<') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, '<<') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, '<=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, '==') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, '>') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, '>=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, '>>') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, '?') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, ']') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, '^') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, '|') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, '||') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s43, '}') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s44, '!') = <shift, s237>
action(s44, '&') = <shift, s238>
action(s44, '(') = <shift, s13>
action(s44, '*') = <shift, s239>
action(s44, '+') = <shift, s240>
action(s44, '++') = <shift, s169>
action(s44, '-') = <shift, s241>
action(s44, '--') = <shift, s170>
action(s44, 'sizeof') = <shift, s171>
action(s44, '~') = <shift, s242>
action(s44, CONSTANT) = <shift, s184>
action(s44, IDENTIFIER) = <shift, s185>
action(s44, STRING_LITERAL) = <shift, s186>
action(s45, '!=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, '%') = <shift, s69>
action(s45, '&&') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, '&') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, ')') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, '*') = <shift, s70>
action(s45, '+') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, ',') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, '-') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, '/') = <shift, s71>
action(s45, ':') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, ';') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, '<') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, '<<') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, '<=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, '==') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, '>') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, '>=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, '>>') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, '?') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, ']') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, '^') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, '|') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, '||') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s45, '}') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s46, '!=') = <reduce, additive_expression -> multiplicative_expression>
action(s46, '%') = <shift, s69>
action(s46, '&&') = <reduce, additive_expression -> multiplicative_expression>
action(s46, '&') = <reduce, additive_expression -> multiplicative_expression>
action(s46, ')') = <reduce, additive_expression -> multiplicative_expression>
action(s46, '*') = <shift, s70>
action(s46, '+') = <reduce, additive_expression -> multiplicative_expression>
action(s46, ',') = <reduce, additive_expression -> multiplicative_expression>
action(s46, '-') = <reduce, additive_expression -> multiplicative_expression>
action(s46, '/') = <shift, s71>
action(s46, ':') = <reduce, additive_expression -> multiplicative_expression>
action(s46, ';') = <reduce, additive_expression -> multiplicative_expression>
action(s46, '<') = <reduce, additive_expression -> multiplicative_expression>
action(s46, '<<') = <reduce, additive_expression -> multiplicative_expression>
action(s46, '<=') = <reduce, additive_expression -> multiplicative_expression>
action(s46, '==') = <reduce, additive_expression -> multiplicative_expression>
action(s46, '>') = <reduce, additive_expression -> multiplicative_expression>
action(s46, '>=') = <reduce, additive_expression -> multiplicative_expression>
action(s46, '>>') = <reduce, additive_expression -> multiplicative_expression>
action(s46, '?') = <reduce, additive_expression -> multiplicative_expression>
action(s46, ']') = <reduce, additive_expression -> multiplicative_expression>
action(s46, '^') = <reduce, additive_expression -> multiplicative_expression>
action(s46, '|') = <reduce, additive_expression -> multiplicative_expression>
action(s46, '||') = <reduce, additive_expression -> multiplicative_expression>
action(s46, '}') = <reduce, additive_expression -> multiplicative_expression>
action(s47, '&&') = <reduce, exclusive_or_expression -> and_expression>
action(s47, '&') = <shift, s30>
action(s47, ')') = <reduce, exclusive_or_expression -> and_expression>
action(s47, ',') = <reduce, exclusive_or_expression -> and_expression>
action(s47, ':') = <reduce, exclusive_or_expression -> and_expression>
action(s47, ';') = <reduce, exclusive_or_expression -> and_expression>
action(s47, '?') = <reduce, exclusive_or_expression -> and_expression>
action(s47, ']') = <reduce, exclusive_or_expression -> and_expression>
action(s47, '^') = <reduce, exclusive_or_expression -> and_expression>
action(s47, '|') = <reduce, exclusive_or_expression -> and_expression>
action(s47, '||') = <reduce, exclusive_or_expression -> and_expression>
action(s47, '}') = <reduce, exclusive_or_expression -> and_expression>
action(s48, '&&') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s48, '&') = <shift, s30>
action(s48, ')') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s48, ',') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s48, ':') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s48, ';') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s48, '?') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s48, ']') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s48, '^') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s48, '|') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s48, '||') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s48, '}') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s49, '!=') = <shift, s31>
action(s49, '&&') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s49, '&') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s49, ')') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s49, ',') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s49, ':') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s49, ';') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s49, '==') = <shift, s32>
action(s49, '?') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s49, ']') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s49, '^') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s49, '|') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s49, '||') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s49, '}') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s50, '!=') = <shift, s31>
action(s50, '&&') = <reduce, and_expression -> equality_expression>
action(s50, '&') = <reduce, and_expression -> equality_expression>
action(s50, ')') = <reduce, and_expression -> equality_expression>
action(s50, ',') = <reduce, and_expression -> equality_expression>
action(s50, ':') = <reduce, and_expression -> equality_expression>
action(s50, ';') = <reduce, and_expression -> equality_expression>
action(s50, '==') = <shift, s32>
action(s50, '?') = <reduce, and_expression -> equality_expression>
action(s50, ']') = <reduce, and_expression -> equality_expression>
action(s50, '^') = <reduce, and_expression -> equality_expression>
action(s50, '|') = <reduce, and_expression -> equality_expression>
action(s50, '||') = <reduce, and_expression -> equality_expression>
action(s50, '}') = <reduce, and_expression -> equality_expression>
action(s51, ')') = <shift, s174>
action(s51, ',') = <shift, s11>
action(s52, ')') = <reduce, argument_expression_list -> argument_expression_list ',' assignment_expression>
action(s52, ',') = <reduce, argument_expression_list -> argument_expression_list ',' assignment_expression>
action(s53, ')') = <reduce, argument_expression_list -> assignment_expression>
action(s53, ',') = <reduce, argument_expression_list -> assignment_expression>
action(s54, ')') = <reduce, assignment_expression -> conditional_expression>
action(s54, ',') = <reduce, assignment_expression -> conditional_expression>
action(s54, ':') = <reduce, assignment_expression -> conditional_expression>
action(s54, ';') = <reduce, assignment_expression -> conditional_expression>
action(s54, ']') = <reduce, assignment_expression -> conditional_expression>
action(s54, '}') = <reduce, assignment_expression -> conditional_expression>
action(s55, '!=') = <reduce, cast_expression -> unary_expression>
action(s55, '%') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '%='):
<shift, [assignment_operator -> '%=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s55, '%=') = shift-reduce conflict
action(s55, '&&') = <reduce, cast_expression -> unary_expression>
action(s55, '&') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '&='):
<shift, [assignment_operator -> '&=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s55, '&=') = shift-reduce conflict
action(s55, ')') = <reduce, cast_expression -> unary_expression>
action(s55, '*') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '*='):
<shift, [assignment_operator -> '*=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s55, '*=') = shift-reduce conflict
action(s55, '+') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '+='):
<shift, [assignment_operator -> '+=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s55, '+=') = shift-reduce conflict
action(s55, ',') = <reduce, cast_expression -> unary_expression>
action(s55, '-') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '-='):
<shift, [assignment_operator -> '-=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s55, '-=') = shift-reduce conflict
action(s55, '/') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '/='):
<shift, [assignment_operator -> '/=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s55, '/=') = shift-reduce conflict
action(s55, ':') = <reduce, cast_expression -> unary_expression>
action(s55, ';') = <reduce, cast_expression -> unary_expression>
action(s55, '<') = <reduce, cast_expression -> unary_expression>
action(s55, '<<') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '<<='):
<shift, [assignment_operator -> '<<=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s55, '<<=') = shift-reduce conflict
action(s55, '<=') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '='):
<shift, [assignment_operator -> '=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s55, '=') = shift-reduce conflict
action(s55, '==') = <reduce, cast_expression -> unary_expression>
action(s55, '>') = <reduce, cast_expression -> unary_expression>
action(s55, '>=') = <reduce, cast_expression -> unary_expression>
action(s55, '>>') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '>>='):
<shift, [assignment_operator -> '>>=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s55, '>>=') = shift-reduce conflict
action(s55, '?') = <reduce, cast_expression -> unary_expression>
action(s55, ']') = <reduce, cast_expression -> unary_expression>
action(s55, '^') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '^='):
<shift, [assignment_operator -> '^=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s55, '^=') = shift-reduce conflict
action(s55, '|') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '|='):
<shift, [assignment_operator -> '|=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s55, '|=') = shift-reduce conflict
action(s55, '||') = <reduce, cast_expression -> unary_expression>
action(s55, '}') = <reduce, cast_expression -> unary_expression>
action(s56, ')') = <reduce, assignment_expression -> unary_expression assignment_operator assignment_expression>
action(s56, ',') = <reduce, assignment_expression -> unary_expression assignment_operator assignment_expression>
action(s56, ':') = <reduce, assignment_expression -> unary_expression assignment_operator assignment_expression>
action(s56, ';') = <reduce, assignment_expression -> unary_expression assignment_operator assignment_expression>
action(s56, ']') = <reduce, assignment_expression -> unary_expression assignment_operator assignment_expression>
action(s56, '}') = <reduce, assignment_expression -> unary_expression assignment_operator assignment_expression>
action(s57, '!') = <reduce, assignment_operator -> '%='>
action(s57, '&') = <reduce, assignment_operator -> '%='>
action(s57, '(') = <reduce, assignment_operator -> '%='>
action(s57, '*') = <reduce, assignment_operator -> '%='>
action(s57, '+') = <reduce, assignment_operator -> '%='>
action(s57, '++') = <reduce, assignment_operator -> '%='>
action(s57, '-') = <reduce, assignment_operator -> '%='>
action(s57, '--') = <reduce, assignment_operator -> '%='>
action(s57, 'sizeof') = <reduce, assignment_operator -> '%='>
action(s57, '~') = <reduce, assignment_operator -> '%='>
action(s57, CONSTANT) = <reduce, assignment_operator -> '%='>
action(s57, IDENTIFIER) = <reduce, assignment_operator -> '%='>
action(s57, STRING_LITERAL) = <reduce, assignment_operator -> '%='>
action(s58, '!') = <reduce, assignment_operator -> '&='>
action(s58, '&') = <reduce, assignment_operator -> '&='>
action(s58, '(') = <reduce, assignment_operator -> '&='>
action(s58, '*') = <reduce, assignment_operator -> '&='>
action(s58, '+') = <reduce, assignment_operator -> '&='>
action(s58, '++') = <reduce, assignment_operator -> '&='>
action(s58, '-') = <reduce, assignment_operator -> '&='>
action(s58, '--') = <reduce, assignment_operator -> '&='>
action(s58, 'sizeof') = <reduce, assignment_operator -> '&='>
action(s58, '~') = <reduce, assignment_operator -> '&='>
action(s58, CONSTANT) = <reduce, assignment_operator -> '&='>
action(s58, IDENTIFIER) = <reduce, assignment_operator -> '&='>
action(s58, STRING_LITERAL) = <reduce, assignment_operator -> '&='>
action(s59, '!') = <reduce, assignment_operator -> '*='>
action(s59, '&') = <reduce, assignment_operator -> '*='>
action(s59, '(') = <reduce, assignment_operator -> '*='>
action(s59, '*') = <reduce, assignment_operator -> '*='>
action(s59, '+') = <reduce, assignment_operator -> '*='>
action(s59, '++') = <reduce, assignment_operator -> '*='>
action(s59, '-') = <reduce, assignment_operator -> '*='>
action(s59, '--') = <reduce, assignment_operator -> '*='>
action(s59, 'sizeof') = <reduce, assignment_operator -> '*='>
action(s59, '~') = <reduce, assignment_operator -> '*='>
action(s59, CONSTANT) = <reduce, assignment_operator -> '*='>
action(s59, IDENTIFIER) = <reduce, assignment_operator -> '*='>
action(s59, STRING_LITERAL) = <reduce, assignment_operator -> '*='>
action(s60, '!') = <reduce, assignment_operator -> '+='>
action(s60, '&') = <reduce, assignment_operator -> '+='>
action(s60, '(') = <reduce, assignment_operator -> '+='>
action(s60, '*') = <reduce, assignment_operator -> '+='>
action(s60, '+') = <reduce, assignment_operator -> '+='>
action(s60, '++') = <reduce, assignment_operator -> '+='>
action(s60, '-') = <reduce, assignment_operator -> '+='>
action(s60, '--') = <reduce, assignment_operator -> '+='>
action(s60, 'sizeof') = <reduce, assignment_operator -> '+='>
action(s60, '~') = <reduce, assignment_operator -> '+='>
action(s60, CONSTANT) = <reduce, assignment_operator -> '+='>
action(s60, IDENTIFIER) = <reduce, assignment_operator -> '+='>
action(s60, STRING_LITERAL) = <reduce, assignment_operator -> '+='>
action(s61, '!') = <reduce, assignment_operator -> '-='>
action(s61, '&') = <reduce, assignment_operator -> '-='>
action(s61, '(') = <reduce, assignment_operator -> '-='>
action(s61, '*') = <reduce, assignment_operator -> '-='>
action(s61, '+') = <reduce, assignment_operator -> '-='>
action(s61, '++') = <reduce, assignment_operator -> '-='>
action(s61, '-') = <reduce, assignment_operator -> '-='>
action(s61, '--') = <reduce, assignment_operator -> '-='>
action(s61, 'sizeof') = <reduce, assignment_operator -> '-='>
action(s61, '~') = <reduce, assignment_operator -> '-='>
action(s61, CONSTANT) = <reduce, assignment_operator -> '-='>
action(s61, IDENTIFIER) = <reduce, assignment_operator -> '-='>
action(s61, STRING_LITERAL) = <reduce, assignment_operator -> '-='>
action(s62, '!') = <reduce, assignment_operator -> '/='>
action(s62, '&') = <reduce, assignment_operator -> '/='>
action(s62, '(') = <reduce, assignment_operator -> '/='>
action(s62, '*') = <reduce, assignment_operator -> '/='>
action(s62, '+') = <reduce, assignment_operator -> '/='>
action(s62, '++') = <reduce, assignment_operator -> '/='>
action(s62, '-') = <reduce, assignment_operator -> '/='>
action(s62, '--') = <reduce, assignment_operator -> '/='>
action(s62, 'sizeof') = <reduce, assignment_operator -> '/='>
action(s62, '~') = <reduce, assignment_operator -> '/='>
action(s62, CONSTANT) = <reduce, assignment_operator -> '/='>
action(s62, IDENTIFIER) = <reduce, assignment_operator -> '/='>
action(s62, STRING_LITERAL) = <reduce, assignment_operator -> '/='>
action(s63, '!') = <reduce, assignment_operator -> '<<='>
action(s63, '&') = <reduce, assignment_operator -> '<<='>
action(s63, '(') = <reduce, assignment_operator -> '<<='>
action(s63, '*') = <reduce, assignment_operator -> '<<='>
action(s63, '+') = <reduce, assignment_operator -> '<<='>
action(s63, '++') = <reduce, assignment_operator -> '<<='>
action(s63, '-') = <reduce, assignment_operator -> '<<='>
action(s63, '--') = <reduce, assignment_operator -> '<<='>
action(s63, 'sizeof') = <reduce, assignment_operator -> '<<='>
action(s63, '~') = <reduce, assignment_operator -> '<<='>
action(s63, CONSTANT) = <reduce, assignment_operator -> '<<='>
action(s63, IDENTIFIER) = <reduce, assignment_operator -> '<<='>
action(s63, STRING_LITERAL) = <reduce, assignment_operator -> '<<='>
action(s64, '!') = <reduce, assignment_operator -> '='>
action(s64, '&') = <reduce, assignment_operator -> '='>
action(s64, '(') = <reduce, assignment_operator -> '='>
action(s64, '*') = <reduce, assignment_operator -> '='>
action(s64, '+') = <reduce, assignment_operator -> '='>
action(s64, '++') = <reduce, assignment_operator -> '='>
action(s64, '-') = <reduce, assignment_operator -> '='>
action(s64, '--') = <reduce, assignment_operator -> '='>
action(s64, 'sizeof') = <reduce, assignment_operator -> '='>
action(s64, '~') = <reduce, assignment_operator -> '='>
action(s64, CONSTANT) = <reduce, assignment_operator -> '='>
action(s64, IDENTIFIER) = <reduce, assignment_operator -> '='>
action(s64, STRING_LITERAL) = <reduce, assignment_operator -> '='>
action(s65, '!') = <reduce, assignment_operator -> '>>='>
action(s65, '&') = <reduce, assignment_operator -> '>>='>
action(s65, '(') = <reduce, assignment_operator -> '>>='>
action(s65, '*') = <reduce, assignment_operator -> '>>='>
action(s65, '+') = <reduce, assignment_operator -> '>>='>
action(s65, '++') = <reduce, assignment_operator -> '>>='>
action(s65, '-') = <reduce, assignment_operator -> '>>='>
action(s65, '--') = <reduce, assignment_operator -> '>>='>
action(s65, 'sizeof') = <reduce, assignment_operator -> '>>='>
action(s65, '~') = <reduce, assignment_operator -> '>>='>
action(s65, CONSTANT) = <reduce, assignment_operator -> '>>='>
action(s65, IDENTIFIER) = <reduce, assignment_operator -> '>>='>
action(s65, STRING_LITERAL) = <reduce, assignment_operator -> '>>='>
action(s66, '!') = <reduce, assignment_operator -> '^='>
action(s66, '&') = <reduce, assignment_operator -> '^='>
action(s66, '(') = <reduce, assignment_operator -> '^='>
action(s66, '*') = <reduce, assignment_operator -> '^='>
action(s66, '+') = <reduce, assignment_operator -> '^='>
action(s66, '++') = <reduce, assignment_operator -> '^='>
action(s66, '-') = <reduce, assignment_operator -> '^='>
action(s66, '--') = <reduce, assignment_operator -> '^='>
action(s66, 'sizeof') = <reduce, assignment_operator -> '^='>
action(s66, '~') = <reduce, assignment_operator -> '^='>
action(s66, CONSTANT) = <reduce, assignment_operator -> '^='>
action(s66, IDENTIFIER) = <reduce, assignment_operator -> '^='>
action(s66, STRING_LITERAL) = <reduce, assignment_operator -> '^='>
action(s67, '!') = <reduce, assignment_operator -> '|='>
action(s67, '&') = <reduce, assignment_operator -> '|='>
action(s67, '(') = <reduce, assignment_operator -> '|='>
action(s67, '*') = <reduce, assignment_operator -> '|='>
action(s67, '+') = <reduce, assignment_operator -> '|='>
action(s67, '++') = <reduce, assignment_operator -> '|='>
action(s67, '-') = <reduce, assignment_operator -> '|='>
action(s67, '--') = <reduce, assignment_operator -> '|='>
action(s67, 'sizeof') = <reduce, assignment_operator -> '|='>
action(s67, '~') = <reduce, assignment_operator -> '|='>
action(s67, CONSTANT) = <reduce, assignment_operator -> '|='>
action(s67, IDENTIFIER) = <reduce, assignment_operator -> '|='>
action(s67, STRING_LITERAL) = <reduce, assignment_operator -> '|='>
action(s68, '!') = <shift, s237>
action(s68, '&') = <shift, s238>
action(s68, '(') = <shift, s13>
action(s68, '*') = <shift, s239>
action(s68, '+') = <shift, s240>
action(s68, '++') = <shift, s169>
action(s68, '-') = <shift, s241>
action(s68, '--') = <shift, s170>
action(s68, 'sizeof') = <shift, s171>
action(s68, '~') = <shift, s242>
action(s68, CONSTANT) = <shift, s184>
action(s68, IDENTIFIER) = <shift, s185>
action(s68, STRING_LITERAL) = <shift, s186>
action(s69, '!') = <shift, s237>
action(s69, '&') = <shift, s238>
action(s69, '(') = <shift, s13>
action(s69, '*') = <shift, s239>
action(s69, '+') = <shift, s240>
action(s69, '++') = <shift, s169>
action(s69, '-') = <shift, s241>
action(s69, '--') = <shift, s170>
action(s69, 'sizeof') = <shift, s171>
action(s69, '~') = <shift, s242>
action(s69, CONSTANT) = <shift, s184>
action(s69, IDENTIFIER) = <shift, s185>
action(s69, STRING_LITERAL) = <shift, s186>
action(s70, '!') = <shift, s237>
action(s70, '&') = <shift, s238>
action(s70, '(') = <shift, s13>
action(s70, '*') = <shift, s239>
action(s70, '+') = <shift, s240>
action(s70, '++') = <shift, s169>
action(s70, '-') = <shift, s241>
action(s70, '--') = <shift, s170>
action(s70, 'sizeof') = <shift, s171>
action(s70, '~') = <shift, s242>
action(s70, CONSTANT) = <shift, s184>
action(s70, IDENTIFIER) = <shift, s185>
action(s70, STRING_LITERAL) = <shift, s186>
action(s71, '!') = <shift, s237>
action(s71, '&') = <shift, s238>
action(s71, '(') = <shift, s13>
action(s71, '*') = <shift, s239>
action(s71, '+') = <shift, s240>
action(s71, '++') = <shift, s169>
action(s71, '-') = <shift, s241>
action(s71, '--') = <shift, s170>
action(s71, 'sizeof') = <shift, s171>
action(s71, '~') = <shift, s242>
action(s71, CONSTANT) = <shift, s184>
action(s71, IDENTIFIER) = <shift, s185>
action(s71, STRING_LITERAL) = <shift, s186>
action(s72, '!') = <shift, s237>
action(s72, '&') = <shift, s238>
action(s72, '(') = <shift, s13>
action(s72, '*') = <shift, s239>
action(s72, '+') = <shift, s240>
action(s72, '++') = <shift, s169>
action(s72, '-') = <shift, s241>
action(s72, '--') = <shift, s170>
action(s72, 'sizeof') = <shift, s171>
action(s72, '~') = <shift, s242>
action(s72, CONSTANT) = <shift, s184>
action(s72, IDENTIFIER) = <shift, s185>
action(s72, STRING_LITERAL) = <shift, s186>
action(s73, ')') = <shift, s68>
action(s74, '!=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '%') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '%=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '&&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '&=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, ')') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '*') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '*=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '+') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '+=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, ',') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '-') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '-=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '/') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '/=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, ':') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, ';') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '<<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '<<=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '<=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '==') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '>=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '>>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '>>=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '?') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, ']') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '^') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '^=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '|') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '|=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '||') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s74, '}') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s75, '!=') = <reduce, cast_expression -> unary_expression>
action(s75, '%') = <reduce, cast_expression -> unary_expression>
action(s75, '%=') = <reduce, cast_expression -> unary_expression>
action(s75, '&&') = <reduce, cast_expression -> unary_expression>
action(s75, '&') = <reduce, cast_expression -> unary_expression>
action(s75, '&=') = <reduce, cast_expression -> unary_expression>
action(s75, ')') = <reduce, cast_expression -> unary_expression>
action(s75, '*') = <reduce, cast_expression -> unary_expression>
action(s75, '*=') = <reduce, cast_expression -> unary_expression>
action(s75, '+') = <reduce, cast_expression -> unary_expression>
action(s75, '+=') = <reduce, cast_expression -> unary_expression>
action(s75, ',') = <reduce, cast_expression -> unary_expression>
action(s75, '-') = <reduce, cast_expression -> unary_expression>
action(s75, '-=') = <reduce, cast_expression -> unary_expression>
action(s75, '/') = <reduce, cast_expression -> unary_expression>
action(s75, '/=') = <reduce, cast_expression -> unary_expression>
action(s75, ':') = <reduce, cast_expression -> unary_expression>
action(s75, ';') = <reduce, cast_expression -> unary_expression>
action(s75, '<') = <reduce, cast_expression -> unary_expression>
action(s75, '<<') = <reduce, cast_expression -> unary_expression>
action(s75, '<<=') = <reduce, cast_expression -> unary_expression>
action(s75, '<=') = <reduce, cast_expression -> unary_expression>
action(s75, '=') = <reduce, cast_expression -> unary_expression>
action(s75, '==') = <reduce, cast_expression -> unary_expression>
action(s75, '>') = <reduce, cast_expression -> unary_expression>
action(s75, '>=') = <reduce, cast_expression -> unary_expression>
action(s75, '>>') = <reduce, cast_expression -> unary_expression>
action(s75, '>>=') = <reduce, cast_expression -> unary_expression>
action(s75, '?') = <reduce, cast_expression -> unary_expression>
action(s75, ']') = <reduce, cast_expression -> unary_expression>
action(s75, '^') = <reduce, cast_expression -> unary_expression>
action(s75, '^=') = <reduce, cast_expression -> unary_expression>
action(s75, '|') = <reduce, cast_expression -> unary_expression>
action(s75, '|=') = <reduce, cast_expression -> unary_expression>
action(s75, '||') = <reduce, cast_expression -> unary_expression>
action(s75, '}') = <reduce, cast_expression -> unary_expression>
action(s76, ')') = <reduce, conditional_expression -> logical_or_expression>
action(s76, ',') = <reduce, conditional_expression -> logical_or_expression>
action(s76, ':') = <reduce, conditional_expression -> logical_or_expression>
action(s76, ';') = <reduce, conditional_expression -> logical_or_expression>
action(s76, '?') = <shift, s14>
action(s76, ']') = <reduce, conditional_expression -> logical_or_expression>
action(s76, '||') = <shift, s26>
action(s76, '}') = <reduce, conditional_expression -> logical_or_expression>
action(s77, ',') = <shift, s18>
action(s77, ':') = <shift, s19>
action(s78, ')') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s78, ',') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s78, ':') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s78, ';') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s78, ']') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s78, '}') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s79, ',') = <reduce, constant_expression -> conditional_expression>
action(s79, ':') = <reduce, constant_expression -> conditional_expression>
action(s79, ';') = <reduce, constant_expression -> conditional_expression>
action(s79, ']') = <reduce, constant_expression -> conditional_expression>
action(s79, '}') = <reduce, constant_expression -> conditional_expression>
action(s80, '(') = <reduce, declaration_specifiers -> storage_class_specifier>
action(s80, ')') = <reduce, declaration_specifiers -> storage_class_specifier>
action(s80, '*') = <reduce, declaration_specifiers -> storage_class_specifier>
action(s80, ',') = <reduce, declaration_specifiers -> storage_class_specifier>
action(s80, ';') = <reduce, declaration_specifiers -> storage_class_specifier>
action(s80, '[') = <reduce, declaration_specifiers -> storage_class_specifier>
action(s80, 'auto') = <shift, s194>
action(s80, 'char') = <shift, s219>
action(s80, 'const') = <shift, s215>
action(s80, 'double') = <shift, s220>
action(s80, 'enum') = <shift, s126>
action(s80, 'extern') = <shift, s195>
action(s80, 'float') = <shift, s221>
action(s80, 'int') = <shift, s222>
action(s80, 'long') = <shift, s223>
action(s80, 'register') = <shift, s196>
action(s80, 'short') = <shift, s224>
action(s80, 'signed') = <shift, s225>
action(s80, 'static') = <shift, s197>
action(s80, 'struct') = <shift, s208>
action(s80, 'typedef') = <shift, s198>
action(s80, 'union') = <shift, s209>
action(s80, 'unsigned') = <shift, s226>
action(s80, 'void') = <shift, s227>
action(s80, 'volatile') = <shift, s216>
action(s80, IDENTIFIER) = <reduce, declaration_specifiers -> storage_class_specifier>
action(s80, TYPE_NAME) = <shift, s228>
action(s81, '(') = <reduce, declaration_specifiers -> type_qualifier>
action(s81, ')') = <reduce, declaration_specifiers -> type_qualifier>
action(s81, '*') = <reduce, declaration_specifiers -> type_qualifier>
action(s81, ',') = <reduce, declaration_specifiers -> type_qualifier>
action(s81, ';') = <reduce, declaration_specifiers -> type_qualifier>
action(s81, '[') = <reduce, declaration_specifiers -> type_qualifier>
action(s81, 'auto') = <shift, s194>
action(s81, 'char') = <shift, s219>
action(s81, 'const') = <shift, s215>
action(s81, 'double') = <shift, s220>
action(s81, 'enum') = <shift, s126>
action(s81, 'extern') = <shift, s195>
action(s81, 'float') = <shift, s221>
action(s81, 'int') = <shift, s222>
action(s81, 'long') = <shift, s223>
action(s81, 'register') = <shift, s196>
action(s81, 'short') = <shift, s224>
action(s81, 'signed') = <shift, s225>
action(s81, 'static') = <shift, s197>
action(s81, 'struct') = <shift, s208>
action(s81, 'typedef') = <shift, s198>
action(s81, 'union') = <shift, s209>
action(s81, 'unsigned') = <shift, s226>
action(s81, 'void') = <shift, s227>
action(s81, 'volatile') = <shift, s216>
action(s81, IDENTIFIER) = <reduce, declaration_specifiers -> type_qualifier>
action(s81, TYPE_NAME) = <shift, s228>
action(s82, '(') = <reduce, declaration_specifiers -> type_specifier>
action(s82, ')') = <reduce, declaration_specifiers -> type_specifier>
action(s82, '*') = <reduce, declaration_specifiers -> type_specifier>
action(s82, ',') = <reduce, declaration_specifiers -> type_specifier>
action(s82, ';') = <reduce, declaration_specifiers -> type_specifier>
action(s82, '[') = <reduce, declaration_specifiers -> type_specifier>
action(s82, 'auto') = <shift, s194>
action(s82, 'char') = <shift, s219>
action(s82, 'const') = <shift, s215>
action(s82, 'double') = <shift, s220>
action(s82, 'enum') = <shift, s126>
action(s82, 'extern') = <shift, s195>
action(s82, 'float') = <shift, s221>
action(s82, 'int') = <shift, s222>
action(s82, 'long') = <shift, s223>
action(s82, 'register') = <shift, s196>
action(s82, 'short') = <shift, s224>
action(s82, 'signed') = <shift, s225>
action(s82, 'static') = <shift, s197>
action(s82, 'struct') = <shift, s208>
action(s82, 'typedef') = <shift, s198>
action(s82, 'union') = <shift, s209>
action(s82, 'unsigned') = <shift, s226>
action(s82, 'void') = <shift, s227>
action(s82, 'volatile') = <shift, s216>
action(s82, IDENTIFIER) = <reduce, declaration_specifiers -> type_specifier>
action(s82, TYPE_NAME) = <shift, s228>
action(s83, ')') = <shift, s103>
action(s83, 'auto') = <shift, s194>
action(s83, 'char') = <shift, s219>
action(s83, 'const') = <shift, s215>
action(s83, 'double') = <shift, s220>
action(s83, 'enum') = <shift, s126>
action(s83, 'extern') = <shift, s195>
action(s83, 'float') = <shift, s221>
action(s83, 'int') = <shift, s222>
action(s83, 'long') = <shift, s223>
action(s83, 'register') = <shift, s196>
action(s83, 'short') = <shift, s224>
action(s83, 'signed') = <shift, s225>
action(s83, 'static') = <shift, s197>
action(s83, 'struct') = <shift, s208>
action(s83, 'typedef') = <shift, s198>
action(s83, 'union') = <shift, s209>
action(s83, 'unsigned') = <shift, s226>
action(s83, 'void') = <shift, s227>
action(s83, 'volatile') = <shift, s216>
action(s83, TYPE_NAME) = <shift, s228>
action(s84, ')') = <shift, s112>
action(s84, 'auto') = <shift, s194>
action(s84, 'char') = <shift, s219>
action(s84, 'const') = <shift, s215>
action(s84, 'double') = <shift, s220>
action(s84, 'enum') = <shift, s126>
action(s84, 'extern') = <shift, s195>
action(s84, 'float') = <shift, s221>
action(s84, 'int') = <shift, s222>
action(s84, 'long') = <shift, s223>
action(s84, 'register') = <shift, s196>
action(s84, 'short') = <shift, s224>
action(s84, 'signed') = <shift, s225>
action(s84, 'static') = <shift, s197>
action(s84, 'struct') = <shift, s208>
action(s84, 'typedef') = <shift, s198>
action(s84, 'union') = <shift, s209>
action(s84, 'unsigned') = <shift, s226>
action(s84, 'void') = <shift, s227>
action(s84, 'volatile') = <shift, s216>
action(s84, IDENTIFIER) = <shift, s148>
action(s84, TYPE_NAME) = <shift, s228>
action(s85, '...') = <shift, s164>
action(s85, 'auto') = <shift, s194>
action(s85, 'char') = <shift, s219>
action(s85, 'const') = <shift, s215>
action(s85, 'double') = <shift, s220>
action(s85, 'enum') = <shift, s126>
action(s85, 'extern') = <shift, s195>
action(s85, 'float') = <shift, s221>
action(s85, 'int') = <shift, s222>
action(s85, 'long') = <shift, s223>
action(s85, 'register') = <shift, s196>
action(s85, 'short') = <shift, s224>
action(s85, 'signed') = <shift, s225>
action(s85, 'static') = <shift, s197>
action(s85, 'struct') = <shift, s208>
action(s85, 'typedef') = <shift, s198>
action(s85, 'union') = <shift, s209>
action(s85, 'unsigned') = <shift, s226>
action(s85, 'void') = <shift, s227>
action(s85, 'volatile') = <shift, s216>
action(s85, TYPE_NAME) = <shift, s228>
action(s86, '(') = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s86, ')') = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s86, '*') = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s86, ',') = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s86, ';') = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s86, '[') = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s86, IDENTIFIER) = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s87, '(') = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s87, ')') = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s87, '*') = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s87, ',') = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s87, ';') = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s87, '[') = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s87, IDENTIFIER) = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s88, '(') = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s88, ')') = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s88, '*') = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s88, ',') = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s88, ';') = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s88, '[') = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s88, IDENTIFIER) = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s89, '(') = <shift, s89>
action(s89, '*') = <shift, s165>
action(s89, IDENTIFIER) = <shift, s111>
action(s90, '(') = <shift, s89>
action(s90, '*') = <shift, s165>
action(s90, ':') = <shift, s24>
action(s90, IDENTIFIER) = <shift, s111>
action(s91, '(') = <shift, s89>
action(s91, '*') = <shift, s165>
action(s91, ':') = <shift, s24>
action(s91, IDENTIFIER) = <shift, s111>
action(s92, '(') = <shift, s84>
action(s92, ')') = <reduce, declarator -> direct_declarator>
action(s92, ',') = <reduce, declarator -> direct_declarator>
action(s92, ':') = <reduce, declarator -> direct_declarator>
action(s92, ';') = <reduce, declarator -> direct_declarator>
action(s92, '=') = <reduce, declarator -> direct_declarator>
action(s92, '[') = <shift, s22>
action(s92, 'auto') = <reduce, declarator -> direct_declarator>
action(s92, 'char') = <reduce, declarator -> direct_declarator>
action(s92, 'const') = <reduce, declarator -> direct_declarator>
action(s92, 'double') = <reduce, declarator -> direct_declarator>
action(s92, 'enum') = <reduce, declarator -> direct_declarator>
action(s92, 'extern') = <reduce, declarator -> direct_declarator>
action(s92, 'float') = <reduce, declarator -> direct_declarator>
action(s92, 'int') = <reduce, declarator -> direct_declarator>
action(s92, 'long') = <reduce, declarator -> direct_declarator>
action(s92, 'register') = <reduce, declarator -> direct_declarator>
action(s92, 'short') = <reduce, declarator -> direct_declarator>
action(s92, 'signed') = <reduce, declarator -> direct_declarator>
action(s92, 'static') = <reduce, declarator -> direct_declarator>
action(s92, 'struct') = <reduce, declarator -> direct_declarator>
action(s92, 'typedef') = <reduce, declarator -> direct_declarator>
action(s92, 'union') = <reduce, declarator -> direct_declarator>
action(s92, 'unsigned') = <reduce, declarator -> direct_declarator>
action(s92, 'void') = <reduce, declarator -> direct_declarator>
action(s92, 'volatile') = <reduce, declarator -> direct_declarator>
action(s92, '{') = <reduce, declarator -> direct_declarator>
action(s92, TYPE_NAME) = <reduce, declarator -> direct_declarator>
action(s93, '(') = <shift, s89>
action(s93, IDENTIFIER) = <shift, s111>
action(s94, '(') = <shift, s84>
action(s94, ')') = <reduce, declarator -> pointer direct_declarator>
action(s94, ',') = <reduce, declarator -> pointer direct_declarator>
action(s94, ':') = <reduce, declarator -> pointer direct_declarator>
action(s94, ';') = <reduce, declarator -> pointer direct_declarator>
action(s94, '=') = <reduce, declarator -> pointer direct_declarator>
action(s94, '[') = <shift, s22>
action(s94, 'auto') = <reduce, declarator -> pointer direct_declarator>
action(s94, 'char') = <reduce, declarator -> pointer direct_declarator>
action(s94, 'const') = <reduce, declarator -> pointer direct_declarator>
action(s94, 'double') = <reduce, declarator -> pointer direct_declarator>
action(s94, 'enum') = <reduce, declarator -> pointer direct_declarator>
action(s94, 'extern') = <reduce, declarator -> pointer direct_declarator>
action(s94, 'float') = <reduce, declarator -> pointer direct_declarator>
action(s94, 'int') = <reduce, declarator -> pointer direct_declarator>
action(s94, 'long') = <reduce, declarator -> pointer direct_declarator>
action(s94, 'register') = <reduce, declarator -> pointer direct_declarator>
action(s94, 'short') = <reduce, declarator -> pointer direct_declarator>
action(s94, 'signed') = <reduce, declarator -> pointer direct_declarator>
action(s94, 'static') = <reduce, declarator -> pointer direct_declarator>
action(s94, 'struct') = <reduce, declarator -> pointer direct_declarator>
action(s94, 'typedef') = <reduce, declarator -> pointer direct_declarator>
action(s94, 'union') = <reduce, declarator -> pointer direct_declarator>
action(s94, 'unsigned') = <reduce, declarator -> pointer direct_declarator>
action(s94, 'void') = <reduce, declarator -> pointer direct_declarator>
action(s94, 'volatile') = <reduce, declarator -> pointer direct_declarator>
action(s94, '{') = <reduce, declarator -> pointer direct_declarator>
action(s94, TYPE_NAME) = <reduce, declarator -> pointer direct_declarator>
action(s95, '(') = <reduce, direct_abstract_declarator -> '(' ')'>
action(s95, ')') = <reduce, direct_abstract_declarator -> '(' ')'>
action(s95, ',') = <reduce, direct_abstract_declarator -> '(' ')'>
action(s95, '[') = <reduce, direct_abstract_declarator -> '(' ')'>
action(s96, ')') = <shift, s97>
action(s97, '(') = <reduce, direct_abstract_declarator -> '(' abstract_declarator ')'>
action(s97, ')') = <reduce, direct_abstract_declarator -> '(' abstract_declarator ')'>
action(s97, ',') = <reduce, direct_abstract_declarator -> '(' abstract_declarator ')'>
action(s97, '[') = <reduce, direct_abstract_declarator -> '(' abstract_declarator ')'>
action(s98, ')') = <shift, s99>
action(s99, '(') = <reduce, direct_abstract_declarator -> '(' parameter_type_list ')'>
action(s99, ')') = <reduce, direct_abstract_declarator -> '(' parameter_type_list ')'>
action(s99, ',') = <reduce, direct_abstract_declarator -> '(' parameter_type_list ')'>
action(s99, '[') = <reduce, direct_abstract_declarator -> '(' parameter_type_list ')'>
action(s100, '(') = <reduce, direct_abstract_declarator -> '[' ']'>
action(s100, ')') = <reduce, direct_abstract_declarator -> '[' ']'>
action(s100, ',') = <reduce, direct_abstract_declarator -> '[' ']'>
action(s100, '[') = <reduce, direct_abstract_declarator -> '[' ']'>
action(s101, ']') = <shift, s102>
action(s102, '(') = <reduce, direct_abstract_declarator -> '[' constant_expression ']'>
action(s102, ')') = <reduce, direct_abstract_declarator -> '[' constant_expression ']'>
action(s102, ',') = <reduce, direct_abstract_declarator -> '[' constant_expression ']'>
action(s102, '[') = <reduce, direct_abstract_declarator -> '[' constant_expression ']'>
action(s103, '(') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' ')'>
action(s103, ')') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' ')'>
action(s103, ',') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' ')'>
action(s103, '[') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' ')'>
action(s104, ')') = <shift, s105>
action(s105, '(') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'>
action(s105, ')') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'>
action(s105, ',') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'>
action(s105, '[') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'>
action(s106, '(') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' ']'>
action(s106, ')') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' ']'>
action(s106, ',') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' ']'>
action(s106, '[') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' ']'>
action(s107, ']') = <shift, s108>
action(s108, '(') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']'>
action(s108, ')') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']'>
action(s108, ',') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']'>
action(s108, '[') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']'>
action(s109, ')') = <shift, s110>
action(s110, '(') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, ')') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, ',') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, ':') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, ';') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, '=') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, '[') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'auto') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'char') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'const') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'double') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'enum') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'extern') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'float') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'int') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'long') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'register') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'short') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'signed') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'static') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'struct') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'typedef') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'union') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'unsigned') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'void') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, 'volatile') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, '{') = <reduce, direct_declarator -> '(' declarator ')'>
action(s110, TYPE_NAME) = <reduce, direct_declarator -> '(' declarator ')'>
action(s111, '(') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, ')') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, ',') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, ':') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, ';') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, '=') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, '[') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'auto') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'char') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'const') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'double') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'enum') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'extern') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'float') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'int') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'long') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'register') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'short') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'signed') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'static') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'struct') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'typedef') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'union') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'unsigned') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'void') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, 'volatile') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, '{') = <reduce, direct_declarator -> IDENTIFIER>
action(s111, TYPE_NAME) = <reduce, direct_declarator -> IDENTIFIER>
action(s112, '(') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, ')') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, ',') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, ':') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, ';') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, '=') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, '[') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'auto') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'char') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'const') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'double') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'enum') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'extern') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'float') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'int') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'long') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'register') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'short') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'signed') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'static') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'struct') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'typedef') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'union') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'unsigned') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'void') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, 'volatile') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, '{') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s112, TYPE_NAME) = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s113, ')') = <shift, s114>
action(s113, ',') = <shift, s149>
action(s114, '(') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, ')') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, ',') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, ':') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, ';') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, '=') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, '[') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'auto') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'char') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'const') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'double') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'enum') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'extern') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'float') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'int') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'long') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'register') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'short') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'signed') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'static') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'struct') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'typedef') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'union') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'unsigned') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'void') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, 'volatile') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, '{') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s114, TYPE_NAME) = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s115, ')') = <shift, s116>
action(s116, '(') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, ')') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, ',') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, ':') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, ';') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, '=') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, '[') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'auto') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'char') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'const') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'double') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'enum') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'extern') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'float') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'int') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'long') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'register') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'short') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'signed') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'static') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'struct') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'typedef') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'union') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'unsigned') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'void') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, 'volatile') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, '{') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s116, TYPE_NAME) = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s117, '(') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, ')') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, ',') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, ':') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, ';') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, '=') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, '[') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'auto') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'char') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'const') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'double') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'enum') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'extern') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'float') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'int') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'long') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'register') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'short') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'signed') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'static') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'struct') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'typedef') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'union') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'unsigned') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'void') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, 'volatile') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, '{') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s117, TYPE_NAME) = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s118, ']') = <shift, s119>
action(s119, '(') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, ')') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, ',') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, ':') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, ';') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, '=') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, '[') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'auto') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'char') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'const') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'double') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'enum') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'extern') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'float') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'int') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'long') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'register') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'short') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'signed') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'static') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'struct') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'typedef') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'union') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'unsigned') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'void') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, 'volatile') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, '{') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s119, TYPE_NAME) = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s120, '(') = <reduce, specifier_qualifier_list -> type_qualifier>
action(s120, ')') = <reduce, specifier_qualifier_list -> type_qualifier>
action(s120, '*') = <reduce, specifier_qualifier_list -> type_qualifier>
action(s120, ':') = <reduce, specifier_qualifier_list -> type_qualifier>
action(s120, '[') = <reduce, specifier_qualifier_list -> type_qualifier>
action(s120, 'char') = <shift, s219>
action(s120, 'const') = <shift, s215>
action(s120, 'double') = <shift, s220>
action(s120, 'enum') = <shift, s126>
action(s120, 'float') = <shift, s221>
action(s120, 'int') = <shift, s222>
action(s120, 'long') = <shift, s223>
action(s120, 'short') = <shift, s224>
action(s120, 'signed') = <shift, s225>
action(s120, 'struct') = <shift, s208>
action(s120, 'union') = <shift, s209>
action(s120, 'unsigned') = <shift, s226>
action(s120, 'void') = <shift, s227>
action(s120, 'volatile') = <shift, s216>
action(s120, IDENTIFIER) = <reduce, specifier_qualifier_list -> type_qualifier>
action(s120, TYPE_NAME) = <shift, s228>
action(s121, '(') = <reduce, specifier_qualifier_list -> type_specifier>
action(s121, ')') = <reduce, specifier_qualifier_list -> type_specifier>
action(s121, '*') = <reduce, specifier_qualifier_list -> type_specifier>
action(s121, ':') = <reduce, specifier_qualifier_list -> type_specifier>
action(s121, '[') = <reduce, specifier_qualifier_list -> type_specifier>
action(s121, 'char') = <shift, s219>
action(s121, 'const') = <shift, s215>
action(s121, 'double') = <shift, s220>
action(s121, 'enum') = <shift, s126>
action(s121, 'float') = <shift, s221>
action(s121, 'int') = <shift, s222>
action(s121, 'long') = <shift, s223>
action(s121, 'short') = <shift, s224>
action(s121, 'signed') = <shift, s225>
action(s121, 'struct') = <shift, s208>
action(s121, 'union') = <shift, s209>
action(s121, 'unsigned') = <shift, s226>
action(s121, 'void') = <shift, s227>
action(s121, 'volatile') = <shift, s216>
action(s121, IDENTIFIER) = <reduce, specifier_qualifier_list -> type_specifier>
action(s121, TYPE_NAME) = <shift, s228>
action(s122, 'char') = <shift, s219>
action(s122, 'const') = <shift, s215>
action(s122, 'double') = <shift, s220>
action(s122, 'enum') = <shift, s126>
action(s122, 'float') = <shift, s221>
action(s122, 'int') = <shift, s222>
action(s122, 'long') = <shift, s223>
action(s122, 'short') = <shift, s224>
action(s122, 'signed') = <shift, s225>
action(s122, 'struct') = <shift, s208>
action(s122, 'union') = <shift, s209>
action(s122, 'unsigned') = <shift, s226>
action(s122, 'void') = <shift, s227>
action(s122, 'volatile') = <shift, s216>
action(s122, TYPE_NAME) = <shift, s228>
action(s123, 'char') = <shift, s219>
action(s123, 'const') = <shift, s215>
action(s123, 'double') = <shift, s220>
action(s123, 'enum') = <shift, s126>
action(s123, 'float') = <shift, s221>
action(s123, 'int') = <shift, s222>
action(s123, 'long') = <shift, s223>
action(s123, 'short') = <shift, s224>
action(s123, 'signed') = <shift, s225>
action(s123, 'struct') = <shift, s208>
action(s123, 'union') = <shift, s209>
action(s123, 'unsigned') = <shift, s226>
action(s123, 'void') = <shift, s227>
action(s123, 'volatile') = <shift, s216>
action(s123, TYPE_NAME) = <shift, s228>
action(s124, 'char') = <shift, s219>
action(s124, 'const') = <shift, s215>
action(s124, 'double') = <shift, s220>
action(s124, 'enum') = <shift, s126>
action(s124, 'float') = <shift, s221>
action(s124, 'int') = <shift, s222>
action(s124, 'long') = <shift, s223>
action(s124, 'short') = <shift, s224>
action(s124, 'signed') = <shift, s225>
action(s124, 'struct') = <shift, s208>
action(s124, 'union') = <shift, s209>
action(s124, 'unsigned') = <shift, s226>
action(s124, 'void') = <shift, s227>
action(s124, 'volatile') = <shift, s216>
action(s124, '}') = <shift, s211>
action(s124, TYPE_NAME) = <shift, s228>
action(s125, 'char') = <shift, s219>
action(s125, 'const') = <shift, s215>
action(s125, 'double') = <shift, s220>
action(s125, 'enum') = <shift, s126>
action(s125, 'float') = <shift, s221>
action(s125, 'int') = <shift, s222>
action(s125, 'long') = <shift, s223>
action(s125, 'short') = <shift, s224>
action(s125, 'signed') = <shift, s225>
action(s125, 'struct') = <shift, s208>
action(s125, 'union') = <shift, s209>
action(s125, 'unsigned') = <shift, s226>
action(s125, 'void') = <shift, s227>
action(s125, 'volatile') = <shift, s216>
action(s125, '}') = <shift, s213>
action(s125, TYPE_NAME) = <shift, s228>
action(s126, '{') = <shift, s127>
action(s126, IDENTIFIER) = <shift, s130>
action(s127, IDENTIFIER) = <shift, s135>
action(s128, ',') = <shift, s134>
action(s128, '}') = <shift, s129>
action(s129, '(') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, ')') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, '*') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, ',') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, ':') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, ';') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, '[') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'auto') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'char') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'const') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'double') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'enum') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'extern') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'float') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'int') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'long') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'register') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'short') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'signed') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'static') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'struct') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'typedef') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'union') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'unsigned') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'void') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, 'volatile') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, IDENTIFIER) = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s129, TYPE_NAME) = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s130, '(') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, ')') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, '*') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, ',') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, ':') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, ';') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, '[') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'auto') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'char') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'const') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'double') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'enum') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'extern') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'float') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'int') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'long') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'register') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'short') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'signed') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'static') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'struct') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'typedef') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'union') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'unsigned') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'void') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, 'volatile') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, '{') = <shift, s131>
action(s130, IDENTIFIER) = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s130, TYPE_NAME) = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s131, IDENTIFIER) = <shift, s135>
action(s132, ',') = <shift, s134>
action(s132, '}') = <shift, s133>
action(s133, '(') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, ')') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, '*') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, ',') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, ':') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, ';') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, '[') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'auto') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'char') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'const') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'double') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'enum') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'extern') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'float') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'int') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'long') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'register') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'short') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'signed') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'static') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'struct') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'typedef') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'union') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'unsigned') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'void') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, 'volatile') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, IDENTIFIER) = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s133, TYPE_NAME) = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s134, IDENTIFIER) = <shift, s135>
action(s135, ',') = <reduce, enumerator -> IDENTIFIER>
action(s135, '=') = <shift, s23>
action(s135, '}') = <reduce, enumerator -> IDENTIFIER>
action(s136, ',') = <reduce, enumerator -> IDENTIFIER '=' constant_expression>
action(s136, '}') = <reduce, enumerator -> IDENTIFIER '=' constant_expression>
action(s137, ',') = <reduce, enumerator_list -> enumerator>
action(s137, '}') = <reduce, enumerator_list -> enumerator>
action(s138, ',') = <reduce, enumerator_list -> enumerator_list ',' enumerator>
action(s138, '}') = <reduce, enumerator_list -> enumerator_list ',' enumerator>
action(s139, '!=') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s139, '&&') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s139, '&') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s139, ')') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s139, ',') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s139, ':') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s139, ';') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s139, '<') = <shift, s33>
action(s139, '<=') = <shift, s34>
action(s139, '==') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s139, '>') = <shift, s35>
action(s139, '>=') = <shift, s36>
action(s139, '?') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s139, ']') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s139, '^') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s139, '|') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s139, '||') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s139, '}') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s140, '!=') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s140, '&&') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s140, '&') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s140, ')') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s140, ',') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s140, ':') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s140, ';') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s140, '<') = <shift, s33>
action(s140, '<=') = <shift, s34>
action(s140, '==') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s140, '>') = <shift, s35>
action(s140, '>=') = <shift, s36>
action(s140, '?') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s140, ']') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s140, '^') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s140, '|') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s140, '||') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s140, '}') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s141, '!=') = <reduce, equality_expression -> relational_expression>
action(s141, '&&') = <reduce, equality_expression -> relational_expression>
action(s141, '&') = <reduce, equality_expression -> relational_expression>
action(s141, ')') = <reduce, equality_expression -> relational_expression>
action(s141, ',') = <reduce, equality_expression -> relational_expression>
action(s141, ':') = <reduce, equality_expression -> relational_expression>
action(s141, ';') = <reduce, equality_expression -> relational_expression>
action(s141, '<') = <shift, s33>
action(s141, '<=') = <shift, s34>
action(s141, '==') = <reduce, equality_expression -> relational_expression>
action(s141, '>') = <shift, s35>
action(s141, '>=') = <shift, s36>
action(s141, '?') = <reduce, equality_expression -> relational_expression>
action(s141, ']') = <reduce, equality_expression -> relational_expression>
action(s141, '^') = <reduce, equality_expression -> relational_expression>
action(s141, '|') = <reduce, equality_expression -> relational_expression>
action(s141, '||') = <reduce, equality_expression -> relational_expression>
action(s141, '}') = <reduce, equality_expression -> relational_expression>
action(s142, '&&') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s142, ')') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s142, ',') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s142, ':') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s142, ';') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s142, '?') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s142, ']') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s142, '^') = <shift, s29>
action(s142, '|') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s142, '||') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s142, '}') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s143, '&&') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s143, ')') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s143, ',') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s143, ':') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s143, ';') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s143, '?') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s143, ']') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s143, '^') = <shift, s29>
action(s143, '|') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s143, '||') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s143, '}') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s144, ')') = <reduce, expression -> assignment_expression>
action(s144, ',') = <reduce, expression -> assignment_expression>
action(s144, ':') = <reduce, expression -> assignment_expression>
action(s144, ';') = <reduce, expression -> assignment_expression>
action(s144, ']') = <reduce, expression -> assignment_expression>
action(s145, ',') = <shift, s18>
action(s145, ']') = <shift, s181>
action(s146, ')') = <shift, s183>
action(s146, ',') = <shift, s18>
action(s147, ')') = <reduce, expression -> expression ',' assignment_expression>
action(s147, ',') = <reduce, expression -> expression ',' assignment_expression>
action(s147, ':') = <reduce, expression -> expression ',' assignment_expression>
action(s147, ';') = <reduce, expression -> expression ',' assignment_expression>
action(s147, ']') = <reduce, expression -> expression ',' assignment_expression>
action(s148, ')') = <reduce, identifier_list -> IDENTIFIER>
action(s148, ',') = <reduce, identifier_list -> IDENTIFIER>
action(s149, IDENTIFIER) = <shift, s150>
action(s150, ')') = <reduce, identifier_list -> identifier_list ',' IDENTIFIER>
action(s150, ',') = <reduce, identifier_list -> identifier_list ',' IDENTIFIER>
action(s151, '&&') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s151, ')') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s151, ',') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s151, ':') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s151, ';') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s151, '?') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s151, ']') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s151, '|') = <shift, s28>
action(s151, '||') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s151, '}') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s152, '&&') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s152, ')') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s152, ',') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s152, ':') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s152, ';') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s152, '?') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s152, ']') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s152, '|') = <shift, s28>
action(s152, '||') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s152, '}') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s153, '&&') = <shift, s27>
action(s153, ')') = <reduce, logical_or_expression -> logical_and_expression>
action(s153, ',') = <reduce, logical_or_expression -> logical_and_expression>
action(s153, ':') = <reduce, logical_or_expression -> logical_and_expression>
action(s153, ';') = <reduce, logical_or_expression -> logical_and_expression>
action(s153, '?') = <reduce, logical_or_expression -> logical_and_expression>
action(s153, ']') = <reduce, logical_or_expression -> logical_and_expression>
action(s153, '||') = <reduce, logical_or_expression -> logical_and_expression>
action(s153, '}') = <reduce, logical_or_expression -> logical_and_expression>
action(s154, '&&') = <shift, s27>
action(s154, ')') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s154, ',') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s154, ':') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s154, ';') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s154, '?') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s154, ']') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s154, '||') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s154, '}') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s155, '!=') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '%') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '&&') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '&') = <reduce, multiplicative_expression -> cast_expression>
action(s155, ')') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '*') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '+') = <reduce, multiplicative_expression -> cast_expression>
action(s155, ',') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '-') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '/') = <reduce, multiplicative_expression -> cast_expression>
action(s155, ':') = <reduce, multiplicative_expression -> cast_expression>
action(s155, ';') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '<') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '<<') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '<=') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '==') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '>') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '>=') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '>>') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '?') = <reduce, multiplicative_expression -> cast_expression>
action(s155, ']') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '^') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '|') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '||') = <reduce, multiplicative_expression -> cast_expression>
action(s155, '}') = <reduce, multiplicative_expression -> cast_expression>
action(s156, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '%') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '&') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, ')') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '*') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '+') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, ',') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '-') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '/') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, ':') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, ';') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '<') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '==') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '>') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '?') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, ']') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '^') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '|') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '||') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s156, '}') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s157, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '%') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '&') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, ')') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '*') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '+') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, ',') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '-') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '/') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, ':') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, ';') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '<') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '==') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '>') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '?') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, ']') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '^') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '|') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '||') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s157, '}') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s158, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '%') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '&') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, ')') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '*') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '+') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, ',') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '-') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '/') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, ':') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, ';') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '<') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '==') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '>') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '?') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, ']') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '^') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '|') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '||') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s158, '}') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s159, ')') = <reduce, parameter_declaration -> declaration_specifiers abstract_declarator>
action(s159, ',') = <reduce, parameter_declaration -> declaration_specifiers abstract_declarator>
action(s160, ')') = <reduce, parameter_declaration -> declaration_specifiers declarator>
action(s160, ',') = <reduce, parameter_declaration -> declaration_specifiers declarator>
action(s161, ')') = <reduce, parameter_list -> parameter_declaration>
action(s161, ',') = <reduce, parameter_list -> parameter_declaration>
action(s162, ')') = <reduce, parameter_type_list -> parameter_list>
action(s162, ',') = <shift, s85>
action(s163, ')') = <reduce, parameter_list -> parameter_list ',' parameter_declaration>
action(s163, ',') = <reduce, parameter_list -> parameter_list ',' parameter_declaration>
action(s164, ')') = <reduce, parameter_type_list -> parameter_list ',' '...'>
action(s165, '(') = <reduce, pointer -> '*'>
action(s165, ')') = <reduce, pointer -> '*'>
action(s165, '*') = <shift, s165>
action(s165, ',') = <reduce, pointer -> '*'>
action(s165, '[') = <reduce, pointer -> '*'>
action(s165, 'const') = <shift, s215>
action(s165, 'volatile') = <shift, s216>
action(s165, IDENTIFIER) = <reduce, pointer -> '*'>
action(s166, '(') = <reduce, pointer -> '*' type_qualifier_list>
action(s166, ')') = <reduce, pointer -> '*' type_qualifier_list>
action(s166, '*') = <shift, s165>
action(s166, ',') = <reduce, pointer -> '*' type_qualifier_list>
action(s166, '[') = <reduce, pointer -> '*' type_qualifier_list>
action(s166, 'const') = <shift, s215>
action(s166, 'volatile') = <shift, s216>
action(s166, IDENTIFIER) = <reduce, pointer -> '*' type_qualifier_list>
action(s167, '(') = <reduce, pointer -> '*' pointer>
action(s167, ')') = <reduce, pointer -> '*' pointer>
action(s167, ',') = <reduce, pointer -> '*' pointer>
action(s167, '[') = <reduce, pointer -> '*' pointer>
action(s167, IDENTIFIER) = <reduce, pointer -> '*' pointer>
action(s168, '(') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s168, ')') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s168, ',') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s168, '[') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s168, IDENTIFIER) = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s169, '!') = <shift, s237>
action(s169, '&') = <shift, s238>
action(s169, '(') = <shift, s17>
action(s169, '*') = <shift, s239>
action(s169, '+') = <shift, s240>
action(s169, '++') = <shift, s169>
action(s169, '-') = <shift, s241>
action(s169, '--') = <shift, s170>
action(s169, 'sizeof') = <shift, s171>
action(s169, '~') = <shift, s242>
action(s169, CONSTANT) = <shift, s184>
action(s169, IDENTIFIER) = <shift, s185>
action(s169, STRING_LITERAL) = <shift, s186>
action(s170, '!') = <shift, s237>
action(s170, '&') = <shift, s238>
action(s170, '(') = <shift, s17>
action(s170, '*') = <shift, s239>
action(s170, '+') = <shift, s240>
action(s170, '++') = <shift, s169>
action(s170, '-') = <shift, s241>
action(s170, '--') = <shift, s170>
action(s170, 'sizeof') = <shift, s171>
action(s170, '~') = <shift, s242>
action(s170, CONSTANT) = <shift, s184>
action(s170, IDENTIFIER) = <shift, s185>
action(s170, STRING_LITERAL) = <shift, s186>
action(s171, '!') = <shift, s237>
action(s171, '&') = <shift, s238>
action(s171, '(') = <shift, s15>
action(s171, '*') = <shift, s239>
action(s171, '+') = <shift, s240>
action(s171, '++') = <shift, s169>
action(s171, '-') = <shift, s241>
action(s171, '--') = <shift, s170>
action(s171, 'sizeof') = <shift, s171>
action(s171, '~') = <shift, s242>
action(s171, CONSTANT) = <shift, s184>
action(s171, IDENTIFIER) = <shift, s185>
action(s171, STRING_LITERAL) = <shift, s186>
action(s172, '!=') = <reduce, unary_expression -> postfix_expression>
action(s172, '%') = <reduce, unary_expression -> postfix_expression>
action(s172, '%=') = <reduce, unary_expression -> postfix_expression>
action(s172, '&&') = <reduce, unary_expression -> postfix_expression>
action(s172, '&') = <reduce, unary_expression -> postfix_expression>
action(s172, '&=') = <reduce, unary_expression -> postfix_expression>
action(s172, '(') = <shift, s10>
action(s172, ')') = <reduce, unary_expression -> postfix_expression>
action(s172, '*') = <reduce, unary_expression -> postfix_expression>
action(s172, '*=') = <reduce, unary_expression -> postfix_expression>
action(s172, '+') = <reduce, unary_expression -> postfix_expression>
action(s172, '++') = <shift, s175>
action(s172, '+=') = <reduce, unary_expression -> postfix_expression>
action(s172, ',') = <reduce, unary_expression -> postfix_expression>
action(s172, '-') = <reduce, unary_expression -> postfix_expression>
action(s172, '--') = <shift, s176>
action(s172, '-=') = <reduce, unary_expression -> postfix_expression>
action(s172, '->') = <shift, s177>
action(s172, '.') = <shift, s179>
action(s172, '/') = <reduce, unary_expression -> postfix_expression>
action(s172, '/=') = <reduce, unary_expression -> postfix_expression>
action(s172, ':') = <reduce, unary_expression -> postfix_expression>
action(s172, ';') = <reduce, unary_expression -> postfix_expression>
action(s172, '<') = <reduce, unary_expression -> postfix_expression>
action(s172, '<<') = <reduce, unary_expression -> postfix_expression>
action(s172, '<<=') = <reduce, unary_expression -> postfix_expression>
action(s172, '<=') = <reduce, unary_expression -> postfix_expression>
action(s172, '=') = <reduce, unary_expression -> postfix_expression>
action(s172, '==') = <reduce, unary_expression -> postfix_expression>
action(s172, '>') = <reduce, unary_expression -> postfix_expression>
action(s172, '>=') = <reduce, unary_expression -> postfix_expression>
action(s172, '>>') = <reduce, unary_expression -> postfix_expression>
action(s172, '>>=') = <reduce, unary_expression -> postfix_expression>
action(s172, '?') = <reduce, unary_expression -> postfix_expression>
action(s172, '[') = <shift, s16>
action(s172, ']') = <reduce, unary_expression -> postfix_expression>
action(s172, '^') = <reduce, unary_expression -> postfix_expression>
action(s172, '^=') = <reduce, unary_expression -> postfix_expression>
action(s172, '|') = <reduce, unary_expression -> postfix_expression>
action(s172, '|=') = <reduce, unary_expression -> postfix_expression>
action(s172, '||') = <reduce, unary_expression -> postfix_expression>
action(s172, '}') = <reduce, unary_expression -> postfix_expression>
action(s173, '!=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '%') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '%=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '&&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '&=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '(') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, ')') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '*') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '*=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '+') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '++') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '+=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, ',') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '-') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '--') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '-=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '->') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '.') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '/') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '/=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, ':') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, ';') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '<<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '<<=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '<=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '==') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '>=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '>>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '>>=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '?') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '[') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, ']') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '^') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '^=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '|') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '|=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '||') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s173, '}') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s174, '!=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '%') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '%=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '&&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '&=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '(') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, ')') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '*') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '*=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '+') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '++') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '+=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, ',') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '-') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '--') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '-=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '->') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '.') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '/') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '/=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, ':') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, ';') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '<<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '<<=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '<=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '==') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '>=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '>>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '>>=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '?') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '[') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, ']') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '^') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '^=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '|') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '|=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '||') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s174, '}') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s175, '!=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '%') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '%=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '&&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '&=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '(') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, ')') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '*') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '*=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '+') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '++') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '+=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, ',') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '-') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '--') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '-=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '->') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '.') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '/') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '/=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, ':') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, ';') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '<<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '<<=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '<=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '==') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '>=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '>>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '>>=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '?') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '[') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, ']') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '^') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '^=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '|') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '|=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '||') = <reduce, postfix_expression -> postfix_expression '++'>
action(s175, '}') = <reduce, postfix_expression -> postfix_expression '++'>
action(s176, '!=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '%') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '%=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '&&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '&=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '(') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, ')') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '*') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '*=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '+') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '++') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '+=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, ',') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '-') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '--') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '-=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '->') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '.') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '/') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '/=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, ':') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, ';') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '<<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '<<=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '<=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '==') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '>=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '>>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '>>=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '?') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '[') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, ']') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '^') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '^=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '|') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '|=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '||') = <reduce, postfix_expression -> postfix_expression '--'>
action(s176, '}') = <reduce, postfix_expression -> postfix_expression '--'>
action(s177, IDENTIFIER) = <shift, s178>
action(s178, '!=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '%') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '%=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '&&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '&=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '(') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, ')') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '*') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '*=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '+') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '++') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '+=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, ',') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '-') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '--') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '-=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '->') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '.') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '/') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '/=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, ':') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, ';') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '<<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '<<=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '<=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '==') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '>=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '>>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '>>=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '?') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '[') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, ']') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '^') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '^=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '|') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '|=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '||') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s178, '}') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s179, IDENTIFIER) = <shift, s180>
action(s180, '!=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '%') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '%=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '&&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '&=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '(') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, ')') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '*') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '*=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '+') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '++') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '+=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, ',') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '-') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '--') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '-=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '->') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '.') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '/') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '/=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, ':') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, ';') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '<<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '<<=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '<=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '==') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '>=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '>>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '>>=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '?') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '[') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, ']') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '^') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '^=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '|') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '|=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '||') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s180, '}') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s181, '!=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '%') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '%=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '&&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '&=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '(') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, ')') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '*') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '*=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '+') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '++') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '+=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, ',') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '-') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '--') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '-=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '->') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '.') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '/') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '/=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, ':') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, ';') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '<<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '<<=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '<=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '==') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '>=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '>>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '>>=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '?') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '[') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, ']') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '^') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '^=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '|') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '|=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '||') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s181, '}') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s182, '!=') = <reduce, postfix_expression -> primary_expression>
action(s182, '%') = <reduce, postfix_expression -> primary_expression>
action(s182, '%=') = <reduce, postfix_expression -> primary_expression>
action(s182, '&&') = <reduce, postfix_expression -> primary_expression>
action(s182, '&') = <reduce, postfix_expression -> primary_expression>
action(s182, '&=') = <reduce, postfix_expression -> primary_expression>
action(s182, '(') = <reduce, postfix_expression -> primary_expression>
action(s182, ')') = <reduce, postfix_expression -> primary_expression>
action(s182, '*') = <reduce, postfix_expression -> primary_expression>
action(s182, '*=') = <reduce, postfix_expression -> primary_expression>
action(s182, '+') = <reduce, postfix_expression -> primary_expression>
action(s182, '++') = <reduce, postfix_expression -> primary_expression>
action(s182, '+=') = <reduce, postfix_expression -> primary_expression>
action(s182, ',') = <reduce, postfix_expression -> primary_expression>
action(s182, '-') = <reduce, postfix_expression -> primary_expression>
action(s182, '--') = <reduce, postfix_expression -> primary_expression>
action(s182, '-=') = <reduce, postfix_expression -> primary_expression>
action(s182, '->') = <reduce, postfix_expression -> primary_expression>
action(s182, '.') = <reduce, postfix_expression -> primary_expression>
action(s182, '/') = <reduce, postfix_expression -> primary_expression>
action(s182, '/=') = <reduce, postfix_expression -> primary_expression>
action(s182, ':') = <reduce, postfix_expression -> primary_expression>
action(s182, ';') = <reduce, postfix_expression -> primary_expression>
action(s182, '<') = <reduce, postfix_expression -> primary_expression>
action(s182, '<<') = <reduce, postfix_expression -> primary_expression>
action(s182, '<<=') = <reduce, postfix_expression -> primary_expression>
action(s182, '<=') = <reduce, postfix_expression -> primary_expression>
action(s182, '=') = <reduce, postfix_expression -> primary_expression>
action(s182, '==') = <reduce, postfix_expression -> primary_expression>
action(s182, '>') = <reduce, postfix_expression -> primary_expression>
action(s182, '>=') = <reduce, postfix_expression -> primary_expression>
action(s182, '>>') = <reduce, postfix_expression -> primary_expression>
action(s182, '>>=') = <reduce, postfix_expression -> primary_expression>
action(s182, '?') = <reduce, postfix_expression -> primary_expression>
action(s182, '[') = <reduce, postfix_expression -> primary_expression>
action(s182, ']') = <reduce, postfix_expression -> primary_expression>
action(s182, '^') = <reduce, postfix_expression -> primary_expression>
action(s182, '^=') = <reduce, postfix_expression -> primary_expression>
action(s182, '|') = <reduce, postfix_expression -> primary_expression>
action(s182, '|=') = <reduce, postfix_expression -> primary_expression>
action(s182, '||') = <reduce, postfix_expression -> primary_expression>
action(s182, '}') = <reduce, postfix_expression -> primary_expression>
action(s183, '!=') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '%') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '%=') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '&&') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '&') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '&=') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '(') = <reduce, primary_expression -> '(' expression ')'>
action(s183, ')') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '*') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '*=') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '+') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '++') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '+=') = <reduce, primary_expression -> '(' expression ')'>
action(s183, ',') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '-') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '--') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '-=') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '->') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '.') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '/') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '/=') = <reduce, primary_expression -> '(' expression ')'>
action(s183, ':') = <reduce, primary_expression -> '(' expression ')'>
action(s183, ';') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '<') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '<<') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '<<=') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '<=') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '=') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '==') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '>') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '>=') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '>>') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '>>=') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '?') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '[') = <reduce, primary_expression -> '(' expression ')'>
action(s183, ']') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '^') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '^=') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '|') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '|=') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '||') = <reduce, primary_expression -> '(' expression ')'>
action(s183, '}') = <reduce, primary_expression -> '(' expression ')'>
action(s184, '!=') = <reduce, primary_expression -> CONSTANT>
action(s184, '%') = <reduce, primary_expression -> CONSTANT>
action(s184, '%=') = <reduce, primary_expression -> CONSTANT>
action(s184, '&&') = <reduce, primary_expression -> CONSTANT>
action(s184, '&') = <reduce, primary_expression -> CONSTANT>
action(s184, '&=') = <reduce, primary_expression -> CONSTANT>
action(s184, '(') = <reduce, primary_expression -> CONSTANT>
action(s184, ')') = <reduce, primary_expression -> CONSTANT>
action(s184, '*') = <reduce, primary_expression -> CONSTANT>
action(s184, '*=') = <reduce, primary_expression -> CONSTANT>
action(s184, '+') = <reduce, primary_expression -> CONSTANT>
action(s184, '++') = <reduce, primary_expression -> CONSTANT>
action(s184, '+=') = <reduce, primary_expression -> CONSTANT>
action(s184, ',') = <reduce, primary_expression -> CONSTANT>
action(s184, '-') = <reduce, primary_expression -> CONSTANT>
action(s184, '--') = <reduce, primary_expression -> CONSTANT>
action(s184, '-=') = <reduce, primary_expression -> CONSTANT>
action(s184, '->') = <reduce, primary_expression -> CONSTANT>
action(s184, '.') = <reduce, primary_expression -> CONSTANT>
action(s184, '/') = <reduce, primary_expression -> CONSTANT>
action(s184, '/=') = <reduce, primary_expression -> CONSTANT>
action(s184, ':') = <reduce, primary_expression -> CONSTANT>
action(s184, ';') = <reduce, primary_expression -> CONSTANT>
action(s184, '<') = <reduce, primary_expression -> CONSTANT>
action(s184, '<<') = <reduce, primary_expression -> CONSTANT>
action(s184, '<<=') = <reduce, primary_expression -> CONSTANT>
action(s184, '<=') = <reduce, primary_expression -> CONSTANT>
action(s184, '=') = <reduce, primary_expression -> CONSTANT>
action(s184, '==') = <reduce, primary_expression -> CONSTANT>
action(s184, '>') = <reduce, primary_expression -> CONSTANT>
action(s184, '>=') = <reduce, primary_expression -> CONSTANT>
action(s184, '>>') = <reduce, primary_expression -> CONSTANT>
action(s184, '>>=') = <reduce, primary_expression -> CONSTANT>
action(s184, '?') = <reduce, primary_expression -> CONSTANT>
action(s184, '[') = <reduce, primary_expression -> CONSTANT>
action(s184, ']') = <reduce, primary_expression -> CONSTANT>
action(s184, '^') = <reduce, primary_expression -> CONSTANT>
action(s184, '^=') = <reduce, primary_expression -> CONSTANT>
action(s184, '|') = <reduce, primary_expression -> CONSTANT>
action(s184, '|=') = <reduce, primary_expression -> CONSTANT>
action(s184, '||') = <reduce, primary_expression -> CONSTANT>
action(s184, '}') = <reduce, primary_expression -> CONSTANT>
action(s185, '!=') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '%') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '%=') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '&&') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '&') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '&=') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '(') = <reduce, primary_expression -> IDENTIFIER>
action(s185, ')') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '*') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '*=') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '+') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '++') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '+=') = <reduce, primary_expression -> IDENTIFIER>
action(s185, ',') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '-') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '--') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '-=') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '->') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '.') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '/') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '/=') = <reduce, primary_expression -> IDENTIFIER>
action(s185, ':') = <reduce, primary_expression -> IDENTIFIER>
action(s185, ';') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '<') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '<<') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '<<=') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '<=') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '=') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '==') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '>') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '>=') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '>>') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '>>=') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '?') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '[') = <reduce, primary_expression -> IDENTIFIER>
action(s185, ']') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '^') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '^=') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '|') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '|=') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '||') = <reduce, primary_expression -> IDENTIFIER>
action(s185, '}') = <reduce, primary_expression -> IDENTIFIER>
action(s186, '!=') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '%') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '%=') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '&&') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '&') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '&=') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '(') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, ')') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '*') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '*=') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '+') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '++') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '+=') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, ',') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '-') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '--') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '-=') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '->') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '.') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '/') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '/=') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, ':') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, ';') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '<') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '<<') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '<<=') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '<=') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '=') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '==') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '>') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '>=') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '>>') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '>>=') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '?') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '[') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, ']') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '^') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '^=') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '|') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '|=') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '||') = <reduce, primary_expression -> STRING_LITERAL>
action(s186, '}') = <reduce, primary_expression -> STRING_LITERAL>
action(s187, '!=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s187, '&&') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s187, '&') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s187, ')') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s187, ',') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s187, ':') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s187, ';') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s187, '<') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s187, '<<') = <shift, s37>
action(s187, '<=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s187, '==') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s187, '>') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s187, '>=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s187, '>>') = <shift, s38>
action(s187, '?') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s187, ']') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s187, '^') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s187, '|') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s187, '||') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s187, '}') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s188, '!=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s188, '&&') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s188, '&') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s188, ')') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s188, ',') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s188, ':') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s188, ';') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s188, '<') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s188, '<<') = <shift, s37>
action(s188, '<=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s188, '==') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s188, '>') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s188, '>=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s188, '>>') = <shift, s38>
action(s188, '?') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s188, ']') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s188, '^') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s188, '|') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s188, '||') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s188, '}') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s189, '!=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s189, '&&') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s189, '&') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s189, ')') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s189, ',') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s189, ':') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s189, ';') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s189, '<') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s189, '<<') = <shift, s37>
action(s189, '<=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s189, '==') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s189, '>') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s189, '>=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s189, '>>') = <shift, s38>
action(s189, '?') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s189, ']') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s189, '^') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s189, '|') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s189, '||') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s189, '}') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s190, '!=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s190, '&&') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s190, '&') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s190, ')') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s190, ',') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s190, ':') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s190, ';') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s190, '<') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s190, '<<') = <shift, s37>
action(s190, '<=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s190, '==') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s190, '>') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s190, '>=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s190, '>>') = <shift, s38>
action(s190, '?') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s190, ']') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s190, '^') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s190, '|') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s190, '||') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s190, '}') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s191, '!=') = <reduce, relational_expression -> shift_expression>
action(s191, '&&') = <reduce, relational_expression -> shift_expression>
action(s191, '&') = <reduce, relational_expression -> shift_expression>
action(s191, ')') = <reduce, relational_expression -> shift_expression>
action(s191, ',') = <reduce, relational_expression -> shift_expression>
action(s191, ':') = <reduce, relational_expression -> shift_expression>
action(s191, ';') = <reduce, relational_expression -> shift_expression>
action(s191, '<') = <reduce, relational_expression -> shift_expression>
action(s191, '<<') = <shift, s37>
action(s191, '<=') = <reduce, relational_expression -> shift_expression>
action(s191, '==') = <reduce, relational_expression -> shift_expression>
action(s191, '>') = <reduce, relational_expression -> shift_expression>
action(s191, '>=') = <reduce, relational_expression -> shift_expression>
action(s191, '>>') = <shift, s38>
action(s191, '?') = <reduce, relational_expression -> shift_expression>
action(s191, ']') = <reduce, relational_expression -> shift_expression>
action(s191, '^') = <reduce, relational_expression -> shift_expression>
action(s191, '|') = <reduce, relational_expression -> shift_expression>
action(s191, '||') = <reduce, relational_expression -> shift_expression>
action(s191, '}') = <reduce, relational_expression -> shift_expression>
action(s192, '(') = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s192, ')') = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s192, '*') = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s192, ':') = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s192, '[') = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s192, IDENTIFIER) = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s193, '(') = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s193, ')') = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s193, '*') = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s193, ':') = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s193, '[') = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s193, IDENTIFIER) = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s194, '(') = <reduce, storage_class_specifier -> 'auto'>
action(s194, ')') = <reduce, storage_class_specifier -> 'auto'>
action(s194, '*') = <reduce, storage_class_specifier -> 'auto'>
action(s194, ',') = <reduce, storage_class_specifier -> 'auto'>
action(s194, ';') = <reduce, storage_class_specifier -> 'auto'>
action(s194, '[') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'auto') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'char') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'const') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'double') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'enum') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'extern') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'float') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'int') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'long') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'register') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'short') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'signed') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'static') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'struct') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'typedef') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'union') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'unsigned') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'void') = <reduce, storage_class_specifier -> 'auto'>
action(s194, 'volatile') = <reduce, storage_class_specifier -> 'auto'>
action(s194, IDENTIFIER) = <reduce, storage_class_specifier -> 'auto'>
action(s194, TYPE_NAME) = <reduce, storage_class_specifier -> 'auto'>
action(s195, '(') = <reduce, storage_class_specifier -> 'extern'>
action(s195, ')') = <reduce, storage_class_specifier -> 'extern'>
action(s195, '*') = <reduce, storage_class_specifier -> 'extern'>
action(s195, ',') = <reduce, storage_class_specifier -> 'extern'>
action(s195, ';') = <reduce, storage_class_specifier -> 'extern'>
action(s195, '[') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'auto') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'char') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'const') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'double') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'enum') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'extern') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'float') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'int') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'long') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'register') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'short') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'signed') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'static') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'struct') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'typedef') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'union') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'unsigned') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'void') = <reduce, storage_class_specifier -> 'extern'>
action(s195, 'volatile') = <reduce, storage_class_specifier -> 'extern'>
action(s195, IDENTIFIER) = <reduce, storage_class_specifier -> 'extern'>
action(s195, TYPE_NAME) = <reduce, storage_class_specifier -> 'extern'>
action(s196, '(') = <reduce, storage_class_specifier -> 'register'>
action(s196, ')') = <reduce, storage_class_specifier -> 'register'>
action(s196, '*') = <reduce, storage_class_specifier -> 'register'>
action(s196, ',') = <reduce, storage_class_specifier -> 'register'>
action(s196, ';') = <reduce, storage_class_specifier -> 'register'>
action(s196, '[') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'auto') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'char') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'const') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'double') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'enum') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'extern') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'float') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'int') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'long') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'register') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'short') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'signed') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'static') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'struct') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'typedef') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'union') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'unsigned') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'void') = <reduce, storage_class_specifier -> 'register'>
action(s196, 'volatile') = <reduce, storage_class_specifier -> 'register'>
action(s196, IDENTIFIER) = <reduce, storage_class_specifier -> 'register'>
action(s196, TYPE_NAME) = <reduce, storage_class_specifier -> 'register'>
action(s197, '(') = <reduce, storage_class_specifier -> 'static'>
action(s197, ')') = <reduce, storage_class_specifier -> 'static'>
action(s197, '*') = <reduce, storage_class_specifier -> 'static'>
action(s197, ',') = <reduce, storage_class_specifier -> 'static'>
action(s197, ';') = <reduce, storage_class_specifier -> 'static'>
action(s197, '[') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'auto') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'char') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'const') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'double') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'enum') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'extern') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'float') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'int') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'long') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'register') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'short') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'signed') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'static') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'struct') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'typedef') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'union') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'unsigned') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'void') = <reduce, storage_class_specifier -> 'static'>
action(s197, 'volatile') = <reduce, storage_class_specifier -> 'static'>
action(s197, IDENTIFIER) = <reduce, storage_class_specifier -> 'static'>
action(s197, TYPE_NAME) = <reduce, storage_class_specifier -> 'static'>
action(s198, '(') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, ')') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, '*') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, ',') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, ';') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, '[') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'auto') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'char') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'const') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'double') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'enum') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'extern') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'float') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'int') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'long') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'register') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'short') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'signed') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'static') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'struct') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'typedef') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'union') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'unsigned') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'void') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, 'volatile') = <reduce, storage_class_specifier -> 'typedef'>
action(s198, IDENTIFIER) = <reduce, storage_class_specifier -> 'typedef'>
action(s198, TYPE_NAME) = <reduce, storage_class_specifier -> 'typedef'>
action(s199, ',') = <shift, s91>
action(s199, ';') = <shift, s200>
action(s200, 'char') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s200, 'const') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s200, 'double') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s200, 'enum') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s200, 'float') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s200, 'int') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s200, 'long') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s200, 'short') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s200, 'signed') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s200, 'struct') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s200, 'union') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s200, 'unsigned') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s200, 'void') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s200, 'volatile') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s200, '}') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s200, TYPE_NAME) = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s201, 'char') = <reduce, struct_declaration_list -> struct_declaration>
action(s201, 'const') = <reduce, struct_declaration_list -> struct_declaration>
action(s201, 'double') = <reduce, struct_declaration_list -> struct_declaration>
action(s201, 'enum') = <reduce, struct_declaration_list -> struct_declaration>
action(s201, 'float') = <reduce, struct_declaration_list -> struct_declaration>
action(s201, 'int') = <reduce, struct_declaration_list -> struct_declaration>
action(s201, 'long') = <reduce, struct_declaration_list -> struct_declaration>
action(s201, 'short') = <reduce, struct_declaration_list -> struct_declaration>
action(s201, 'signed') = <reduce, struct_declaration_list -> struct_declaration>
action(s201, 'struct') = <reduce, struct_declaration_list -> struct_declaration>
action(s201, 'union') = <reduce, struct_declaration_list -> struct_declaration>
action(s201, 'unsigned') = <reduce, struct_declaration_list -> struct_declaration>
action(s201, 'void') = <reduce, struct_declaration_list -> struct_declaration>
action(s201, 'volatile') = <reduce, struct_declaration_list -> struct_declaration>
action(s201, '}') = <reduce, struct_declaration_list -> struct_declaration>
action(s201, TYPE_NAME) = <reduce, struct_declaration_list -> struct_declaration>
action(s202, 'char') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s202, 'const') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s202, 'double') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s202, 'enum') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s202, 'float') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s202, 'int') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s202, 'long') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s202, 'short') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s202, 'signed') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s202, 'struct') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s202, 'union') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s202, 'unsigned') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s202, 'void') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s202, 'volatile') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s202, '}') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s202, TYPE_NAME) = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s203, ',') = <reduce, struct_declarator -> ':' constant_expression>
action(s203, ';') = <reduce, struct_declarator -> ':' constant_expression>
action(s204, ',') = <reduce, struct_declarator -> declarator>
action(s204, ':') = <shift, s25>
action(s204, ';') = <reduce, struct_declarator -> declarator>
action(s205, ',') = <reduce, struct_declarator -> declarator ':' constant_expression>
action(s205, ';') = <reduce, struct_declarator -> declarator ':' constant_expression>
action(s206, ',') = <reduce, struct_declarator_list -> struct_declarator>
action(s206, ';') = <reduce, struct_declarator_list -> struct_declarator>
action(s207, ',') = <reduce, struct_declarator_list -> struct_declarator_list ',' struct_declarator>
action(s207, ';') = <reduce, struct_declarator_list -> struct_declarator_list ',' struct_declarator>
action(s208, '{') = <reduce, struct_or_union -> 'struct'>
action(s208, IDENTIFIER) = <reduce, struct_or_union -> 'struct'>
action(s209, '{') = <reduce, struct_or_union -> 'union'>
action(s209, IDENTIFIER) = <reduce, struct_or_union -> 'union'>
action(s210, '{') = <shift, s122>
action(s210, IDENTIFIER) = <shift, s212>
action(s211, '(') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, ')') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, '*') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, ',') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, ':') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, ';') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, '[') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'auto') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'char') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'const') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'double') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'enum') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'extern') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'float') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'int') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'long') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'register') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'short') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'signed') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'static') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'struct') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'typedef') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'union') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'unsigned') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'void') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, 'volatile') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, IDENTIFIER) = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s211, TYPE_NAME) = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s212, '(') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, ')') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, '*') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, ',') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, ':') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, ';') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, '[') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'auto') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'char') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'const') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'double') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'enum') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'extern') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'float') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'int') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'long') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'register') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'short') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'signed') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'static') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'struct') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'typedef') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'union') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'unsigned') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'void') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, 'volatile') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, '{') = <shift, s123>
action(s212, IDENTIFIER) = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s212, TYPE_NAME) = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s213, '(') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, ')') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, '*') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, ',') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, ':') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, ';') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, '[') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'auto') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'char') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'const') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'double') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'enum') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'extern') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'float') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'int') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'long') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'register') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'short') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'signed') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'static') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'struct') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'typedef') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'union') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'unsigned') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'void') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, 'volatile') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, IDENTIFIER) = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s213, TYPE_NAME) = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s214, ')') = <reduce, type_name -> specifier_qualifier_list abstract_declarator>
action(s215, '(') = <reduce, type_qualifier -> 'const'>
action(s215, ')') = <reduce, type_qualifier -> 'const'>
action(s215, '*') = <reduce, type_qualifier -> 'const'>
action(s215, ',') = <reduce, type_qualifier -> 'const'>
action(s215, ':') = <reduce, type_qualifier -> 'const'>
action(s215, ';') = <reduce, type_qualifier -> 'const'>
action(s215, '[') = <reduce, type_qualifier -> 'const'>
action(s215, 'auto') = <reduce, type_qualifier -> 'const'>
action(s215, 'char') = <reduce, type_qualifier -> 'const'>
action(s215, 'const') = <reduce, type_qualifier -> 'const'>
action(s215, 'double') = <reduce, type_qualifier -> 'const'>
action(s215, 'enum') = <reduce, type_qualifier -> 'const'>
action(s215, 'extern') = <reduce, type_qualifier -> 'const'>
action(s215, 'float') = <reduce, type_qualifier -> 'const'>
action(s215, 'int') = <reduce, type_qualifier -> 'const'>
action(s215, 'long') = <reduce, type_qualifier -> 'const'>
action(s215, 'register') = <reduce, type_qualifier -> 'const'>
action(s215, 'short') = <reduce, type_qualifier -> 'const'>
action(s215, 'signed') = <reduce, type_qualifier -> 'const'>
action(s215, 'static') = <reduce, type_qualifier -> 'const'>
action(s215, 'struct') = <reduce, type_qualifier -> 'const'>
action(s215, 'typedef') = <reduce, type_qualifier -> 'const'>
action(s215, 'union') = <reduce, type_qualifier -> 'const'>
action(s215, 'unsigned') = <reduce, type_qualifier -> 'const'>
action(s215, 'void') = <reduce, type_qualifier -> 'const'>
action(s215, 'volatile') = <reduce, type_qualifier -> 'const'>
action(s215, IDENTIFIER) = <reduce, type_qualifier -> 'const'>
action(s215, TYPE_NAME) = <reduce, type_qualifier -> 'const'>
action(s216, '(') = <reduce, type_qualifier -> 'volatile'>
action(s216, ')') = <reduce, type_qualifier -> 'volatile'>
action(s216, '*') = <reduce, type_qualifier -> 'volatile'>
action(s216, ',') = <reduce, type_qualifier -> 'volatile'>
action(s216, ':') = <reduce, type_qualifier -> 'volatile'>
action(s216, ';') = <reduce, type_qualifier -> 'volatile'>
action(s216, '[') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'auto') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'char') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'const') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'double') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'enum') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'extern') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'float') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'int') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'long') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'register') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'short') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'signed') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'static') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'struct') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'typedef') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'union') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'unsigned') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'void') = <reduce, type_qualifier -> 'volatile'>
action(s216, 'volatile') = <reduce, type_qualifier -> 'volatile'>
action(s216, IDENTIFIER) = <reduce, type_qualifier -> 'volatile'>
action(s216, TYPE_NAME) = <reduce, type_qualifier -> 'volatile'>
action(s217, '(') = <reduce, type_qualifier_list -> type_qualifier>
action(s217, ')') = <reduce, type_qualifier_list -> type_qualifier>
action(s217, '*') = <reduce, type_qualifier_list -> type_qualifier>
action(s217, ',') = <reduce, type_qualifier_list -> type_qualifier>
action(s217, '[') = <reduce, type_qualifier_list -> type_qualifier>
action(s217, 'const') = <reduce, type_qualifier_list -> type_qualifier>
action(s217, 'volatile') = <reduce, type_qualifier_list -> type_qualifier>
action(s217, IDENTIFIER) = <reduce, type_qualifier_list -> type_qualifier>
action(s218, '(') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s218, ')') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s218, '*') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s218, ',') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s218, '[') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s218, 'const') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s218, 'volatile') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s218, IDENTIFIER) = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s219, '(') = <reduce, type_specifier -> 'char'>
action(s219, ')') = <reduce, type_specifier -> 'char'>
action(s219, '*') = <reduce, type_specifier -> 'char'>
action(s219, ',') = <reduce, type_specifier -> 'char'>
action(s219, ':') = <reduce, type_specifier -> 'char'>
action(s219, ';') = <reduce, type_specifier -> 'char'>
action(s219, '[') = <reduce, type_specifier -> 'char'>
action(s219, 'auto') = <reduce, type_specifier -> 'char'>
action(s219, 'char') = <reduce, type_specifier -> 'char'>
action(s219, 'const') = <reduce, type_specifier -> 'char'>
action(s219, 'double') = <reduce, type_specifier -> 'char'>
action(s219, 'enum') = <reduce, type_specifier -> 'char'>
action(s219, 'extern') = <reduce, type_specifier -> 'char'>
action(s219, 'float') = <reduce, type_specifier -> 'char'>
action(s219, 'int') = <reduce, type_specifier -> 'char'>
action(s219, 'long') = <reduce, type_specifier -> 'char'>
action(s219, 'register') = <reduce, type_specifier -> 'char'>
action(s219, 'short') = <reduce, type_specifier -> 'char'>
action(s219, 'signed') = <reduce, type_specifier -> 'char'>
action(s219, 'static') = <reduce, type_specifier -> 'char'>
action(s219, 'struct') = <reduce, type_specifier -> 'char'>
action(s219, 'typedef') = <reduce, type_specifier -> 'char'>
action(s219, 'union') = <reduce, type_specifier -> 'char'>
action(s219, 'unsigned') = <reduce, type_specifier -> 'char'>
action(s219, 'void') = <reduce, type_specifier -> 'char'>
action(s219, 'volatile') = <reduce, type_specifier -> 'char'>
action(s219, IDENTIFIER) = <reduce, type_specifier -> 'char'>
action(s219, TYPE_NAME) = <reduce, type_specifier -> 'char'>
action(s220, '(') = <reduce, type_specifier -> 'double'>
action(s220, ')') = <reduce, type_specifier -> 'double'>
action(s220, '*') = <reduce, type_specifier -> 'double'>
action(s220, ',') = <reduce, type_specifier -> 'double'>
action(s220, ':') = <reduce, type_specifier -> 'double'>
action(s220, ';') = <reduce, type_specifier -> 'double'>
action(s220, '[') = <reduce, type_specifier -> 'double'>
action(s220, 'auto') = <reduce, type_specifier -> 'double'>
action(s220, 'char') = <reduce, type_specifier -> 'double'>
action(s220, 'const') = <reduce, type_specifier -> 'double'>
action(s220, 'double') = <reduce, type_specifier -> 'double'>
action(s220, 'enum') = <reduce, type_specifier -> 'double'>
action(s220, 'extern') = <reduce, type_specifier -> 'double'>
action(s220, 'float') = <reduce, type_specifier -> 'double'>
action(s220, 'int') = <reduce, type_specifier -> 'double'>
action(s220, 'long') = <reduce, type_specifier -> 'double'>
action(s220, 'register') = <reduce, type_specifier -> 'double'>
action(s220, 'short') = <reduce, type_specifier -> 'double'>
action(s220, 'signed') = <reduce, type_specifier -> 'double'>
action(s220, 'static') = <reduce, type_specifier -> 'double'>
action(s220, 'struct') = <reduce, type_specifier -> 'double'>
action(s220, 'typedef') = <reduce, type_specifier -> 'double'>
action(s220, 'union') = <reduce, type_specifier -> 'double'>
action(s220, 'unsigned') = <reduce, type_specifier -> 'double'>
action(s220, 'void') = <reduce, type_specifier -> 'double'>
action(s220, 'volatile') = <reduce, type_specifier -> 'double'>
action(s220, IDENTIFIER) = <reduce, type_specifier -> 'double'>
action(s220, TYPE_NAME) = <reduce, type_specifier -> 'double'>
action(s221, '(') = <reduce, type_specifier -> 'float'>
action(s221, ')') = <reduce, type_specifier -> 'float'>
action(s221, '*') = <reduce, type_specifier -> 'float'>
action(s221, ',') = <reduce, type_specifier -> 'float'>
action(s221, ':') = <reduce, type_specifier -> 'float'>
action(s221, ';') = <reduce, type_specifier -> 'float'>
action(s221, '[') = <reduce, type_specifier -> 'float'>
action(s221, 'auto') = <reduce, type_specifier -> 'float'>
action(s221, 'char') = <reduce, type_specifier -> 'float'>
action(s221, 'const') = <reduce, type_specifier -> 'float'>
action(s221, 'double') = <reduce, type_specifier -> 'float'>
action(s221, 'enum') = <reduce, type_specifier -> 'float'>
action(s221, 'extern') = <reduce, type_specifier -> 'float'>
action(s221, 'float') = <reduce, type_specifier -> 'float'>
action(s221, 'int') = <reduce, type_specifier -> 'float'>
action(s221, 'long') = <reduce, type_specifier -> 'float'>
action(s221, 'register') = <reduce, type_specifier -> 'float'>
action(s221, 'short') = <reduce, type_specifier -> 'float'>
action(s221, 'signed') = <reduce, type_specifier -> 'float'>
action(s221, 'static') = <reduce, type_specifier -> 'float'>
action(s221, 'struct') = <reduce, type_specifier -> 'float'>
action(s221, 'typedef') = <reduce, type_specifier -> 'float'>
action(s221, 'union') = <reduce, type_specifier -> 'float'>
action(s221, 'unsigned') = <reduce, type_specifier -> 'float'>
action(s221, 'void') = <reduce, type_specifier -> 'float'>
action(s221, 'volatile') = <reduce, type_specifier -> 'float'>
action(s221, IDENTIFIER) = <reduce, type_specifier -> 'float'>
action(s221, TYPE_NAME) = <reduce, type_specifier -> 'float'>
action(s222, '(') = <reduce, type_specifier -> 'int'>
action(s222, ')') = <reduce, type_specifier -> 'int'>
action(s222, '*') = <reduce, type_specifier -> 'int'>
action(s222, ',') = <reduce, type_specifier -> 'int'>
action(s222, ':') = <reduce, type_specifier -> 'int'>
action(s222, ';') = <reduce, type_specifier -> 'int'>
action(s222, '[') = <reduce, type_specifier -> 'int'>
action(s222, 'auto') = <reduce, type_specifier -> 'int'>
action(s222, 'char') = <reduce, type_specifier -> 'int'>
action(s222, 'const') = <reduce, type_specifier -> 'int'>
action(s222, 'double') = <reduce, type_specifier -> 'int'>
action(s222, 'enum') = <reduce, type_specifier -> 'int'>
action(s222, 'extern') = <reduce, type_specifier -> 'int'>
action(s222, 'float') = <reduce, type_specifier -> 'int'>
action(s222, 'int') = <reduce, type_specifier -> 'int'>
action(s222, 'long') = <reduce, type_specifier -> 'int'>
action(s222, 'register') = <reduce, type_specifier -> 'int'>
action(s222, 'short') = <reduce, type_specifier -> 'int'>
action(s222, 'signed') = <reduce, type_specifier -> 'int'>
action(s222, 'static') = <reduce, type_specifier -> 'int'>
action(s222, 'struct') = <reduce, type_specifier -> 'int'>
action(s222, 'typedef') = <reduce, type_specifier -> 'int'>
action(s222, 'union') = <reduce, type_specifier -> 'int'>
action(s222, 'unsigned') = <reduce, type_specifier -> 'int'>
action(s222, 'void') = <reduce, type_specifier -> 'int'>
action(s222, 'volatile') = <reduce, type_specifier -> 'int'>
action(s222, IDENTIFIER) = <reduce, type_specifier -> 'int'>
action(s222, TYPE_NAME) = <reduce, type_specifier -> 'int'>
action(s223, '(') = <reduce, type_specifier -> 'long'>
action(s223, ')') = <reduce, type_specifier -> 'long'>
action(s223, '*') = <reduce, type_specifier -> 'long'>
action(s223, ',') = <reduce, type_specifier -> 'long'>
action(s223, ':') = <reduce, type_specifier -> 'long'>
action(s223, ';') = <reduce, type_specifier -> 'long'>
action(s223, '[') = <reduce, type_specifier -> 'long'>
action(s223, 'auto') = <reduce, type_specifier -> 'long'>
action(s223, 'char') = <reduce, type_specifier -> 'long'>
action(s223, 'const') = <reduce, type_specifier -> 'long'>
action(s223, 'double') = <reduce, type_specifier -> 'long'>
action(s223, 'enum') = <reduce, type_specifier -> 'long'>
action(s223, 'extern') = <reduce, type_specifier -> 'long'>
action(s223, 'float') = <reduce, type_specifier -> 'long'>
action(s223, 'int') = <reduce, type_specifier -> 'long'>
action(s223, 'long') = <reduce, type_specifier -> 'long'>
action(s223, 'register') = <reduce, type_specifier -> 'long'>
action(s223, 'short') = <reduce, type_specifier -> 'long'>
action(s223, 'signed') = <reduce, type_specifier -> 'long'>
action(s223, 'static') = <reduce, type_specifier -> 'long'>
action(s223, 'struct') = <reduce, type_specifier -> 'long'>
action(s223, 'typedef') = <reduce, type_specifier -> 'long'>
action(s223, 'union') = <reduce, type_specifier -> 'long'>
action(s223, 'unsigned') = <reduce, type_specifier -> 'long'>
action(s223, 'void') = <reduce, type_specifier -> 'long'>
action(s223, 'volatile') = <reduce, type_specifier -> 'long'>
action(s223, IDENTIFIER) = <reduce, type_specifier -> 'long'>
action(s223, TYPE_NAME) = <reduce, type_specifier -> 'long'>
action(s224, '(') = <reduce, type_specifier -> 'short'>
action(s224, ')') = <reduce, type_specifier -> 'short'>
action(s224, '*') = <reduce, type_specifier -> 'short'>
action(s224, ',') = <reduce, type_specifier -> 'short'>
action(s224, ':') = <reduce, type_specifier -> 'short'>
action(s224, ';') = <reduce, type_specifier -> 'short'>
action(s224, '[') = <reduce, type_specifier -> 'short'>
action(s224, 'auto') = <reduce, type_specifier -> 'short'>
action(s224, 'char') = <reduce, type_specifier -> 'short'>
action(s224, 'const') = <reduce, type_specifier -> 'short'>
action(s224, 'double') = <reduce, type_specifier -> 'short'>
action(s224, 'enum') = <reduce, type_specifier -> 'short'>
action(s224, 'extern') = <reduce, type_specifier -> 'short'>
action(s224, 'float') = <reduce, type_specifier -> 'short'>
action(s224, 'int') = <reduce, type_specifier -> 'short'>
action(s224, 'long') = <reduce, type_specifier -> 'short'>
action(s224, 'register') = <reduce, type_specifier -> 'short'>
action(s224, 'short') = <reduce, type_specifier -> 'short'>
action(s224, 'signed') = <reduce, type_specifier -> 'short'>
action(s224, 'static') = <reduce, type_specifier -> 'short'>
action(s224, 'struct') = <reduce, type_specifier -> 'short'>
action(s224, 'typedef') = <reduce, type_specifier -> 'short'>
action(s224, 'union') = <reduce, type_specifier -> 'short'>
action(s224, 'unsigned') = <reduce, type_specifier -> 'short'>
action(s224, 'void') = <reduce, type_specifier -> 'short'>
action(s224, 'volatile') = <reduce, type_specifier -> 'short'>
action(s224, IDENTIFIER) = <reduce, type_specifier -> 'short'>
action(s224, TYPE_NAME) = <reduce, type_specifier -> 'short'>
action(s225, '(') = <reduce, type_specifier -> 'signed'>
action(s225, ')') = <reduce, type_specifier -> 'signed'>
action(s225, '*') = <reduce, type_specifier -> 'signed'>
action(s225, ',') = <reduce, type_specifier -> 'signed'>
action(s225, ':') = <reduce, type_specifier -> 'signed'>
action(s225, ';') = <reduce, type_specifier -> 'signed'>
action(s225, '[') = <reduce, type_specifier -> 'signed'>
action(s225, 'auto') = <reduce, type_specifier -> 'signed'>
action(s225, 'char') = <reduce, type_specifier -> 'signed'>
action(s225, 'const') = <reduce, type_specifier -> 'signed'>
action(s225, 'double') = <reduce, type_specifier -> 'signed'>
action(s225, 'enum') = <reduce, type_specifier -> 'signed'>
action(s225, 'extern') = <reduce, type_specifier -> 'signed'>
action(s225, 'float') = <reduce, type_specifier -> 'signed'>
action(s225, 'int') = <reduce, type_specifier -> 'signed'>
action(s225, 'long') = <reduce, type_specifier -> 'signed'>
action(s225, 'register') = <reduce, type_specifier -> 'signed'>
action(s225, 'short') = <reduce, type_specifier -> 'signed'>
action(s225, 'signed') = <reduce, type_specifier -> 'signed'>
action(s225, 'static') = <reduce, type_specifier -> 'signed'>
action(s225, 'struct') = <reduce, type_specifier -> 'signed'>
action(s225, 'typedef') = <reduce, type_specifier -> 'signed'>
action(s225, 'union') = <reduce, type_specifier -> 'signed'>
action(s225, 'unsigned') = <reduce, type_specifier -> 'signed'>
action(s225, 'void') = <reduce, type_specifier -> 'signed'>
action(s225, 'volatile') = <reduce, type_specifier -> 'signed'>
action(s225, IDENTIFIER) = <reduce, type_specifier -> 'signed'>
action(s225, TYPE_NAME) = <reduce, type_specifier -> 'signed'>
action(s226, '(') = <reduce, type_specifier -> 'unsigned'>
action(s226, ')') = <reduce, type_specifier -> 'unsigned'>
action(s226, '*') = <reduce, type_specifier -> 'unsigned'>
action(s226, ',') = <reduce, type_specifier -> 'unsigned'>
action(s226, ':') = <reduce, type_specifier -> 'unsigned'>
action(s226, ';') = <reduce, type_specifier -> 'unsigned'>
action(s226, '[') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'auto') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'char') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'const') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'double') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'enum') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'extern') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'float') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'int') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'long') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'register') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'short') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'signed') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'static') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'struct') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'typedef') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'union') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'unsigned') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'void') = <reduce, type_specifier -> 'unsigned'>
action(s226, 'volatile') = <reduce, type_specifier -> 'unsigned'>
action(s226, IDENTIFIER) = <reduce, type_specifier -> 'unsigned'>
action(s226, TYPE_NAME) = <reduce, type_specifier -> 'unsigned'>
action(s227, '(') = <reduce, type_specifier -> 'void'>
action(s227, ')') = <reduce, type_specifier -> 'void'>
action(s227, '*') = <reduce, type_specifier -> 'void'>
action(s227, ',') = <reduce, type_specifier -> 'void'>
action(s227, ':') = <reduce, type_specifier -> 'void'>
action(s227, ';') = <reduce, type_specifier -> 'void'>
action(s227, '[') = <reduce, type_specifier -> 'void'>
action(s227, 'auto') = <reduce, type_specifier -> 'void'>
action(s227, 'char') = <reduce, type_specifier -> 'void'>
action(s227, 'const') = <reduce, type_specifier -> 'void'>
action(s227, 'double') = <reduce, type_specifier -> 'void'>
action(s227, 'enum') = <reduce, type_specifier -> 'void'>
action(s227, 'extern') = <reduce, type_specifier -> 'void'>
action(s227, 'float') = <reduce, type_specifier -> 'void'>
action(s227, 'int') = <reduce, type_specifier -> 'void'>
action(s227, 'long') = <reduce, type_specifier -> 'void'>
action(s227, 'register') = <reduce, type_specifier -> 'void'>
action(s227, 'short') = <reduce, type_specifier -> 'void'>
action(s227, 'signed') = <reduce, type_specifier -> 'void'>
action(s227, 'static') = <reduce, type_specifier -> 'void'>
action(s227, 'struct') = <reduce, type_specifier -> 'void'>
action(s227, 'typedef') = <reduce, type_specifier -> 'void'>
action(s227, 'union') = <reduce, type_specifier -> 'void'>
action(s227, 'unsigned') = <reduce, type_specifier -> 'void'>
action(s227, 'void') = <reduce, type_specifier -> 'void'>
action(s227, 'volatile') = <reduce, type_specifier -> 'void'>
action(s227, IDENTIFIER) = <reduce, type_specifier -> 'void'>
action(s227, TYPE_NAME) = <reduce, type_specifier -> 'void'>
action(s228, '(') = <reduce, type_specifier -> TYPE_NAME>
action(s228, ')') = <reduce, type_specifier -> TYPE_NAME>
action(s228, '*') = <reduce, type_specifier -> TYPE_NAME>
action(s228, ',') = <reduce, type_specifier -> TYPE_NAME>
action(s228, ':') = <reduce, type_specifier -> TYPE_NAME>
action(s228, ';') = <reduce, type_specifier -> TYPE_NAME>
action(s228, '[') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'auto') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'char') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'const') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'double') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'enum') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'extern') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'float') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'int') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'long') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'register') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'short') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'signed') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'static') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'struct') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'typedef') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'union') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'unsigned') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'void') = <reduce, type_specifier -> TYPE_NAME>
action(s228, 'volatile') = <reduce, type_specifier -> TYPE_NAME>
action(s228, IDENTIFIER) = <reduce, type_specifier -> TYPE_NAME>
action(s228, TYPE_NAME) = <reduce, type_specifier -> TYPE_NAME>
action(s229, '(') = <reduce, type_specifier -> enum_specifier>
action(s229, ')') = <reduce, type_specifier -> enum_specifier>
action(s229, '*') = <reduce, type_specifier -> enum_specifier>
action(s229, ',') = <reduce, type_specifier -> enum_specifier>
action(s229, ':') = <reduce, type_specifier -> enum_specifier>
action(s229, ';') = <reduce, type_specifier -> enum_specifier>
action(s229, '[') = <reduce, type_specifier -> enum_specifier>
action(s229, 'auto') = <reduce, type_specifier -> enum_specifier>
action(s229, 'char') = <reduce, type_specifier -> enum_specifier>
action(s229, 'const') = <reduce, type_specifier -> enum_specifier>
action(s229, 'double') = <reduce, type_specifier -> enum_specifier>
action(s229, 'enum') = <reduce, type_specifier -> enum_specifier>
action(s229, 'extern') = <reduce, type_specifier -> enum_specifier>
action(s229, 'float') = <reduce, type_specifier -> enum_specifier>
action(s229, 'int') = <reduce, type_specifier -> enum_specifier>
action(s229, 'long') = <reduce, type_specifier -> enum_specifier>
action(s229, 'register') = <reduce, type_specifier -> enum_specifier>
action(s229, 'short') = <reduce, type_specifier -> enum_specifier>
action(s229, 'signed') = <reduce, type_specifier -> enum_specifier>
action(s229, 'static') = <reduce, type_specifier -> enum_specifier>
action(s229, 'struct') = <reduce, type_specifier -> enum_specifier>
action(s229, 'typedef') = <reduce, type_specifier -> enum_specifier>
action(s229, 'union') = <reduce, type_specifier -> enum_specifier>
action(s229, 'unsigned') = <reduce, type_specifier -> enum_specifier>
action(s229, 'void') = <reduce, type_specifier -> enum_specifier>
action(s229, 'volatile') = <reduce, type_specifier -> enum_specifier>
action(s229, IDENTIFIER) = <reduce, type_specifier -> enum_specifier>
action(s229, TYPE_NAME) = <reduce, type_specifier -> enum_specifier>
action(s230, '(') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, ')') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, '*') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, ',') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, ':') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, ';') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, '[') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'auto') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'char') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'const') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'double') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'enum') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'extern') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'float') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'int') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'long') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'register') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'short') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'signed') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'static') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'struct') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'typedef') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'union') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'unsigned') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'void') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, 'volatile') = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, IDENTIFIER) = <reduce, type_specifier -> struct_or_union_specifier>
action(s230, TYPE_NAME) = <reduce, type_specifier -> struct_or_union_specifier>
action(s231, '!=') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '%') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '%=') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '&&') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '&') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '&=') = <reduce, unary_expression -> '++' unary_expression>
action(s231, ')') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '*') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '*=') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '+') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '+=') = <reduce, unary_expression -> '++' unary_expression>
action(s231, ',') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '-') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '-=') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '/') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '/=') = <reduce, unary_expression -> '++' unary_expression>
action(s231, ':') = <reduce, unary_expression -> '++' unary_expression>
action(s231, ';') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '<') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '<<') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '<<=') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '<=') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '=') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '==') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '>') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '>=') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '>>') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '>>=') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '?') = <reduce, unary_expression -> '++' unary_expression>
action(s231, ']') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '^') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '^=') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '|') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '|=') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '||') = <reduce, unary_expression -> '++' unary_expression>
action(s231, '}') = <reduce, unary_expression -> '++' unary_expression>
action(s232, '!=') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '%') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '%=') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '&&') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '&') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '&=') = <reduce, unary_expression -> '--' unary_expression>
action(s232, ')') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '*') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '*=') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '+') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '+=') = <reduce, unary_expression -> '--' unary_expression>
action(s232, ',') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '-') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '-=') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '/') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '/=') = <reduce, unary_expression -> '--' unary_expression>
action(s232, ':') = <reduce, unary_expression -> '--' unary_expression>
action(s232, ';') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '<') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '<<') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '<<=') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '<=') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '=') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '==') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '>') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '>=') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '>>') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '>>=') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '?') = <reduce, unary_expression -> '--' unary_expression>
action(s232, ']') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '^') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '^=') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '|') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '|=') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '||') = <reduce, unary_expression -> '--' unary_expression>
action(s232, '}') = <reduce, unary_expression -> '--' unary_expression>
action(s233, ')') = <shift, s234>
action(s234, '!=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '%') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '%=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '&&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '&=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, ')') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '*') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '*=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '+') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '+=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, ',') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '-') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '-=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '/') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '/=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, ':') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, ';') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '<<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '<<=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '<=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '==') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '>=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '>>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '>>=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '?') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, ']') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '^') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '^=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '|') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '|=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '||') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s234, '}') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s235, '!=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '%') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '%=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '&&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '&=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, ')') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '*') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '*=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '+') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '+=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, ',') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '-') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '-=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '/') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '/=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, ':') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, ';') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '<<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '<<=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '<=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '==') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '>=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '>>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '>>=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '?') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, ']') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '^') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '^=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '|') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '|=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '||') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s235, '}') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s236, '!=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '%') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '%=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '&&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '&=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, ')') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '*') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '*=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '+') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '+=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, ',') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '-') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '-=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '/') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '/=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, ':') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, ';') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '<<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '<<=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '<=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '==') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '>=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '>>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '>>=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '?') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, ']') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '^') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '^=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '|') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '|=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '||') = <reduce, unary_expression -> unary_operator cast_expression>
action(s236, '}') = <reduce, unary_expression -> unary_operator cast_expression>
action(s237, '!') = <reduce, unary_operator -> '!'>
action(s237, '&') = <reduce, unary_operator -> '!'>
action(s237, '(') = <reduce, unary_operator -> '!'>
action(s237, '*') = <reduce, unary_operator -> '!'>
action(s237, '+') = <reduce, unary_operator -> '!'>
action(s237, '++') = <reduce, unary_operator -> '!'>
action(s237, '-') = <reduce, unary_operator -> '!'>
action(s237, '--') = <reduce, unary_operator -> '!'>
action(s237, 'sizeof') = <reduce, unary_operator -> '!'>
action(s237, '~') = <reduce, unary_operator -> '!'>
action(s237, CONSTANT) = <reduce, unary_operator -> '!'>
action(s237, IDENTIFIER) = <reduce, unary_operator -> '!'>
action(s237, STRING_LITERAL) = <reduce, unary_operator -> '!'>
action(s238, '!') = <reduce, unary_operator -> '&'>
action(s238, '&') = <reduce, unary_operator -> '&'>
action(s238, '(') = <reduce, unary_operator -> '&'>
action(s238, '*') = <reduce, unary_operator -> '&'>
action(s238, '+') = <reduce, unary_operator -> '&'>
action(s238, '++') = <reduce, unary_operator -> '&'>
action(s238, '-') = <reduce, unary_operator -> '&'>
action(s238, '--') = <reduce, unary_operator -> '&'>
action(s238, 'sizeof') = <reduce, unary_operator -> '&'>
action(s238, '~') = <reduce, unary_operator -> '&'>
action(s238, CONSTANT) = <reduce, unary_operator -> '&'>
action(s238, IDENTIFIER) = <reduce, unary_operator -> '&'>
action(s238, STRING_LITERAL) = <reduce, unary_operator -> '&'>
action(s239, '!') = <reduce, unary_operator -> '*'>
action(s239, '&') = <reduce, unary_operator -> '*'>
action(s239, '(') = <reduce, unary_operator -> '*'>
action(s239, '*') = <reduce, unary_operator -> '*'>
action(s239, '+') = <reduce, unary_operator -> '*'>
action(s239, '++') = <reduce, unary_operator -> '*'>
action(s239, '-') = <reduce, unary_operator -> '*'>
action(s239, '--') = <reduce, unary_operator -> '*'>
action(s239, 'sizeof') = <reduce, unary_operator -> '*'>
action(s239, '~') = <reduce, unary_operator -> '*'>
action(s239, CONSTANT) = <reduce, unary_operator -> '*'>
action(s239, IDENTIFIER) = <reduce, unary_operator -> '*'>
action(s239, STRING_LITERAL) = <reduce, unary_operator -> '*'>
action(s240, '!') = <reduce, unary_operator -> '+'>
action(s240, '&') = <reduce, unary_operator -> '+'>
action(s240, '(') = <reduce, unary_operator -> '+'>
action(s240, '*') = <reduce, unary_operator -> '+'>
action(s240, '+') = <reduce, unary_operator -> '+'>
action(s240, '++') = <reduce, unary_operator -> '+'>
action(s240, '-') = <reduce, unary_operator -> '+'>
action(s240, '--') = <reduce, unary_operator -> '+'>
action(s240, 'sizeof') = <reduce, unary_operator -> '+'>
action(s240, '~') = <reduce, unary_operator -> '+'>
action(s240, CONSTANT) = <reduce, unary_operator -> '+'>
action(s240, IDENTIFIER) = <reduce, unary_operator -> '+'>
action(s240, STRING_LITERAL) = <reduce, unary_operator -> '+'>
action(s241, '!') = <reduce, unary_operator -> '-'>
action(s241, '&') = <reduce, unary_operator -> '-'>
action(s241, '(') = <reduce, unary_operator -> '-'>
action(s241, '*') = <reduce, unary_operator -> '-'>
action(s241, '+') = <reduce, unary_operator -> '-'>
action(s241, '++') = <reduce, unary_operator -> '-'>
action(s241, '-') = <reduce, unary_operator -> '-'>
action(s241, '--') = <reduce, unary_operator -> '-'>
action(s241, 'sizeof') = <reduce, unary_operator -> '-'>
action(s241, '~') = <reduce, unary_operator -> '-'>
action(s241, CONSTANT) = <reduce, unary_operator -> '-'>
action(s241, IDENTIFIER) = <reduce, unary_operator -> '-'>
action(s241, STRING_LITERAL) = <reduce, unary_operator -> '-'>
action(s242, '!') = <reduce, unary_operator -> '~'>
action(s242, '&') = <reduce, unary_operator -> '~'>
action(s242, '(') = <reduce, unary_operator -> '~'>
action(s242, '*') = <reduce, unary_operator -> '~'>
action(s242, '+') = <reduce, unary_operator -> '~'>
action(s242, '++') = <reduce, unary_operator -> '~'>
action(s242, '-') = <reduce, unary_operator -> '~'>
action(s242, '--') = <reduce, unary_operator -> '~'>
action(s242, 'sizeof') = <reduce, unary_operator -> '~'>
action(s242, '~') = <reduce, unary_operator -> '~'>
action(s242, CONSTANT) = <reduce, unary_operator -> '~'>
action(s242, IDENTIFIER) = <reduce, unary_operator -> '~'>
action(s242, STRING_LITERAL) = <reduce, unary_operator -> '~'>

Goto Table:
goto(s0, primary_expression) = s1
goto(s0, '(') = s17
goto(s0, CONSTANT) = s184
goto(s0, IDENTIFIER) = s185
goto(s0, STRING_LITERAL) = s186
goto(s2, abstract_declarator) = s96
goto(s2, declaration_specifiers) = s4
goto(s2, declarator) = s109
goto(s2, direct_abstract_declarator) = s6
goto(s2, direct_declarator) = s92
goto(s2, enum_specifier) = s229
goto(s2, parameter_declaration) = s161
goto(s2, parameter_list) = s162
goto(s2, parameter_type_list) = s98
goto(s2, pointer) = s7
goto(s2, storage_class_specifier) = s80
goto(s2, struct_or_union) = s210
goto(s2, struct_or_union_specifier) = s230
goto(s2, type_qualifier) = s81
goto(s2, type_specifier) = s82
goto(s2, '(') = s2
goto(s2, ')') = s95
goto(s2, '*') = s165
goto(s2, '[') = s20
goto(s2, 'auto') = s194
goto(s2, 'char') = s219
goto(s2, 'const') = s215
goto(s2, 'double') = s220
goto(s2, 'enum') = s126
goto(s2, 'extern') = s195
goto(s2, 'float') = s221
goto(s2, 'int') = s222
goto(s2, 'long') = s223
goto(s2, 'register') = s196
goto(s2, 'short') = s224
goto(s2, 'signed') = s225
goto(s2, 'static') = s197
goto(s2, 'struct') = s208
goto(s2, 'typedef') = s198
goto(s2, 'union') = s209
goto(s2, 'unsigned') = s226
goto(s2, 'void') = s227
goto(s2, 'volatile') = s216
goto(s2, IDENTIFIER) = s111
goto(s2, TYPE_NAME) = s228
goto(s3, abstract_declarator) = s96
goto(s3, declaration_specifiers) = s4
goto(s3, direct_abstract_declarator) = s6
goto(s3, enum_specifier) = s229
goto(s3, parameter_declaration) = s161
goto(s3, parameter_list) = s162
goto(s3, parameter_type_list) = s98
goto(s3, pointer) = s8
goto(s3, storage_class_specifier) = s80
goto(s3, struct_or_union) = s210
goto(s3, struct_or_union_specifier) = s230
goto(s3, type_qualifier) = s81
goto(s3, type_specifier) = s82
goto(s3, '(') = s3
goto(s3, ')') = s95
goto(s3, '*') = s165
goto(s3, '[') = s20
goto(s3, 'auto') = s194
goto(s3, 'char') = s219
goto(s3, 'const') = s215
goto(s3, 'double') = s220
goto(s3, 'enum') = s126
goto(s3, 'extern') = s195
goto(s3, 'float') = s221
goto(s3, 'int') = s222
goto(s3, 'long') = s223
goto(s3, 'register') = s196
goto(s3, 'short') = s224
goto(s3, 'signed') = s225
goto(s3, 'static') = s197
goto(s3, 'struct') = s208
goto(s3, 'typedef') = s198
goto(s3, 'union') = s209
goto(s3, 'unsigned') = s226
goto(s3, 'void') = s227
goto(s3, 'volatile') = s216
goto(s3, TYPE_NAME) = s228
goto(s4, abstract_declarator) = s159
goto(s4, declarator) = s160
goto(s4, direct_abstract_declarator) = s6
goto(s4, direct_declarator) = s92
goto(s4, pointer) = s7
goto(s4, '(') = s2
goto(s4, '*') = s165
goto(s4, '[') = s20
goto(s4, IDENTIFIER) = s111
goto(s5, abstract_declarator) = s214
goto(s5, direct_abstract_declarator) = s6
goto(s5, pointer) = s8
goto(s5, '(') = s3
goto(s5, '*') = s165
goto(s5, '[') = s20
goto(s6, '(') = s83
goto(s6, '[') = s21
goto(s7, direct_abstract_declarator) = s9
goto(s7, direct_declarator) = s94
goto(s7, '(') = s2
goto(s7, '[') = s20
goto(s7, IDENTIFIER) = s111
goto(s8, direct_abstract_declarator) = s9
goto(s8, '(') = s3
goto(s8, '[') = s20
goto(s9, '(') = s83
goto(s9, '[') = s21
goto(s10, additive_expression) = s39
goto(s10, and_expression) = s47
goto(s10, argument_expression_list) = s51
goto(s10, assignment_expression) = s53
goto(s10, cast_expression) = s155
goto(s10, conditional_expression) = s54
goto(s10, equality_expression) = s50
goto(s10, exclusive_or_expression) = s142
goto(s10, inclusive_or_expression) = s151
goto(s10, logical_and_expression) = s153
goto(s10, logical_or_expression) = s76
goto(s10, multiplicative_expression) = s46
goto(s10, postfix_expression) = s172
goto(s10, primary_expression) = s182
goto(s10, relational_expression) = s141
goto(s10, shift_expression) = s191
goto(s10, unary_expression) = s55
goto(s10, unary_operator) = s72
goto(s10, '!') = s237
goto(s10, '&') = s238
goto(s10, '(') = s13
goto(s10, ')') = s173
goto(s10, '*') = s239
goto(s10, '+') = s240
goto(s10, '++') = s169
goto(s10, '-') = s241
goto(s10, '--') = s170
goto(s10, 'sizeof') = s171
goto(s10, '~') = s242
goto(s10, CONSTANT) = s184
goto(s10, IDENTIFIER) = s185
goto(s10, STRING_LITERAL) = s186
goto(s11, additive_expression) = s39
goto(s11, and_expression) = s47
goto(s11, assignment_expression) = s52
goto(s11, cast_expression) = s155
goto(s11, conditional_expression) = s54
goto(s11, equality_expression) = s50
goto(s11, exclusive_or_expression) = s142
goto(s11, inclusive_or_expression) = s151
goto(s11, logical_and_expression) = s153
goto(s11, logical_or_expression) = s76
goto(s11, multiplicative_expression) = s46
goto(s11, postfix_expression) = s172
goto(s11, primary_expression) = s182
goto(s11, relational_expression) = s141
goto(s11, shift_expression) = s191
goto(s11, unary_expression) = s55
goto(s11, unary_operator) = s72
goto(s11, '!') = s237
goto(s11, '&') = s238
goto(s11, '(') = s13
goto(s11, '*') = s239
goto(s11, '+') = s240
goto(s11, '++') = s169
goto(s11, '-') = s241
goto(s11, '--') = s170
goto(s11, 'sizeof') = s171
goto(s11, '~') = s242
goto(s11, CONSTANT) = s184
goto(s11, IDENTIFIER) = s185
goto(s11, STRING_LITERAL) = s186
goto(s12, additive_expression) = s39
goto(s12, and_expression) = s47
goto(s12, assignment_expression) = s56
goto(s12, cast_expression) = s155
goto(s12, conditional_expression) = s54
goto(s12, equality_expression) = s50
goto(s12, exclusive_or_expression) = s142
goto(s12, inclusive_or_expression) = s151
goto(s12, logical_and_expression) = s153
goto(s12, logical_or_expression) = s76
goto(s12, multiplicative_expression) = s46
goto(s12, postfix_expression) = s172
goto(s12, primary_expression) = s182
goto(s12, relational_expression) = s141
goto(s12, shift_expression) = s191
goto(s12, unary_expression) = s55
goto(s12, unary_operator) = s72
goto(s12, '!') = s237
goto(s12, '&') = s238
goto(s12, '(') = s13
goto(s12, '*') = s239
goto(s12, '+') = s240
goto(s12, '++') = s169
goto(s12, '-') = s241
goto(s12, '--') = s170
goto(s12, 'sizeof') = s171
goto(s12, '~') = s242
goto(s12, CONSTANT) = s184
goto(s12, IDENTIFIER) = s185
goto(s12, STRING_LITERAL) = s186
goto(s13, additive_expression) = s39
goto(s13, and_expression) = s47
goto(s13, assignment_expression) = s144
goto(s13, cast_expression) = s155
goto(s13, conditional_expression) = s54
goto(s13, enum_specifier) = s229
goto(s13, equality_expression) = s50
goto(s13, exclusive_or_expression) = s142
goto(s13, expression) = s146
goto(s13, inclusive_or_expression) = s151
goto(s13, logical_and_expression) = s153
goto(s13, logical_or_expression) = s76
goto(s13, multiplicative_expression) = s46
goto(s13, postfix_expression) = s172
goto(s13, primary_expression) = s182
goto(s13, relational_expression) = s141
goto(s13, shift_expression) = s191
goto(s13, specifier_qualifier_list) = s5
goto(s13, struct_or_union) = s210
goto(s13, struct_or_union_specifier) = s230
goto(s13, type_name) = s73
goto(s13, type_qualifier) = s120
goto(s13, type_specifier) = s121
goto(s13, unary_expression) = s55
goto(s13, unary_operator) = s72
goto(s13, '!') = s237
goto(s13, '&') = s238
goto(s13, '(') = s13
goto(s13, '*') = s239
goto(s13, '+') = s240
goto(s13, '++') = s169
goto(s13, '-') = s241
goto(s13, '--') = s170
goto(s13, 'char') = s219
goto(s13, 'const') = s215
goto(s13, 'double') = s220
goto(s13, 'enum') = s126
goto(s13, 'float') = s221
goto(s13, 'int') = s222
goto(s13, 'long') = s223
goto(s13, 'short') = s224
goto(s13, 'signed') = s225
goto(s13, 'sizeof') = s171
goto(s13, 'struct') = s208
goto(s13, 'union') = s209
goto(s13, 'unsigned') = s226
goto(s13, 'void') = s227
goto(s13, 'volatile') = s216
goto(s13, '~') = s242
goto(s13, CONSTANT) = s184
goto(s13, IDENTIFIER) = s185
goto(s13, STRING_LITERAL) = s186
goto(s13, TYPE_NAME) = s228
goto(s14, additive_expression) = s39
goto(s14, and_expression) = s47
goto(s14, assignment_expression) = s144
goto(s14, cast_expression) = s155
goto(s14, conditional_expression) = s54
goto(s14, equality_expression) = s50
goto(s14, exclusive_or_expression) = s142
goto(s14, expression) = s77
goto(s14, inclusive_or_expression) = s151
goto(s14, logical_and_expression) = s153
goto(s14, logical_or_expression) = s76
goto(s14, multiplicative_expression) = s46
goto(s14, postfix_expression) = s172
goto(s14, primary_expression) = s182
goto(s14, relational_expression) = s141
goto(s14, shift_expression) = s191
goto(s14, unary_expression) = s55
goto(s14, unary_operator) = s72
goto(s14, '!') = s237
goto(s14, '&') = s238
goto(s14, '(') = s13
goto(s14, '*') = s239
goto(s14, '+') = s240
goto(s14, '++') = s169
goto(s14, '-') = s241
goto(s14, '--') = s170
goto(s14, 'sizeof') = s171
goto(s14, '~') = s242
goto(s14, CONSTANT) = s184
goto(s14, IDENTIFIER) = s185
goto(s14, STRING_LITERAL) = s186
goto(s15, additive_expression) = s39
goto(s15, and_expression) = s47
goto(s15, assignment_expression) = s144
goto(s15, cast_expression) = s155
goto(s15, conditional_expression) = s54
goto(s15, enum_specifier) = s229
goto(s15, equality_expression) = s50
goto(s15, exclusive_or_expression) = s142
goto(s15, expression) = s146
goto(s15, inclusive_or_expression) = s151
goto(s15, logical_and_expression) = s153
goto(s15, logical_or_expression) = s76
goto(s15, multiplicative_expression) = s46
goto(s15, postfix_expression) = s172
goto(s15, primary_expression) = s182
goto(s15, relational_expression) = s141
goto(s15, shift_expression) = s191
goto(s15, specifier_qualifier_list) = s5
goto(s15, struct_or_union) = s210
goto(s15, struct_or_union_specifier) = s230
goto(s15, type_name) = s233
goto(s15, type_qualifier) = s120
goto(s15, type_specifier) = s121
goto(s15, unary_expression) = s55
goto(s15, unary_operator) = s72
goto(s15, '!') = s237
goto(s15, '&') = s238
goto(s15, '(') = s13
goto(s15, '*') = s239
goto(s15, '+') = s240
goto(s15, '++') = s169
goto(s15, '-') = s241
goto(s15, '--') = s170
goto(s15, 'char') = s219
goto(s15, 'const') = s215
goto(s15, 'double') = s220
goto(s15, 'enum') = s126
goto(s15, 'float') = s221
goto(s15, 'int') = s222
goto(s15, 'long') = s223
goto(s15, 'short') = s224
goto(s15, 'signed') = s225
goto(s15, 'sizeof') = s171
goto(s15, 'struct') = s208
goto(s15, 'union') = s209
goto(s15, 'unsigned') = s226
goto(s15, 'void') = s227
goto(s15, 'volatile') = s216
goto(s15, '~') = s242
goto(s15, CONSTANT) = s184
goto(s15, IDENTIFIER) = s185
goto(s15, STRING_LITERAL) = s186
goto(s15, TYPE_NAME) = s228
goto(s16, additive_expression) = s39
goto(s16, and_expression) = s47
goto(s16, assignment_expression) = s144
goto(s16, cast_expression) = s155
goto(s16, conditional_expression) = s54
goto(s16, equality_expression) = s50
goto(s16, exclusive_or_expression) = s142
goto(s16, expression) = s145
goto(s16, inclusive_or_expression) = s151
goto(s16, logical_and_expression) = s153
goto(s16, logical_or_expression) = s76
goto(s16, multiplicative_expression) = s46
goto(s16, postfix_expression) = s172
goto(s16, primary_expression) = s182
goto(s16, relational_expression) = s141
goto(s16, shift_expression) = s191
goto(s16, unary_expression) = s55
goto(s16, unary_operator) = s72
goto(s16, '!') = s237
goto(s16, '&') = s238
goto(s16, '(') = s13
goto(s16, '*') = s239
goto(s16, '+') = s240
goto(s16, '++') = s169
goto(s16, '-') = s241
goto(s16, '--') = s170
goto(s16, 'sizeof') = s171
goto(s16, '~') = s242
goto(s16, CONSTANT) = s184
goto(s16, IDENTIFIER) = s185
goto(s16, STRING_LITERAL) = s186
goto(s17, additive_expression) = s39
goto(s17, and_expression) = s47
goto(s17, assignment_expression) = s144
goto(s17, cast_expression) = s155
goto(s17, conditional_expression) = s54
goto(s17, equality_expression) = s50
goto(s17, exclusive_or_expression) = s142
goto(s17, expression) = s146
goto(s17, inclusive_or_expression) = s151
goto(s17, logical_and_expression) = s153
goto(s17, logical_or_expression) = s76
goto(s17, multiplicative_expression) = s46
goto(s17, postfix_expression) = s172
goto(s17, primary_expression) = s182
goto(s17, relational_expression) = s141
goto(s17, shift_expression) = s191
goto(s17, unary_expression) = s55
goto(s17, unary_operator) = s72
goto(s17, '!') = s237
goto(s17, '&') = s238
goto(s17, '(') = s13
goto(s17, '*') = s239
goto(s17, '+') = s240
goto(s17, '++') = s169
goto(s17, '-') = s241
goto(s17, '--') = s170
goto(s17, 'sizeof') = s171
goto(s17, '~') = s242
goto(s17, CONSTANT) = s184
goto(s17, IDENTIFIER) = s185
goto(s17, STRING_LITERAL) = s186
goto(s18, additive_expression) = s39
goto(s18, and_expression) = s47
goto(s18, assignment_expression) = s147
goto(s18, cast_expression) = s155
goto(s18, conditional_expression) = s54
goto(s18, equality_expression) = s50
goto(s18, exclusive_or_expression) = s142
goto(s18, inclusive_or_expression) = s151
goto(s18, logical_and_expression) = s153
goto(s18, logical_or_expression) = s76
goto(s18, multiplicative_expression) = s46
goto(s18, postfix_expression) = s172
goto(s18, primary_expression) = s182
goto(s18, relational_expression) = s141
goto(s18, shift_expression) = s191
goto(s18, unary_expression) = s55
goto(s18, unary_operator) = s72
goto(s18, '!') = s237
goto(s18, '&') = s238
goto(s18, '(') = s13
goto(s18, '*') = s239
goto(s18, '+') = s240
goto(s18, '++') = s169
goto(s18, '-') = s241
goto(s18, '--') = s170
goto(s18, 'sizeof') = s171
goto(s18, '~') = s242
goto(s18, CONSTANT) = s184
goto(s18, IDENTIFIER) = s185
goto(s18, STRING_LITERAL) = s186
goto(s19, additive_expression) = s39
goto(s19, and_expression) = s47
goto(s19, cast_expression) = s155
goto(s19, conditional_expression) = s78
goto(s19, equality_expression) = s50
goto(s19, exclusive_or_expression) = s142
goto(s19, inclusive_or_expression) = s151
goto(s19, logical_and_expression) = s153
goto(s19, logical_or_expression) = s76
goto(s19, multiplicative_expression) = s46
goto(s19, postfix_expression) = s172
goto(s19, primary_expression) = s182
goto(s19, relational_expression) = s141
goto(s19, shift_expression) = s191
goto(s19, unary_expression) = s75
goto(s19, unary_operator) = s72
goto(s19, '!') = s237
goto(s19, '&') = s238
goto(s19, '(') = s13
goto(s19, '*') = s239
goto(s19, '+') = s240
goto(s19, '++') = s169
goto(s19, '-') = s241
goto(s19, '--') = s170
goto(s19, 'sizeof') = s171
goto(s19, '~') = s242
goto(s19, CONSTANT) = s184
goto(s19, IDENTIFIER) = s185
goto(s19, STRING_LITERAL) = s186
goto(s20, additive_expression) = s39
goto(s20, and_expression) = s47
goto(s20, cast_expression) = s155
goto(s20, conditional_expression) = s79
goto(s20, constant_expression) = s101
goto(s20, equality_expression) = s50
goto(s20, exclusive_or_expression) = s142
goto(s20, inclusive_or_expression) = s151
goto(s20, logical_and_expression) = s153
goto(s20, logical_or_expression) = s76
goto(s20, multiplicative_expression) = s46
goto(s20, postfix_expression) = s172
goto(s20, primary_expression) = s182
goto(s20, relational_expression) = s141
goto(s20, shift_expression) = s191
goto(s20, unary_expression) = s75
goto(s20, unary_operator) = s72
goto(s20, '!') = s237
goto(s20, '&') = s238
goto(s20, '(') = s13
goto(s20, '*') = s239
goto(s20, '+') = s240
goto(s20, '++') = s169
goto(s20, '-') = s241
goto(s20, '--') = s170
goto(s20, ']') = s100
goto(s20, 'sizeof') = s171
goto(s20, '~') = s242
goto(s20, CONSTANT) = s184
goto(s20, IDENTIFIER) = s185
goto(s20, STRING_LITERAL) = s186
goto(s21, additive_expression) = s39
goto(s21, and_expression) = s47
goto(s21, cast_expression) = s155
goto(s21, conditional_expression) = s79
goto(s21, constant_expression) = s107
goto(s21, equality_expression) = s50
goto(s21, exclusive_or_expression) = s142
goto(s21, inclusive_or_expression) = s151
goto(s21, logical_and_expression) = s153
goto(s21, logical_or_expression) = s76
goto(s21, multiplicative_expression) = s46
goto(s21, postfix_expression) = s172
goto(s21, primary_expression) = s182
goto(s21, relational_expression) = s141
goto(s21, shift_expression) = s191
goto(s21, unary_expression) = s75
goto(s21, unary_operator) = s72
goto(s21, '!') = s237
goto(s21, '&') = s238
goto(s21, '(') = s13
goto(s21, '*') = s239
goto(s21, '+') = s240
goto(s21, '++') = s169
goto(s21, '-') = s241
goto(s21, '--') = s170
goto(s21, ']') = s106
goto(s21, 'sizeof') = s171
goto(s21, '~') = s242
goto(s21, CONSTANT) = s184
goto(s21, IDENTIFIER) = s185
goto(s21, STRING_LITERAL) = s186
goto(s22, additive_expression) = s39
goto(s22, and_expression) = s47
goto(s22, cast_expression) = s155
goto(s22, conditional_expression) = s79
goto(s22, constant_expression) = s118
goto(s22, equality_expression) = s50
goto(s22, exclusive_or_expression) = s142
goto(s22, inclusive_or_expression) = s151
goto(s22, logical_and_expression) = s153
goto(s22, logical_or_expression) = s76
goto(s22, multiplicative_expression) = s46
goto(s22, postfix_expression) = s172
goto(s22, primary_expression) = s182
goto(s22, relational_expression) = s141
goto(s22, shift_expression) = s191
goto(s22, unary_expression) = s75
goto(s22, unary_operator) = s72
goto(s22, '!') = s237
goto(s22, '&') = s238
goto(s22, '(') = s13
goto(s22, '*') = s239
goto(s22, '+') = s240
goto(s22, '++') = s169
goto(s22, '-') = s241
goto(s22, '--') = s170
goto(s22, ']') = s117
goto(s22, 'sizeof') = s171
goto(s22, '~') = s242
goto(s22, CONSTANT) = s184
goto(s22, IDENTIFIER) = s185
goto(s22, STRING_LITERAL) = s186
goto(s23, additive_expression) = s39
goto(s23, and_expression) = s47
goto(s23, cast_expression) = s155
goto(s23, conditional_expression) = s79
goto(s23, constant_expression) = s136
goto(s23, equality_expression) = s50
goto(s23, exclusive_or_expression) = s142
goto(s23, inclusive_or_expression) = s151
goto(s23, logical_and_expression) = s153
goto(s23, logical_or_expression) = s76
goto(s23, multiplicative_expression) = s46
goto(s23, postfix_expression) = s172
goto(s23, primary_expression) = s182
goto(s23, relational_expression) = s141
goto(s23, shift_expression) = s191
goto(s23, unary_expression) = s75
goto(s23, unary_operator) = s72
goto(s23, '!') = s237
goto(s23, '&') = s238
goto(s23, '(') = s13
goto(s23, '*') = s239
goto(s23, '+') = s240
goto(s23, '++') = s169
goto(s23, '-') = s241
goto(s23, '--') = s170
goto(s23, 'sizeof') = s171
goto(s23, '~') = s242
goto(s23, CONSTANT) = s184
goto(s23, IDENTIFIER) = s185
goto(s23, STRING_LITERAL) = s186
goto(s24, additive_expression) = s39
goto(s24, and_expression) = s47
goto(s24, cast_expression) = s155
goto(s24, conditional_expression) = s79
goto(s24, constant_expression) = s203
goto(s24, equality_expression) = s50
goto(s24, exclusive_or_expression) = s142
goto(s24, inclusive_or_expression) = s151
goto(s24, logical_and_expression) = s153
goto(s24, logical_or_expression) = s76
goto(s24, multiplicative_expression) = s46
goto(s24, postfix_expression) = s172
goto(s24, primary_expression) = s182
goto(s24, relational_expression) = s141
goto(s24, shift_expression) = s191
goto(s24, unary_expression) = s75
goto(s24, unary_operator) = s72
goto(s24, '!') = s237
goto(s24, '&') = s238
goto(s24, '(') = s13
goto(s24, '*') = s239
goto(s24, '+') = s240
goto(s24, '++') = s169
goto(s24, '-') = s241
goto(s24, '--') = s170
goto(s24, 'sizeof') = s171
goto(s24, '~') = s242
goto(s24, CONSTANT) = s184
goto(s24, IDENTIFIER) = s185
goto(s24, STRING_LITERAL) = s186
goto(s25, additive_expression) = s39
goto(s25, and_expression) = s47
goto(s25, cast_expression) = s155
goto(s25, conditional_expression) = s79
goto(s25, constant_expression) = s205
goto(s25, equality_expression) = s50
goto(s25, exclusive_or_expression) = s142
goto(s25, inclusive_or_expression) = s151
goto(s25, logical_and_expression) = s153
goto(s25, logical_or_expression) = s76
goto(s25, multiplicative_expression) = s46
goto(s25, postfix_expression) = s172
goto(s25, primary_expression) = s182
goto(s25, relational_expression) = s141
goto(s25, shift_expression) = s191
goto(s25, unary_expression) = s75
goto(s25, unary_operator) = s72
goto(s25, '!') = s237
goto(s25, '&') = s238
goto(s25, '(') = s13
goto(s25, '*') = s239
goto(s25, '+') = s240
goto(s25, '++') = s169
goto(s25, '-') = s241
goto(s25, '--') = s170
goto(s25, 'sizeof') = s171
goto(s25, '~') = s242
goto(s25, CONSTANT) = s184
goto(s25, IDENTIFIER) = s185
goto(s25, STRING_LITERAL) = s186
goto(s26, additive_expression) = s39
goto(s26, and_expression) = s47
goto(s26, cast_expression) = s155
goto(s26, equality_expression) = s50
goto(s26, exclusive_or_expression) = s142
goto(s26, inclusive_or_expression) = s151
goto(s26, logical_and_expression) = s154
goto(s26, multiplicative_expression) = s46
goto(s26, postfix_expression) = s172
goto(s26, primary_expression) = s182
goto(s26, relational_expression) = s141
goto(s26, shift_expression) = s191
goto(s26, unary_expression) = s75
goto(s26, unary_operator) = s72
goto(s26, '!') = s237
goto(s26, '&') = s238
goto(s26, '(') = s13
goto(s26, '*') = s239
goto(s26, '+') = s240
goto(s26, '++') = s169
goto(s26, '-') = s241
goto(s26, '--') = s170
goto(s26, 'sizeof') = s171
goto(s26, '~') = s242
goto(s26, CONSTANT) = s184
goto(s26, IDENTIFIER) = s185
goto(s26, STRING_LITERAL) = s186
goto(s27, additive_expression) = s39
goto(s27, and_expression) = s47
goto(s27, cast_expression) = s155
goto(s27, equality_expression) = s50
goto(s27, exclusive_or_expression) = s142
goto(s27, inclusive_or_expression) = s152
goto(s27, multiplicative_expression) = s46
goto(s27, postfix_expression) = s172
goto(s27, primary_expression) = s182
goto(s27, relational_expression) = s141
goto(s27, shift_expression) = s191
goto(s27, unary_expression) = s75
goto(s27, unary_operator) = s72
goto(s27, '!') = s237
goto(s27, '&') = s238
goto(s27, '(') = s13
goto(s27, '*') = s239
goto(s27, '+') = s240
goto(s27, '++') = s169
goto(s27, '-') = s241
goto(s27, '--') = s170
goto(s27, 'sizeof') = s171
goto(s27, '~') = s242
goto(s27, CONSTANT) = s184
goto(s27, IDENTIFIER) = s185
goto(s27, STRING_LITERAL) = s186
goto(s28, additive_expression) = s39
goto(s28, and_expression) = s47
goto(s28, cast_expression) = s155
goto(s28, equality_expression) = s50
goto(s28, exclusive_or_expression) = s143
goto(s28, multiplicative_expression) = s46
goto(s28, postfix_expression) = s172
goto(s28, primary_expression) = s182
goto(s28, relational_expression) = s141
goto(s28, shift_expression) = s191
goto(s28, unary_expression) = s75
goto(s28, unary_operator) = s72
goto(s28, '!') = s237
goto(s28, '&') = s238
goto(s28, '(') = s13
goto(s28, '*') = s239
goto(s28, '+') = s240
goto(s28, '++') = s169
goto(s28, '-') = s241
goto(s28, '--') = s170
goto(s28, 'sizeof') = s171
goto(s28, '~') = s242
goto(s28, CONSTANT) = s184
goto(s28, IDENTIFIER) = s185
goto(s28, STRING_LITERAL) = s186
goto(s29, additive_expression) = s39
goto(s29, and_expression) = s48
goto(s29, cast_expression) = s155
goto(s29, equality_expression) = s50
goto(s29, multiplicative_expression) = s46
goto(s29, postfix_expression) = s172
goto(s29, primary_expression) = s182
goto(s29, relational_expression) = s141
goto(s29, shift_expression) = s191
goto(s29, unary_expression) = s75
goto(s29, unary_operator) = s72
goto(s29, '!') = s237
goto(s29, '&') = s238
goto(s29, '(') = s13
goto(s29, '*') = s239
goto(s29, '+') = s240
goto(s29, '++') = s169
goto(s29, '-') = s241
goto(s29, '--') = s170
goto(s29, 'sizeof') = s171
goto(s29, '~') = s242
goto(s29, CONSTANT) = s184
goto(s29, IDENTIFIER) = s185
goto(s29, STRING_LITERAL) = s186
goto(s30, additive_expression) = s39
goto(s30, cast_expression) = s155
goto(s30, equality_expression) = s49
goto(s30, multiplicative_expression) = s46
goto(s30, postfix_expression) = s172
goto(s30, primary_expression) = s182
goto(s30, relational_expression) = s141
goto(s30, shift_expression) = s191
goto(s30, unary_expression) = s75
goto(s30, unary_operator) = s72
goto(s30, '!') = s237
goto(s30, '&') = s238
goto(s30, '(') = s13
goto(s30, '*') = s239
goto(s30, '+') = s240
goto(s30, '++') = s169
goto(s30, '-') = s241
goto(s30, '--') = s170
goto(s30, 'sizeof') = s171
goto(s30, '~') = s242
goto(s30, CONSTANT) = s184
goto(s30, IDENTIFIER) = s185
goto(s30, STRING_LITERAL) = s186
goto(s31, additive_expression) = s39
goto(s31, cast_expression) = s155
goto(s31, multiplicative_expression) = s46
goto(s31, postfix_expression) = s172
goto(s31, primary_expression) = s182
goto(s31, relational_expression) = s139
goto(s31, shift_expression) = s191
goto(s31, unary_expression) = s75
goto(s31, unary_operator) = s72
goto(s31, '!') = s237
goto(s31, '&') = s238
goto(s31, '(') = s13
goto(s31, '*') = s239
goto(s31, '+') = s240
goto(s31, '++') = s169
goto(s31, '-') = s241
goto(s31, '--') = s170
goto(s31, 'sizeof') = s171
goto(s31, '~') = s242
goto(s31, CONSTANT) = s184
goto(s31, IDENTIFIER) = s185
goto(s31, STRING_LITERAL) = s186
goto(s32, additive_expression) = s39
goto(s32, cast_expression) = s155
goto(s32, multiplicative_expression) = s46
goto(s32, postfix_expression) = s172
goto(s32, primary_expression) = s182
goto(s32, relational_expression) = s140
goto(s32, shift_expression) = s191
goto(s32, unary_expression) = s75
goto(s32, unary_operator) = s72
goto(s32, '!') = s237
goto(s32, '&') = s238
goto(s32, '(') = s13
goto(s32, '*') = s239
goto(s32, '+') = s240
goto(s32, '++') = s169
goto(s32, '-') = s241
goto(s32, '--') = s170
goto(s32, 'sizeof') = s171
goto(s32, '~') = s242
goto(s32, CONSTANT) = s184
goto(s32, IDENTIFIER) = s185
goto(s32, STRING_LITERAL) = s186
goto(s33, additive_expression) = s39
goto(s33, cast_expression) = s155
goto(s33, multiplicative_expression) = s46
goto(s33, postfix_expression) = s172
goto(s33, primary_expression) = s182
goto(s33, shift_expression) = s187
goto(s33, unary_expression) = s75
goto(s33, unary_operator) = s72
goto(s33, '!') = s237
goto(s33, '&') = s238
goto(s33, '(') = s13
goto(s33, '*') = s239
goto(s33, '+') = s240
goto(s33, '++') = s169
goto(s33, '-') = s241
goto(s33, '--') = s170
goto(s33, 'sizeof') = s171
goto(s33, '~') = s242
goto(s33, CONSTANT) = s184
goto(s33, IDENTIFIER) = s185
goto(s33, STRING_LITERAL) = s186
goto(s34, additive_expression) = s39
goto(s34, cast_expression) = s155
goto(s34, multiplicative_expression) = s46
goto(s34, postfix_expression) = s172
goto(s34, primary_expression) = s182
goto(s34, shift_expression) = s188
goto(s34, unary_expression) = s75
goto(s34, unary_operator) = s72
goto(s34, '!') = s237
goto(s34, '&') = s238
goto(s34, '(') = s13
goto(s34, '*') = s239
goto(s34, '+') = s240
goto(s34, '++') = s169
goto(s34, '-') = s241
goto(s34, '--') = s170
goto(s34, 'sizeof') = s171
goto(s34, '~') = s242
goto(s34, CONSTANT) = s184
goto(s34, IDENTIFIER) = s185
goto(s34, STRING_LITERAL) = s186
goto(s35, additive_expression) = s39
goto(s35, cast_expression) = s155
goto(s35, multiplicative_expression) = s46
goto(s35, postfix_expression) = s172
goto(s35, primary_expression) = s182
goto(s35, shift_expression) = s189
goto(s35, unary_expression) = s75
goto(s35, unary_operator) = s72
goto(s35, '!') = s237
goto(s35, '&') = s238
goto(s35, '(') = s13
goto(s35, '*') = s239
goto(s35, '+') = s240
goto(s35, '++') = s169
goto(s35, '-') = s241
goto(s35, '--') = s170
goto(s35, 'sizeof') = s171
goto(s35, '~') = s242
goto(s35, CONSTANT) = s184
goto(s35, IDENTIFIER) = s185
goto(s35, STRING_LITERAL) = s186
goto(s36, additive_expression) = s39
goto(s36, cast_expression) = s155
goto(s36, multiplicative_expression) = s46
goto(s36, postfix_expression) = s172
goto(s36, primary_expression) = s182
goto(s36, shift_expression) = s190
goto(s36, unary_expression) = s75
goto(s36, unary_operator) = s72
goto(s36, '!') = s237
goto(s36, '&') = s238
goto(s36, '(') = s13
goto(s36, '*') = s239
goto(s36, '+') = s240
goto(s36, '++') = s169
goto(s36, '-') = s241
goto(s36, '--') = s170
goto(s36, 'sizeof') = s171
goto(s36, '~') = s242
goto(s36, CONSTANT) = s184
goto(s36, IDENTIFIER) = s185
goto(s36, STRING_LITERAL) = s186
goto(s37, additive_expression) = s40
goto(s37, cast_expression) = s155
goto(s37, multiplicative_expression) = s46
goto(s37, postfix_expression) = s172
goto(s37, primary_expression) = s182
goto(s37, unary_expression) = s75
goto(s37, unary_operator) = s72
goto(s37, '!') = s237
goto(s37, '&') = s238
goto(s37, '(') = s13
goto(s37, '*') = s239
goto(s37, '+') = s240
goto(s37, '++') = s169
goto(s37, '-') = s241
goto(s37, '--') = s170
goto(s37, 'sizeof') = s171
goto(s37, '~') = s242
goto(s37, CONSTANT) = s184
goto(s37, IDENTIFIER) = s185
goto(s37, STRING_LITERAL) = s186
goto(s38, additive_expression) = s41
goto(s38, cast_expression) = s155
goto(s38, multiplicative_expression) = s46
goto(s38, postfix_expression) = s172
goto(s38, primary_expression) = s182
goto(s38, unary_expression) = s75
goto(s38, unary_operator) = s72
goto(s38, '!') = s237
goto(s38, '&') = s238
goto(s38, '(') = s13
goto(s38, '*') = s239
goto(s38, '+') = s240
goto(s38, '++') = s169
goto(s38, '-') = s241
goto(s38, '--') = s170
goto(s38, 'sizeof') = s171
goto(s38, '~') = s242
goto(s38, CONSTANT) = s184
goto(s38, IDENTIFIER) = s185
goto(s38, STRING_LITERAL) = s186
goto(s39, '+') = s42
goto(s39, '-') = s44
goto(s40, '+') = s42
goto(s40, '-') = s44
goto(s41, '+') = s42
goto(s41, '-') = s44
goto(s42, cast_expression) = s155
goto(s42, multiplicative_expression) = s43
goto(s42, postfix_expression) = s172
goto(s42, primary_expression) = s182
goto(s42, unary_expression) = s75
goto(s42, unary_operator) = s72
goto(s42, '!') = s237
goto(s42, '&') = s238
goto(s42, '(') = s13
goto(s42, '*') = s239
goto(s42, '+') = s240
goto(s42, '++') = s169
goto(s42, '-') = s241
goto(s42, '--') = s170
goto(s42, 'sizeof') = s171
goto(s42, '~') = s242
goto(s42, CONSTANT) = s184
goto(s42, IDENTIFIER) = s185
goto(s42, STRING_LITERAL) = s186
goto(s43, '%') = s69
goto(s43, '*') = s70
goto(s43, '/') = s71
goto(s44, cast_expression) = s155
goto(s44, multiplicative_expression) = s45
goto(s44, postfix_expression) = s172
goto(s44, primary_expression) = s182
goto(s44, unary_expression) = s75
goto(s44, unary_operator) = s72
goto(s44, '!') = s237
goto(s44, '&') = s238
goto(s44, '(') = s13
goto(s44, '*') = s239
goto(s44, '+') = s240
goto(s44, '++') = s169
goto(s44, '-') = s241
goto(s44, '--') = s170
goto(s44, 'sizeof') = s171
goto(s44, '~') = s242
goto(s44, CONSTANT) = s184
goto(s44, IDENTIFIER) = s185
goto(s44, STRING_LITERAL) = s186
goto(s45, '%') = s69
goto(s45, '*') = s70
goto(s45, '/') = s71
goto(s46, '%') = s69
goto(s46, '*') = s70
goto(s46, '/') = s71
goto(s47, '&') = s30
goto(s48, '&') = s30
goto(s49, '!=') = s31
goto(s49, '==') = s32
goto(s50, '!=') = s31
goto(s50, '==') = s32
goto(s51, ')') = s174
goto(s51, ',') = s11
goto(s55, assignment_operator) = s12
goto(s55, '%=') = s57
goto(s55, '&=') = s58
goto(s55, '*=') = s59
goto(s55, '+=') = s60
goto(s55, '-=') = s61
goto(s55, '/=') = s62
goto(s55, '<<=') = s63
goto(s55, '=') = s64
goto(s55, '>>=') = s65
goto(s55, '^=') = s66
goto(s55, '|=') = s67
goto(s68, cast_expression) = s74
goto(s68, postfix_expression) = s172
goto(s68, primary_expression) = s182
goto(s68, unary_expression) = s75
goto(s68, unary_operator) = s72
goto(s68, '!') = s237
goto(s68, '&') = s238
goto(s68, '(') = s13
goto(s68, '*') = s239
goto(s68, '+') = s240
goto(s68, '++') = s169
goto(s68, '-') = s241
goto(s68, '--') = s170
goto(s68, 'sizeof') = s171
goto(s68, '~') = s242
goto(s68, CONSTANT) = s184
goto(s68, IDENTIFIER) = s185
goto(s68, STRING_LITERAL) = s186
goto(s69, cast_expression) = s156
goto(s69, postfix_expression) = s172
goto(s69, primary_expression) = s182
goto(s69, unary_expression) = s75
goto(s69, unary_operator) = s72
goto(s69, '!') = s237
goto(s69, '&') = s238
goto(s69, '(') = s13
goto(s69, '*') = s239
goto(s69, '+') = s240
goto(s69, '++') = s169
goto(s69, '-') = s241
goto(s69, '--') = s170
goto(s69, 'sizeof') = s171
goto(s69, '~') = s242
goto(s69, CONSTANT) = s184
goto(s69, IDENTIFIER) = s185
goto(s69, STRING_LITERAL) = s186
goto(s70, cast_expression) = s157
goto(s70, postfix_expression) = s172
goto(s70, primary_expression) = s182
goto(s70, unary_expression) = s75
goto(s70, unary_operator) = s72
goto(s70, '!') = s237
goto(s70, '&') = s238
goto(s70, '(') = s13
goto(s70, '*') = s239
goto(s70, '+') = s240
goto(s70, '++') = s169
goto(s70, '-') = s241
goto(s70, '--') = s170
goto(s70, 'sizeof') = s171
goto(s70, '~') = s242
goto(s70, CONSTANT) = s184
goto(s70, IDENTIFIER) = s185
goto(s70, STRING_LITERAL) = s186
goto(s71, cast_expression) = s158
goto(s71, postfix_expression) = s172
goto(s71, primary_expression) = s182
goto(s71, unary_expression) = s75
goto(s71, unary_operator) = s72
goto(s71, '!') = s237
goto(s71, '&') = s238
goto(s71, '(') = s13
goto(s71, '*') = s239
goto(s71, '+') = s240
goto(s71, '++') = s169
goto(s71, '-') = s241
goto(s71, '--') = s170
goto(s71, 'sizeof') = s171
goto(s71, '~') = s242
goto(s71, CONSTANT) = s184
goto(s71, IDENTIFIER) = s185
goto(s71, STRING_LITERAL) = s186
goto(s72, cast_expression) = s236
goto(s72, postfix_expression) = s172
goto(s72, primary_expression) = s182
goto(s72, unary_expression) = s75
goto(s72, unary_operator) = s72
goto(s72, '!') = s237
goto(s72, '&') = s238
goto(s72, '(') = s13
goto(s72, '*') = s239
goto(s72, '+') = s240
goto(s72, '++') = s169
goto(s72, '-') = s241
goto(s72, '--') = s170
goto(s72, 'sizeof') = s171
goto(s72, '~') = s242
goto(s72, CONSTANT) = s184
goto(s72, IDENTIFIER) = s185
goto(s72, STRING_LITERAL) = s186
goto(s73, ')') = s68
goto(s76, '?') = s14
goto(s76, '||') = s26
goto(s77, ',') = s18
goto(s77, ':') = s19
goto(s80, declaration_specifiers) = s86
goto(s80, enum_specifier) = s229
goto(s80, storage_class_specifier) = s80
goto(s80, struct_or_union) = s210
goto(s80, struct_or_union_specifier) = s230
goto(s80, type_qualifier) = s81
goto(s80, type_specifier) = s82
goto(s80, 'auto') = s194
goto(s80, 'char') = s219
goto(s80, 'const') = s215
goto(s80, 'double') = s220
goto(s80, 'enum') = s126
goto(s80, 'extern') = s195
goto(s80, 'float') = s221
goto(s80, 'int') = s222
goto(s80, 'long') = s223
goto(s80, 'register') = s196
goto(s80, 'short') = s224
goto(s80, 'signed') = s225
goto(s80, 'static') = s197
goto(s80, 'struct') = s208
goto(s80, 'typedef') = s198
goto(s80, 'union') = s209
goto(s80, 'unsigned') = s226
goto(s80, 'void') = s227
goto(s80, 'volatile') = s216
goto(s80, TYPE_NAME) = s228
goto(s81, declaration_specifiers) = s87
goto(s81, enum_specifier) = s229
goto(s81, storage_class_specifier) = s80
goto(s81, struct_or_union) = s210
goto(s81, struct_or_union_specifier) = s230
goto(s81, type_qualifier) = s81
goto(s81, type_specifier) = s82
goto(s81, 'auto') = s194
goto(s81, 'char') = s219
goto(s81, 'const') = s215
goto(s81, 'double') = s220
goto(s81, 'enum') = s126
goto(s81, 'extern') = s195
goto(s81, 'float') = s221
goto(s81, 'int') = s222
goto(s81, 'long') = s223
goto(s81, 'register') = s196
goto(s81, 'short') = s224
goto(s81, 'signed') = s225
goto(s81, 'static') = s197
goto(s81, 'struct') = s208
goto(s81, 'typedef') = s198
goto(s81, 'union') = s209
goto(s81, 'unsigned') = s226
goto(s81, 'void') = s227
goto(s81, 'volatile') = s216
goto(s81, TYPE_NAME) = s228
goto(s82, declaration_specifiers) = s88
goto(s82, enum_specifier) = s229
goto(s82, storage_class_specifier) = s80
goto(s82, struct_or_union) = s210
goto(s82, struct_or_union_specifier) = s230
goto(s82, type_qualifier) = s81
goto(s82, type_specifier) = s82
goto(s82, 'auto') = s194
goto(s82, 'char') = s219
goto(s82, 'const') = s215
goto(s82, 'double') = s220
goto(s82, 'enum') = s126
goto(s82, 'extern') = s195
goto(s82, 'float') = s221
goto(s82, 'int') = s222
goto(s82, 'long') = s223
goto(s82, 'register') = s196
goto(s82, 'short') = s224
goto(s82, 'signed') = s225
goto(s82, 'static') = s197
goto(s82, 'struct') = s208
goto(s82, 'typedef') = s198
goto(s82, 'union') = s209
goto(s82, 'unsigned') = s226
goto(s82, 'void') = s227
goto(s82, 'volatile') = s216
goto(s82, TYPE_NAME) = s228
goto(s83, declaration_specifiers) = s4
goto(s83, enum_specifier) = s229
goto(s83, parameter_declaration) = s161
goto(s83, parameter_list) = s162
goto(s83, parameter_type_list) = s104
goto(s83, storage_class_specifier) = s80
goto(s83, struct_or_union) = s210
goto(s83, struct_or_union_specifier) = s230
goto(s83, type_qualifier) = s81
goto(s83, type_specifier) = s82
goto(s83, ')') = s103
goto(s83, 'auto') = s194
goto(s83, 'char') = s219
goto(s83, 'const') = s215
goto(s83, 'double') = s220
goto(s83, 'enum') = s126
goto(s83, 'extern') = s195
goto(s83, 'float') = s221
goto(s83, 'int') = s222
goto(s83, 'long') = s223
goto(s83, 'register') = s196
goto(s83, 'short') = s224
goto(s83, 'signed') = s225
goto(s83, 'static') = s197
goto(s83, 'struct') = s208
goto(s83, 'typedef') = s198
goto(s83, 'union') = s209
goto(s83, 'unsigned') = s226
goto(s83, 'void') = s227
goto(s83, 'volatile') = s216
goto(s83, TYPE_NAME) = s228
goto(s84, declaration_specifiers) = s4
goto(s84, enum_specifier) = s229
goto(s84, identifier_list) = s113
goto(s84, parameter_declaration) = s161
goto(s84, parameter_list) = s162
goto(s84, parameter_type_list) = s115
goto(s84, storage_class_specifier) = s80
goto(s84, struct_or_union) = s210
goto(s84, struct_or_union_specifier) = s230
goto(s84, type_qualifier) = s81
goto(s84, type_specifier) = s82
goto(s84, ')') = s112
goto(s84, 'auto') = s194
goto(s84, 'char') = s219
goto(s84, 'const') = s215
goto(s84, 'double') = s220
goto(s84, 'enum') = s126
goto(s84, 'extern') = s195
goto(s84, 'float') = s221
goto(s84, 'int') = s222
goto(s84, 'long') = s223
goto(s84, 'register') = s196
goto(s84, 'short') = s224
goto(s84, 'signed') = s225
goto(s84, 'static') = s197
goto(s84, 'struct') = s208
goto(s84, 'typedef') = s198
goto(s84, 'union') = s209
goto(s84, 'unsigned') = s226
goto(s84, 'void') = s227
goto(s84, 'volatile') = s216
goto(s84, IDENTIFIER) = s148
goto(s84, TYPE_NAME) = s228
goto(s85, declaration_specifiers) = s4
goto(s85, enum_specifier) = s229
goto(s85, parameter_declaration) = s163
goto(s85, storage_class_specifier) = s80
goto(s85, struct_or_union) = s210
goto(s85, struct_or_union_specifier) = s230
goto(s85, type_qualifier) = s81
goto(s85, type_specifier) = s82
goto(s85, '...') = s164
goto(s85, 'auto') = s194
goto(s85, 'char') = s219
goto(s85, 'const') = s215
goto(s85, 'double') = s220
goto(s85, 'enum') = s126
goto(s85, 'extern') = s195
goto(s85, 'float') = s221
goto(s85, 'int') = s222
goto(s85, 'long') = s223
goto(s85, 'register') = s196
goto(s85, 'short') = s224
goto(s85, 'signed') = s225
goto(s85, 'static') = s197
goto(s85, 'struct') = s208
goto(s85, 'typedef') = s198
goto(s85, 'union') = s209
goto(s85, 'unsigned') = s226
goto(s85, 'void') = s227
goto(s85, 'volatile') = s216
goto(s85, TYPE_NAME) = s228
goto(s89, declarator) = s109
goto(s89, direct_declarator) = s92
goto(s89, pointer) = s93
goto(s89, '(') = s89
goto(s89, '*') = s165
goto(s89, IDENTIFIER) = s111
goto(s90, declarator) = s204
goto(s90, direct_declarator) = s92
goto(s90, pointer) = s93
goto(s90, struct_declarator) = s206
goto(s90, struct_declarator_list) = s199
goto(s90, '(') = s89
goto(s90, '*') = s165
goto(s90, ':') = s24
goto(s90, IDENTIFIER) = s111
goto(s91, declarator) = s204
goto(s91, direct_declarator) = s92
goto(s91, pointer) = s93
goto(s91, struct_declarator) = s207
goto(s91, '(') = s89
goto(s91, '*') = s165
goto(s91, ':') = s24
goto(s91, IDENTIFIER) = s111
goto(s92, '(') = s84
goto(s92, '[') = s22
goto(s93, direct_declarator) = s94
goto(s93, '(') = s89
goto(s93, IDENTIFIER) = s111
goto(s94, '(') = s84
goto(s94, '[') = s22
goto(s96, ')') = s97
goto(s98, ')') = s99
goto(s101, ']') = s102
goto(s104, ')') = s105
goto(s107, ']') = s108
goto(s109, ')') = s110
goto(s113, ')') = s114
goto(s113, ',') = s149
goto(s115, ')') = s116
goto(s118, ']') = s119
goto(s120, enum_specifier) = s229
goto(s120, specifier_qualifier_list) = s192
goto(s120, struct_or_union) = s210
goto(s120, struct_or_union_specifier) = s230
goto(s120, type_qualifier) = s120
goto(s120, type_specifier) = s121
goto(s120, 'char') = s219
goto(s120, 'const') = s215
goto(s120, 'double') = s220
goto(s120, 'enum') = s126
goto(s120, 'float') = s221
goto(s120, 'int') = s222
goto(s120, 'long') = s223
goto(s120, 'short') = s224
goto(s120, 'signed') = s225
goto(s120, 'struct') = s208
goto(s120, 'union') = s209
goto(s120, 'unsigned') = s226
goto(s120, 'void') = s227
goto(s120, 'volatile') = s216
goto(s120, TYPE_NAME) = s228
goto(s121, enum_specifier) = s229
goto(s121, specifier_qualifier_list) = s193
goto(s121, struct_or_union) = s210
goto(s121, struct_or_union_specifier) = s230
goto(s121, type_qualifier) = s120
goto(s121, type_specifier) = s121
goto(s121, 'char') = s219
goto(s121, 'const') = s215
goto(s121, 'double') = s220
goto(s121, 'enum') = s126
goto(s121, 'float') = s221
goto(s121, 'int') = s222
goto(s121, 'long') = s223
goto(s121, 'short') = s224
goto(s121, 'signed') = s225
goto(s121, 'struct') = s208
goto(s121, 'union') = s209
goto(s121, 'unsigned') = s226
goto(s121, 'void') = s227
goto(s121, 'volatile') = s216
goto(s121, TYPE_NAME) = s228
goto(s122, enum_specifier) = s229
goto(s122, specifier_qualifier_list) = s90
goto(s122, struct_declaration) = s201
goto(s122, struct_declaration_list) = s124
goto(s122, struct_or_union) = s210
goto(s122, struct_or_union_specifier) = s230
goto(s122, type_qualifier) = s120
goto(s122, type_specifier) = s121
goto(s122, 'char') = s219
goto(s122, 'const') = s215
goto(s122, 'double') = s220
goto(s122, 'enum') = s126
goto(s122, 'float') = s221
goto(s122, 'int') = s222
goto(s122, 'long') = s223
goto(s122, 'short') = s224
goto(s122, 'signed') = s225
goto(s122, 'struct') = s208
goto(s122, 'union') = s209
goto(s122, 'unsigned') = s226
goto(s122, 'void') = s227
goto(s122, 'volatile') = s216
goto(s122, TYPE_NAME) = s228
goto(s123, enum_specifier) = s229
goto(s123, specifier_qualifier_list) = s90
goto(s123, struct_declaration) = s201
goto(s123, struct_declaration_list) = s125
goto(s123, struct_or_union) = s210
goto(s123, struct_or_union_specifier) = s230
goto(s123, type_qualifier) = s120
goto(s123, type_specifier) = s121
goto(s123, 'char') = s219
goto(s123, 'const') = s215
goto(s123, 'double') = s220
goto(s123, 'enum') = s126
goto(s123, 'float') = s221
goto(s123, 'int') = s222
goto(s123, 'long') = s223
goto(s123, 'short') = s224
goto(s123, 'signed') = s225
goto(s123, 'struct') = s208
goto(s123, 'union') = s209
goto(s123, 'unsigned') = s226
goto(s123, 'void') = s227
goto(s123, 'volatile') = s216
goto(s123, TYPE_NAME) = s228
goto(s124, enum_specifier) = s229
goto(s124, specifier_qualifier_list) = s90
goto(s124, struct_declaration) = s202
goto(s124, struct_or_union) = s210
goto(s124, struct_or_union_specifier) = s230
goto(s124, type_qualifier) = s120
goto(s124, type_specifier) = s121
goto(s124, 'char') = s219
goto(s124, 'const') = s215
goto(s124, 'double') = s220
goto(s124, 'enum') = s126
goto(s124, 'float') = s221
goto(s124, 'int') = s222
goto(s124, 'long') = s223
goto(s124, 'short') = s224
goto(s124, 'signed') = s225
goto(s124, 'struct') = s208
goto(s124, 'union') = s209
goto(s124, 'unsigned') = s226
goto(s124, 'void') = s227
goto(s124, 'volatile') = s216
goto(s124, '}') = s211
goto(s124, TYPE_NAME) = s228
goto(s125, enum_specifier) = s229
goto(s125, specifier_qualifier_list) = s90
goto(s125, struct_declaration) = s202
goto(s125, struct_or_union) = s210
goto(s125, struct_or_union_specifier) = s230
goto(s125, type_qualifier) = s120
goto(s125, type_specifier) = s121
goto(s125, 'char') = s219
goto(s125, 'const') = s215
goto(s125, 'double') = s220
goto(s125, 'enum') = s126
goto(s125, 'float') = s221
goto(s125, 'int') = s222
goto(s125, 'long') = s223
goto(s125, 'short') = s224
goto(s125, 'signed') = s225
goto(s125, 'struct') = s208
goto(s125, 'union') = s209
goto(s125, 'unsigned') = s226
goto(s125, 'void') = s227
goto(s125, 'volatile') = s216
goto(s125, '}') = s213
goto(s125, TYPE_NAME) = s228
goto(s126, '{') = s127
goto(s126, IDENTIFIER) = s130
goto(s127, enumerator) = s137
goto(s127, enumerator_list) = s128
goto(s127, IDENTIFIER) = s135
goto(s128, ',') = s134
goto(s128, '}') = s129
goto(s130, '{') = s131
goto(s131, enumerator) = s137
goto(s131, enumerator_list) = s132
goto(s131, IDENTIFIER) = s135
goto(s132, ',') = s134
goto(s132, '}') = s133
goto(s134, enumerator) = s138
goto(s134, IDENTIFIER) = s135
goto(s135, '=') = s23
goto(s139, '<') = s33
goto(s139, '<=') = s34
goto(s139, '>') = s35
goto(s139, '>=') = s36
goto(s140, '<') = s33
goto(s140, '<=') = s34
goto(s140, '>') = s35
goto(s140, '>=') = s36
goto(s141, '<') = s33
goto(s141, '<=') = s34
goto(s141, '>') = s35
goto(s141, '>=') = s36
goto(s142, '^') = s29
goto(s143, '^') = s29
goto(s145, ',') = s18
goto(s145, ']') = s181
goto(s146, ')') = s183
goto(s146, ',') = s18
goto(s149, IDENTIFIER) = s150
goto(s151, '|') = s28
goto(s152, '|') = s28
goto(s153, '&&') = s27
goto(s154, '&&') = s27
goto(s162, ',') = s85
goto(s165, pointer) = s167
goto(s165, type_qualifier) = s217
goto(s165, type_qualifier_list) = s166
goto(s165, '*') = s165
goto(s165, 'const') = s215
goto(s165, 'volatile') = s216
goto(s166, pointer) = s168
goto(s166, type_qualifier) = s218
goto(s166, '*') = s165
goto(s166, 'const') = s215
goto(s166, 'volatile') = s216
goto(s169, postfix_expression) = s172
goto(s169, primary_expression) = s182
goto(s169, unary_expression) = s231
goto(s169, unary_operator) = s72
goto(s169, '!') = s237
goto(s169, '&') = s238
goto(s169, '(') = s17
goto(s169, '*') = s239
goto(s169, '+') = s240
goto(s169, '++') = s169
goto(s169, '-') = s241
goto(s169, '--') = s170
goto(s169, 'sizeof') = s171
goto(s169, '~') = s242
goto(s169, CONSTANT) = s184
goto(s169, IDENTIFIER) = s185
goto(s169, STRING_LITERAL) = s186
goto(s170, postfix_expression) = s172
goto(s170, primary_expression) = s182
goto(s170, unary_expression) = s232
goto(s170, unary_operator) = s72
goto(s170, '!') = s237
goto(s170, '&') = s238
goto(s170, '(') = s17
goto(s170, '*') = s239
goto(s170, '+') = s240
goto(s170, '++') = s169
goto(s170, '-') = s241
goto(s170, '--') = s170
goto(s170, 'sizeof') = s171
goto(s170, '~') = s242
goto(s170, CONSTANT) = s184
goto(s170, IDENTIFIER) = s185
goto(s170, STRING_LITERAL) = s186
goto(s171, postfix_expression) = s172
goto(s171, primary_expression) = s182
goto(s171, unary_expression) = s235
goto(s171, unary_operator) = s72
goto(s171, '!') = s237
goto(s171, '&') = s238
goto(s171, '(') = s15
goto(s171, '*') = s239
goto(s171, '+') = s240
goto(s171, '++') = s169
goto(s171, '-') = s241
goto(s171, '--') = s170
goto(s171, 'sizeof') = s171
goto(s171, '~') = s242
goto(s171, CONSTANT) = s184
goto(s171, IDENTIFIER) = s185
goto(s171, STRING_LITERAL) = s186
goto(s172, '(') = s10
goto(s172, '++') = s175
goto(s172, '--') = s176
goto(s172, '->') = s177
goto(s172, '.') = s179
goto(s172, '[') = s16
goto(s177, IDENTIFIER) = s178
goto(s179, IDENTIFIER) = s180
goto(s187, '<<') = s37
goto(s187, '>>') = s38
goto(s188, '<<') = s37
goto(s188, '>>') = s38
goto(s189, '<<') = s37
goto(s189, '>>') = s38
goto(s190, '<<') = s37
goto(s190, '>>') = s38
goto(s191, '<<') = s37
goto(s191, '>>') = s38
goto(s199, ',') = s91
goto(s199, ';') = s200
goto(s204, ':') = s25
goto(s210, '{') = s122
goto(s210, IDENTIFIER) = s212
goto(s212, '{') = s123
goto(s233, ')') = s234

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '%='):
<shift, [assignment_operator -> '%=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '&='):
<shift, [assignment_operator -> '&=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '*='):
<shift, [assignment_operator -> '*=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '+='):
<shift, [assignment_operator -> '+=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '-='):
<shift, [assignment_operator -> '-=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '/='):
<shift, [assignment_operator -> '/=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '<<='):
<shift, [assignment_operator -> '<<=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '='):
<shift, [assignment_operator -> '=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '>>='):
<shift, [assignment_operator -> '>>=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '^='):
<shift, [assignment_operator -> '^=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '|='):
<shift, [assignment_operator -> '|=' <*>]>
<reduce, cast_expression -> unary_expression>

