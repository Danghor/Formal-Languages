Tokens:    [$, '!', '!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '...', '/', '/=', ':', ';', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', 'auto', 'break', 'case', 'char', 'const', 'continue', 'default', 'do', 'double', 'else', 'enum', 'extern', 'float', 'for', 'goto', 'if', 'int', 'long', 'register', 'return', 'short', 'signed', 'sizeof', 'static', 'struct', 'switch', 'typedef', 'union', 'unsigned', 'void', 'volatile', 'while', '{', '|', '|=', '||', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL, TYPE_NAME]

Variables: [S, abstract_declarator, additive_expression, and_expression, argument_expression_list, assignment_expression, assignment_operator, cast_expression, compound_statement, conditional_expression, constant_expression, declaration, declaration_list, declaration_specifiers, declarator, direct_abstract_declarator, direct_declarator, enum_specifier, enumerator, enumerator_list, equality_expression, exclusive_or_expression, expression, expression_statement, external_declaration, function_definition, identifier_list, inclusive_or_expression, init_declarator, init_declarator_list, initializer, initializer_list, iteration_statement, jump_statement, labeled_statement, logical_and_expression, logical_or_expression, multiplicative_expression, parameter_declaration, parameter_list, parameter_type_list, pointer, postfix_expression, primary_expression, relational_expression, selection_statement, shift_expression, specifier_qualifier_list, statement, statement_list, storage_class_specifier, struct_declaration, struct_declaration_list, struct_declarator, struct_declarator_list, struct_or_union, struct_or_union_specifier, translation_unit, type_name, type_qualifier, type_qualifier_list, type_specifier, unary_expression, unary_operator]

Grammar: 
S -> translation_unit
abstract_declarator -> direct_abstract_declarator
abstract_declarator -> pointer
abstract_declarator -> pointer direct_abstract_declarator
additive_expression -> additive_expression '+' multiplicative_expression
additive_expression -> additive_expression '-' multiplicative_expression
additive_expression -> multiplicative_expression
and_expression -> and_expression '&' equality_expression
and_expression -> equality_expression
argument_expression_list -> argument_expression_list ',' assignment_expression
argument_expression_list -> assignment_expression
assignment_expression -> conditional_expression
assignment_expression -> unary_expression assignment_operator assignment_expression
assignment_operator -> '%='
assignment_operator -> '&='
assignment_operator -> '*='
assignment_operator -> '+='
assignment_operator -> '-='
assignment_operator -> '/='
assignment_operator -> '<<='
assignment_operator -> '='
assignment_operator -> '>>='
assignment_operator -> '^='
assignment_operator -> '|='
cast_expression -> '(' type_name ')' cast_expression
cast_expression -> unary_expression
compound_statement -> '{' '}'
compound_statement -> '{' declaration_list '}'
compound_statement -> '{' declaration_list statement_list '}'
compound_statement -> '{' statement_list '}'
conditional_expression -> logical_or_expression
conditional_expression -> logical_or_expression '?' expression ':' conditional_expression
constant_expression -> conditional_expression
declaration -> declaration_specifiers ';'
declaration -> declaration_specifiers init_declarator_list ';'
declaration_list -> declaration
declaration_list -> declaration_list declaration
declaration_specifiers -> storage_class_specifier
declaration_specifiers -> storage_class_specifier declaration_specifiers
declaration_specifiers -> type_qualifier
declaration_specifiers -> type_qualifier declaration_specifiers
declaration_specifiers -> type_specifier
declaration_specifiers -> type_specifier declaration_specifiers
declarator -> direct_declarator
declarator -> pointer direct_declarator
direct_abstract_declarator -> '(' ')'
direct_abstract_declarator -> '(' abstract_declarator ')'
direct_abstract_declarator -> '(' parameter_type_list ')'
direct_abstract_declarator -> '[' ']'
direct_abstract_declarator -> '[' constant_expression ']'
direct_abstract_declarator -> direct_abstract_declarator '(' ')'
direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'
direct_abstract_declarator -> direct_abstract_declarator '[' ']'
direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']'
direct_declarator -> '(' declarator ')'
direct_declarator -> IDENTIFIER
direct_declarator -> direct_declarator '(' ')'
direct_declarator -> direct_declarator '(' identifier_list ')'
direct_declarator -> direct_declarator '(' parameter_type_list ')'
direct_declarator -> direct_declarator '[' ']'
direct_declarator -> direct_declarator '[' constant_expression ']'
enum_specifier -> 'enum' '{' enumerator_list '}'
enum_specifier -> 'enum' IDENTIFIER
enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'
enumerator -> IDENTIFIER
enumerator -> IDENTIFIER '=' constant_expression
enumerator_list -> enumerator
enumerator_list -> enumerator_list ',' enumerator
equality_expression -> equality_expression '!=' relational_expression
equality_expression -> equality_expression '==' relational_expression
equality_expression -> relational_expression
exclusive_or_expression -> and_expression
exclusive_or_expression -> exclusive_or_expression '^' and_expression
expression -> assignment_expression
expression -> expression ',' assignment_expression
expression_statement -> ';'
expression_statement -> expression ';'
external_declaration -> declaration
external_declaration -> function_definition
function_definition -> declaration_specifiers declarator compound_statement
function_definition -> declaration_specifiers declarator declaration_list compound_statement
function_definition -> declarator compound_statement
function_definition -> declarator declaration_list compound_statement
identifier_list -> IDENTIFIER
identifier_list -> identifier_list ',' IDENTIFIER
inclusive_or_expression -> exclusive_or_expression
inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression
init_declarator -> declarator
init_declarator -> declarator '=' initializer
init_declarator_list -> init_declarator
init_declarator_list -> init_declarator_list ',' init_declarator
initializer -> '{' initializer_list ',' '}'
initializer -> '{' initializer_list '}'
initializer -> assignment_expression
initializer_list -> initializer
initializer_list -> initializer_list ',' initializer
iteration_statement -> 'do' statement 'while' '(' expression ')' ';'
iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement
iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement
iteration_statement -> 'while' '(' expression ')' statement
jump_statement -> 'break' ';'
jump_statement -> 'continue' ';'
jump_statement -> 'goto' IDENTIFIER ';'
jump_statement -> 'return' ';'
jump_statement -> 'return' expression ';'
labeled_statement -> 'case' constant_expression ':' statement
labeled_statement -> 'default' ':' statement
labeled_statement -> IDENTIFIER ':' statement
logical_and_expression -> inclusive_or_expression
logical_and_expression -> logical_and_expression '&&' inclusive_or_expression
logical_or_expression -> logical_and_expression
logical_or_expression -> logical_or_expression '||' logical_and_expression
multiplicative_expression -> cast_expression
multiplicative_expression -> multiplicative_expression '%' cast_expression
multiplicative_expression -> multiplicative_expression '*' cast_expression
multiplicative_expression -> multiplicative_expression '/' cast_expression
parameter_declaration -> declaration_specifiers
parameter_declaration -> declaration_specifiers abstract_declarator
parameter_declaration -> declaration_specifiers declarator
parameter_list -> parameter_declaration
parameter_list -> parameter_list ',' parameter_declaration
parameter_type_list -> parameter_list
parameter_type_list -> parameter_list ',' '...'
pointer -> '*'
pointer -> '*' pointer
pointer -> '*' type_qualifier_list
pointer -> '*' type_qualifier_list pointer
postfix_expression -> postfix_expression '(' ')'
postfix_expression -> postfix_expression '(' argument_expression_list ')'
postfix_expression -> postfix_expression '++'
postfix_expression -> postfix_expression '--'
postfix_expression -> postfix_expression '->' IDENTIFIER
postfix_expression -> postfix_expression '.' IDENTIFIER
postfix_expression -> postfix_expression '[' expression ']'
postfix_expression -> primary_expression
primary_expression -> '(' expression ')'
primary_expression -> CONSTANT
primary_expression -> IDENTIFIER
primary_expression -> STRING_LITERAL
relational_expression -> relational_expression '<' shift_expression
relational_expression -> relational_expression '<=' shift_expression
relational_expression -> relational_expression '>' shift_expression
relational_expression -> relational_expression '>=' shift_expression
relational_expression -> shift_expression
selection_statement -> 'if' '(' expression ')' statement
selection_statement -> 'if' '(' expression ')' statement 'else' statement
selection_statement -> 'switch' '(' expression ')' statement
shift_expression -> additive_expression
shift_expression -> shift_expression '<<' additive_expression
shift_expression -> shift_expression '>>' additive_expression
specifier_qualifier_list -> type_qualifier
specifier_qualifier_list -> type_qualifier specifier_qualifier_list
specifier_qualifier_list -> type_specifier
specifier_qualifier_list -> type_specifier specifier_qualifier_list
statement -> compound_statement
statement -> expression_statement
statement -> iteration_statement
statement -> jump_statement
statement -> labeled_statement
statement -> selection_statement
statement_list -> statement
statement_list -> statement_list statement
storage_class_specifier -> 'auto'
storage_class_specifier -> 'extern'
storage_class_specifier -> 'register'
storage_class_specifier -> 'static'
storage_class_specifier -> 'typedef'
struct_declaration -> specifier_qualifier_list struct_declarator_list ';'
struct_declaration_list -> struct_declaration
struct_declaration_list -> struct_declaration_list struct_declaration
struct_declarator -> ':' constant_expression
struct_declarator -> declarator
struct_declarator -> declarator ':' constant_expression
struct_declarator_list -> struct_declarator
struct_declarator_list -> struct_declarator_list ',' struct_declarator
struct_or_union -> 'struct'
struct_or_union -> 'union'
struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'
struct_or_union_specifier -> struct_or_union IDENTIFIER
struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'
translation_unit -> external_declaration
translation_unit -> translation_unit external_declaration
type_name -> specifier_qualifier_list
type_name -> specifier_qualifier_list abstract_declarator
type_qualifier -> 'const'
type_qualifier -> 'volatile'
type_qualifier_list -> type_qualifier
type_qualifier_list -> type_qualifier_list type_qualifier
type_specifier -> 'char'
type_specifier -> 'double'
type_specifier -> 'float'
type_specifier -> 'int'
type_specifier -> 'long'
type_specifier -> 'short'
type_specifier -> 'signed'
type_specifier -> 'unsigned'
type_specifier -> 'void'
type_specifier -> TYPE_NAME
type_specifier -> enum_specifier
type_specifier -> struct_or_union_specifier
unary_expression -> '++' unary_expression
unary_expression -> '--' unary_expression
unary_expression -> 'sizeof' '(' type_name ')'
unary_expression -> 'sizeof' unary_expression
unary_expression -> postfix_expression
unary_expression -> unary_operator cast_expression
unary_operator -> '!'
unary_operator -> '&'
unary_operator -> '*'
unary_operator -> '+'
unary_operator -> '-'
unary_operator -> '~'


Follow(  S) = []
Follow(  abstract_declarator) = [')', ',']
Follow(  additive_expression) = ['!=', '&&', '&', ')', '+', ',', '-', ':', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||', '}']
Follow(  and_expression) = ['&&', '&', ')', ',', ':', ';', '?', ']', '^', '|', '||', '}']
Follow(  argument_expression_list) = [')', ',']
Follow(  assignment_expression) = [')', ',', ':', ';', ']', '}']
Follow(  assignment_operator) = ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  cast_expression) = ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', ';', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||', '}']
Follow(  compound_statement) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'auto', 'break', 'case', 'char', 'const', 'continue', 'default', 'do', 'double', 'else', 'enum', 'extern', 'float', 'for', 'goto', 'if', 'int', 'long', 'register', 'return', 'short', 'signed', 'sizeof', 'static', 'struct', 'switch', 'typedef', 'union', 'unsigned', 'void', 'volatile', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL, TYPE_NAME]
Follow(  conditional_expression) = [')', ',', ':', ';', ']', '}']
Follow(  constant_expression) = [',', ':', ';', ']', '}']
Follow(  declaration) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'auto', 'break', 'case', 'char', 'const', 'continue', 'default', 'do', 'double', 'enum', 'extern', 'float', 'for', 'goto', 'if', 'int', 'long', 'register', 'return', 'short', 'signed', 'sizeof', 'static', 'struct', 'switch', 'typedef', 'union', 'unsigned', 'void', 'volatile', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL, TYPE_NAME]
Follow(  declaration_list) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'auto', 'break', 'case', 'char', 'const', 'continue', 'default', 'do', 'double', 'enum', 'extern', 'float', 'for', 'goto', 'if', 'int', 'long', 'register', 'return', 'short', 'signed', 'sizeof', 'static', 'struct', 'switch', 'typedef', 'union', 'unsigned', 'void', 'volatile', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL, TYPE_NAME]
Follow(  declaration_specifiers) = ['(', ')', '*', ',', ';', '[', IDENTIFIER]
Follow(  declarator) = [')', ',', ':', ';', '=', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', '{', TYPE_NAME]
Follow(  direct_abstract_declarator) = ['(', ')', ',', '[']
Follow(  direct_declarator) = ['(', ')', ',', ':', ';', '=', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', '{', TYPE_NAME]
Follow(  enum_specifier) = ['(', ')', '*', ',', ':', ';', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  enumerator) = [',', '}']
Follow(  enumerator_list) = [',', '}']
Follow(  equality_expression) = ['!=', '&&', '&', ')', ',', ':', ';', '==', '?', ']', '^', '|', '||', '}']
Follow(  exclusive_or_expression) = ['&&', ')', ',', ':', ';', '?', ']', '^', '|', '||', '}']
Follow(  expression) = [')', ',', ':', ';', ']']
Follow(  expression_statement) = ['!', '&', '(', ')', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'else', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  external_declaration) = ['(', '*', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  function_definition) = ['(', '*', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  identifier_list) = [')', ',']
Follow(  inclusive_or_expression) = ['&&', ')', ',', ':', ';', '?', ']', '|', '||', '}']
Follow(  init_declarator) = [',', ';']
Follow(  init_declarator_list) = [',', ';']
Follow(  initializer) = [',', ';', '}']
Follow(  initializer_list) = [',', '}']
Follow(  iteration_statement) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'else', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  jump_statement) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'else', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  labeled_statement) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'else', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  logical_and_expression) = ['&&', ')', ',', ':', ';', '?', ']', '||', '}']
Follow(  logical_or_expression) = [')', ',', ':', ';', '?', ']', '||', '}']
Follow(  multiplicative_expression) = ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', ':', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||', '}']
Follow(  parameter_declaration) = [')', ',']
Follow(  parameter_list) = [')', ',']
Follow(  parameter_type_list) = [')']
Follow(  pointer) = ['(', ')', ',', '[', IDENTIFIER]
Follow(  postfix_expression) = ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', ';', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||', '}']
Follow(  primary_expression) = ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', ';', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||', '}']
Follow(  relational_expression) = ['!=', '&&', '&', ')', ',', ':', ';', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||', '}']
Follow(  selection_statement) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'else', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  shift_expression) = ['!=', '&&', '&', ')', ',', ':', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||', '}']
Follow(  specifier_qualifier_list) = ['(', ')', '*', ':', '[', IDENTIFIER]
Follow(  statement) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'else', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  statement_list) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  storage_class_specifier) = ['(', ')', '*', ',', ';', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  struct_declaration) = ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME]
Follow(  struct_declaration_list) = ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME]
Follow(  struct_declarator) = [',', ';']
Follow(  struct_declarator_list) = [',', ';']
Follow(  struct_or_union) = ['{', IDENTIFIER]
Follow(  struct_or_union_specifier) = ['(', ')', '*', ',', ':', ';', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  translation_unit) = ['(', '*', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  type_name) = [')']
Follow(  type_qualifier) = ['(', ')', '*', ',', ':', ';', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  type_qualifier_list) = ['(', ')', '*', ',', '[', 'const', 'volatile', IDENTIFIER]
Follow(  type_specifier) = ['(', ')', '*', ',', ':', ';', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  unary_expression) = ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', ';', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||', '}']
Follow(  unary_operator) = ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]


s0 = { S -> <*> translation_unit,
       declaration -> <*> declaration_specifiers ';',
       declaration -> <*> declaration_specifiers init_declarator_list ';',
       declaration_specifiers -> <*> storage_class_specifier,
       declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
       declaration_specifiers -> <*> type_qualifier,
       declaration_specifiers -> <*> type_qualifier declaration_specifiers,
       declaration_specifiers -> <*> type_specifier,
       declaration_specifiers -> <*> type_specifier declaration_specifiers,
       declarator -> <*> direct_declarator,
       declarator -> <*> pointer direct_declarator,
       direct_declarator -> <*> '(' declarator ')',
       direct_declarator -> <*> IDENTIFIER,
       direct_declarator -> <*> direct_declarator '(' ')',
       direct_declarator -> <*> direct_declarator '(' identifier_list ')',
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
       direct_declarator -> <*> direct_declarator '[' ']',
       direct_declarator -> <*> direct_declarator '[' constant_expression ']',
       enum_specifier -> <*> 'enum' '{' enumerator_list '}',
       enum_specifier -> <*> 'enum' IDENTIFIER,
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
       external_declaration -> <*> declaration,
       external_declaration -> <*> function_definition,
       function_definition -> <*> declaration_specifiers declarator compound_statement,
       function_definition -> <*> declaration_specifiers declarator declaration_list compound_statement,
       function_definition -> <*> declarator compound_statement,
       function_definition -> <*> declarator declaration_list compound_statement,
       pointer -> <*> '*',
       pointer -> <*> '*' pointer,
       pointer -> <*> '*' type_qualifier_list,
       pointer -> <*> '*' type_qualifier_list pointer,
       storage_class_specifier -> <*> 'auto',
       storage_class_specifier -> <*> 'extern',
       storage_class_specifier -> <*> 'register',
       storage_class_specifier -> <*> 'static',
       storage_class_specifier -> <*> 'typedef',
       struct_or_union -> <*> 'struct',
       struct_or_union -> <*> 'union',
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
       translation_unit -> <*> external_declaration,
       translation_unit -> <*> translation_unit external_declaration,
       type_qualifier -> <*> 'const',
       type_qualifier -> <*> 'volatile',
       type_specifier -> <*> 'char',
       type_specifier -> <*> 'double',
       type_specifier -> <*> 'float',
       type_specifier -> <*> 'int',
       type_specifier -> <*> 'long',
       type_specifier -> <*> 'short',
       type_specifier -> <*> 'signed',
       type_specifier -> <*> 'unsigned',
       type_specifier -> <*> 'void',
       type_specifier -> <*> TYPE_NAME,
       type_specifier -> <*> enum_specifier,
       type_specifier -> <*> struct_or_union_specifier
     }

s1 = { S -> translation_unit <*>,
       declaration -> <*> declaration_specifiers ';',
       declaration -> <*> declaration_specifiers init_declarator_list ';',
       declaration_specifiers -> <*> storage_class_specifier,
       declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
       declaration_specifiers -> <*> type_qualifier,
       declaration_specifiers -> <*> type_qualifier declaration_specifiers,
       declaration_specifiers -> <*> type_specifier,
       declaration_specifiers -> <*> type_specifier declaration_specifiers,
       declarator -> <*> direct_declarator,
       declarator -> <*> pointer direct_declarator,
       direct_declarator -> <*> '(' declarator ')',
       direct_declarator -> <*> IDENTIFIER,
       direct_declarator -> <*> direct_declarator '(' ')',
       direct_declarator -> <*> direct_declarator '(' identifier_list ')',
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
       direct_declarator -> <*> direct_declarator '[' ']',
       direct_declarator -> <*> direct_declarator '[' constant_expression ']',
       enum_specifier -> <*> 'enum' '{' enumerator_list '}',
       enum_specifier -> <*> 'enum' IDENTIFIER,
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
       external_declaration -> <*> declaration,
       external_declaration -> <*> function_definition,
       function_definition -> <*> declaration_specifiers declarator compound_statement,
       function_definition -> <*> declaration_specifiers declarator declaration_list compound_statement,
       function_definition -> <*> declarator compound_statement,
       function_definition -> <*> declarator declaration_list compound_statement,
       pointer -> <*> '*',
       pointer -> <*> '*' pointer,
       pointer -> <*> '*' type_qualifier_list,
       pointer -> <*> '*' type_qualifier_list pointer,
       storage_class_specifier -> <*> 'auto',
       storage_class_specifier -> <*> 'extern',
       storage_class_specifier -> <*> 'register',
       storage_class_specifier -> <*> 'static',
       storage_class_specifier -> <*> 'typedef',
       struct_or_union -> <*> 'struct',
       struct_or_union -> <*> 'union',
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
       translation_unit -> translation_unit <*> external_declaration,
       type_qualifier -> <*> 'const',
       type_qualifier -> <*> 'volatile',
       type_specifier -> <*> 'char',
       type_specifier -> <*> 'double',
       type_specifier -> <*> 'float',
       type_specifier -> <*> 'int',
       type_specifier -> <*> 'long',
       type_specifier -> <*> 'short',
       type_specifier -> <*> 'signed',
       type_specifier -> <*> 'unsigned',
       type_specifier -> <*> 'void',
       type_specifier -> <*> TYPE_NAME,
       type_specifier -> <*> enum_specifier,
       type_specifier -> <*> struct_or_union_specifier
     }

s2 = { abstract_declarator -> <*> direct_abstract_declarator,
       abstract_declarator -> <*> pointer,
       abstract_declarator -> <*> pointer direct_abstract_declarator,
       declaration_specifiers -> <*> storage_class_specifier,
       declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
       declaration_specifiers -> <*> type_qualifier,
       declaration_specifiers -> <*> type_qualifier declaration_specifiers,
       declaration_specifiers -> <*> type_specifier,
       declaration_specifiers -> <*> type_specifier declaration_specifiers,
       declarator -> <*> direct_declarator,
       declarator -> <*> pointer direct_declarator,
       direct_abstract_declarator -> <*> '(' ')',
       direct_abstract_declarator -> <*> '(' abstract_declarator ')',
       direct_abstract_declarator -> <*> '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> '[' ']',
       direct_abstract_declarator -> <*> '[' constant_expression ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']',
       direct_abstract_declarator -> '(' <*> ')',
       direct_abstract_declarator -> '(' <*> abstract_declarator ')',
       direct_abstract_declarator -> '(' <*> parameter_type_list ')',
       direct_declarator -> <*> '(' declarator ')',
       direct_declarator -> <*> IDENTIFIER,
       direct_declarator -> <*> direct_declarator '(' ')',
       direct_declarator -> <*> direct_declarator '(' identifier_list ')',
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
       direct_declarator -> <*> direct_declarator '[' ']',
       direct_declarator -> <*> direct_declarator '[' constant_expression ']',
       direct_declarator -> '(' <*> declarator ')',
       enum_specifier -> <*> 'enum' '{' enumerator_list '}',
       enum_specifier -> <*> 'enum' IDENTIFIER,
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
       parameter_declaration -> <*> declaration_specifiers,
       parameter_declaration -> <*> declaration_specifiers abstract_declarator,
       parameter_declaration -> <*> declaration_specifiers declarator,
       parameter_list -> <*> parameter_declaration,
       parameter_list -> <*> parameter_list ',' parameter_declaration,
       parameter_type_list -> <*> parameter_list,
       parameter_type_list -> <*> parameter_list ',' '...',
       pointer -> <*> '*',
       pointer -> <*> '*' pointer,
       pointer -> <*> '*' type_qualifier_list,
       pointer -> <*> '*' type_qualifier_list pointer,
       storage_class_specifier -> <*> 'auto',
       storage_class_specifier -> <*> 'extern',
       storage_class_specifier -> <*> 'register',
       storage_class_specifier -> <*> 'static',
       storage_class_specifier -> <*> 'typedef',
       struct_or_union -> <*> 'struct',
       struct_or_union -> <*> 'union',
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
       type_qualifier -> <*> 'const',
       type_qualifier -> <*> 'volatile',
       type_specifier -> <*> 'char',
       type_specifier -> <*> 'double',
       type_specifier -> <*> 'float',
       type_specifier -> <*> 'int',
       type_specifier -> <*> 'long',
       type_specifier -> <*> 'short',
       type_specifier -> <*> 'signed',
       type_specifier -> <*> 'unsigned',
       type_specifier -> <*> 'void',
       type_specifier -> <*> TYPE_NAME,
       type_specifier -> <*> enum_specifier,
       type_specifier -> <*> struct_or_union_specifier
     }

s3 = { abstract_declarator -> <*> direct_abstract_declarator,
       abstract_declarator -> <*> pointer,
       abstract_declarator -> <*> pointer direct_abstract_declarator,
       declaration_specifiers -> <*> storage_class_specifier,
       declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
       declaration_specifiers -> <*> type_qualifier,
       declaration_specifiers -> <*> type_qualifier declaration_specifiers,
       declaration_specifiers -> <*> type_specifier,
       declaration_specifiers -> <*> type_specifier declaration_specifiers,
       direct_abstract_declarator -> <*> '(' ')',
       direct_abstract_declarator -> <*> '(' abstract_declarator ')',
       direct_abstract_declarator -> <*> '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> '[' ']',
       direct_abstract_declarator -> <*> '[' constant_expression ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']',
       direct_abstract_declarator -> '(' <*> ')',
       direct_abstract_declarator -> '(' <*> abstract_declarator ')',
       direct_abstract_declarator -> '(' <*> parameter_type_list ')',
       enum_specifier -> <*> 'enum' '{' enumerator_list '}',
       enum_specifier -> <*> 'enum' IDENTIFIER,
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
       parameter_declaration -> <*> declaration_specifiers,
       parameter_declaration -> <*> declaration_specifiers abstract_declarator,
       parameter_declaration -> <*> declaration_specifiers declarator,
       parameter_list -> <*> parameter_declaration,
       parameter_list -> <*> parameter_list ',' parameter_declaration,
       parameter_type_list -> <*> parameter_list,
       parameter_type_list -> <*> parameter_list ',' '...',
       pointer -> <*> '*',
       pointer -> <*> '*' pointer,
       pointer -> <*> '*' type_qualifier_list,
       pointer -> <*> '*' type_qualifier_list pointer,
       storage_class_specifier -> <*> 'auto',
       storage_class_specifier -> <*> 'extern',
       storage_class_specifier -> <*> 'register',
       storage_class_specifier -> <*> 'static',
       storage_class_specifier -> <*> 'typedef',
       struct_or_union -> <*> 'struct',
       struct_or_union -> <*> 'union',
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
       type_qualifier -> <*> 'const',
       type_qualifier -> <*> 'volatile',
       type_specifier -> <*> 'char',
       type_specifier -> <*> 'double',
       type_specifier -> <*> 'float',
       type_specifier -> <*> 'int',
       type_specifier -> <*> 'long',
       type_specifier -> <*> 'short',
       type_specifier -> <*> 'signed',
       type_specifier -> <*> 'unsigned',
       type_specifier -> <*> 'void',
       type_specifier -> <*> TYPE_NAME,
       type_specifier -> <*> enum_specifier,
       type_specifier -> <*> struct_or_union_specifier
     }

s4 = { abstract_declarator -> <*> direct_abstract_declarator,
       abstract_declarator -> <*> pointer,
       abstract_declarator -> <*> pointer direct_abstract_declarator,
       declarator -> <*> direct_declarator,
       declarator -> <*> pointer direct_declarator,
       direct_abstract_declarator -> <*> '(' ')',
       direct_abstract_declarator -> <*> '(' abstract_declarator ')',
       direct_abstract_declarator -> <*> '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> '[' ']',
       direct_abstract_declarator -> <*> '[' constant_expression ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']',
       direct_declarator -> <*> '(' declarator ')',
       direct_declarator -> <*> IDENTIFIER,
       direct_declarator -> <*> direct_declarator '(' ')',
       direct_declarator -> <*> direct_declarator '(' identifier_list ')',
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
       direct_declarator -> <*> direct_declarator '[' ']',
       direct_declarator -> <*> direct_declarator '[' constant_expression ']',
       parameter_declaration -> declaration_specifiers <*>,
       parameter_declaration -> declaration_specifiers <*> abstract_declarator,
       parameter_declaration -> declaration_specifiers <*> declarator,
       pointer -> <*> '*',
       pointer -> <*> '*' pointer,
       pointer -> <*> '*' type_qualifier_list,
       pointer -> <*> '*' type_qualifier_list pointer
     }

s5 = { abstract_declarator -> <*> direct_abstract_declarator,
       abstract_declarator -> <*> pointer,
       abstract_declarator -> <*> pointer direct_abstract_declarator,
       direct_abstract_declarator -> <*> '(' ')',
       direct_abstract_declarator -> <*> '(' abstract_declarator ')',
       direct_abstract_declarator -> <*> '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> '[' ']',
       direct_abstract_declarator -> <*> '[' constant_expression ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']',
       pointer -> <*> '*',
       pointer -> <*> '*' pointer,
       pointer -> <*> '*' type_qualifier_list,
       pointer -> <*> '*' type_qualifier_list pointer,
       type_name -> specifier_qualifier_list <*>,
       type_name -> specifier_qualifier_list <*> abstract_declarator
     }

s6 = { abstract_declarator -> direct_abstract_declarator <*>,
       direct_abstract_declarator -> direct_abstract_declarator <*> '(' ')',
       direct_abstract_declarator -> direct_abstract_declarator <*> '(' parameter_type_list ')',
       direct_abstract_declarator -> direct_abstract_declarator <*> '[' ']',
       direct_abstract_declarator -> direct_abstract_declarator <*> '[' constant_expression ']'
     }

s7 = { abstract_declarator -> pointer <*>,
       abstract_declarator -> pointer <*> direct_abstract_declarator,
       declarator -> pointer <*> direct_declarator,
       direct_abstract_declarator -> <*> '(' ')',
       direct_abstract_declarator -> <*> '(' abstract_declarator ')',
       direct_abstract_declarator -> <*> '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> '[' ']',
       direct_abstract_declarator -> <*> '[' constant_expression ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']',
       direct_declarator -> <*> '(' declarator ')',
       direct_declarator -> <*> IDENTIFIER,
       direct_declarator -> <*> direct_declarator '(' ')',
       direct_declarator -> <*> direct_declarator '(' identifier_list ')',
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
       direct_declarator -> <*> direct_declarator '[' ']',
       direct_declarator -> <*> direct_declarator '[' constant_expression ']'
     }

s8 = { abstract_declarator -> pointer <*>,
       abstract_declarator -> pointer <*> direct_abstract_declarator,
       direct_abstract_declarator -> <*> '(' ')',
       direct_abstract_declarator -> <*> '(' abstract_declarator ')',
       direct_abstract_declarator -> <*> '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> '[' ']',
       direct_abstract_declarator -> <*> '[' constant_expression ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']',
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']'
     }

s9 = { abstract_declarator -> pointer direct_abstract_declarator <*>,
       direct_abstract_declarator -> direct_abstract_declarator <*> '(' ')',
       direct_abstract_declarator -> direct_abstract_declarator <*> '(' parameter_type_list ')',
       direct_abstract_declarator -> direct_abstract_declarator <*> '[' ']',
       direct_abstract_declarator -> direct_abstract_declarator <*> '[' constant_expression ']'
     }

s10 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        argument_expression_list -> <*> argument_expression_list ',' assignment_expression,
        argument_expression_list -> <*> assignment_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        postfix_expression -> postfix_expression '(' <*> ')',
        postfix_expression -> postfix_expression '(' <*> argument_expression_list ')',
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s11 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        argument_expression_list -> argument_expression_list ',' <*> assignment_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s12 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        assignment_expression -> unary_expression assignment_operator <*> assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s13 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        cast_expression -> '(' <*> type_name ')' cast_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        enum_specifier -> <*> 'enum' '{' enumerator_list '}',
        enum_specifier -> <*> 'enum' IDENTIFIER,
        enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        primary_expression -> '(' <*> expression ')',
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        specifier_qualifier_list -> <*> type_qualifier,
        specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list,
        specifier_qualifier_list -> <*> type_specifier,
        specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list,
        struct_or_union -> <*> 'struct',
        struct_or_union -> <*> 'union',
        struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
        type_name -> <*> specifier_qualifier_list,
        type_name -> <*> specifier_qualifier_list abstract_declarator,
        type_qualifier -> <*> 'const',
        type_qualifier -> <*> 'volatile',
        type_specifier -> <*> 'char',
        type_specifier -> <*> 'double',
        type_specifier -> <*> 'float',
        type_specifier -> <*> 'int',
        type_specifier -> <*> 'long',
        type_specifier -> <*> 'short',
        type_specifier -> <*> 'signed',
        type_specifier -> <*> 'unsigned',
        type_specifier -> <*> 'void',
        type_specifier -> <*> TYPE_NAME,
        type_specifier -> <*> enum_specifier,
        type_specifier -> <*> struct_or_union_specifier,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s14 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        compound_statement -> <*> '{' '}',
        compound_statement -> <*> '{' declaration_list '}',
        compound_statement -> <*> '{' declaration_list statement_list '}',
        compound_statement -> <*> '{' statement_list '}',
        compound_statement -> '{' <*> '}',
        compound_statement -> '{' <*> declaration_list '}',
        compound_statement -> '{' <*> declaration_list statement_list '}',
        compound_statement -> '{' <*> statement_list '}',
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        declaration -> <*> declaration_specifiers ';',
        declaration -> <*> declaration_specifiers init_declarator_list ';',
        declaration_list -> <*> declaration,
        declaration_list -> <*> declaration_list declaration,
        declaration_specifiers -> <*> storage_class_specifier,
        declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
        declaration_specifiers -> <*> type_qualifier,
        declaration_specifiers -> <*> type_qualifier declaration_specifiers,
        declaration_specifiers -> <*> type_specifier,
        declaration_specifiers -> <*> type_specifier declaration_specifiers,
        enum_specifier -> <*> 'enum' '{' enumerator_list '}',
        enum_specifier -> <*> 'enum' IDENTIFIER,
        enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        expression_statement -> <*> ';',
        expression_statement -> <*> expression ';',
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> <*> 'do' statement 'while' '(' expression ')' ';',
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement ')' statement,
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement expression ')' statement,
        iteration_statement -> <*> 'while' '(' expression ')' statement,
        jump_statement -> <*> 'break' ';',
        jump_statement -> <*> 'continue' ';',
        jump_statement -> <*> 'goto' IDENTIFIER ';',
        jump_statement -> <*> 'return' ';',
        jump_statement -> <*> 'return' expression ';',
        labeled_statement -> <*> 'case' constant_expression ':' statement,
        labeled_statement -> <*> 'default' ':' statement,
        labeled_statement -> <*> IDENTIFIER ':' statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        selection_statement -> <*> 'if' '(' expression ')' statement,
        selection_statement -> <*> 'if' '(' expression ')' statement 'else' statement,
        selection_statement -> <*> 'switch' '(' expression ')' statement,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        statement -> <*> compound_statement,
        statement -> <*> expression_statement,
        statement -> <*> iteration_statement,
        statement -> <*> jump_statement,
        statement -> <*> labeled_statement,
        statement -> <*> selection_statement,
        statement_list -> <*> statement,
        statement_list -> <*> statement_list statement,
        storage_class_specifier -> <*> 'auto',
        storage_class_specifier -> <*> 'extern',
        storage_class_specifier -> <*> 'register',
        storage_class_specifier -> <*> 'static',
        storage_class_specifier -> <*> 'typedef',
        struct_or_union -> <*> 'struct',
        struct_or_union -> <*> 'union',
        struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
        type_qualifier -> <*> 'const',
        type_qualifier -> <*> 'volatile',
        type_specifier -> <*> 'char',
        type_specifier -> <*> 'double',
        type_specifier -> <*> 'float',
        type_specifier -> <*> 'int',
        type_specifier -> <*> 'long',
        type_specifier -> <*> 'short',
        type_specifier -> <*> 'signed',
        type_specifier -> <*> 'unsigned',
        type_specifier -> <*> 'void',
        type_specifier -> <*> TYPE_NAME,
        type_specifier -> <*> enum_specifier,
        type_specifier -> <*> struct_or_union_specifier,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s15 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        compound_statement -> <*> '{' '}',
        compound_statement -> <*> '{' declaration_list '}',
        compound_statement -> <*> '{' declaration_list statement_list '}',
        compound_statement -> <*> '{' statement_list '}',
        compound_statement -> '{' declaration_list <*> '}',
        compound_statement -> '{' declaration_list <*> statement_list '}',
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        declaration -> <*> declaration_specifiers ';',
        declaration -> <*> declaration_specifiers init_declarator_list ';',
        declaration_list -> declaration_list <*> declaration,
        declaration_specifiers -> <*> storage_class_specifier,
        declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
        declaration_specifiers -> <*> type_qualifier,
        declaration_specifiers -> <*> type_qualifier declaration_specifiers,
        declaration_specifiers -> <*> type_specifier,
        declaration_specifiers -> <*> type_specifier declaration_specifiers,
        enum_specifier -> <*> 'enum' '{' enumerator_list '}',
        enum_specifier -> <*> 'enum' IDENTIFIER,
        enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        expression_statement -> <*> ';',
        expression_statement -> <*> expression ';',
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> <*> 'do' statement 'while' '(' expression ')' ';',
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement ')' statement,
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement expression ')' statement,
        iteration_statement -> <*> 'while' '(' expression ')' statement,
        jump_statement -> <*> 'break' ';',
        jump_statement -> <*> 'continue' ';',
        jump_statement -> <*> 'goto' IDENTIFIER ';',
        jump_statement -> <*> 'return' ';',
        jump_statement -> <*> 'return' expression ';',
        labeled_statement -> <*> 'case' constant_expression ':' statement,
        labeled_statement -> <*> 'default' ':' statement,
        labeled_statement -> <*> IDENTIFIER ':' statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        selection_statement -> <*> 'if' '(' expression ')' statement,
        selection_statement -> <*> 'if' '(' expression ')' statement 'else' statement,
        selection_statement -> <*> 'switch' '(' expression ')' statement,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        statement -> <*> compound_statement,
        statement -> <*> expression_statement,
        statement -> <*> iteration_statement,
        statement -> <*> jump_statement,
        statement -> <*> labeled_statement,
        statement -> <*> selection_statement,
        statement_list -> <*> statement,
        statement_list -> <*> statement_list statement,
        storage_class_specifier -> <*> 'auto',
        storage_class_specifier -> <*> 'extern',
        storage_class_specifier -> <*> 'register',
        storage_class_specifier -> <*> 'static',
        storage_class_specifier -> <*> 'typedef',
        struct_or_union -> <*> 'struct',
        struct_or_union -> <*> 'union',
        struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
        type_qualifier -> <*> 'const',
        type_qualifier -> <*> 'volatile',
        type_specifier -> <*> 'char',
        type_specifier -> <*> 'double',
        type_specifier -> <*> 'float',
        type_specifier -> <*> 'int',
        type_specifier -> <*> 'long',
        type_specifier -> <*> 'short',
        type_specifier -> <*> 'signed',
        type_specifier -> <*> 'unsigned',
        type_specifier -> <*> 'void',
        type_specifier -> <*> TYPE_NAME,
        type_specifier -> <*> enum_specifier,
        type_specifier -> <*> struct_or_union_specifier,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s16 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        compound_statement -> <*> '{' '}',
        compound_statement -> <*> '{' declaration_list '}',
        compound_statement -> <*> '{' declaration_list statement_list '}',
        compound_statement -> <*> '{' statement_list '}',
        compound_statement -> '{' declaration_list statement_list <*> '}',
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        expression_statement -> <*> ';',
        expression_statement -> <*> expression ';',
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> <*> 'do' statement 'while' '(' expression ')' ';',
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement ')' statement,
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement expression ')' statement,
        iteration_statement -> <*> 'while' '(' expression ')' statement,
        jump_statement -> <*> 'break' ';',
        jump_statement -> <*> 'continue' ';',
        jump_statement -> <*> 'goto' IDENTIFIER ';',
        jump_statement -> <*> 'return' ';',
        jump_statement -> <*> 'return' expression ';',
        labeled_statement -> <*> 'case' constant_expression ':' statement,
        labeled_statement -> <*> 'default' ':' statement,
        labeled_statement -> <*> IDENTIFIER ':' statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        selection_statement -> <*> 'if' '(' expression ')' statement,
        selection_statement -> <*> 'if' '(' expression ')' statement 'else' statement,
        selection_statement -> <*> 'switch' '(' expression ')' statement,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        statement -> <*> compound_statement,
        statement -> <*> expression_statement,
        statement -> <*> iteration_statement,
        statement -> <*> jump_statement,
        statement -> <*> labeled_statement,
        statement -> <*> selection_statement,
        statement_list -> statement_list <*> statement,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s17 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        compound_statement -> <*> '{' '}',
        compound_statement -> <*> '{' declaration_list '}',
        compound_statement -> <*> '{' declaration_list statement_list '}',
        compound_statement -> <*> '{' statement_list '}',
        compound_statement -> '{' statement_list <*> '}',
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        expression_statement -> <*> ';',
        expression_statement -> <*> expression ';',
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> <*> 'do' statement 'while' '(' expression ')' ';',
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement ')' statement,
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement expression ')' statement,
        iteration_statement -> <*> 'while' '(' expression ')' statement,
        jump_statement -> <*> 'break' ';',
        jump_statement -> <*> 'continue' ';',
        jump_statement -> <*> 'goto' IDENTIFIER ';',
        jump_statement -> <*> 'return' ';',
        jump_statement -> <*> 'return' expression ';',
        labeled_statement -> <*> 'case' constant_expression ':' statement,
        labeled_statement -> <*> 'default' ':' statement,
        labeled_statement -> <*> IDENTIFIER ':' statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        selection_statement -> <*> 'if' '(' expression ')' statement,
        selection_statement -> <*> 'if' '(' expression ')' statement 'else' statement,
        selection_statement -> <*> 'switch' '(' expression ')' statement,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        statement -> <*> compound_statement,
        statement -> <*> expression_statement,
        statement -> <*> iteration_statement,
        statement -> <*> jump_statement,
        statement -> <*> labeled_statement,
        statement -> <*> selection_statement,
        statement_list -> statement_list <*> statement,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s18 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        compound_statement -> <*> '{' '}',
        compound_statement -> <*> '{' declaration_list '}',
        compound_statement -> <*> '{' declaration_list statement_list '}',
        compound_statement -> <*> '{' statement_list '}',
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        expression_statement -> <*> ';',
        expression_statement -> <*> expression ';',
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> <*> 'do' statement 'while' '(' expression ')' ';',
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement ')' statement,
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement expression ')' statement,
        iteration_statement -> <*> 'while' '(' expression ')' statement,
        iteration_statement -> 'do' <*> statement 'while' '(' expression ')' ';',
        jump_statement -> <*> 'break' ';',
        jump_statement -> <*> 'continue' ';',
        jump_statement -> <*> 'goto' IDENTIFIER ';',
        jump_statement -> <*> 'return' ';',
        jump_statement -> <*> 'return' expression ';',
        labeled_statement -> <*> 'case' constant_expression ':' statement,
        labeled_statement -> <*> 'default' ':' statement,
        labeled_statement -> <*> IDENTIFIER ':' statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        selection_statement -> <*> 'if' '(' expression ')' statement,
        selection_statement -> <*> 'if' '(' expression ')' statement 'else' statement,
        selection_statement -> <*> 'switch' '(' expression ')' statement,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        statement -> <*> compound_statement,
        statement -> <*> expression_statement,
        statement -> <*> iteration_statement,
        statement -> <*> jump_statement,
        statement -> <*> labeled_statement,
        statement -> <*> selection_statement,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s19 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        compound_statement -> <*> '{' '}',
        compound_statement -> <*> '{' declaration_list '}',
        compound_statement -> <*> '{' declaration_list statement_list '}',
        compound_statement -> <*> '{' statement_list '}',
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        expression_statement -> <*> ';',
        expression_statement -> <*> expression ';',
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> <*> 'do' statement 'while' '(' expression ')' ';',
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement ')' statement,
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement expression ')' statement,
        iteration_statement -> <*> 'while' '(' expression ')' statement,
        iteration_statement -> 'for' '(' expression_statement expression_statement ')' <*> statement,
        jump_statement -> <*> 'break' ';',
        jump_statement -> <*> 'continue' ';',
        jump_statement -> <*> 'goto' IDENTIFIER ';',
        jump_statement -> <*> 'return' ';',
        jump_statement -> <*> 'return' expression ';',
        labeled_statement -> <*> 'case' constant_expression ':' statement,
        labeled_statement -> <*> 'default' ':' statement,
        labeled_statement -> <*> IDENTIFIER ':' statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        selection_statement -> <*> 'if' '(' expression ')' statement,
        selection_statement -> <*> 'if' '(' expression ')' statement 'else' statement,
        selection_statement -> <*> 'switch' '(' expression ')' statement,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        statement -> <*> compound_statement,
        statement -> <*> expression_statement,
        statement -> <*> iteration_statement,
        statement -> <*> jump_statement,
        statement -> <*> labeled_statement,
        statement -> <*> selection_statement,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s20 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        compound_statement -> <*> '{' '}',
        compound_statement -> <*> '{' declaration_list '}',
        compound_statement -> <*> '{' declaration_list statement_list '}',
        compound_statement -> <*> '{' statement_list '}',
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        expression_statement -> <*> ';',
        expression_statement -> <*> expression ';',
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> <*> 'do' statement 'while' '(' expression ')' ';',
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement ')' statement,
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement expression ')' statement,
        iteration_statement -> <*> 'while' '(' expression ')' statement,
        iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' <*> statement,
        jump_statement -> <*> 'break' ';',
        jump_statement -> <*> 'continue' ';',
        jump_statement -> <*> 'goto' IDENTIFIER ';',
        jump_statement -> <*> 'return' ';',
        jump_statement -> <*> 'return' expression ';',
        labeled_statement -> <*> 'case' constant_expression ':' statement,
        labeled_statement -> <*> 'default' ':' statement,
        labeled_statement -> <*> IDENTIFIER ':' statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        selection_statement -> <*> 'if' '(' expression ')' statement,
        selection_statement -> <*> 'if' '(' expression ')' statement 'else' statement,
        selection_statement -> <*> 'switch' '(' expression ')' statement,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        statement -> <*> compound_statement,
        statement -> <*> expression_statement,
        statement -> <*> iteration_statement,
        statement -> <*> jump_statement,
        statement -> <*> labeled_statement,
        statement -> <*> selection_statement,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s21 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        compound_statement -> <*> '{' '}',
        compound_statement -> <*> '{' declaration_list '}',
        compound_statement -> <*> '{' declaration_list statement_list '}',
        compound_statement -> <*> '{' statement_list '}',
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        expression_statement -> <*> ';',
        expression_statement -> <*> expression ';',
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> <*> 'do' statement 'while' '(' expression ')' ';',
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement ')' statement,
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement expression ')' statement,
        iteration_statement -> <*> 'while' '(' expression ')' statement,
        iteration_statement -> 'while' '(' expression ')' <*> statement,
        jump_statement -> <*> 'break' ';',
        jump_statement -> <*> 'continue' ';',
        jump_statement -> <*> 'goto' IDENTIFIER ';',
        jump_statement -> <*> 'return' ';',
        jump_statement -> <*> 'return' expression ';',
        labeled_statement -> <*> 'case' constant_expression ':' statement,
        labeled_statement -> <*> 'default' ':' statement,
        labeled_statement -> <*> IDENTIFIER ':' statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        selection_statement -> <*> 'if' '(' expression ')' statement,
        selection_statement -> <*> 'if' '(' expression ')' statement 'else' statement,
        selection_statement -> <*> 'switch' '(' expression ')' statement,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        statement -> <*> compound_statement,
        statement -> <*> expression_statement,
        statement -> <*> iteration_statement,
        statement -> <*> jump_statement,
        statement -> <*> labeled_statement,
        statement -> <*> selection_statement,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s22 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        compound_statement -> <*> '{' '}',
        compound_statement -> <*> '{' declaration_list '}',
        compound_statement -> <*> '{' declaration_list statement_list '}',
        compound_statement -> <*> '{' statement_list '}',
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        expression_statement -> <*> ';',
        expression_statement -> <*> expression ';',
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> <*> 'do' statement 'while' '(' expression ')' ';',
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement ')' statement,
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement expression ')' statement,
        iteration_statement -> <*> 'while' '(' expression ')' statement,
        jump_statement -> <*> 'break' ';',
        jump_statement -> <*> 'continue' ';',
        jump_statement -> <*> 'goto' IDENTIFIER ';',
        jump_statement -> <*> 'return' ';',
        jump_statement -> <*> 'return' expression ';',
        labeled_statement -> <*> 'case' constant_expression ':' statement,
        labeled_statement -> <*> 'default' ':' statement,
        labeled_statement -> <*> IDENTIFIER ':' statement,
        labeled_statement -> 'case' constant_expression ':' <*> statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        selection_statement -> <*> 'if' '(' expression ')' statement,
        selection_statement -> <*> 'if' '(' expression ')' statement 'else' statement,
        selection_statement -> <*> 'switch' '(' expression ')' statement,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        statement -> <*> compound_statement,
        statement -> <*> expression_statement,
        statement -> <*> iteration_statement,
        statement -> <*> jump_statement,
        statement -> <*> labeled_statement,
        statement -> <*> selection_statement,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s23 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        compound_statement -> <*> '{' '}',
        compound_statement -> <*> '{' declaration_list '}',
        compound_statement -> <*> '{' declaration_list statement_list '}',
        compound_statement -> <*> '{' statement_list '}',
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        expression_statement -> <*> ';',
        expression_statement -> <*> expression ';',
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> <*> 'do' statement 'while' '(' expression ')' ';',
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement ')' statement,
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement expression ')' statement,
        iteration_statement -> <*> 'while' '(' expression ')' statement,
        jump_statement -> <*> 'break' ';',
        jump_statement -> <*> 'continue' ';',
        jump_statement -> <*> 'goto' IDENTIFIER ';',
        jump_statement -> <*> 'return' ';',
        jump_statement -> <*> 'return' expression ';',
        labeled_statement -> <*> 'case' constant_expression ':' statement,
        labeled_statement -> <*> 'default' ':' statement,
        labeled_statement -> <*> IDENTIFIER ':' statement,
        labeled_statement -> 'default' ':' <*> statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        selection_statement -> <*> 'if' '(' expression ')' statement,
        selection_statement -> <*> 'if' '(' expression ')' statement 'else' statement,
        selection_statement -> <*> 'switch' '(' expression ')' statement,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        statement -> <*> compound_statement,
        statement -> <*> expression_statement,
        statement -> <*> iteration_statement,
        statement -> <*> jump_statement,
        statement -> <*> labeled_statement,
        statement -> <*> selection_statement,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s24 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        compound_statement -> <*> '{' '}',
        compound_statement -> <*> '{' declaration_list '}',
        compound_statement -> <*> '{' declaration_list statement_list '}',
        compound_statement -> <*> '{' statement_list '}',
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        expression_statement -> <*> ';',
        expression_statement -> <*> expression ';',
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> <*> 'do' statement 'while' '(' expression ')' ';',
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement ')' statement,
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement expression ')' statement,
        iteration_statement -> <*> 'while' '(' expression ')' statement,
        jump_statement -> <*> 'break' ';',
        jump_statement -> <*> 'continue' ';',
        jump_statement -> <*> 'goto' IDENTIFIER ';',
        jump_statement -> <*> 'return' ';',
        jump_statement -> <*> 'return' expression ';',
        labeled_statement -> <*> 'case' constant_expression ':' statement,
        labeled_statement -> <*> 'default' ':' statement,
        labeled_statement -> <*> IDENTIFIER ':' statement,
        labeled_statement -> IDENTIFIER ':' <*> statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        selection_statement -> <*> 'if' '(' expression ')' statement,
        selection_statement -> <*> 'if' '(' expression ')' statement 'else' statement,
        selection_statement -> <*> 'switch' '(' expression ')' statement,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        statement -> <*> compound_statement,
        statement -> <*> expression_statement,
        statement -> <*> iteration_statement,
        statement -> <*> jump_statement,
        statement -> <*> labeled_statement,
        statement -> <*> selection_statement,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s25 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        compound_statement -> <*> '{' '}',
        compound_statement -> <*> '{' declaration_list '}',
        compound_statement -> <*> '{' declaration_list statement_list '}',
        compound_statement -> <*> '{' statement_list '}',
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        expression_statement -> <*> ';',
        expression_statement -> <*> expression ';',
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> <*> 'do' statement 'while' '(' expression ')' ';',
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement ')' statement,
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement expression ')' statement,
        iteration_statement -> <*> 'while' '(' expression ')' statement,
        jump_statement -> <*> 'break' ';',
        jump_statement -> <*> 'continue' ';',
        jump_statement -> <*> 'goto' IDENTIFIER ';',
        jump_statement -> <*> 'return' ';',
        jump_statement -> <*> 'return' expression ';',
        labeled_statement -> <*> 'case' constant_expression ':' statement,
        labeled_statement -> <*> 'default' ':' statement,
        labeled_statement -> <*> IDENTIFIER ':' statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        selection_statement -> <*> 'if' '(' expression ')' statement,
        selection_statement -> <*> 'if' '(' expression ')' statement 'else' statement,
        selection_statement -> <*> 'switch' '(' expression ')' statement,
        selection_statement -> 'if' '(' expression ')' <*> statement,
        selection_statement -> 'if' '(' expression ')' <*> statement 'else' statement,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        statement -> <*> compound_statement,
        statement -> <*> expression_statement,
        statement -> <*> iteration_statement,
        statement -> <*> jump_statement,
        statement -> <*> labeled_statement,
        statement -> <*> selection_statement,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s26 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        compound_statement -> <*> '{' '}',
        compound_statement -> <*> '{' declaration_list '}',
        compound_statement -> <*> '{' declaration_list statement_list '}',
        compound_statement -> <*> '{' statement_list '}',
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        expression_statement -> <*> ';',
        expression_statement -> <*> expression ';',
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> <*> 'do' statement 'while' '(' expression ')' ';',
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement ')' statement,
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement expression ')' statement,
        iteration_statement -> <*> 'while' '(' expression ')' statement,
        jump_statement -> <*> 'break' ';',
        jump_statement -> <*> 'continue' ';',
        jump_statement -> <*> 'goto' IDENTIFIER ';',
        jump_statement -> <*> 'return' ';',
        jump_statement -> <*> 'return' expression ';',
        labeled_statement -> <*> 'case' constant_expression ':' statement,
        labeled_statement -> <*> 'default' ':' statement,
        labeled_statement -> <*> IDENTIFIER ':' statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        selection_statement -> <*> 'if' '(' expression ')' statement,
        selection_statement -> <*> 'if' '(' expression ')' statement 'else' statement,
        selection_statement -> <*> 'switch' '(' expression ')' statement,
        selection_statement -> 'if' '(' expression ')' statement 'else' <*> statement,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        statement -> <*> compound_statement,
        statement -> <*> expression_statement,
        statement -> <*> iteration_statement,
        statement -> <*> jump_statement,
        statement -> <*> labeled_statement,
        statement -> <*> selection_statement,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s27 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        compound_statement -> <*> '{' '}',
        compound_statement -> <*> '{' declaration_list '}',
        compound_statement -> <*> '{' declaration_list statement_list '}',
        compound_statement -> <*> '{' statement_list '}',
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        expression_statement -> <*> ';',
        expression_statement -> <*> expression ';',
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> <*> 'do' statement 'while' '(' expression ')' ';',
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement ')' statement,
        iteration_statement -> <*> 'for' '(' expression_statement expression_statement expression ')' statement,
        iteration_statement -> <*> 'while' '(' expression ')' statement,
        jump_statement -> <*> 'break' ';',
        jump_statement -> <*> 'continue' ';',
        jump_statement -> <*> 'goto' IDENTIFIER ';',
        jump_statement -> <*> 'return' ';',
        jump_statement -> <*> 'return' expression ';',
        labeled_statement -> <*> 'case' constant_expression ':' statement,
        labeled_statement -> <*> 'default' ':' statement,
        labeled_statement -> <*> IDENTIFIER ':' statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        selection_statement -> <*> 'if' '(' expression ')' statement,
        selection_statement -> <*> 'if' '(' expression ')' statement 'else' statement,
        selection_statement -> <*> 'switch' '(' expression ')' statement,
        selection_statement -> 'switch' '(' expression ')' <*> statement,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        statement -> <*> compound_statement,
        statement -> <*> expression_statement,
        statement -> <*> iteration_statement,
        statement -> <*> jump_statement,
        statement -> <*> labeled_statement,
        statement -> <*> selection_statement,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s28 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        conditional_expression -> logical_or_expression '?' <*> expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s29 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        enum_specifier -> <*> 'enum' '{' enumerator_list '}',
        enum_specifier -> <*> 'enum' IDENTIFIER,
        enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        primary_expression -> '(' <*> expression ')',
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        specifier_qualifier_list -> <*> type_qualifier,
        specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list,
        specifier_qualifier_list -> <*> type_specifier,
        specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list,
        struct_or_union -> <*> 'struct',
        struct_or_union -> <*> 'union',
        struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
        struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
        type_name -> <*> specifier_qualifier_list,
        type_name -> <*> specifier_qualifier_list abstract_declarator,
        type_qualifier -> <*> 'const',
        type_qualifier -> <*> 'volatile',
        type_specifier -> <*> 'char',
        type_specifier -> <*> 'double',
        type_specifier -> <*> 'float',
        type_specifier -> <*> 'int',
        type_specifier -> <*> 'long',
        type_specifier -> <*> 'short',
        type_specifier -> <*> 'signed',
        type_specifier -> <*> 'unsigned',
        type_specifier -> <*> 'void',
        type_specifier -> <*> TYPE_NAME,
        type_specifier -> <*> enum_specifier,
        type_specifier -> <*> struct_or_union_specifier,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_expression -> 'sizeof' '(' <*> type_name ')',
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s30 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        expression_statement -> <*> ';',
        expression_statement -> <*> expression ';',
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> 'for' '(' <*> expression_statement expression_statement ')' statement,
        iteration_statement -> 'for' '(' <*> expression_statement expression_statement expression ')' statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s31 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        expression_statement -> <*> ';',
        expression_statement -> <*> expression ';',
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> 'for' '(' expression_statement <*> expression_statement ')' statement,
        iteration_statement -> 'for' '(' expression_statement <*> expression_statement expression ')' statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s32 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> 'do' statement 'while' '(' <*> expression ')' ';',
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s33 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> 'for' '(' expression_statement expression_statement <*> ')' statement,
        iteration_statement -> 'for' '(' expression_statement expression_statement <*> expression ')' statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s34 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        iteration_statement -> 'while' '(' <*> expression ')' statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s35 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        jump_statement -> 'return' <*> ';',
        jump_statement -> 'return' <*> expression ';',
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s36 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        postfix_expression -> postfix_expression '[' <*> expression ']',
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s37 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        primary_expression -> '(' <*> expression ')',
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s38 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        selection_statement -> 'if' '(' <*> expression ')' statement,
        selection_statement -> 'if' '(' <*> expression ')' statement 'else' statement,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s39 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> <*> assignment_expression,
        expression -> <*> expression ',' assignment_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        selection_statement -> 'switch' '(' <*> expression ')' statement,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s40 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        expression -> expression ',' <*> assignment_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s41 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        init_declarator -> declarator '=' <*> initializer,
        initializer -> <*> '{' initializer_list ',' '}',
        initializer -> <*> '{' initializer_list '}',
        initializer -> <*> assignment_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s42 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        initializer -> <*> '{' initializer_list ',' '}',
        initializer -> <*> '{' initializer_list '}',
        initializer -> <*> assignment_expression,
        initializer -> '{' <*> initializer_list ',' '}',
        initializer -> '{' <*> initializer_list '}',
        initializer_list -> <*> initializer,
        initializer_list -> <*> initializer_list ',' initializer,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s43 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        assignment_expression -> <*> conditional_expression,
        assignment_expression -> <*> unary_expression assignment_operator assignment_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        initializer -> <*> '{' initializer_list ',' '}',
        initializer -> <*> '{' initializer_list '}',
        initializer -> <*> assignment_expression,
        initializer -> '{' initializer_list ',' <*> '}',
        initializer_list -> initializer_list ',' <*> initializer,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s44 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        conditional_expression -> logical_or_expression '?' expression ':' <*> conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s45 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        constant_expression -> <*> conditional_expression,
        direct_abstract_declarator -> '[' <*> ']',
        direct_abstract_declarator -> '[' <*> constant_expression ']',
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s46 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        constant_expression -> <*> conditional_expression,
        direct_abstract_declarator -> direct_abstract_declarator '[' <*> ']',
        direct_abstract_declarator -> direct_abstract_declarator '[' <*> constant_expression ']',
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s47 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        constant_expression -> <*> conditional_expression,
        direct_declarator -> direct_declarator '[' <*> ']',
        direct_declarator -> direct_declarator '[' <*> constant_expression ']',
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s48 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        constant_expression -> <*> conditional_expression,
        enumerator -> IDENTIFIER '=' <*> constant_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s49 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        constant_expression -> <*> conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        labeled_statement -> 'case' <*> constant_expression ':' statement,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s50 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        constant_expression -> <*> conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        struct_declarator -> ':' <*> constant_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s51 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        conditional_expression -> <*> logical_or_expression,
        conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression,
        constant_expression -> <*> conditional_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> <*> logical_and_expression,
        logical_or_expression -> <*> logical_or_expression '||' logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        struct_declarator -> declarator ':' <*> constant_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s52 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> <*> inclusive_or_expression,
        logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression,
        logical_or_expression -> logical_or_expression '||' <*> logical_and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s53 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> <*> exclusive_or_expression,
        inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression,
        logical_and_expression -> logical_and_expression '&&' <*> inclusive_or_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s54 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> <*> and_expression,
        exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression,
        inclusive_or_expression -> inclusive_or_expression '|' <*> exclusive_or_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s55 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> <*> and_expression '&' equality_expression,
        and_expression -> <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        exclusive_or_expression -> exclusive_or_expression '^' <*> and_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s56 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        and_expression -> and_expression '&' <*> equality_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        equality_expression -> <*> equality_expression '!=' relational_expression,
        equality_expression -> <*> equality_expression '==' relational_expression,
        equality_expression -> <*> relational_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s57 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        equality_expression -> equality_expression '!=' <*> relational_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s58 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        equality_expression -> equality_expression '==' <*> relational_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> <*> relational_expression '<' shift_expression,
        relational_expression -> <*> relational_expression '<=' shift_expression,
        relational_expression -> <*> relational_expression '>' shift_expression,
        relational_expression -> <*> relational_expression '>=' shift_expression,
        relational_expression -> <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s59 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> relational_expression '<' <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s60 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> relational_expression '<=' <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s61 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> relational_expression '>' <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s62 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        relational_expression -> relational_expression '>=' <*> shift_expression,
        shift_expression -> <*> additive_expression,
        shift_expression -> <*> shift_expression '<<' additive_expression,
        shift_expression -> <*> shift_expression '>>' additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s63 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        shift_expression -> shift_expression '<<' <*> additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s64 = { additive_expression -> <*> additive_expression '+' multiplicative_expression,
        additive_expression -> <*> additive_expression '-' multiplicative_expression,
        additive_expression -> <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        shift_expression -> shift_expression '>>' <*> additive_expression,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s65 = { additive_expression -> additive_expression <*> '+' multiplicative_expression,
        additive_expression -> additive_expression <*> '-' multiplicative_expression,
        shift_expression -> additive_expression <*>
      }

s66 = { additive_expression -> additive_expression <*> '+' multiplicative_expression,
        additive_expression -> additive_expression <*> '-' multiplicative_expression,
        shift_expression -> shift_expression '<<' additive_expression <*>
      }

s67 = { additive_expression -> additive_expression <*> '+' multiplicative_expression,
        additive_expression -> additive_expression <*> '-' multiplicative_expression,
        shift_expression -> shift_expression '>>' additive_expression <*>
      }

s68 = { additive_expression -> additive_expression '+' <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s69 = { additive_expression -> additive_expression '+' multiplicative_expression <*>,
        multiplicative_expression -> multiplicative_expression <*> '%' cast_expression,
        multiplicative_expression -> multiplicative_expression <*> '*' cast_expression,
        multiplicative_expression -> multiplicative_expression <*> '/' cast_expression
      }

s70 = { additive_expression -> additive_expression '-' <*> multiplicative_expression,
        cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> <*> cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '%' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '*' cast_expression,
        multiplicative_expression -> <*> multiplicative_expression '/' cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s71 = { additive_expression -> additive_expression '-' multiplicative_expression <*>,
        multiplicative_expression -> multiplicative_expression <*> '%' cast_expression,
        multiplicative_expression -> multiplicative_expression <*> '*' cast_expression,
        multiplicative_expression -> multiplicative_expression <*> '/' cast_expression
      }

s72 = { additive_expression -> multiplicative_expression <*>,
        multiplicative_expression -> multiplicative_expression <*> '%' cast_expression,
        multiplicative_expression -> multiplicative_expression <*> '*' cast_expression,
        multiplicative_expression -> multiplicative_expression <*> '/' cast_expression
      }

s73 = { and_expression -> and_expression <*> '&' equality_expression,
        exclusive_or_expression -> and_expression <*>
      }

s74 = { and_expression -> and_expression <*> '&' equality_expression,
        exclusive_or_expression -> exclusive_or_expression '^' and_expression <*>
      }

s75 = { and_expression -> and_expression '&' equality_expression <*>,
        equality_expression -> equality_expression <*> '!=' relational_expression,
        equality_expression -> equality_expression <*> '==' relational_expression
      }

s76 = { and_expression -> equality_expression <*>,
        equality_expression -> equality_expression <*> '!=' relational_expression,
        equality_expression -> equality_expression <*> '==' relational_expression
      }

s77 = { argument_expression_list -> argument_expression_list <*> ',' assignment_expression,
        postfix_expression -> postfix_expression '(' argument_expression_list <*> ')'
      }

s78 = { argument_expression_list -> argument_expression_list ',' assignment_expression <*> }

s79 = { argument_expression_list -> assignment_expression <*> }

s80 = { assignment_expression -> conditional_expression <*> }

s81 = { assignment_expression -> unary_expression <*> assignment_operator assignment_expression,
        assignment_operator -> <*> '%=',
        assignment_operator -> <*> '&=',
        assignment_operator -> <*> '*=',
        assignment_operator -> <*> '+=',
        assignment_operator -> <*> '-=',
        assignment_operator -> <*> '/=',
        assignment_operator -> <*> '<<=',
        assignment_operator -> <*> '=',
        assignment_operator -> <*> '>>=',
        assignment_operator -> <*> '^=',
        assignment_operator -> <*> '|=',
        cast_expression -> unary_expression <*>
      }

s82 = { assignment_expression -> unary_expression assignment_operator assignment_expression <*> }

s83 = { assignment_operator -> '%=' <*> }

s84 = { assignment_operator -> '&=' <*> }

s85 = { assignment_operator -> '*=' <*> }

s86 = { assignment_operator -> '+=' <*> }

s87 = { assignment_operator -> '-=' <*> }

s88 = { assignment_operator -> '/=' <*> }

s89 = { assignment_operator -> '<<=' <*> }

s90 = { assignment_operator -> '=' <*> }

s91 = { assignment_operator -> '>>=' <*> }

s92 = { assignment_operator -> '^=' <*> }

s93 = { assignment_operator -> '|=' <*> }

s94 = { cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        cast_expression -> '(' type_name ')' <*> cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s95 = { cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> multiplicative_expression '%' <*> cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s96 = { cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> multiplicative_expression '*' <*> cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s97 = { cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        multiplicative_expression -> multiplicative_expression '/' <*> cast_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s98 = { cast_expression -> <*> '(' type_name ')' cast_expression,
        cast_expression -> <*> unary_expression,
        postfix_expression -> <*> postfix_expression '(' ')',
        postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
        postfix_expression -> <*> postfix_expression '++',
        postfix_expression -> <*> postfix_expression '--',
        postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
        postfix_expression -> <*> postfix_expression '[' expression ']',
        postfix_expression -> <*> primary_expression,
        primary_expression -> <*> '(' expression ')',
        primary_expression -> <*> CONSTANT,
        primary_expression -> <*> IDENTIFIER,
        primary_expression -> <*> STRING_LITERAL,
        unary_expression -> <*> '++' unary_expression,
        unary_expression -> <*> '--' unary_expression,
        unary_expression -> <*> 'sizeof' '(' type_name ')',
        unary_expression -> <*> 'sizeof' unary_expression,
        unary_expression -> <*> postfix_expression,
        unary_expression -> <*> unary_operator cast_expression,
        unary_expression -> unary_operator <*> cast_expression,
        unary_operator -> <*> '!',
        unary_operator -> <*> '&',
        unary_operator -> <*> '*',
        unary_operator -> <*> '+',
        unary_operator -> <*> '-',
        unary_operator -> <*> '~'
      }

s99 = { cast_expression -> '(' type_name <*> ')' cast_expression }

s100 = { cast_expression -> '(' type_name ')' cast_expression <*> }

s101 = { cast_expression -> unary_expression <*> }

s102 = { compound_statement -> <*> '{' '}',
         compound_statement -> <*> '{' declaration_list '}',
         compound_statement -> <*> '{' declaration_list statement_list '}',
         compound_statement -> <*> '{' statement_list '}',
         declaration -> <*> declaration_specifiers ';',
         declaration -> <*> declaration_specifiers init_declarator_list ';',
         declaration_list -> <*> declaration,
         declaration_list -> <*> declaration_list declaration,
         declaration_specifiers -> <*> storage_class_specifier,
         declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
         declaration_specifiers -> <*> type_qualifier,
         declaration_specifiers -> <*> type_qualifier declaration_specifiers,
         declaration_specifiers -> <*> type_specifier,
         declaration_specifiers -> <*> type_specifier declaration_specifiers,
         enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         function_definition -> declaration_specifiers declarator <*> compound_statement,
         function_definition -> declaration_specifiers declarator <*> declaration_list compound_statement,
         init_declarator -> declarator <*>,
         init_declarator -> declarator <*> '=' initializer,
         storage_class_specifier -> <*> 'auto',
         storage_class_specifier -> <*> 'extern',
         storage_class_specifier -> <*> 'register',
         storage_class_specifier -> <*> 'static',
         storage_class_specifier -> <*> 'typedef',
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s103 = { compound_statement -> <*> '{' '}',
         compound_statement -> <*> '{' declaration_list '}',
         compound_statement -> <*> '{' declaration_list statement_list '}',
         compound_statement -> <*> '{' statement_list '}',
         declaration -> <*> declaration_specifiers ';',
         declaration -> <*> declaration_specifiers init_declarator_list ';',
         declaration_list -> <*> declaration,
         declaration_list -> <*> declaration_list declaration,
         declaration_specifiers -> <*> storage_class_specifier,
         declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
         declaration_specifiers -> <*> type_qualifier,
         declaration_specifiers -> <*> type_qualifier declaration_specifiers,
         declaration_specifiers -> <*> type_specifier,
         declaration_specifiers -> <*> type_specifier declaration_specifiers,
         enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         function_definition -> declarator <*> compound_statement,
         function_definition -> declarator <*> declaration_list compound_statement,
         storage_class_specifier -> <*> 'auto',
         storage_class_specifier -> <*> 'extern',
         storage_class_specifier -> <*> 'register',
         storage_class_specifier -> <*> 'static',
         storage_class_specifier -> <*> 'typedef',
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s104 = { compound_statement -> <*> '{' '}',
         compound_statement -> <*> '{' declaration_list '}',
         compound_statement -> <*> '{' declaration_list statement_list '}',
         compound_statement -> <*> '{' statement_list '}',
         declaration -> <*> declaration_specifiers ';',
         declaration -> <*> declaration_specifiers init_declarator_list ';',
         declaration_list -> declaration_list <*> declaration,
         declaration_specifiers -> <*> storage_class_specifier,
         declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
         declaration_specifiers -> <*> type_qualifier,
         declaration_specifiers -> <*> type_qualifier declaration_specifiers,
         declaration_specifiers -> <*> type_specifier,
         declaration_specifiers -> <*> type_specifier declaration_specifiers,
         enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         function_definition -> declaration_specifiers declarator declaration_list <*> compound_statement,
         storage_class_specifier -> <*> 'auto',
         storage_class_specifier -> <*> 'extern',
         storage_class_specifier -> <*> 'register',
         storage_class_specifier -> <*> 'static',
         storage_class_specifier -> <*> 'typedef',
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s105 = { compound_statement -> <*> '{' '}',
         compound_statement -> <*> '{' declaration_list '}',
         compound_statement -> <*> '{' declaration_list statement_list '}',
         compound_statement -> <*> '{' statement_list '}',
         declaration -> <*> declaration_specifiers ';',
         declaration -> <*> declaration_specifiers init_declarator_list ';',
         declaration_list -> declaration_list <*> declaration,
         declaration_specifiers -> <*> storage_class_specifier,
         declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
         declaration_specifiers -> <*> type_qualifier,
         declaration_specifiers -> <*> type_qualifier declaration_specifiers,
         declaration_specifiers -> <*> type_specifier,
         declaration_specifiers -> <*> type_specifier declaration_specifiers,
         enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         function_definition -> declarator declaration_list <*> compound_statement,
         storage_class_specifier -> <*> 'auto',
         storage_class_specifier -> <*> 'extern',
         storage_class_specifier -> <*> 'register',
         storage_class_specifier -> <*> 'static',
         storage_class_specifier -> <*> 'typedef',
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s106 = { compound_statement -> '{' '}' <*> }

s107 = { compound_statement -> '{' declaration_list '}' <*> }

s108 = { compound_statement -> '{' declaration_list statement_list '}' <*> }

s109 = { compound_statement -> '{' statement_list '}' <*> }

s110 = { conditional_expression -> logical_or_expression <*>,
         conditional_expression -> logical_or_expression <*> '?' expression ':' conditional_expression,
         logical_or_expression -> logical_or_expression <*> '||' logical_and_expression
       }

s111 = { conditional_expression -> logical_or_expression '?' expression <*> ':' conditional_expression,
         expression -> expression <*> ',' assignment_expression
       }

s112 = { conditional_expression -> logical_or_expression '?' expression ':' conditional_expression <*> }

s113 = { constant_expression -> conditional_expression <*> }

s114 = { declaration -> declaration_specifiers <*> ';',
         declaration -> declaration_specifiers <*> init_declarator_list ';',
         declarator -> <*> direct_declarator,
         declarator -> <*> pointer direct_declarator,
         direct_declarator -> <*> '(' declarator ')',
         direct_declarator -> <*> IDENTIFIER,
         direct_declarator -> <*> direct_declarator '(' ')',
         direct_declarator -> <*> direct_declarator '(' identifier_list ')',
         direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
         direct_declarator -> <*> direct_declarator '[' ']',
         direct_declarator -> <*> direct_declarator '[' constant_expression ']',
         function_definition -> declaration_specifiers <*> declarator compound_statement,
         function_definition -> declaration_specifiers <*> declarator declaration_list compound_statement,
         init_declarator -> <*> declarator,
         init_declarator -> <*> declarator '=' initializer,
         init_declarator_list -> <*> init_declarator,
         init_declarator_list -> <*> init_declarator_list ',' init_declarator,
         pointer -> <*> '*',
         pointer -> <*> '*' pointer,
         pointer -> <*> '*' type_qualifier_list,
         pointer -> <*> '*' type_qualifier_list pointer
       }

s115 = { declaration -> declaration_specifiers <*> ';',
         declaration -> declaration_specifiers <*> init_declarator_list ';',
         declarator -> <*> direct_declarator,
         declarator -> <*> pointer direct_declarator,
         direct_declarator -> <*> '(' declarator ')',
         direct_declarator -> <*> IDENTIFIER,
         direct_declarator -> <*> direct_declarator '(' ')',
         direct_declarator -> <*> direct_declarator '(' identifier_list ')',
         direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
         direct_declarator -> <*> direct_declarator '[' ']',
         direct_declarator -> <*> direct_declarator '[' constant_expression ']',
         init_declarator -> <*> declarator,
         init_declarator -> <*> declarator '=' initializer,
         init_declarator_list -> <*> init_declarator,
         init_declarator_list -> <*> init_declarator_list ',' init_declarator,
         pointer -> <*> '*',
         pointer -> <*> '*' pointer,
         pointer -> <*> '*' type_qualifier_list,
         pointer -> <*> '*' type_qualifier_list pointer
       }

s116 = { declaration -> declaration_specifiers ';' <*> }

s117 = { declaration -> declaration_specifiers init_declarator_list <*> ';',
         init_declarator_list -> init_declarator_list <*> ',' init_declarator
       }

s118 = { declaration -> declaration_specifiers init_declarator_list ';' <*> }

s119 = { declaration_list -> declaration <*> }

s120 = { declaration_list -> declaration_list declaration <*> }

s121 = { declaration_specifiers -> <*> storage_class_specifier,
         declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
         declaration_specifiers -> <*> type_qualifier,
         declaration_specifiers -> <*> type_qualifier declaration_specifiers,
         declaration_specifiers -> <*> type_specifier,
         declaration_specifiers -> <*> type_specifier declaration_specifiers,
         declaration_specifiers -> storage_class_specifier <*>,
         declaration_specifiers -> storage_class_specifier <*> declaration_specifiers,
         enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         storage_class_specifier -> <*> 'auto',
         storage_class_specifier -> <*> 'extern',
         storage_class_specifier -> <*> 'register',
         storage_class_specifier -> <*> 'static',
         storage_class_specifier -> <*> 'typedef',
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s122 = { declaration_specifiers -> <*> storage_class_specifier,
         declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
         declaration_specifiers -> <*> type_qualifier,
         declaration_specifiers -> <*> type_qualifier declaration_specifiers,
         declaration_specifiers -> <*> type_specifier,
         declaration_specifiers -> <*> type_specifier declaration_specifiers,
         declaration_specifiers -> type_qualifier <*>,
         declaration_specifiers -> type_qualifier <*> declaration_specifiers,
         enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         storage_class_specifier -> <*> 'auto',
         storage_class_specifier -> <*> 'extern',
         storage_class_specifier -> <*> 'register',
         storage_class_specifier -> <*> 'static',
         storage_class_specifier -> <*> 'typedef',
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s123 = { declaration_specifiers -> <*> storage_class_specifier,
         declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
         declaration_specifiers -> <*> type_qualifier,
         declaration_specifiers -> <*> type_qualifier declaration_specifiers,
         declaration_specifiers -> <*> type_specifier,
         declaration_specifiers -> <*> type_specifier declaration_specifiers,
         declaration_specifiers -> type_specifier <*>,
         declaration_specifiers -> type_specifier <*> declaration_specifiers,
         enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         storage_class_specifier -> <*> 'auto',
         storage_class_specifier -> <*> 'extern',
         storage_class_specifier -> <*> 'register',
         storage_class_specifier -> <*> 'static',
         storage_class_specifier -> <*> 'typedef',
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s124 = { declaration_specifiers -> <*> storage_class_specifier,
         declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
         declaration_specifiers -> <*> type_qualifier,
         declaration_specifiers -> <*> type_qualifier declaration_specifiers,
         declaration_specifiers -> <*> type_specifier,
         declaration_specifiers -> <*> type_specifier declaration_specifiers,
         direct_abstract_declarator -> direct_abstract_declarator '(' <*> ')',
         direct_abstract_declarator -> direct_abstract_declarator '(' <*> parameter_type_list ')',
         enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         parameter_declaration -> <*> declaration_specifiers,
         parameter_declaration -> <*> declaration_specifiers abstract_declarator,
         parameter_declaration -> <*> declaration_specifiers declarator,
         parameter_list -> <*> parameter_declaration,
         parameter_list -> <*> parameter_list ',' parameter_declaration,
         parameter_type_list -> <*> parameter_list,
         parameter_type_list -> <*> parameter_list ',' '...',
         storage_class_specifier -> <*> 'auto',
         storage_class_specifier -> <*> 'extern',
         storage_class_specifier -> <*> 'register',
         storage_class_specifier -> <*> 'static',
         storage_class_specifier -> <*> 'typedef',
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s125 = { declaration_specifiers -> <*> storage_class_specifier,
         declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
         declaration_specifiers -> <*> type_qualifier,
         declaration_specifiers -> <*> type_qualifier declaration_specifiers,
         declaration_specifiers -> <*> type_specifier,
         declaration_specifiers -> <*> type_specifier declaration_specifiers,
         direct_declarator -> direct_declarator '(' <*> ')',
         direct_declarator -> direct_declarator '(' <*> identifier_list ')',
         direct_declarator -> direct_declarator '(' <*> parameter_type_list ')',
         enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         identifier_list -> <*> IDENTIFIER,
         identifier_list -> <*> identifier_list ',' IDENTIFIER,
         parameter_declaration -> <*> declaration_specifiers,
         parameter_declaration -> <*> declaration_specifiers abstract_declarator,
         parameter_declaration -> <*> declaration_specifiers declarator,
         parameter_list -> <*> parameter_declaration,
         parameter_list -> <*> parameter_list ',' parameter_declaration,
         parameter_type_list -> <*> parameter_list,
         parameter_type_list -> <*> parameter_list ',' '...',
         storage_class_specifier -> <*> 'auto',
         storage_class_specifier -> <*> 'extern',
         storage_class_specifier -> <*> 'register',
         storage_class_specifier -> <*> 'static',
         storage_class_specifier -> <*> 'typedef',
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s126 = { declaration_specifiers -> <*> storage_class_specifier,
         declaration_specifiers -> <*> storage_class_specifier declaration_specifiers,
         declaration_specifiers -> <*> type_qualifier,
         declaration_specifiers -> <*> type_qualifier declaration_specifiers,
         declaration_specifiers -> <*> type_specifier,
         declaration_specifiers -> <*> type_specifier declaration_specifiers,
         enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         parameter_declaration -> <*> declaration_specifiers,
         parameter_declaration -> <*> declaration_specifiers abstract_declarator,
         parameter_declaration -> <*> declaration_specifiers declarator,
         parameter_list -> parameter_list ',' <*> parameter_declaration,
         parameter_type_list -> parameter_list ',' <*> '...',
         storage_class_specifier -> <*> 'auto',
         storage_class_specifier -> <*> 'extern',
         storage_class_specifier -> <*> 'register',
         storage_class_specifier -> <*> 'static',
         storage_class_specifier -> <*> 'typedef',
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s127 = { declaration_specifiers -> storage_class_specifier declaration_specifiers <*> }

s128 = { declaration_specifiers -> type_qualifier declaration_specifiers <*> }

s129 = { declaration_specifiers -> type_specifier declaration_specifiers <*> }

s130 = { declarator -> <*> direct_declarator,
         declarator -> <*> pointer direct_declarator,
         direct_declarator -> <*> '(' declarator ')',
         direct_declarator -> <*> IDENTIFIER,
         direct_declarator -> <*> direct_declarator '(' ')',
         direct_declarator -> <*> direct_declarator '(' identifier_list ')',
         direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
         direct_declarator -> <*> direct_declarator '[' ']',
         direct_declarator -> <*> direct_declarator '[' constant_expression ']',
         direct_declarator -> '(' <*> declarator ')',
         pointer -> <*> '*',
         pointer -> <*> '*' pointer,
         pointer -> <*> '*' type_qualifier_list,
         pointer -> <*> '*' type_qualifier_list pointer
       }

s131 = { declarator -> <*> direct_declarator,
         declarator -> <*> pointer direct_declarator,
         direct_declarator -> <*> '(' declarator ')',
         direct_declarator -> <*> IDENTIFIER,
         direct_declarator -> <*> direct_declarator '(' ')',
         direct_declarator -> <*> direct_declarator '(' identifier_list ')',
         direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
         direct_declarator -> <*> direct_declarator '[' ']',
         direct_declarator -> <*> direct_declarator '[' constant_expression ']',
         init_declarator -> <*> declarator,
         init_declarator -> <*> declarator '=' initializer,
         init_declarator_list -> init_declarator_list ',' <*> init_declarator,
         pointer -> <*> '*',
         pointer -> <*> '*' pointer,
         pointer -> <*> '*' type_qualifier_list,
         pointer -> <*> '*' type_qualifier_list pointer
       }

s132 = { declarator -> <*> direct_declarator,
         declarator -> <*> pointer direct_declarator,
         direct_declarator -> <*> '(' declarator ')',
         direct_declarator -> <*> IDENTIFIER,
         direct_declarator -> <*> direct_declarator '(' ')',
         direct_declarator -> <*> direct_declarator '(' identifier_list ')',
         direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
         direct_declarator -> <*> direct_declarator '[' ']',
         direct_declarator -> <*> direct_declarator '[' constant_expression ']',
         pointer -> <*> '*',
         pointer -> <*> '*' pointer,
         pointer -> <*> '*' type_qualifier_list,
         pointer -> <*> '*' type_qualifier_list pointer,
         struct_declaration -> specifier_qualifier_list <*> struct_declarator_list ';',
         struct_declarator -> <*> ':' constant_expression,
         struct_declarator -> <*> declarator,
         struct_declarator -> <*> declarator ':' constant_expression,
         struct_declarator_list -> <*> struct_declarator,
         struct_declarator_list -> <*> struct_declarator_list ',' struct_declarator
       }

s133 = { declarator -> <*> direct_declarator,
         declarator -> <*> pointer direct_declarator,
         direct_declarator -> <*> '(' declarator ')',
         direct_declarator -> <*> IDENTIFIER,
         direct_declarator -> <*> direct_declarator '(' ')',
         direct_declarator -> <*> direct_declarator '(' identifier_list ')',
         direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
         direct_declarator -> <*> direct_declarator '[' ']',
         direct_declarator -> <*> direct_declarator '[' constant_expression ']',
         pointer -> <*> '*',
         pointer -> <*> '*' pointer,
         pointer -> <*> '*' type_qualifier_list,
         pointer -> <*> '*' type_qualifier_list pointer,
         struct_declarator -> <*> ':' constant_expression,
         struct_declarator -> <*> declarator,
         struct_declarator -> <*> declarator ':' constant_expression,
         struct_declarator_list -> struct_declarator_list ',' <*> struct_declarator
       }

s134 = { declarator -> direct_declarator <*>,
         direct_declarator -> direct_declarator <*> '(' ')',
         direct_declarator -> direct_declarator <*> '(' identifier_list ')',
         direct_declarator -> direct_declarator <*> '(' parameter_type_list ')',
         direct_declarator -> direct_declarator <*> '[' ']',
         direct_declarator -> direct_declarator <*> '[' constant_expression ']'
       }

s135 = { declarator -> pointer <*> direct_declarator,
         direct_declarator -> <*> '(' declarator ')',
         direct_declarator -> <*> IDENTIFIER,
         direct_declarator -> <*> direct_declarator '(' ')',
         direct_declarator -> <*> direct_declarator '(' identifier_list ')',
         direct_declarator -> <*> direct_declarator '(' parameter_type_list ')',
         direct_declarator -> <*> direct_declarator '[' ']',
         direct_declarator -> <*> direct_declarator '[' constant_expression ']'
       }

s136 = { declarator -> pointer direct_declarator <*>,
         direct_declarator -> direct_declarator <*> '(' ')',
         direct_declarator -> direct_declarator <*> '(' identifier_list ')',
         direct_declarator -> direct_declarator <*> '(' parameter_type_list ')',
         direct_declarator -> direct_declarator <*> '[' ']',
         direct_declarator -> direct_declarator <*> '[' constant_expression ']'
       }

s137 = { direct_abstract_declarator -> '(' ')' <*> }

s138 = { direct_abstract_declarator -> '(' abstract_declarator <*> ')' }

s139 = { direct_abstract_declarator -> '(' abstract_declarator ')' <*> }

s140 = { direct_abstract_declarator -> '(' parameter_type_list <*> ')' }

s141 = { direct_abstract_declarator -> '(' parameter_type_list ')' <*> }

s142 = { direct_abstract_declarator -> '[' ']' <*> }

s143 = { direct_abstract_declarator -> '[' constant_expression <*> ']' }

s144 = { direct_abstract_declarator -> '[' constant_expression ']' <*> }

s145 = { direct_abstract_declarator -> direct_abstract_declarator '(' ')' <*> }

s146 = { direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list <*> ')' }

s147 = { direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')' <*> }

s148 = { direct_abstract_declarator -> direct_abstract_declarator '[' ']' <*> }

s149 = { direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression <*> ']' }

s150 = { direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']' <*> }

s151 = { direct_declarator -> '(' declarator <*> ')' }

s152 = { direct_declarator -> '(' declarator ')' <*> }

s153 = { direct_declarator -> IDENTIFIER <*> }

s154 = { direct_declarator -> direct_declarator '(' ')' <*> }

s155 = { direct_declarator -> direct_declarator '(' identifier_list <*> ')',
         identifier_list -> identifier_list <*> ',' IDENTIFIER
       }

s156 = { direct_declarator -> direct_declarator '(' identifier_list ')' <*> }

s157 = { direct_declarator -> direct_declarator '(' parameter_type_list <*> ')' }

s158 = { direct_declarator -> direct_declarator '(' parameter_type_list ')' <*> }

s159 = { direct_declarator -> direct_declarator '[' ']' <*> }

s160 = { direct_declarator -> direct_declarator '[' constant_expression <*> ']' }

s161 = { direct_declarator -> direct_declarator '[' constant_expression ']' <*> }

s162 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         specifier_qualifier_list -> <*> type_qualifier,
         specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list,
         specifier_qualifier_list -> <*> type_specifier,
         specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list,
         specifier_qualifier_list -> type_qualifier <*>,
         specifier_qualifier_list -> type_qualifier <*> specifier_qualifier_list,
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s163 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         specifier_qualifier_list -> <*> type_qualifier,
         specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list,
         specifier_qualifier_list -> <*> type_specifier,
         specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list,
         specifier_qualifier_list -> type_specifier <*>,
         specifier_qualifier_list -> type_specifier <*> specifier_qualifier_list,
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s164 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         specifier_qualifier_list -> <*> type_qualifier,
         specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list,
         specifier_qualifier_list -> <*> type_specifier,
         specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list,
         struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';',
         struct_declaration_list -> <*> struct_declaration,
         struct_declaration_list -> <*> struct_declaration_list struct_declaration,
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         struct_or_union_specifier -> struct_or_union '{' <*> struct_declaration_list '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s165 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         specifier_qualifier_list -> <*> type_qualifier,
         specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list,
         specifier_qualifier_list -> <*> type_specifier,
         specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list,
         struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';',
         struct_declaration_list -> <*> struct_declaration,
         struct_declaration_list -> <*> struct_declaration_list struct_declaration,
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         struct_or_union_specifier -> struct_or_union IDENTIFIER '{' <*> struct_declaration_list '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s166 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         specifier_qualifier_list -> <*> type_qualifier,
         specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list,
         specifier_qualifier_list -> <*> type_specifier,
         specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list,
         struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';',
         struct_declaration_list -> struct_declaration_list <*> struct_declaration,
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         struct_or_union_specifier -> struct_or_union '{' struct_declaration_list <*> '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s167 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}',
         enum_specifier -> <*> 'enum' IDENTIFIER,
         enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}',
         specifier_qualifier_list -> <*> type_qualifier,
         specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list,
         specifier_qualifier_list -> <*> type_specifier,
         specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list,
         struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';',
         struct_declaration_list -> struct_declaration_list <*> struct_declaration,
         struct_or_union -> <*> 'struct',
         struct_or_union -> <*> 'union',
         struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}',
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER,
         struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}',
         struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list <*> '}',
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_specifier -> <*> 'char',
         type_specifier -> <*> 'double',
         type_specifier -> <*> 'float',
         type_specifier -> <*> 'int',
         type_specifier -> <*> 'long',
         type_specifier -> <*> 'short',
         type_specifier -> <*> 'signed',
         type_specifier -> <*> 'unsigned',
         type_specifier -> <*> 'void',
         type_specifier -> <*> TYPE_NAME,
         type_specifier -> <*> enum_specifier,
         type_specifier -> <*> struct_or_union_specifier
       }

s168 = { enum_specifier -> 'enum' <*> '{' enumerator_list '}',
         enum_specifier -> 'enum' <*> IDENTIFIER,
         enum_specifier -> 'enum' <*> IDENTIFIER '{' enumerator_list '}'
       }

s169 = { enum_specifier -> 'enum' '{' <*> enumerator_list '}',
         enumerator -> <*> IDENTIFIER,
         enumerator -> <*> IDENTIFIER '=' constant_expression,
         enumerator_list -> <*> enumerator,
         enumerator_list -> <*> enumerator_list ',' enumerator
       }

s170 = { enum_specifier -> 'enum' '{' enumerator_list <*> '}',
         enumerator_list -> enumerator_list <*> ',' enumerator
       }

s171 = { enum_specifier -> 'enum' '{' enumerator_list '}' <*> }

s172 = { enum_specifier -> 'enum' IDENTIFIER <*>,
         enum_specifier -> 'enum' IDENTIFIER <*> '{' enumerator_list '}'
       }

s173 = { enum_specifier -> 'enum' IDENTIFIER '{' <*> enumerator_list '}',
         enumerator -> <*> IDENTIFIER,
         enumerator -> <*> IDENTIFIER '=' constant_expression,
         enumerator_list -> <*> enumerator,
         enumerator_list -> <*> enumerator_list ',' enumerator
       }

s174 = { enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list <*> '}',
         enumerator_list -> enumerator_list <*> ',' enumerator
       }

s175 = { enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}' <*> }

s176 = { enumerator -> <*> IDENTIFIER,
         enumerator -> <*> IDENTIFIER '=' constant_expression,
         enumerator_list -> enumerator_list ',' <*> enumerator
       }

s177 = { enumerator -> IDENTIFIER <*>,
         enumerator -> IDENTIFIER <*> '=' constant_expression
       }

s178 = { enumerator -> IDENTIFIER '=' constant_expression <*> }

s179 = { enumerator_list -> enumerator <*> }

s180 = { enumerator_list -> enumerator_list ',' enumerator <*> }

s181 = { equality_expression -> equality_expression '!=' relational_expression <*>,
         relational_expression -> relational_expression <*> '<' shift_expression,
         relational_expression -> relational_expression <*> '<=' shift_expression,
         relational_expression -> relational_expression <*> '>' shift_expression,
         relational_expression -> relational_expression <*> '>=' shift_expression
       }

s182 = { equality_expression -> equality_expression '==' relational_expression <*>,
         relational_expression -> relational_expression <*> '<' shift_expression,
         relational_expression -> relational_expression <*> '<=' shift_expression,
         relational_expression -> relational_expression <*> '>' shift_expression,
         relational_expression -> relational_expression <*> '>=' shift_expression
       }

s183 = { equality_expression -> relational_expression <*>,
         relational_expression -> relational_expression <*> '<' shift_expression,
         relational_expression -> relational_expression <*> '<=' shift_expression,
         relational_expression -> relational_expression <*> '>' shift_expression,
         relational_expression -> relational_expression <*> '>=' shift_expression
       }

s184 = { exclusive_or_expression -> exclusive_or_expression <*> '^' and_expression,
         inclusive_or_expression -> exclusive_or_expression <*>
       }

s185 = { exclusive_or_expression -> exclusive_or_expression <*> '^' and_expression,
         inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression <*>
       }

s186 = { expression -> assignment_expression <*> }

s187 = { expression -> expression <*> ',' assignment_expression,
         expression_statement -> expression <*> ';'
       }

s188 = { expression -> expression <*> ',' assignment_expression,
         iteration_statement -> 'do' statement 'while' '(' expression <*> ')' ';'
       }

s189 = { expression -> expression <*> ',' assignment_expression,
         iteration_statement -> 'for' '(' expression_statement expression_statement expression <*> ')' statement
       }

s190 = { expression -> expression <*> ',' assignment_expression,
         iteration_statement -> 'while' '(' expression <*> ')' statement
       }

s191 = { expression -> expression <*> ',' assignment_expression,
         jump_statement -> 'return' expression <*> ';'
       }

s192 = { expression -> expression <*> ',' assignment_expression,
         postfix_expression -> postfix_expression '[' expression <*> ']'
       }

s193 = { expression -> expression <*> ',' assignment_expression,
         primary_expression -> '(' expression <*> ')'
       }

s194 = { expression -> expression <*> ',' assignment_expression,
         selection_statement -> 'if' '(' expression <*> ')' statement,
         selection_statement -> 'if' '(' expression <*> ')' statement 'else' statement
       }

s195 = { expression -> expression <*> ',' assignment_expression,
         selection_statement -> 'switch' '(' expression <*> ')' statement
       }

s196 = { expression -> expression ',' assignment_expression <*> }

s197 = { expression_statement -> ';' <*> }

s198 = { expression_statement -> expression ';' <*> }

s199 = { external_declaration -> declaration <*> }

s200 = { external_declaration -> function_definition <*> }

s201 = { function_definition -> declaration_specifiers declarator compound_statement <*> }

s202 = { function_definition -> declaration_specifiers declarator declaration_list compound_statement <*> }

s203 = { function_definition -> declarator compound_statement <*> }

s204 = { function_definition -> declarator declaration_list compound_statement <*> }

s205 = { identifier_list -> IDENTIFIER <*> }

s206 = { identifier_list -> identifier_list ',' <*> IDENTIFIER }

s207 = { identifier_list -> identifier_list ',' IDENTIFIER <*> }

s208 = { inclusive_or_expression -> inclusive_or_expression <*> '|' exclusive_or_expression,
         logical_and_expression -> inclusive_or_expression <*>
       }

s209 = { inclusive_or_expression -> inclusive_or_expression <*> '|' exclusive_or_expression,
         logical_and_expression -> logical_and_expression '&&' inclusive_or_expression <*>
       }

s210 = { init_declarator -> declarator <*>,
         init_declarator -> declarator <*> '=' initializer
       }

s211 = { init_declarator -> declarator '=' initializer <*> }

s212 = { init_declarator_list -> init_declarator <*> }

s213 = { init_declarator_list -> init_declarator_list ',' init_declarator <*> }

s214 = { initializer -> '{' initializer_list <*> ',' '}',
         initializer -> '{' initializer_list <*> '}',
         initializer_list -> initializer_list <*> ',' initializer
       }

s215 = { initializer -> '{' initializer_list ',' '}' <*> }

s216 = { initializer -> '{' initializer_list '}' <*> }

s217 = { initializer -> assignment_expression <*> }

s218 = { initializer_list -> initializer <*> }

s219 = { initializer_list -> initializer_list ',' initializer <*> }

s220 = { iteration_statement -> 'do' statement <*> 'while' '(' expression ')' ';' }

s221 = { iteration_statement -> 'do' statement 'while' <*> '(' expression ')' ';' }

s222 = { iteration_statement -> 'do' statement 'while' '(' expression ')' <*> ';' }

s223 = { iteration_statement -> 'do' statement 'while' '(' expression ')' ';' <*> }

s224 = { iteration_statement -> 'for' <*> '(' expression_statement expression_statement ')' statement,
         iteration_statement -> 'for' <*> '(' expression_statement expression_statement expression ')' statement
       }

s225 = { iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement <*> }

s226 = { iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement <*> }

s227 = { iteration_statement -> 'while' <*> '(' expression ')' statement }

s228 = { iteration_statement -> 'while' '(' expression ')' statement <*> }

s229 = { jump_statement -> 'break' <*> ';' }

s230 = { jump_statement -> 'break' ';' <*> }

s231 = { jump_statement -> 'continue' <*> ';' }

s232 = { jump_statement -> 'continue' ';' <*> }

s233 = { jump_statement -> 'goto' <*> IDENTIFIER ';' }

s234 = { jump_statement -> 'goto' IDENTIFIER <*> ';' }

s235 = { jump_statement -> 'goto' IDENTIFIER ';' <*> }

s236 = { jump_statement -> 'return' ';' <*> }

s237 = { jump_statement -> 'return' expression ';' <*> }

s238 = { labeled_statement -> 'case' constant_expression <*> ':' statement }

s239 = { labeled_statement -> 'case' constant_expression ':' statement <*> }

s240 = { labeled_statement -> 'default' <*> ':' statement }

s241 = { labeled_statement -> 'default' ':' statement <*> }

s242 = { labeled_statement -> IDENTIFIER <*> ':' statement,
         primary_expression -> IDENTIFIER <*>
       }

s243 = { labeled_statement -> IDENTIFIER ':' statement <*> }

s244 = { logical_and_expression -> logical_and_expression <*> '&&' inclusive_or_expression,
         logical_or_expression -> logical_and_expression <*>
       }

s245 = { logical_and_expression -> logical_and_expression <*> '&&' inclusive_or_expression,
         logical_or_expression -> logical_or_expression '||' logical_and_expression <*>
       }

s246 = { multiplicative_expression -> cast_expression <*> }

s247 = { multiplicative_expression -> multiplicative_expression '%' cast_expression <*> }

s248 = { multiplicative_expression -> multiplicative_expression '*' cast_expression <*> }

s249 = { multiplicative_expression -> multiplicative_expression '/' cast_expression <*> }

s250 = { parameter_declaration -> declaration_specifiers abstract_declarator <*> }

s251 = { parameter_declaration -> declaration_specifiers declarator <*> }

s252 = { parameter_list -> parameter_declaration <*> }

s253 = { parameter_list -> parameter_list <*> ',' parameter_declaration,
         parameter_type_list -> parameter_list <*>,
         parameter_type_list -> parameter_list <*> ',' '...'
       }

s254 = { parameter_list -> parameter_list ',' parameter_declaration <*> }

s255 = { parameter_type_list -> parameter_list ',' '...' <*> }

s256 = { pointer -> <*> '*',
         pointer -> <*> '*' pointer,
         pointer -> <*> '*' type_qualifier_list,
         pointer -> <*> '*' type_qualifier_list pointer,
         pointer -> '*' <*>,
         pointer -> '*' <*> pointer,
         pointer -> '*' <*> type_qualifier_list,
         pointer -> '*' <*> type_qualifier_list pointer,
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_qualifier_list -> <*> type_qualifier,
         type_qualifier_list -> <*> type_qualifier_list type_qualifier
       }

s257 = { pointer -> <*> '*',
         pointer -> <*> '*' pointer,
         pointer -> <*> '*' type_qualifier_list,
         pointer -> <*> '*' type_qualifier_list pointer,
         pointer -> '*' type_qualifier_list <*>,
         pointer -> '*' type_qualifier_list <*> pointer,
         type_qualifier -> <*> 'const',
         type_qualifier -> <*> 'volatile',
         type_qualifier_list -> type_qualifier_list <*> type_qualifier
       }

s258 = { pointer -> '*' pointer <*> }

s259 = { pointer -> '*' type_qualifier_list pointer <*> }

s260 = { postfix_expression -> <*> postfix_expression '(' ')',
         postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
         postfix_expression -> <*> postfix_expression '++',
         postfix_expression -> <*> postfix_expression '--',
         postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
         postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
         postfix_expression -> <*> postfix_expression '[' expression ']',
         postfix_expression -> <*> primary_expression,
         primary_expression -> <*> '(' expression ')',
         primary_expression -> <*> CONSTANT,
         primary_expression -> <*> IDENTIFIER,
         primary_expression -> <*> STRING_LITERAL,
         unary_expression -> <*> '++' unary_expression,
         unary_expression -> <*> '--' unary_expression,
         unary_expression -> <*> 'sizeof' '(' type_name ')',
         unary_expression -> <*> 'sizeof' unary_expression,
         unary_expression -> <*> postfix_expression,
         unary_expression -> <*> unary_operator cast_expression,
         unary_expression -> '++' <*> unary_expression,
         unary_operator -> <*> '!',
         unary_operator -> <*> '&',
         unary_operator -> <*> '*',
         unary_operator -> <*> '+',
         unary_operator -> <*> '-',
         unary_operator -> <*> '~'
       }

s261 = { postfix_expression -> <*> postfix_expression '(' ')',
         postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
         postfix_expression -> <*> postfix_expression '++',
         postfix_expression -> <*> postfix_expression '--',
         postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
         postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
         postfix_expression -> <*> postfix_expression '[' expression ']',
         postfix_expression -> <*> primary_expression,
         primary_expression -> <*> '(' expression ')',
         primary_expression -> <*> CONSTANT,
         primary_expression -> <*> IDENTIFIER,
         primary_expression -> <*> STRING_LITERAL,
         unary_expression -> <*> '++' unary_expression,
         unary_expression -> <*> '--' unary_expression,
         unary_expression -> <*> 'sizeof' '(' type_name ')',
         unary_expression -> <*> 'sizeof' unary_expression,
         unary_expression -> <*> postfix_expression,
         unary_expression -> <*> unary_operator cast_expression,
         unary_expression -> '--' <*> unary_expression,
         unary_operator -> <*> '!',
         unary_operator -> <*> '&',
         unary_operator -> <*> '*',
         unary_operator -> <*> '+',
         unary_operator -> <*> '-',
         unary_operator -> <*> '~'
       }

s262 = { postfix_expression -> <*> postfix_expression '(' ')',
         postfix_expression -> <*> postfix_expression '(' argument_expression_list ')',
         postfix_expression -> <*> postfix_expression '++',
         postfix_expression -> <*> postfix_expression '--',
         postfix_expression -> <*> postfix_expression '->' IDENTIFIER,
         postfix_expression -> <*> postfix_expression '.' IDENTIFIER,
         postfix_expression -> <*> postfix_expression '[' expression ']',
         postfix_expression -> <*> primary_expression,
         primary_expression -> <*> '(' expression ')',
         primary_expression -> <*> CONSTANT,
         primary_expression -> <*> IDENTIFIER,
         primary_expression -> <*> STRING_LITERAL,
         unary_expression -> <*> '++' unary_expression,
         unary_expression -> <*> '--' unary_expression,
         unary_expression -> <*> 'sizeof' '(' type_name ')',
         unary_expression -> <*> 'sizeof' unary_expression,
         unary_expression -> <*> postfix_expression,
         unary_expression -> <*> unary_operator cast_expression,
         unary_expression -> 'sizeof' <*> '(' type_name ')',
         unary_expression -> 'sizeof' <*> unary_expression,
         unary_operator -> <*> '!',
         unary_operator -> <*> '&',
         unary_operator -> <*> '*',
         unary_operator -> <*> '+',
         unary_operator -> <*> '-',
         unary_operator -> <*> '~'
       }

s263 = { postfix_expression -> postfix_expression <*> '(' ')',
         postfix_expression -> postfix_expression <*> '(' argument_expression_list ')',
         postfix_expression -> postfix_expression <*> '++',
         postfix_expression -> postfix_expression <*> '--',
         postfix_expression -> postfix_expression <*> '->' IDENTIFIER,
         postfix_expression -> postfix_expression <*> '.' IDENTIFIER,
         postfix_expression -> postfix_expression <*> '[' expression ']',
         unary_expression -> postfix_expression <*>
       }

s264 = { postfix_expression -> postfix_expression '(' ')' <*> }

s265 = { postfix_expression -> postfix_expression '(' argument_expression_list ')' <*> }

s266 = { postfix_expression -> postfix_expression '++' <*> }

s267 = { postfix_expression -> postfix_expression '--' <*> }

s268 = { postfix_expression -> postfix_expression '->' <*> IDENTIFIER }

s269 = { postfix_expression -> postfix_expression '->' IDENTIFIER <*> }

s270 = { postfix_expression -> postfix_expression '.' <*> IDENTIFIER }

s271 = { postfix_expression -> postfix_expression '.' IDENTIFIER <*> }

s272 = { postfix_expression -> postfix_expression '[' expression ']' <*> }

s273 = { postfix_expression -> primary_expression <*> }

s274 = { primary_expression -> '(' expression ')' <*> }

s275 = { primary_expression -> CONSTANT <*> }

s276 = { primary_expression -> IDENTIFIER <*> }

s277 = { primary_expression -> STRING_LITERAL <*> }

s278 = { relational_expression -> relational_expression '<' shift_expression <*>,
         shift_expression -> shift_expression <*> '<<' additive_expression,
         shift_expression -> shift_expression <*> '>>' additive_expression
       }

s279 = { relational_expression -> relational_expression '<=' shift_expression <*>,
         shift_expression -> shift_expression <*> '<<' additive_expression,
         shift_expression -> shift_expression <*> '>>' additive_expression
       }

s280 = { relational_expression -> relational_expression '>' shift_expression <*>,
         shift_expression -> shift_expression <*> '<<' additive_expression,
         shift_expression -> shift_expression <*> '>>' additive_expression
       }

s281 = { relational_expression -> relational_expression '>=' shift_expression <*>,
         shift_expression -> shift_expression <*> '<<' additive_expression,
         shift_expression -> shift_expression <*> '>>' additive_expression
       }

s282 = { relational_expression -> shift_expression <*>,
         shift_expression -> shift_expression <*> '<<' additive_expression,
         shift_expression -> shift_expression <*> '>>' additive_expression
       }

s283 = { selection_statement -> 'if' <*> '(' expression ')' statement,
         selection_statement -> 'if' <*> '(' expression ')' statement 'else' statement
       }

s284 = { selection_statement -> 'if' '(' expression ')' statement <*>,
         selection_statement -> 'if' '(' expression ')' statement <*> 'else' statement
       }

s285 = { selection_statement -> 'if' '(' expression ')' statement 'else' statement <*> }

s286 = { selection_statement -> 'switch' <*> '(' expression ')' statement }

s287 = { selection_statement -> 'switch' '(' expression ')' statement <*> }

s288 = { specifier_qualifier_list -> type_qualifier specifier_qualifier_list <*> }

s289 = { specifier_qualifier_list -> type_specifier specifier_qualifier_list <*> }

s290 = { statement -> compound_statement <*> }

s291 = { statement -> expression_statement <*> }

s292 = { statement -> iteration_statement <*> }

s293 = { statement -> jump_statement <*> }

s294 = { statement -> labeled_statement <*> }

s295 = { statement -> selection_statement <*> }

s296 = { statement_list -> statement <*> }

s297 = { statement_list -> statement_list statement <*> }

s298 = { storage_class_specifier -> 'auto' <*> }

s299 = { storage_class_specifier -> 'extern' <*> }

s300 = { storage_class_specifier -> 'register' <*> }

s301 = { storage_class_specifier -> 'static' <*> }

s302 = { storage_class_specifier -> 'typedef' <*> }

s303 = { struct_declaration -> specifier_qualifier_list struct_declarator_list <*> ';',
         struct_declarator_list -> struct_declarator_list <*> ',' struct_declarator
       }

s304 = { struct_declaration -> specifier_qualifier_list struct_declarator_list ';' <*> }

s305 = { struct_declaration_list -> struct_declaration <*> }

s306 = { struct_declaration_list -> struct_declaration_list struct_declaration <*> }

s307 = { struct_declarator -> ':' constant_expression <*> }

s308 = { struct_declarator -> declarator <*>,
         struct_declarator -> declarator <*> ':' constant_expression
       }

s309 = { struct_declarator -> declarator ':' constant_expression <*> }

s310 = { struct_declarator_list -> struct_declarator <*> }

s311 = { struct_declarator_list -> struct_declarator_list ',' struct_declarator <*> }

s312 = { struct_or_union -> 'struct' <*> }

s313 = { struct_or_union -> 'union' <*> }

s314 = { struct_or_union_specifier -> struct_or_union <*> '{' struct_declaration_list '}',
         struct_or_union_specifier -> struct_or_union <*> IDENTIFIER,
         struct_or_union_specifier -> struct_or_union <*> IDENTIFIER '{' struct_declaration_list '}'
       }

s315 = { struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}' <*> }

s316 = { struct_or_union_specifier -> struct_or_union IDENTIFIER <*>,
         struct_or_union_specifier -> struct_or_union IDENTIFIER <*> '{' struct_declaration_list '}'
       }

s317 = { struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}' <*> }

s318 = { translation_unit -> external_declaration <*> }

s319 = { translation_unit -> translation_unit external_declaration <*> }

s320 = { type_name -> specifier_qualifier_list abstract_declarator <*> }

s321 = { type_qualifier -> 'const' <*> }

s322 = { type_qualifier -> 'volatile' <*> }

s323 = { type_qualifier_list -> type_qualifier <*> }

s324 = { type_qualifier_list -> type_qualifier_list type_qualifier <*> }

s325 = { type_specifier -> 'char' <*> }

s326 = { type_specifier -> 'double' <*> }

s327 = { type_specifier -> 'float' <*> }

s328 = { type_specifier -> 'int' <*> }

s329 = { type_specifier -> 'long' <*> }

s330 = { type_specifier -> 'short' <*> }

s331 = { type_specifier -> 'signed' <*> }

s332 = { type_specifier -> 'unsigned' <*> }

s333 = { type_specifier -> 'void' <*> }

s334 = { type_specifier -> TYPE_NAME <*> }

s335 = { type_specifier -> enum_specifier <*> }

s336 = { type_specifier -> struct_or_union_specifier <*> }

s337 = { unary_expression -> '++' unary_expression <*> }

s338 = { unary_expression -> '--' unary_expression <*> }

s339 = { unary_expression -> 'sizeof' '(' type_name <*> ')' }

s340 = { unary_expression -> 'sizeof' '(' type_name ')' <*> }

s341 = { unary_expression -> 'sizeof' unary_expression <*> }

s342 = { unary_expression -> unary_operator cast_expression <*> }

s343 = { unary_operator -> '!' <*> }

s344 = { unary_operator -> '&' <*> }

s345 = { unary_operator -> '*' <*> }

s346 = { unary_operator -> '+' <*> }

s347 = { unary_operator -> '-' <*> }

s348 = { unary_operator -> '~' <*> }

Action Table:
action(s0, '(') = <shift, s130>
action(s0, '*') = <shift, s256>
action(s0, 'auto') = <shift, s298>
action(s0, 'char') = <shift, s325>
action(s0, 'const') = <shift, s321>
action(s0, 'double') = <shift, s326>
action(s0, 'enum') = <shift, s168>
action(s0, 'extern') = <shift, s299>
action(s0, 'float') = <shift, s327>
action(s0, 'int') = <shift, s328>
action(s0, 'long') = <shift, s329>
action(s0, 'register') = <shift, s300>
action(s0, 'short') = <shift, s330>
action(s0, 'signed') = <shift, s331>
action(s0, 'static') = <shift, s301>
action(s0, 'struct') = <shift, s312>
action(s0, 'typedef') = <shift, s302>
action(s0, 'union') = <shift, s313>
action(s0, 'unsigned') = <shift, s332>
action(s0, 'void') = <shift, s333>
action(s0, 'volatile') = <shift, s322>
action(s0, IDENTIFIER) = <shift, s153>
action(s0, TYPE_NAME) = <shift, s334>
action(s1, $) = <accept>
action(s1, '(') = <shift, s130>
action(s1, '*') = <shift, s256>
action(s1, 'auto') = <shift, s298>
action(s1, 'char') = <shift, s325>
action(s1, 'const') = <shift, s321>
action(s1, 'double') = <shift, s326>
action(s1, 'enum') = <shift, s168>
action(s1, 'extern') = <shift, s299>
action(s1, 'float') = <shift, s327>
action(s1, 'int') = <shift, s328>
action(s1, 'long') = <shift, s329>
action(s1, 'register') = <shift, s300>
action(s1, 'short') = <shift, s330>
action(s1, 'signed') = <shift, s331>
action(s1, 'static') = <shift, s301>
action(s1, 'struct') = <shift, s312>
action(s1, 'typedef') = <shift, s302>
action(s1, 'union') = <shift, s313>
action(s1, 'unsigned') = <shift, s332>
action(s1, 'void') = <shift, s333>
action(s1, 'volatile') = <shift, s322>
action(s1, IDENTIFIER) = <shift, s153>
action(s1, TYPE_NAME) = <shift, s334>
action(s2, '(') = <shift, s2>
action(s2, ')') = <shift, s137>
action(s2, '*') = <shift, s256>
action(s2, '[') = <shift, s45>
action(s2, 'auto') = <shift, s298>
action(s2, 'char') = <shift, s325>
action(s2, 'const') = <shift, s321>
action(s2, 'double') = <shift, s326>
action(s2, 'enum') = <shift, s168>
action(s2, 'extern') = <shift, s299>
action(s2, 'float') = <shift, s327>
action(s2, 'int') = <shift, s328>
action(s2, 'long') = <shift, s329>
action(s2, 'register') = <shift, s300>
action(s2, 'short') = <shift, s330>
action(s2, 'signed') = <shift, s331>
action(s2, 'static') = <shift, s301>
action(s2, 'struct') = <shift, s312>
action(s2, 'typedef') = <shift, s302>
action(s2, 'union') = <shift, s313>
action(s2, 'unsigned') = <shift, s332>
action(s2, 'void') = <shift, s333>
action(s2, 'volatile') = <shift, s322>
action(s2, IDENTIFIER) = <shift, s153>
action(s2, TYPE_NAME) = <shift, s334>
action(s3, '(') = <shift, s3>
action(s3, ')') = <shift, s137>
action(s3, '*') = <shift, s256>
action(s3, '[') = <shift, s45>
action(s3, 'auto') = <shift, s298>
action(s3, 'char') = <shift, s325>
action(s3, 'const') = <shift, s321>
action(s3, 'double') = <shift, s326>
action(s3, 'enum') = <shift, s168>
action(s3, 'extern') = <shift, s299>
action(s3, 'float') = <shift, s327>
action(s3, 'int') = <shift, s328>
action(s3, 'long') = <shift, s329>
action(s3, 'register') = <shift, s300>
action(s3, 'short') = <shift, s330>
action(s3, 'signed') = <shift, s331>
action(s3, 'static') = <shift, s301>
action(s3, 'struct') = <shift, s312>
action(s3, 'typedef') = <shift, s302>
action(s3, 'union') = <shift, s313>
action(s3, 'unsigned') = <shift, s332>
action(s3, 'void') = <shift, s333>
action(s3, 'volatile') = <shift, s322>
action(s3, TYPE_NAME) = <shift, s334>
action(s4, '(') = <shift, s2>
action(s4, ')') = <reduce, parameter_declaration -> declaration_specifiers>
action(s4, '*') = <shift, s256>
action(s4, ',') = <reduce, parameter_declaration -> declaration_specifiers>
action(s4, '[') = <shift, s45>
action(s4, IDENTIFIER) = <shift, s153>
action(s5, '(') = <shift, s3>
action(s5, ')') = <reduce, type_name -> specifier_qualifier_list>
action(s5, '*') = <shift, s256>
action(s5, '[') = <shift, s45>
action(s6, '(') = <shift, s124>
action(s6, ')') = <reduce, abstract_declarator -> direct_abstract_declarator>
action(s6, ',') = <reduce, abstract_declarator -> direct_abstract_declarator>
action(s6, '[') = <shift, s46>
action(s7, '(') = <shift, s2>
action(s7, ')') = <reduce, abstract_declarator -> pointer>
action(s7, ',') = <reduce, abstract_declarator -> pointer>
action(s7, '[') = <shift, s45>
action(s7, IDENTIFIER) = <shift, s153>
action(s8, '(') = <shift, s3>
action(s8, ')') = <reduce, abstract_declarator -> pointer>
action(s8, ',') = <reduce, abstract_declarator -> pointer>
action(s8, '[') = <shift, s45>
action(s9, '(') = <shift, s124>
action(s9, ')') = <reduce, abstract_declarator -> pointer direct_abstract_declarator>
action(s9, ',') = <reduce, abstract_declarator -> pointer direct_abstract_declarator>
action(s9, '[') = <shift, s46>
action(s10, '!') = <shift, s343>
action(s10, '&') = <shift, s344>
action(s10, '(') = <shift, s13>
action(s10, ')') = <shift, s264>
action(s10, '*') = <shift, s345>
action(s10, '+') = <shift, s346>
action(s10, '++') = <shift, s260>
action(s10, '-') = <shift, s347>
action(s10, '--') = <shift, s261>
action(s10, 'sizeof') = <shift, s262>
action(s10, '~') = <shift, s348>
action(s10, CONSTANT) = <shift, s275>
action(s10, IDENTIFIER) = <shift, s276>
action(s10, STRING_LITERAL) = <shift, s277>
action(s11, '!') = <shift, s343>
action(s11, '&') = <shift, s344>
action(s11, '(') = <shift, s13>
action(s11, '*') = <shift, s345>
action(s11, '+') = <shift, s346>
action(s11, '++') = <shift, s260>
action(s11, '-') = <shift, s347>
action(s11, '--') = <shift, s261>
action(s11, 'sizeof') = <shift, s262>
action(s11, '~') = <shift, s348>
action(s11, CONSTANT) = <shift, s275>
action(s11, IDENTIFIER) = <shift, s276>
action(s11, STRING_LITERAL) = <shift, s277>
action(s12, '!') = <shift, s343>
action(s12, '&') = <shift, s344>
action(s12, '(') = <shift, s13>
action(s12, '*') = <shift, s345>
action(s12, '+') = <shift, s346>
action(s12, '++') = <shift, s260>
action(s12, '-') = <shift, s347>
action(s12, '--') = <shift, s261>
action(s12, 'sizeof') = <shift, s262>
action(s12, '~') = <shift, s348>
action(s12, CONSTANT) = <shift, s275>
action(s12, IDENTIFIER) = <shift, s276>
action(s12, STRING_LITERAL) = <shift, s277>
action(s13, '!') = <shift, s343>
action(s13, '&') = <shift, s344>
action(s13, '(') = <shift, s13>
action(s13, '*') = <shift, s345>
action(s13, '+') = <shift, s346>
action(s13, '++') = <shift, s260>
action(s13, '-') = <shift, s347>
action(s13, '--') = <shift, s261>
action(s13, 'char') = <shift, s325>
action(s13, 'const') = <shift, s321>
action(s13, 'double') = <shift, s326>
action(s13, 'enum') = <shift, s168>
action(s13, 'float') = <shift, s327>
action(s13, 'int') = <shift, s328>
action(s13, 'long') = <shift, s329>
action(s13, 'short') = <shift, s330>
action(s13, 'signed') = <shift, s331>
action(s13, 'sizeof') = <shift, s262>
action(s13, 'struct') = <shift, s312>
action(s13, 'union') = <shift, s313>
action(s13, 'unsigned') = <shift, s332>
action(s13, 'void') = <shift, s333>
action(s13, 'volatile') = <shift, s322>
action(s13, '~') = <shift, s348>
action(s13, CONSTANT) = <shift, s275>
action(s13, IDENTIFIER) = <shift, s276>
action(s13, STRING_LITERAL) = <shift, s277>
action(s13, TYPE_NAME) = <shift, s334>
action(s14, '!') = <shift, s343>
action(s14, '&') = <shift, s344>
action(s14, '(') = <shift, s13>
action(s14, '*') = <shift, s345>
action(s14, '+') = <shift, s346>
action(s14, '++') = <shift, s260>
action(s14, '-') = <shift, s347>
action(s14, '--') = <shift, s261>
action(s14, ';') = <shift, s197>
action(s14, 'auto') = <shift, s298>
action(s14, 'break') = <shift, s229>
action(s14, 'case') = <shift, s49>
action(s14, 'char') = <shift, s325>
action(s14, 'const') = <shift, s321>
action(s14, 'continue') = <shift, s231>
action(s14, 'default') = <shift, s240>
action(s14, 'do') = <shift, s18>
action(s14, 'double') = <shift, s326>
action(s14, 'enum') = <shift, s168>
action(s14, 'extern') = <shift, s299>
action(s14, 'float') = <shift, s327>
action(s14, 'for') = <shift, s224>
action(s14, 'goto') = <shift, s233>
action(s14, 'if') = <shift, s283>
action(s14, 'int') = <shift, s328>
action(s14, 'long') = <shift, s329>
action(s14, 'register') = <shift, s300>
action(s14, 'return') = <shift, s35>
action(s14, 'short') = <shift, s330>
action(s14, 'signed') = <shift, s331>
action(s14, 'sizeof') = <shift, s262>
action(s14, 'static') = <shift, s301>
action(s14, 'struct') = <shift, s312>
action(s14, 'switch') = <shift, s286>
action(s14, 'typedef') = <shift, s302>
action(s14, 'union') = <shift, s313>
action(s14, 'unsigned') = <shift, s332>
action(s14, 'void') = <shift, s333>
action(s14, 'volatile') = <shift, s322>
action(s14, 'while') = <shift, s227>
action(s14, '{') = <shift, s14>
action(s14, '}') = <shift, s106>
action(s14, '~') = <shift, s348>
action(s14, CONSTANT) = <shift, s275>
action(s14, IDENTIFIER) = <shift, s242>
action(s14, STRING_LITERAL) = <shift, s277>
action(s14, TYPE_NAME) = <shift, s334>
action(s15, '!') = <shift, s343>
action(s15, '&') = <shift, s344>
action(s15, '(') = <shift, s13>
action(s15, '*') = <shift, s345>
action(s15, '+') = <shift, s346>
action(s15, '++') = <shift, s260>
action(s15, '-') = <shift, s347>
action(s15, '--') = <shift, s261>
action(s15, ';') = <shift, s197>
action(s15, 'auto') = <shift, s298>
action(s15, 'break') = <shift, s229>
action(s15, 'case') = <shift, s49>
action(s15, 'char') = <shift, s325>
action(s15, 'const') = <shift, s321>
action(s15, 'continue') = <shift, s231>
action(s15, 'default') = <shift, s240>
action(s15, 'do') = <shift, s18>
action(s15, 'double') = <shift, s326>
action(s15, 'enum') = <shift, s168>
action(s15, 'extern') = <shift, s299>
action(s15, 'float') = <shift, s327>
action(s15, 'for') = <shift, s224>
action(s15, 'goto') = <shift, s233>
action(s15, 'if') = <shift, s283>
action(s15, 'int') = <shift, s328>
action(s15, 'long') = <shift, s329>
action(s15, 'register') = <shift, s300>
action(s15, 'return') = <shift, s35>
action(s15, 'short') = <shift, s330>
action(s15, 'signed') = <shift, s331>
action(s15, 'sizeof') = <shift, s262>
action(s15, 'static') = <shift, s301>
action(s15, 'struct') = <shift, s312>
action(s15, 'switch') = <shift, s286>
action(s15, 'typedef') = <shift, s302>
action(s15, 'union') = <shift, s313>
action(s15, 'unsigned') = <shift, s332>
action(s15, 'void') = <shift, s333>
action(s15, 'volatile') = <shift, s322>
action(s15, 'while') = <shift, s227>
action(s15, '{') = <shift, s14>
action(s15, '}') = <shift, s107>
action(s15, '~') = <shift, s348>
action(s15, CONSTANT) = <shift, s275>
action(s15, IDENTIFIER) = <shift, s242>
action(s15, STRING_LITERAL) = <shift, s277>
action(s15, TYPE_NAME) = <shift, s334>
action(s16, '!') = <shift, s343>
action(s16, '&') = <shift, s344>
action(s16, '(') = <shift, s13>
action(s16, '*') = <shift, s345>
action(s16, '+') = <shift, s346>
action(s16, '++') = <shift, s260>
action(s16, '-') = <shift, s347>
action(s16, '--') = <shift, s261>
action(s16, ';') = <shift, s197>
action(s16, 'break') = <shift, s229>
action(s16, 'case') = <shift, s49>
action(s16, 'continue') = <shift, s231>
action(s16, 'default') = <shift, s240>
action(s16, 'do') = <shift, s18>
action(s16, 'for') = <shift, s224>
action(s16, 'goto') = <shift, s233>
action(s16, 'if') = <shift, s283>
action(s16, 'return') = <shift, s35>
action(s16, 'sizeof') = <shift, s262>
action(s16, 'switch') = <shift, s286>
action(s16, 'while') = <shift, s227>
action(s16, '{') = <shift, s14>
action(s16, '}') = <shift, s108>
action(s16, '~') = <shift, s348>
action(s16, CONSTANT) = <shift, s275>
action(s16, IDENTIFIER) = <shift, s242>
action(s16, STRING_LITERAL) = <shift, s277>
action(s17, '!') = <shift, s343>
action(s17, '&') = <shift, s344>
action(s17, '(') = <shift, s13>
action(s17, '*') = <shift, s345>
action(s17, '+') = <shift, s346>
action(s17, '++') = <shift, s260>
action(s17, '-') = <shift, s347>
action(s17, '--') = <shift, s261>
action(s17, ';') = <shift, s197>
action(s17, 'break') = <shift, s229>
action(s17, 'case') = <shift, s49>
action(s17, 'continue') = <shift, s231>
action(s17, 'default') = <shift, s240>
action(s17, 'do') = <shift, s18>
action(s17, 'for') = <shift, s224>
action(s17, 'goto') = <shift, s233>
action(s17, 'if') = <shift, s283>
action(s17, 'return') = <shift, s35>
action(s17, 'sizeof') = <shift, s262>
action(s17, 'switch') = <shift, s286>
action(s17, 'while') = <shift, s227>
action(s17, '{') = <shift, s14>
action(s17, '}') = <shift, s109>
action(s17, '~') = <shift, s348>
action(s17, CONSTANT) = <shift, s275>
action(s17, IDENTIFIER) = <shift, s242>
action(s17, STRING_LITERAL) = <shift, s277>
action(s18, '!') = <shift, s343>
action(s18, '&') = <shift, s344>
action(s18, '(') = <shift, s13>
action(s18, '*') = <shift, s345>
action(s18, '+') = <shift, s346>
action(s18, '++') = <shift, s260>
action(s18, '-') = <shift, s347>
action(s18, '--') = <shift, s261>
action(s18, ';') = <shift, s197>
action(s18, 'break') = <shift, s229>
action(s18, 'case') = <shift, s49>
action(s18, 'continue') = <shift, s231>
action(s18, 'default') = <shift, s240>
action(s18, 'do') = <shift, s18>
action(s18, 'for') = <shift, s224>
action(s18, 'goto') = <shift, s233>
action(s18, 'if') = <shift, s283>
action(s18, 'return') = <shift, s35>
action(s18, 'sizeof') = <shift, s262>
action(s18, 'switch') = <shift, s286>
action(s18, 'while') = <shift, s227>
action(s18, '{') = <shift, s14>
action(s18, '~') = <shift, s348>
action(s18, CONSTANT) = <shift, s275>
action(s18, IDENTIFIER) = <shift, s242>
action(s18, STRING_LITERAL) = <shift, s277>
action(s19, '!') = <shift, s343>
action(s19, '&') = <shift, s344>
action(s19, '(') = <shift, s13>
action(s19, '*') = <shift, s345>
action(s19, '+') = <shift, s346>
action(s19, '++') = <shift, s260>
action(s19, '-') = <shift, s347>
action(s19, '--') = <shift, s261>
action(s19, ';') = <shift, s197>
action(s19, 'break') = <shift, s229>
action(s19, 'case') = <shift, s49>
action(s19, 'continue') = <shift, s231>
action(s19, 'default') = <shift, s240>
action(s19, 'do') = <shift, s18>
action(s19, 'for') = <shift, s224>
action(s19, 'goto') = <shift, s233>
action(s19, 'if') = <shift, s283>
action(s19, 'return') = <shift, s35>
action(s19, 'sizeof') = <shift, s262>
action(s19, 'switch') = <shift, s286>
action(s19, 'while') = <shift, s227>
action(s19, '{') = <shift, s14>
action(s19, '~') = <shift, s348>
action(s19, CONSTANT) = <shift, s275>
action(s19, IDENTIFIER) = <shift, s242>
action(s19, STRING_LITERAL) = <shift, s277>
action(s20, '!') = <shift, s343>
action(s20, '&') = <shift, s344>
action(s20, '(') = <shift, s13>
action(s20, '*') = <shift, s345>
action(s20, '+') = <shift, s346>
action(s20, '++') = <shift, s260>
action(s20, '-') = <shift, s347>
action(s20, '--') = <shift, s261>
action(s20, ';') = <shift, s197>
action(s20, 'break') = <shift, s229>
action(s20, 'case') = <shift, s49>
action(s20, 'continue') = <shift, s231>
action(s20, 'default') = <shift, s240>
action(s20, 'do') = <shift, s18>
action(s20, 'for') = <shift, s224>
action(s20, 'goto') = <shift, s233>
action(s20, 'if') = <shift, s283>
action(s20, 'return') = <shift, s35>
action(s20, 'sizeof') = <shift, s262>
action(s20, 'switch') = <shift, s286>
action(s20, 'while') = <shift, s227>
action(s20, '{') = <shift, s14>
action(s20, '~') = <shift, s348>
action(s20, CONSTANT) = <shift, s275>
action(s20, IDENTIFIER) = <shift, s242>
action(s20, STRING_LITERAL) = <shift, s277>
action(s21, '!') = <shift, s343>
action(s21, '&') = <shift, s344>
action(s21, '(') = <shift, s13>
action(s21, '*') = <shift, s345>
action(s21, '+') = <shift, s346>
action(s21, '++') = <shift, s260>
action(s21, '-') = <shift, s347>
action(s21, '--') = <shift, s261>
action(s21, ';') = <shift, s197>
action(s21, 'break') = <shift, s229>
action(s21, 'case') = <shift, s49>
action(s21, 'continue') = <shift, s231>
action(s21, 'default') = <shift, s240>
action(s21, 'do') = <shift, s18>
action(s21, 'for') = <shift, s224>
action(s21, 'goto') = <shift, s233>
action(s21, 'if') = <shift, s283>
action(s21, 'return') = <shift, s35>
action(s21, 'sizeof') = <shift, s262>
action(s21, 'switch') = <shift, s286>
action(s21, 'while') = <shift, s227>
action(s21, '{') = <shift, s14>
action(s21, '~') = <shift, s348>
action(s21, CONSTANT) = <shift, s275>
action(s21, IDENTIFIER) = <shift, s242>
action(s21, STRING_LITERAL) = <shift, s277>
action(s22, '!') = <shift, s343>
action(s22, '&') = <shift, s344>
action(s22, '(') = <shift, s13>
action(s22, '*') = <shift, s345>
action(s22, '+') = <shift, s346>
action(s22, '++') = <shift, s260>
action(s22, '-') = <shift, s347>
action(s22, '--') = <shift, s261>
action(s22, ';') = <shift, s197>
action(s22, 'break') = <shift, s229>
action(s22, 'case') = <shift, s49>
action(s22, 'continue') = <shift, s231>
action(s22, 'default') = <shift, s240>
action(s22, 'do') = <shift, s18>
action(s22, 'for') = <shift, s224>
action(s22, 'goto') = <shift, s233>
action(s22, 'if') = <shift, s283>
action(s22, 'return') = <shift, s35>
action(s22, 'sizeof') = <shift, s262>
action(s22, 'switch') = <shift, s286>
action(s22, 'while') = <shift, s227>
action(s22, '{') = <shift, s14>
action(s22, '~') = <shift, s348>
action(s22, CONSTANT) = <shift, s275>
action(s22, IDENTIFIER) = <shift, s242>
action(s22, STRING_LITERAL) = <shift, s277>
action(s23, '!') = <shift, s343>
action(s23, '&') = <shift, s344>
action(s23, '(') = <shift, s13>
action(s23, '*') = <shift, s345>
action(s23, '+') = <shift, s346>
action(s23, '++') = <shift, s260>
action(s23, '-') = <shift, s347>
action(s23, '--') = <shift, s261>
action(s23, ';') = <shift, s197>
action(s23, 'break') = <shift, s229>
action(s23, 'case') = <shift, s49>
action(s23, 'continue') = <shift, s231>
action(s23, 'default') = <shift, s240>
action(s23, 'do') = <shift, s18>
action(s23, 'for') = <shift, s224>
action(s23, 'goto') = <shift, s233>
action(s23, 'if') = <shift, s283>
action(s23, 'return') = <shift, s35>
action(s23, 'sizeof') = <shift, s262>
action(s23, 'switch') = <shift, s286>
action(s23, 'while') = <shift, s227>
action(s23, '{') = <shift, s14>
action(s23, '~') = <shift, s348>
action(s23, CONSTANT) = <shift, s275>
action(s23, IDENTIFIER) = <shift, s242>
action(s23, STRING_LITERAL) = <shift, s277>
action(s24, '!') = <shift, s343>
action(s24, '&') = <shift, s344>
action(s24, '(') = <shift, s13>
action(s24, '*') = <shift, s345>
action(s24, '+') = <shift, s346>
action(s24, '++') = <shift, s260>
action(s24, '-') = <shift, s347>
action(s24, '--') = <shift, s261>
action(s24, ';') = <shift, s197>
action(s24, 'break') = <shift, s229>
action(s24, 'case') = <shift, s49>
action(s24, 'continue') = <shift, s231>
action(s24, 'default') = <shift, s240>
action(s24, 'do') = <shift, s18>
action(s24, 'for') = <shift, s224>
action(s24, 'goto') = <shift, s233>
action(s24, 'if') = <shift, s283>
action(s24, 'return') = <shift, s35>
action(s24, 'sizeof') = <shift, s262>
action(s24, 'switch') = <shift, s286>
action(s24, 'while') = <shift, s227>
action(s24, '{') = <shift, s14>
action(s24, '~') = <shift, s348>
action(s24, CONSTANT) = <shift, s275>
action(s24, IDENTIFIER) = <shift, s242>
action(s24, STRING_LITERAL) = <shift, s277>
action(s25, '!') = <shift, s343>
action(s25, '&') = <shift, s344>
action(s25, '(') = <shift, s13>
action(s25, '*') = <shift, s345>
action(s25, '+') = <shift, s346>
action(s25, '++') = <shift, s260>
action(s25, '-') = <shift, s347>
action(s25, '--') = <shift, s261>
action(s25, ';') = <shift, s197>
action(s25, 'break') = <shift, s229>
action(s25, 'case') = <shift, s49>
action(s25, 'continue') = <shift, s231>
action(s25, 'default') = <shift, s240>
action(s25, 'do') = <shift, s18>
action(s25, 'for') = <shift, s224>
action(s25, 'goto') = <shift, s233>
action(s25, 'if') = <shift, s283>
action(s25, 'return') = <shift, s35>
action(s25, 'sizeof') = <shift, s262>
action(s25, 'switch') = <shift, s286>
action(s25, 'while') = <shift, s227>
action(s25, '{') = <shift, s14>
action(s25, '~') = <shift, s348>
action(s25, CONSTANT) = <shift, s275>
action(s25, IDENTIFIER) = <shift, s242>
action(s25, STRING_LITERAL) = <shift, s277>
action(s26, '!') = <shift, s343>
action(s26, '&') = <shift, s344>
action(s26, '(') = <shift, s13>
action(s26, '*') = <shift, s345>
action(s26, '+') = <shift, s346>
action(s26, '++') = <shift, s260>
action(s26, '-') = <shift, s347>
action(s26, '--') = <shift, s261>
action(s26, ';') = <shift, s197>
action(s26, 'break') = <shift, s229>
action(s26, 'case') = <shift, s49>
action(s26, 'continue') = <shift, s231>
action(s26, 'default') = <shift, s240>
action(s26, 'do') = <shift, s18>
action(s26, 'for') = <shift, s224>
action(s26, 'goto') = <shift, s233>
action(s26, 'if') = <shift, s283>
action(s26, 'return') = <shift, s35>
action(s26, 'sizeof') = <shift, s262>
action(s26, 'switch') = <shift, s286>
action(s26, 'while') = <shift, s227>
action(s26, '{') = <shift, s14>
action(s26, '~') = <shift, s348>
action(s26, CONSTANT) = <shift, s275>
action(s26, IDENTIFIER) = <shift, s242>
action(s26, STRING_LITERAL) = <shift, s277>
action(s27, '!') = <shift, s343>
action(s27, '&') = <shift, s344>
action(s27, '(') = <shift, s13>
action(s27, '*') = <shift, s345>
action(s27, '+') = <shift, s346>
action(s27, '++') = <shift, s260>
action(s27, '-') = <shift, s347>
action(s27, '--') = <shift, s261>
action(s27, ';') = <shift, s197>
action(s27, 'break') = <shift, s229>
action(s27, 'case') = <shift, s49>
action(s27, 'continue') = <shift, s231>
action(s27, 'default') = <shift, s240>
action(s27, 'do') = <shift, s18>
action(s27, 'for') = <shift, s224>
action(s27, 'goto') = <shift, s233>
action(s27, 'if') = <shift, s283>
action(s27, 'return') = <shift, s35>
action(s27, 'sizeof') = <shift, s262>
action(s27, 'switch') = <shift, s286>
action(s27, 'while') = <shift, s227>
action(s27, '{') = <shift, s14>
action(s27, '~') = <shift, s348>
action(s27, CONSTANT) = <shift, s275>
action(s27, IDENTIFIER) = <shift, s242>
action(s27, STRING_LITERAL) = <shift, s277>
action(s28, '!') = <shift, s343>
action(s28, '&') = <shift, s344>
action(s28, '(') = <shift, s13>
action(s28, '*') = <shift, s345>
action(s28, '+') = <shift, s346>
action(s28, '++') = <shift, s260>
action(s28, '-') = <shift, s347>
action(s28, '--') = <shift, s261>
action(s28, 'sizeof') = <shift, s262>
action(s28, '~') = <shift, s348>
action(s28, CONSTANT) = <shift, s275>
action(s28, IDENTIFIER) = <shift, s276>
action(s28, STRING_LITERAL) = <shift, s277>
action(s29, '!') = <shift, s343>
action(s29, '&') = <shift, s344>
action(s29, '(') = <shift, s13>
action(s29, '*') = <shift, s345>
action(s29, '+') = <shift, s346>
action(s29, '++') = <shift, s260>
action(s29, '-') = <shift, s347>
action(s29, '--') = <shift, s261>
action(s29, 'char') = <shift, s325>
action(s29, 'const') = <shift, s321>
action(s29, 'double') = <shift, s326>
action(s29, 'enum') = <shift, s168>
action(s29, 'float') = <shift, s327>
action(s29, 'int') = <shift, s328>
action(s29, 'long') = <shift, s329>
action(s29, 'short') = <shift, s330>
action(s29, 'signed') = <shift, s331>
action(s29, 'sizeof') = <shift, s262>
action(s29, 'struct') = <shift, s312>
action(s29, 'union') = <shift, s313>
action(s29, 'unsigned') = <shift, s332>
action(s29, 'void') = <shift, s333>
action(s29, 'volatile') = <shift, s322>
action(s29, '~') = <shift, s348>
action(s29, CONSTANT) = <shift, s275>
action(s29, IDENTIFIER) = <shift, s276>
action(s29, STRING_LITERAL) = <shift, s277>
action(s29, TYPE_NAME) = <shift, s334>
action(s30, '!') = <shift, s343>
action(s30, '&') = <shift, s344>
action(s30, '(') = <shift, s13>
action(s30, '*') = <shift, s345>
action(s30, '+') = <shift, s346>
action(s30, '++') = <shift, s260>
action(s30, '-') = <shift, s347>
action(s30, '--') = <shift, s261>
action(s30, ';') = <shift, s197>
action(s30, 'sizeof') = <shift, s262>
action(s30, '~') = <shift, s348>
action(s30, CONSTANT) = <shift, s275>
action(s30, IDENTIFIER) = <shift, s276>
action(s30, STRING_LITERAL) = <shift, s277>
action(s31, '!') = <shift, s343>
action(s31, '&') = <shift, s344>
action(s31, '(') = <shift, s13>
action(s31, '*') = <shift, s345>
action(s31, '+') = <shift, s346>
action(s31, '++') = <shift, s260>
action(s31, '-') = <shift, s347>
action(s31, '--') = <shift, s261>
action(s31, ';') = <shift, s197>
action(s31, 'sizeof') = <shift, s262>
action(s31, '~') = <shift, s348>
action(s31, CONSTANT) = <shift, s275>
action(s31, IDENTIFIER) = <shift, s276>
action(s31, STRING_LITERAL) = <shift, s277>
action(s32, '!') = <shift, s343>
action(s32, '&') = <shift, s344>
action(s32, '(') = <shift, s13>
action(s32, '*') = <shift, s345>
action(s32, '+') = <shift, s346>
action(s32, '++') = <shift, s260>
action(s32, '-') = <shift, s347>
action(s32, '--') = <shift, s261>
action(s32, 'sizeof') = <shift, s262>
action(s32, '~') = <shift, s348>
action(s32, CONSTANT) = <shift, s275>
action(s32, IDENTIFIER) = <shift, s276>
action(s32, STRING_LITERAL) = <shift, s277>
action(s33, '!') = <shift, s343>
action(s33, '&') = <shift, s344>
action(s33, '(') = <shift, s13>
action(s33, ')') = <shift, s19>
action(s33, '*') = <shift, s345>
action(s33, '+') = <shift, s346>
action(s33, '++') = <shift, s260>
action(s33, '-') = <shift, s347>
action(s33, '--') = <shift, s261>
action(s33, 'sizeof') = <shift, s262>
action(s33, '~') = <shift, s348>
action(s33, CONSTANT) = <shift, s275>
action(s33, IDENTIFIER) = <shift, s276>
action(s33, STRING_LITERAL) = <shift, s277>
action(s34, '!') = <shift, s343>
action(s34, '&') = <shift, s344>
action(s34, '(') = <shift, s13>
action(s34, '*') = <shift, s345>
action(s34, '+') = <shift, s346>
action(s34, '++') = <shift, s260>
action(s34, '-') = <shift, s347>
action(s34, '--') = <shift, s261>
action(s34, 'sizeof') = <shift, s262>
action(s34, '~') = <shift, s348>
action(s34, CONSTANT) = <shift, s275>
action(s34, IDENTIFIER) = <shift, s276>
action(s34, STRING_LITERAL) = <shift, s277>
action(s35, '!') = <shift, s343>
action(s35, '&') = <shift, s344>
action(s35, '(') = <shift, s13>
action(s35, '*') = <shift, s345>
action(s35, '+') = <shift, s346>
action(s35, '++') = <shift, s260>
action(s35, '-') = <shift, s347>
action(s35, '--') = <shift, s261>
action(s35, ';') = <shift, s236>
action(s35, 'sizeof') = <shift, s262>
action(s35, '~') = <shift, s348>
action(s35, CONSTANT) = <shift, s275>
action(s35, IDENTIFIER) = <shift, s276>
action(s35, STRING_LITERAL) = <shift, s277>
action(s36, '!') = <shift, s343>
action(s36, '&') = <shift, s344>
action(s36, '(') = <shift, s13>
action(s36, '*') = <shift, s345>
action(s36, '+') = <shift, s346>
action(s36, '++') = <shift, s260>
action(s36, '-') = <shift, s347>
action(s36, '--') = <shift, s261>
action(s36, 'sizeof') = <shift, s262>
action(s36, '~') = <shift, s348>
action(s36, CONSTANT) = <shift, s275>
action(s36, IDENTIFIER) = <shift, s276>
action(s36, STRING_LITERAL) = <shift, s277>
action(s37, '!') = <shift, s343>
action(s37, '&') = <shift, s344>
action(s37, '(') = <shift, s13>
action(s37, '*') = <shift, s345>
action(s37, '+') = <shift, s346>
action(s37, '++') = <shift, s260>
action(s37, '-') = <shift, s347>
action(s37, '--') = <shift, s261>
action(s37, 'sizeof') = <shift, s262>
action(s37, '~') = <shift, s348>
action(s37, CONSTANT) = <shift, s275>
action(s37, IDENTIFIER) = <shift, s276>
action(s37, STRING_LITERAL) = <shift, s277>
action(s38, '!') = <shift, s343>
action(s38, '&') = <shift, s344>
action(s38, '(') = <shift, s13>
action(s38, '*') = <shift, s345>
action(s38, '+') = <shift, s346>
action(s38, '++') = <shift, s260>
action(s38, '-') = <shift, s347>
action(s38, '--') = <shift, s261>
action(s38, 'sizeof') = <shift, s262>
action(s38, '~') = <shift, s348>
action(s38, CONSTANT) = <shift, s275>
action(s38, IDENTIFIER) = <shift, s276>
action(s38, STRING_LITERAL) = <shift, s277>
action(s39, '!') = <shift, s343>
action(s39, '&') = <shift, s344>
action(s39, '(') = <shift, s13>
action(s39, '*') = <shift, s345>
action(s39, '+') = <shift, s346>
action(s39, '++') = <shift, s260>
action(s39, '-') = <shift, s347>
action(s39, '--') = <shift, s261>
action(s39, 'sizeof') = <shift, s262>
action(s39, '~') = <shift, s348>
action(s39, CONSTANT) = <shift, s275>
action(s39, IDENTIFIER) = <shift, s276>
action(s39, STRING_LITERAL) = <shift, s277>
action(s40, '!') = <shift, s343>
action(s40, '&') = <shift, s344>
action(s40, '(') = <shift, s13>
action(s40, '*') = <shift, s345>
action(s40, '+') = <shift, s346>
action(s40, '++') = <shift, s260>
action(s40, '-') = <shift, s347>
action(s40, '--') = <shift, s261>
action(s40, 'sizeof') = <shift, s262>
action(s40, '~') = <shift, s348>
action(s40, CONSTANT) = <shift, s275>
action(s40, IDENTIFIER) = <shift, s276>
action(s40, STRING_LITERAL) = <shift, s277>
action(s41, '!') = <shift, s343>
action(s41, '&') = <shift, s344>
action(s41, '(') = <shift, s13>
action(s41, '*') = <shift, s345>
action(s41, '+') = <shift, s346>
action(s41, '++') = <shift, s260>
action(s41, '-') = <shift, s347>
action(s41, '--') = <shift, s261>
action(s41, 'sizeof') = <shift, s262>
action(s41, '{') = <shift, s42>
action(s41, '~') = <shift, s348>
action(s41, CONSTANT) = <shift, s275>
action(s41, IDENTIFIER) = <shift, s276>
action(s41, STRING_LITERAL) = <shift, s277>
action(s42, '!') = <shift, s343>
action(s42, '&') = <shift, s344>
action(s42, '(') = <shift, s13>
action(s42, '*') = <shift, s345>
action(s42, '+') = <shift, s346>
action(s42, '++') = <shift, s260>
action(s42, '-') = <shift, s347>
action(s42, '--') = <shift, s261>
action(s42, 'sizeof') = <shift, s262>
action(s42, '{') = <shift, s42>
action(s42, '~') = <shift, s348>
action(s42, CONSTANT) = <shift, s275>
action(s42, IDENTIFIER) = <shift, s276>
action(s42, STRING_LITERAL) = <shift, s277>
action(s43, '!') = <shift, s343>
action(s43, '&') = <shift, s344>
action(s43, '(') = <shift, s13>
action(s43, '*') = <shift, s345>
action(s43, '+') = <shift, s346>
action(s43, '++') = <shift, s260>
action(s43, '-') = <shift, s347>
action(s43, '--') = <shift, s261>
action(s43, 'sizeof') = <shift, s262>
action(s43, '{') = <shift, s42>
action(s43, '}') = <shift, s215>
action(s43, '~') = <shift, s348>
action(s43, CONSTANT) = <shift, s275>
action(s43, IDENTIFIER) = <shift, s276>
action(s43, STRING_LITERAL) = <shift, s277>
action(s44, '!') = <shift, s343>
action(s44, '&') = <shift, s344>
action(s44, '(') = <shift, s13>
action(s44, '*') = <shift, s345>
action(s44, '+') = <shift, s346>
action(s44, '++') = <shift, s260>
action(s44, '-') = <shift, s347>
action(s44, '--') = <shift, s261>
action(s44, 'sizeof') = <shift, s262>
action(s44, '~') = <shift, s348>
action(s44, CONSTANT) = <shift, s275>
action(s44, IDENTIFIER) = <shift, s276>
action(s44, STRING_LITERAL) = <shift, s277>
action(s45, '!') = <shift, s343>
action(s45, '&') = <shift, s344>
action(s45, '(') = <shift, s13>
action(s45, '*') = <shift, s345>
action(s45, '+') = <shift, s346>
action(s45, '++') = <shift, s260>
action(s45, '-') = <shift, s347>
action(s45, '--') = <shift, s261>
action(s45, ']') = <shift, s142>
action(s45, 'sizeof') = <shift, s262>
action(s45, '~') = <shift, s348>
action(s45, CONSTANT) = <shift, s275>
action(s45, IDENTIFIER) = <shift, s276>
action(s45, STRING_LITERAL) = <shift, s277>
action(s46, '!') = <shift, s343>
action(s46, '&') = <shift, s344>
action(s46, '(') = <shift, s13>
action(s46, '*') = <shift, s345>
action(s46, '+') = <shift, s346>
action(s46, '++') = <shift, s260>
action(s46, '-') = <shift, s347>
action(s46, '--') = <shift, s261>
action(s46, ']') = <shift, s148>
action(s46, 'sizeof') = <shift, s262>
action(s46, '~') = <shift, s348>
action(s46, CONSTANT) = <shift, s275>
action(s46, IDENTIFIER) = <shift, s276>
action(s46, STRING_LITERAL) = <shift, s277>
action(s47, '!') = <shift, s343>
action(s47, '&') = <shift, s344>
action(s47, '(') = <shift, s13>
action(s47, '*') = <shift, s345>
action(s47, '+') = <shift, s346>
action(s47, '++') = <shift, s260>
action(s47, '-') = <shift, s347>
action(s47, '--') = <shift, s261>
action(s47, ']') = <shift, s159>
action(s47, 'sizeof') = <shift, s262>
action(s47, '~') = <shift, s348>
action(s47, CONSTANT) = <shift, s275>
action(s47, IDENTIFIER) = <shift, s276>
action(s47, STRING_LITERAL) = <shift, s277>
action(s48, '!') = <shift, s343>
action(s48, '&') = <shift, s344>
action(s48, '(') = <shift, s13>
action(s48, '*') = <shift, s345>
action(s48, '+') = <shift, s346>
action(s48, '++') = <shift, s260>
action(s48, '-') = <shift, s347>
action(s48, '--') = <shift, s261>
action(s48, 'sizeof') = <shift, s262>
action(s48, '~') = <shift, s348>
action(s48, CONSTANT) = <shift, s275>
action(s48, IDENTIFIER) = <shift, s276>
action(s48, STRING_LITERAL) = <shift, s277>
action(s49, '!') = <shift, s343>
action(s49, '&') = <shift, s344>
action(s49, '(') = <shift, s13>
action(s49, '*') = <shift, s345>
action(s49, '+') = <shift, s346>
action(s49, '++') = <shift, s260>
action(s49, '-') = <shift, s347>
action(s49, '--') = <shift, s261>
action(s49, 'sizeof') = <shift, s262>
action(s49, '~') = <shift, s348>
action(s49, CONSTANT) = <shift, s275>
action(s49, IDENTIFIER) = <shift, s276>
action(s49, STRING_LITERAL) = <shift, s277>
action(s50, '!') = <shift, s343>
action(s50, '&') = <shift, s344>
action(s50, '(') = <shift, s13>
action(s50, '*') = <shift, s345>
action(s50, '+') = <shift, s346>
action(s50, '++') = <shift, s260>
action(s50, '-') = <shift, s347>
action(s50, '--') = <shift, s261>
action(s50, 'sizeof') = <shift, s262>
action(s50, '~') = <shift, s348>
action(s50, CONSTANT) = <shift, s275>
action(s50, IDENTIFIER) = <shift, s276>
action(s50, STRING_LITERAL) = <shift, s277>
action(s51, '!') = <shift, s343>
action(s51, '&') = <shift, s344>
action(s51, '(') = <shift, s13>
action(s51, '*') = <shift, s345>
action(s51, '+') = <shift, s346>
action(s51, '++') = <shift, s260>
action(s51, '-') = <shift, s347>
action(s51, '--') = <shift, s261>
action(s51, 'sizeof') = <shift, s262>
action(s51, '~') = <shift, s348>
action(s51, CONSTANT) = <shift, s275>
action(s51, IDENTIFIER) = <shift, s276>
action(s51, STRING_LITERAL) = <shift, s277>
action(s52, '!') = <shift, s343>
action(s52, '&') = <shift, s344>
action(s52, '(') = <shift, s13>
action(s52, '*') = <shift, s345>
action(s52, '+') = <shift, s346>
action(s52, '++') = <shift, s260>
action(s52, '-') = <shift, s347>
action(s52, '--') = <shift, s261>
action(s52, 'sizeof') = <shift, s262>
action(s52, '~') = <shift, s348>
action(s52, CONSTANT) = <shift, s275>
action(s52, IDENTIFIER) = <shift, s276>
action(s52, STRING_LITERAL) = <shift, s277>
action(s53, '!') = <shift, s343>
action(s53, '&') = <shift, s344>
action(s53, '(') = <shift, s13>
action(s53, '*') = <shift, s345>
action(s53, '+') = <shift, s346>
action(s53, '++') = <shift, s260>
action(s53, '-') = <shift, s347>
action(s53, '--') = <shift, s261>
action(s53, 'sizeof') = <shift, s262>
action(s53, '~') = <shift, s348>
action(s53, CONSTANT) = <shift, s275>
action(s53, IDENTIFIER) = <shift, s276>
action(s53, STRING_LITERAL) = <shift, s277>
action(s54, '!') = <shift, s343>
action(s54, '&') = <shift, s344>
action(s54, '(') = <shift, s13>
action(s54, '*') = <shift, s345>
action(s54, '+') = <shift, s346>
action(s54, '++') = <shift, s260>
action(s54, '-') = <shift, s347>
action(s54, '--') = <shift, s261>
action(s54, 'sizeof') = <shift, s262>
action(s54, '~') = <shift, s348>
action(s54, CONSTANT) = <shift, s275>
action(s54, IDENTIFIER) = <shift, s276>
action(s54, STRING_LITERAL) = <shift, s277>
action(s55, '!') = <shift, s343>
action(s55, '&') = <shift, s344>
action(s55, '(') = <shift, s13>
action(s55, '*') = <shift, s345>
action(s55, '+') = <shift, s346>
action(s55, '++') = <shift, s260>
action(s55, '-') = <shift, s347>
action(s55, '--') = <shift, s261>
action(s55, 'sizeof') = <shift, s262>
action(s55, '~') = <shift, s348>
action(s55, CONSTANT) = <shift, s275>
action(s55, IDENTIFIER) = <shift, s276>
action(s55, STRING_LITERAL) = <shift, s277>
action(s56, '!') = <shift, s343>
action(s56, '&') = <shift, s344>
action(s56, '(') = <shift, s13>
action(s56, '*') = <shift, s345>
action(s56, '+') = <shift, s346>
action(s56, '++') = <shift, s260>
action(s56, '-') = <shift, s347>
action(s56, '--') = <shift, s261>
action(s56, 'sizeof') = <shift, s262>
action(s56, '~') = <shift, s348>
action(s56, CONSTANT) = <shift, s275>
action(s56, IDENTIFIER) = <shift, s276>
action(s56, STRING_LITERAL) = <shift, s277>
action(s57, '!') = <shift, s343>
action(s57, '&') = <shift, s344>
action(s57, '(') = <shift, s13>
action(s57, '*') = <shift, s345>
action(s57, '+') = <shift, s346>
action(s57, '++') = <shift, s260>
action(s57, '-') = <shift, s347>
action(s57, '--') = <shift, s261>
action(s57, 'sizeof') = <shift, s262>
action(s57, '~') = <shift, s348>
action(s57, CONSTANT) = <shift, s275>
action(s57, IDENTIFIER) = <shift, s276>
action(s57, STRING_LITERAL) = <shift, s277>
action(s58, '!') = <shift, s343>
action(s58, '&') = <shift, s344>
action(s58, '(') = <shift, s13>
action(s58, '*') = <shift, s345>
action(s58, '+') = <shift, s346>
action(s58, '++') = <shift, s260>
action(s58, '-') = <shift, s347>
action(s58, '--') = <shift, s261>
action(s58, 'sizeof') = <shift, s262>
action(s58, '~') = <shift, s348>
action(s58, CONSTANT) = <shift, s275>
action(s58, IDENTIFIER) = <shift, s276>
action(s58, STRING_LITERAL) = <shift, s277>
action(s59, '!') = <shift, s343>
action(s59, '&') = <shift, s344>
action(s59, '(') = <shift, s13>
action(s59, '*') = <shift, s345>
action(s59, '+') = <shift, s346>
action(s59, '++') = <shift, s260>
action(s59, '-') = <shift, s347>
action(s59, '--') = <shift, s261>
action(s59, 'sizeof') = <shift, s262>
action(s59, '~') = <shift, s348>
action(s59, CONSTANT) = <shift, s275>
action(s59, IDENTIFIER) = <shift, s276>
action(s59, STRING_LITERAL) = <shift, s277>
action(s60, '!') = <shift, s343>
action(s60, '&') = <shift, s344>
action(s60, '(') = <shift, s13>
action(s60, '*') = <shift, s345>
action(s60, '+') = <shift, s346>
action(s60, '++') = <shift, s260>
action(s60, '-') = <shift, s347>
action(s60, '--') = <shift, s261>
action(s60, 'sizeof') = <shift, s262>
action(s60, '~') = <shift, s348>
action(s60, CONSTANT) = <shift, s275>
action(s60, IDENTIFIER) = <shift, s276>
action(s60, STRING_LITERAL) = <shift, s277>
action(s61, '!') = <shift, s343>
action(s61, '&') = <shift, s344>
action(s61, '(') = <shift, s13>
action(s61, '*') = <shift, s345>
action(s61, '+') = <shift, s346>
action(s61, '++') = <shift, s260>
action(s61, '-') = <shift, s347>
action(s61, '--') = <shift, s261>
action(s61, 'sizeof') = <shift, s262>
action(s61, '~') = <shift, s348>
action(s61, CONSTANT) = <shift, s275>
action(s61, IDENTIFIER) = <shift, s276>
action(s61, STRING_LITERAL) = <shift, s277>
action(s62, '!') = <shift, s343>
action(s62, '&') = <shift, s344>
action(s62, '(') = <shift, s13>
action(s62, '*') = <shift, s345>
action(s62, '+') = <shift, s346>
action(s62, '++') = <shift, s260>
action(s62, '-') = <shift, s347>
action(s62, '--') = <shift, s261>
action(s62, 'sizeof') = <shift, s262>
action(s62, '~') = <shift, s348>
action(s62, CONSTANT) = <shift, s275>
action(s62, IDENTIFIER) = <shift, s276>
action(s62, STRING_LITERAL) = <shift, s277>
action(s63, '!') = <shift, s343>
action(s63, '&') = <shift, s344>
action(s63, '(') = <shift, s13>
action(s63, '*') = <shift, s345>
action(s63, '+') = <shift, s346>
action(s63, '++') = <shift, s260>
action(s63, '-') = <shift, s347>
action(s63, '--') = <shift, s261>
action(s63, 'sizeof') = <shift, s262>
action(s63, '~') = <shift, s348>
action(s63, CONSTANT) = <shift, s275>
action(s63, IDENTIFIER) = <shift, s276>
action(s63, STRING_LITERAL) = <shift, s277>
action(s64, '!') = <shift, s343>
action(s64, '&') = <shift, s344>
action(s64, '(') = <shift, s13>
action(s64, '*') = <shift, s345>
action(s64, '+') = <shift, s346>
action(s64, '++') = <shift, s260>
action(s64, '-') = <shift, s347>
action(s64, '--') = <shift, s261>
action(s64, 'sizeof') = <shift, s262>
action(s64, '~') = <shift, s348>
action(s64, CONSTANT) = <shift, s275>
action(s64, IDENTIFIER) = <shift, s276>
action(s64, STRING_LITERAL) = <shift, s277>
action(s65, '!=') = <reduce, shift_expression -> additive_expression>
action(s65, '&&') = <reduce, shift_expression -> additive_expression>
action(s65, '&') = <reduce, shift_expression -> additive_expression>
action(s65, ')') = <reduce, shift_expression -> additive_expression>
action(s65, '+') = <shift, s68>
action(s65, ',') = <reduce, shift_expression -> additive_expression>
action(s65, '-') = <shift, s70>
action(s65, ':') = <reduce, shift_expression -> additive_expression>
action(s65, ';') = <reduce, shift_expression -> additive_expression>
action(s65, '<') = <reduce, shift_expression -> additive_expression>
action(s65, '<<') = <reduce, shift_expression -> additive_expression>
action(s65, '<=') = <reduce, shift_expression -> additive_expression>
action(s65, '==') = <reduce, shift_expression -> additive_expression>
action(s65, '>') = <reduce, shift_expression -> additive_expression>
action(s65, '>=') = <reduce, shift_expression -> additive_expression>
action(s65, '>>') = <reduce, shift_expression -> additive_expression>
action(s65, '?') = <reduce, shift_expression -> additive_expression>
action(s65, ']') = <reduce, shift_expression -> additive_expression>
action(s65, '^') = <reduce, shift_expression -> additive_expression>
action(s65, '|') = <reduce, shift_expression -> additive_expression>
action(s65, '||') = <reduce, shift_expression -> additive_expression>
action(s65, '}') = <reduce, shift_expression -> additive_expression>
action(s66, '!=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, '&&') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, '&') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, ')') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, '+') = <shift, s68>
action(s66, ',') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, '-') = <shift, s70>
action(s66, ':') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, ';') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, '<') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, '<<') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, '<=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, '==') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, '>') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, '>=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, '>>') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, '?') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, ']') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, '^') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, '|') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, '||') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s66, '}') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s67, '!=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, '&&') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, '&') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, ')') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, '+') = <shift, s68>
action(s67, ',') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, '-') = <shift, s70>
action(s67, ':') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, ';') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, '<') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, '<<') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, '<=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, '==') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, '>') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, '>=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, '>>') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, '?') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, ']') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, '^') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, '|') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, '||') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s67, '}') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s68, '!') = <shift, s343>
action(s68, '&') = <shift, s344>
action(s68, '(') = <shift, s13>
action(s68, '*') = <shift, s345>
action(s68, '+') = <shift, s346>
action(s68, '++') = <shift, s260>
action(s68, '-') = <shift, s347>
action(s68, '--') = <shift, s261>
action(s68, 'sizeof') = <shift, s262>
action(s68, '~') = <shift, s348>
action(s68, CONSTANT) = <shift, s275>
action(s68, IDENTIFIER) = <shift, s276>
action(s68, STRING_LITERAL) = <shift, s277>
action(s69, '!=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, '%') = <shift, s95>
action(s69, '&&') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, '&') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, ')') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, '*') = <shift, s96>
action(s69, '+') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, ',') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, '-') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, '/') = <shift, s97>
action(s69, ':') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, ';') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, '<') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, '<<') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, '<=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, '==') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, '>') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, '>=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, '>>') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, '?') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, ']') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, '^') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, '|') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, '||') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s69, '}') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s70, '!') = <shift, s343>
action(s70, '&') = <shift, s344>
action(s70, '(') = <shift, s13>
action(s70, '*') = <shift, s345>
action(s70, '+') = <shift, s346>
action(s70, '++') = <shift, s260>
action(s70, '-') = <shift, s347>
action(s70, '--') = <shift, s261>
action(s70, 'sizeof') = <shift, s262>
action(s70, '~') = <shift, s348>
action(s70, CONSTANT) = <shift, s275>
action(s70, IDENTIFIER) = <shift, s276>
action(s70, STRING_LITERAL) = <shift, s277>
action(s71, '!=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, '%') = <shift, s95>
action(s71, '&&') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, '&') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, ')') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, '*') = <shift, s96>
action(s71, '+') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, ',') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, '-') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, '/') = <shift, s97>
action(s71, ':') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, ';') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, '<') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, '<<') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, '<=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, '==') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, '>') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, '>=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, '>>') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, '?') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, ']') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, '^') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, '|') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, '||') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s71, '}') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s72, '!=') = <reduce, additive_expression -> multiplicative_expression>
action(s72, '%') = <shift, s95>
action(s72, '&&') = <reduce, additive_expression -> multiplicative_expression>
action(s72, '&') = <reduce, additive_expression -> multiplicative_expression>
action(s72, ')') = <reduce, additive_expression -> multiplicative_expression>
action(s72, '*') = <shift, s96>
action(s72, '+') = <reduce, additive_expression -> multiplicative_expression>
action(s72, ',') = <reduce, additive_expression -> multiplicative_expression>
action(s72, '-') = <reduce, additive_expression -> multiplicative_expression>
action(s72, '/') = <shift, s97>
action(s72, ':') = <reduce, additive_expression -> multiplicative_expression>
action(s72, ';') = <reduce, additive_expression -> multiplicative_expression>
action(s72, '<') = <reduce, additive_expression -> multiplicative_expression>
action(s72, '<<') = <reduce, additive_expression -> multiplicative_expression>
action(s72, '<=') = <reduce, additive_expression -> multiplicative_expression>
action(s72, '==') = <reduce, additive_expression -> multiplicative_expression>
action(s72, '>') = <reduce, additive_expression -> multiplicative_expression>
action(s72, '>=') = <reduce, additive_expression -> multiplicative_expression>
action(s72, '>>') = <reduce, additive_expression -> multiplicative_expression>
action(s72, '?') = <reduce, additive_expression -> multiplicative_expression>
action(s72, ']') = <reduce, additive_expression -> multiplicative_expression>
action(s72, '^') = <reduce, additive_expression -> multiplicative_expression>
action(s72, '|') = <reduce, additive_expression -> multiplicative_expression>
action(s72, '||') = <reduce, additive_expression -> multiplicative_expression>
action(s72, '}') = <reduce, additive_expression -> multiplicative_expression>
action(s73, '&&') = <reduce, exclusive_or_expression -> and_expression>
action(s73, '&') = <shift, s56>
action(s73, ')') = <reduce, exclusive_or_expression -> and_expression>
action(s73, ',') = <reduce, exclusive_or_expression -> and_expression>
action(s73, ':') = <reduce, exclusive_or_expression -> and_expression>
action(s73, ';') = <reduce, exclusive_or_expression -> and_expression>
action(s73, '?') = <reduce, exclusive_or_expression -> and_expression>
action(s73, ']') = <reduce, exclusive_or_expression -> and_expression>
action(s73, '^') = <reduce, exclusive_or_expression -> and_expression>
action(s73, '|') = <reduce, exclusive_or_expression -> and_expression>
action(s73, '||') = <reduce, exclusive_or_expression -> and_expression>
action(s73, '}') = <reduce, exclusive_or_expression -> and_expression>
action(s74, '&&') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s74, '&') = <shift, s56>
action(s74, ')') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s74, ',') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s74, ':') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s74, ';') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s74, '?') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s74, ']') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s74, '^') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s74, '|') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s74, '||') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s74, '}') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s75, '!=') = <shift, s57>
action(s75, '&&') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s75, '&') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s75, ')') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s75, ',') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s75, ':') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s75, ';') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s75, '==') = <shift, s58>
action(s75, '?') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s75, ']') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s75, '^') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s75, '|') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s75, '||') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s75, '}') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s76, '!=') = <shift, s57>
action(s76, '&&') = <reduce, and_expression -> equality_expression>
action(s76, '&') = <reduce, and_expression -> equality_expression>
action(s76, ')') = <reduce, and_expression -> equality_expression>
action(s76, ',') = <reduce, and_expression -> equality_expression>
action(s76, ':') = <reduce, and_expression -> equality_expression>
action(s76, ';') = <reduce, and_expression -> equality_expression>
action(s76, '==') = <shift, s58>
action(s76, '?') = <reduce, and_expression -> equality_expression>
action(s76, ']') = <reduce, and_expression -> equality_expression>
action(s76, '^') = <reduce, and_expression -> equality_expression>
action(s76, '|') = <reduce, and_expression -> equality_expression>
action(s76, '||') = <reduce, and_expression -> equality_expression>
action(s76, '}') = <reduce, and_expression -> equality_expression>
action(s77, ')') = <shift, s265>
action(s77, ',') = <shift, s11>
action(s78, ')') = <reduce, argument_expression_list -> argument_expression_list ',' assignment_expression>
action(s78, ',') = <reduce, argument_expression_list -> argument_expression_list ',' assignment_expression>
action(s79, ')') = <reduce, argument_expression_list -> assignment_expression>
action(s79, ',') = <reduce, argument_expression_list -> assignment_expression>
action(s80, ')') = <reduce, assignment_expression -> conditional_expression>
action(s80, ',') = <reduce, assignment_expression -> conditional_expression>
action(s80, ':') = <reduce, assignment_expression -> conditional_expression>
action(s80, ';') = <reduce, assignment_expression -> conditional_expression>
action(s80, ']') = <reduce, assignment_expression -> conditional_expression>
action(s80, '}') = <reduce, assignment_expression -> conditional_expression>
action(s81, '!=') = <reduce, cast_expression -> unary_expression>
action(s81, '%') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '%='):
<shift, [assignment_operator -> '%=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s81, '%=') = shift-reduce conflict
action(s81, '&&') = <reduce, cast_expression -> unary_expression>
action(s81, '&') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '&='):
<shift, [assignment_operator -> '&=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s81, '&=') = shift-reduce conflict
action(s81, ')') = <reduce, cast_expression -> unary_expression>
action(s81, '*') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '*='):
<shift, [assignment_operator -> '*=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s81, '*=') = shift-reduce conflict
action(s81, '+') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '+='):
<shift, [assignment_operator -> '+=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s81, '+=') = shift-reduce conflict
action(s81, ',') = <reduce, cast_expression -> unary_expression>
action(s81, '-') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '-='):
<shift, [assignment_operator -> '-=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s81, '-=') = shift-reduce conflict
action(s81, '/') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '/='):
<shift, [assignment_operator -> '/=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s81, '/=') = shift-reduce conflict
action(s81, ':') = <reduce, cast_expression -> unary_expression>
action(s81, ';') = <reduce, cast_expression -> unary_expression>
action(s81, '<') = <reduce, cast_expression -> unary_expression>
action(s81, '<<') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '<<='):
<shift, [assignment_operator -> '<<=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s81, '<<=') = shift-reduce conflict
action(s81, '<=') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '='):
<shift, [assignment_operator -> '=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s81, '=') = shift-reduce conflict
action(s81, '==') = <reduce, cast_expression -> unary_expression>
action(s81, '>') = <reduce, cast_expression -> unary_expression>
action(s81, '>=') = <reduce, cast_expression -> unary_expression>
action(s81, '>>') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '>>='):
<shift, [assignment_operator -> '>>=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s81, '>>=') = shift-reduce conflict
action(s81, '?') = <reduce, cast_expression -> unary_expression>
action(s81, ']') = <reduce, cast_expression -> unary_expression>
action(s81, '^') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '^='):
<shift, [assignment_operator -> '^=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s81, '^=') = shift-reduce conflict
action(s81, '|') = <reduce, cast_expression -> unary_expression>

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '|='):
<shift, [assignment_operator -> '|=' <*>]>
<reduce, cast_expression -> unary_expression>

action(s81, '|=') = shift-reduce conflict
action(s81, '||') = <reduce, cast_expression -> unary_expression>
action(s81, '}') = <reduce, cast_expression -> unary_expression>
action(s82, ')') = <reduce, assignment_expression -> unary_expression assignment_operator assignment_expression>
action(s82, ',') = <reduce, assignment_expression -> unary_expression assignment_operator assignment_expression>
action(s82, ':') = <reduce, assignment_expression -> unary_expression assignment_operator assignment_expression>
action(s82, ';') = <reduce, assignment_expression -> unary_expression assignment_operator assignment_expression>
action(s82, ']') = <reduce, assignment_expression -> unary_expression assignment_operator assignment_expression>
action(s82, '}') = <reduce, assignment_expression -> unary_expression assignment_operator assignment_expression>
action(s83, '!') = <reduce, assignment_operator -> '%='>
action(s83, '&') = <reduce, assignment_operator -> '%='>
action(s83, '(') = <reduce, assignment_operator -> '%='>
action(s83, '*') = <reduce, assignment_operator -> '%='>
action(s83, '+') = <reduce, assignment_operator -> '%='>
action(s83, '++') = <reduce, assignment_operator -> '%='>
action(s83, '-') = <reduce, assignment_operator -> '%='>
action(s83, '--') = <reduce, assignment_operator -> '%='>
action(s83, 'sizeof') = <reduce, assignment_operator -> '%='>
action(s83, '~') = <reduce, assignment_operator -> '%='>
action(s83, CONSTANT) = <reduce, assignment_operator -> '%='>
action(s83, IDENTIFIER) = <reduce, assignment_operator -> '%='>
action(s83, STRING_LITERAL) = <reduce, assignment_operator -> '%='>
action(s84, '!') = <reduce, assignment_operator -> '&='>
action(s84, '&') = <reduce, assignment_operator -> '&='>
action(s84, '(') = <reduce, assignment_operator -> '&='>
action(s84, '*') = <reduce, assignment_operator -> '&='>
action(s84, '+') = <reduce, assignment_operator -> '&='>
action(s84, '++') = <reduce, assignment_operator -> '&='>
action(s84, '-') = <reduce, assignment_operator -> '&='>
action(s84, '--') = <reduce, assignment_operator -> '&='>
action(s84, 'sizeof') = <reduce, assignment_operator -> '&='>
action(s84, '~') = <reduce, assignment_operator -> '&='>
action(s84, CONSTANT) = <reduce, assignment_operator -> '&='>
action(s84, IDENTIFIER) = <reduce, assignment_operator -> '&='>
action(s84, STRING_LITERAL) = <reduce, assignment_operator -> '&='>
action(s85, '!') = <reduce, assignment_operator -> '*='>
action(s85, '&') = <reduce, assignment_operator -> '*='>
action(s85, '(') = <reduce, assignment_operator -> '*='>
action(s85, '*') = <reduce, assignment_operator -> '*='>
action(s85, '+') = <reduce, assignment_operator -> '*='>
action(s85, '++') = <reduce, assignment_operator -> '*='>
action(s85, '-') = <reduce, assignment_operator -> '*='>
action(s85, '--') = <reduce, assignment_operator -> '*='>
action(s85, 'sizeof') = <reduce, assignment_operator -> '*='>
action(s85, '~') = <reduce, assignment_operator -> '*='>
action(s85, CONSTANT) = <reduce, assignment_operator -> '*='>
action(s85, IDENTIFIER) = <reduce, assignment_operator -> '*='>
action(s85, STRING_LITERAL) = <reduce, assignment_operator -> '*='>
action(s86, '!') = <reduce, assignment_operator -> '+='>
action(s86, '&') = <reduce, assignment_operator -> '+='>
action(s86, '(') = <reduce, assignment_operator -> '+='>
action(s86, '*') = <reduce, assignment_operator -> '+='>
action(s86, '+') = <reduce, assignment_operator -> '+='>
action(s86, '++') = <reduce, assignment_operator -> '+='>
action(s86, '-') = <reduce, assignment_operator -> '+='>
action(s86, '--') = <reduce, assignment_operator -> '+='>
action(s86, 'sizeof') = <reduce, assignment_operator -> '+='>
action(s86, '~') = <reduce, assignment_operator -> '+='>
action(s86, CONSTANT) = <reduce, assignment_operator -> '+='>
action(s86, IDENTIFIER) = <reduce, assignment_operator -> '+='>
action(s86, STRING_LITERAL) = <reduce, assignment_operator -> '+='>
action(s87, '!') = <reduce, assignment_operator -> '-='>
action(s87, '&') = <reduce, assignment_operator -> '-='>
action(s87, '(') = <reduce, assignment_operator -> '-='>
action(s87, '*') = <reduce, assignment_operator -> '-='>
action(s87, '+') = <reduce, assignment_operator -> '-='>
action(s87, '++') = <reduce, assignment_operator -> '-='>
action(s87, '-') = <reduce, assignment_operator -> '-='>
action(s87, '--') = <reduce, assignment_operator -> '-='>
action(s87, 'sizeof') = <reduce, assignment_operator -> '-='>
action(s87, '~') = <reduce, assignment_operator -> '-='>
action(s87, CONSTANT) = <reduce, assignment_operator -> '-='>
action(s87, IDENTIFIER) = <reduce, assignment_operator -> '-='>
action(s87, STRING_LITERAL) = <reduce, assignment_operator -> '-='>
action(s88, '!') = <reduce, assignment_operator -> '/='>
action(s88, '&') = <reduce, assignment_operator -> '/='>
action(s88, '(') = <reduce, assignment_operator -> '/='>
action(s88, '*') = <reduce, assignment_operator -> '/='>
action(s88, '+') = <reduce, assignment_operator -> '/='>
action(s88, '++') = <reduce, assignment_operator -> '/='>
action(s88, '-') = <reduce, assignment_operator -> '/='>
action(s88, '--') = <reduce, assignment_operator -> '/='>
action(s88, 'sizeof') = <reduce, assignment_operator -> '/='>
action(s88, '~') = <reduce, assignment_operator -> '/='>
action(s88, CONSTANT) = <reduce, assignment_operator -> '/='>
action(s88, IDENTIFIER) = <reduce, assignment_operator -> '/='>
action(s88, STRING_LITERAL) = <reduce, assignment_operator -> '/='>
action(s89, '!') = <reduce, assignment_operator -> '<<='>
action(s89, '&') = <reduce, assignment_operator -> '<<='>
action(s89, '(') = <reduce, assignment_operator -> '<<='>
action(s89, '*') = <reduce, assignment_operator -> '<<='>
action(s89, '+') = <reduce, assignment_operator -> '<<='>
action(s89, '++') = <reduce, assignment_operator -> '<<='>
action(s89, '-') = <reduce, assignment_operator -> '<<='>
action(s89, '--') = <reduce, assignment_operator -> '<<='>
action(s89, 'sizeof') = <reduce, assignment_operator -> '<<='>
action(s89, '~') = <reduce, assignment_operator -> '<<='>
action(s89, CONSTANT) = <reduce, assignment_operator -> '<<='>
action(s89, IDENTIFIER) = <reduce, assignment_operator -> '<<='>
action(s89, STRING_LITERAL) = <reduce, assignment_operator -> '<<='>
action(s90, '!') = <reduce, assignment_operator -> '='>
action(s90, '&') = <reduce, assignment_operator -> '='>
action(s90, '(') = <reduce, assignment_operator -> '='>
action(s90, '*') = <reduce, assignment_operator -> '='>
action(s90, '+') = <reduce, assignment_operator -> '='>
action(s90, '++') = <reduce, assignment_operator -> '='>
action(s90, '-') = <reduce, assignment_operator -> '='>
action(s90, '--') = <reduce, assignment_operator -> '='>
action(s90, 'sizeof') = <reduce, assignment_operator -> '='>
action(s90, '~') = <reduce, assignment_operator -> '='>
action(s90, CONSTANT) = <reduce, assignment_operator -> '='>
action(s90, IDENTIFIER) = <reduce, assignment_operator -> '='>
action(s90, STRING_LITERAL) = <reduce, assignment_operator -> '='>
action(s91, '!') = <reduce, assignment_operator -> '>>='>
action(s91, '&') = <reduce, assignment_operator -> '>>='>
action(s91, '(') = <reduce, assignment_operator -> '>>='>
action(s91, '*') = <reduce, assignment_operator -> '>>='>
action(s91, '+') = <reduce, assignment_operator -> '>>='>
action(s91, '++') = <reduce, assignment_operator -> '>>='>
action(s91, '-') = <reduce, assignment_operator -> '>>='>
action(s91, '--') = <reduce, assignment_operator -> '>>='>
action(s91, 'sizeof') = <reduce, assignment_operator -> '>>='>
action(s91, '~') = <reduce, assignment_operator -> '>>='>
action(s91, CONSTANT) = <reduce, assignment_operator -> '>>='>
action(s91, IDENTIFIER) = <reduce, assignment_operator -> '>>='>
action(s91, STRING_LITERAL) = <reduce, assignment_operator -> '>>='>
action(s92, '!') = <reduce, assignment_operator -> '^='>
action(s92, '&') = <reduce, assignment_operator -> '^='>
action(s92, '(') = <reduce, assignment_operator -> '^='>
action(s92, '*') = <reduce, assignment_operator -> '^='>
action(s92, '+') = <reduce, assignment_operator -> '^='>
action(s92, '++') = <reduce, assignment_operator -> '^='>
action(s92, '-') = <reduce, assignment_operator -> '^='>
action(s92, '--') = <reduce, assignment_operator -> '^='>
action(s92, 'sizeof') = <reduce, assignment_operator -> '^='>
action(s92, '~') = <reduce, assignment_operator -> '^='>
action(s92, CONSTANT) = <reduce, assignment_operator -> '^='>
action(s92, IDENTIFIER) = <reduce, assignment_operator -> '^='>
action(s92, STRING_LITERAL) = <reduce, assignment_operator -> '^='>
action(s93, '!') = <reduce, assignment_operator -> '|='>
action(s93, '&') = <reduce, assignment_operator -> '|='>
action(s93, '(') = <reduce, assignment_operator -> '|='>
action(s93, '*') = <reduce, assignment_operator -> '|='>
action(s93, '+') = <reduce, assignment_operator -> '|='>
action(s93, '++') = <reduce, assignment_operator -> '|='>
action(s93, '-') = <reduce, assignment_operator -> '|='>
action(s93, '--') = <reduce, assignment_operator -> '|='>
action(s93, 'sizeof') = <reduce, assignment_operator -> '|='>
action(s93, '~') = <reduce, assignment_operator -> '|='>
action(s93, CONSTANT) = <reduce, assignment_operator -> '|='>
action(s93, IDENTIFIER) = <reduce, assignment_operator -> '|='>
action(s93, STRING_LITERAL) = <reduce, assignment_operator -> '|='>
action(s94, '!') = <shift, s343>
action(s94, '&') = <shift, s344>
action(s94, '(') = <shift, s13>
action(s94, '*') = <shift, s345>
action(s94, '+') = <shift, s346>
action(s94, '++') = <shift, s260>
action(s94, '-') = <shift, s347>
action(s94, '--') = <shift, s261>
action(s94, 'sizeof') = <shift, s262>
action(s94, '~') = <shift, s348>
action(s94, CONSTANT) = <shift, s275>
action(s94, IDENTIFIER) = <shift, s276>
action(s94, STRING_LITERAL) = <shift, s277>
action(s95, '!') = <shift, s343>
action(s95, '&') = <shift, s344>
action(s95, '(') = <shift, s13>
action(s95, '*') = <shift, s345>
action(s95, '+') = <shift, s346>
action(s95, '++') = <shift, s260>
action(s95, '-') = <shift, s347>
action(s95, '--') = <shift, s261>
action(s95, 'sizeof') = <shift, s262>
action(s95, '~') = <shift, s348>
action(s95, CONSTANT) = <shift, s275>
action(s95, IDENTIFIER) = <shift, s276>
action(s95, STRING_LITERAL) = <shift, s277>
action(s96, '!') = <shift, s343>
action(s96, '&') = <shift, s344>
action(s96, '(') = <shift, s13>
action(s96, '*') = <shift, s345>
action(s96, '+') = <shift, s346>
action(s96, '++') = <shift, s260>
action(s96, '-') = <shift, s347>
action(s96, '--') = <shift, s261>
action(s96, 'sizeof') = <shift, s262>
action(s96, '~') = <shift, s348>
action(s96, CONSTANT) = <shift, s275>
action(s96, IDENTIFIER) = <shift, s276>
action(s96, STRING_LITERAL) = <shift, s277>
action(s97, '!') = <shift, s343>
action(s97, '&') = <shift, s344>
action(s97, '(') = <shift, s13>
action(s97, '*') = <shift, s345>
action(s97, '+') = <shift, s346>
action(s97, '++') = <shift, s260>
action(s97, '-') = <shift, s347>
action(s97, '--') = <shift, s261>
action(s97, 'sizeof') = <shift, s262>
action(s97, '~') = <shift, s348>
action(s97, CONSTANT) = <shift, s275>
action(s97, IDENTIFIER) = <shift, s276>
action(s97, STRING_LITERAL) = <shift, s277>
action(s98, '!') = <shift, s343>
action(s98, '&') = <shift, s344>
action(s98, '(') = <shift, s13>
action(s98, '*') = <shift, s345>
action(s98, '+') = <shift, s346>
action(s98, '++') = <shift, s260>
action(s98, '-') = <shift, s347>
action(s98, '--') = <shift, s261>
action(s98, 'sizeof') = <shift, s262>
action(s98, '~') = <shift, s348>
action(s98, CONSTANT) = <shift, s275>
action(s98, IDENTIFIER) = <shift, s276>
action(s98, STRING_LITERAL) = <shift, s277>
action(s99, ')') = <shift, s94>
action(s100, '!=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '%') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '%=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '&&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '&=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, ')') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '*') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '*=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '+') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '+=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, ',') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '-') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '-=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '/') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '/=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, ':') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, ';') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '<<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '<<=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '<=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '==') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '>=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '>>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '>>=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '?') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, ']') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '^') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '^=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '|') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '|=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '||') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s100, '}') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s101, '!=') = <reduce, cast_expression -> unary_expression>
action(s101, '%') = <reduce, cast_expression -> unary_expression>
action(s101, '%=') = <reduce, cast_expression -> unary_expression>
action(s101, '&&') = <reduce, cast_expression -> unary_expression>
action(s101, '&') = <reduce, cast_expression -> unary_expression>
action(s101, '&=') = <reduce, cast_expression -> unary_expression>
action(s101, ')') = <reduce, cast_expression -> unary_expression>
action(s101, '*') = <reduce, cast_expression -> unary_expression>
action(s101, '*=') = <reduce, cast_expression -> unary_expression>
action(s101, '+') = <reduce, cast_expression -> unary_expression>
action(s101, '+=') = <reduce, cast_expression -> unary_expression>
action(s101, ',') = <reduce, cast_expression -> unary_expression>
action(s101, '-') = <reduce, cast_expression -> unary_expression>
action(s101, '-=') = <reduce, cast_expression -> unary_expression>
action(s101, '/') = <reduce, cast_expression -> unary_expression>
action(s101, '/=') = <reduce, cast_expression -> unary_expression>
action(s101, ':') = <reduce, cast_expression -> unary_expression>
action(s101, ';') = <reduce, cast_expression -> unary_expression>
action(s101, '<') = <reduce, cast_expression -> unary_expression>
action(s101, '<<') = <reduce, cast_expression -> unary_expression>
action(s101, '<<=') = <reduce, cast_expression -> unary_expression>
action(s101, '<=') = <reduce, cast_expression -> unary_expression>
action(s101, '=') = <reduce, cast_expression -> unary_expression>
action(s101, '==') = <reduce, cast_expression -> unary_expression>
action(s101, '>') = <reduce, cast_expression -> unary_expression>
action(s101, '>=') = <reduce, cast_expression -> unary_expression>
action(s101, '>>') = <reduce, cast_expression -> unary_expression>
action(s101, '>>=') = <reduce, cast_expression -> unary_expression>
action(s101, '?') = <reduce, cast_expression -> unary_expression>
action(s101, ']') = <reduce, cast_expression -> unary_expression>
action(s101, '^') = <reduce, cast_expression -> unary_expression>
action(s101, '^=') = <reduce, cast_expression -> unary_expression>
action(s101, '|') = <reduce, cast_expression -> unary_expression>
action(s101, '|=') = <reduce, cast_expression -> unary_expression>
action(s101, '||') = <reduce, cast_expression -> unary_expression>
action(s101, '}') = <reduce, cast_expression -> unary_expression>
action(s102, ',') = <reduce, init_declarator -> declarator>
action(s102, ';') = <reduce, init_declarator -> declarator>
action(s102, '=') = <shift, s41>
action(s102, 'auto') = <shift, s298>
action(s102, 'char') = <shift, s325>
action(s102, 'const') = <shift, s321>
action(s102, 'double') = <shift, s326>
action(s102, 'enum') = <shift, s168>
action(s102, 'extern') = <shift, s299>
action(s102, 'float') = <shift, s327>
action(s102, 'int') = <shift, s328>
action(s102, 'long') = <shift, s329>
action(s102, 'register') = <shift, s300>
action(s102, 'short') = <shift, s330>
action(s102, 'signed') = <shift, s331>
action(s102, 'static') = <shift, s301>
action(s102, 'struct') = <shift, s312>
action(s102, 'typedef') = <shift, s302>
action(s102, 'union') = <shift, s313>
action(s102, 'unsigned') = <shift, s332>
action(s102, 'void') = <shift, s333>
action(s102, 'volatile') = <shift, s322>
action(s102, '{') = <shift, s14>
action(s102, TYPE_NAME) = <shift, s334>
action(s103, 'auto') = <shift, s298>
action(s103, 'char') = <shift, s325>
action(s103, 'const') = <shift, s321>
action(s103, 'double') = <shift, s326>
action(s103, 'enum') = <shift, s168>
action(s103, 'extern') = <shift, s299>
action(s103, 'float') = <shift, s327>
action(s103, 'int') = <shift, s328>
action(s103, 'long') = <shift, s329>
action(s103, 'register') = <shift, s300>
action(s103, 'short') = <shift, s330>
action(s103, 'signed') = <shift, s331>
action(s103, 'static') = <shift, s301>
action(s103, 'struct') = <shift, s312>
action(s103, 'typedef') = <shift, s302>
action(s103, 'union') = <shift, s313>
action(s103, 'unsigned') = <shift, s332>
action(s103, 'void') = <shift, s333>
action(s103, 'volatile') = <shift, s322>
action(s103, '{') = <shift, s14>
action(s103, TYPE_NAME) = <shift, s334>
action(s104, 'auto') = <shift, s298>
action(s104, 'char') = <shift, s325>
action(s104, 'const') = <shift, s321>
action(s104, 'double') = <shift, s326>
action(s104, 'enum') = <shift, s168>
action(s104, 'extern') = <shift, s299>
action(s104, 'float') = <shift, s327>
action(s104, 'int') = <shift, s328>
action(s104, 'long') = <shift, s329>
action(s104, 'register') = <shift, s300>
action(s104, 'short') = <shift, s330>
action(s104, 'signed') = <shift, s331>
action(s104, 'static') = <shift, s301>
action(s104, 'struct') = <shift, s312>
action(s104, 'typedef') = <shift, s302>
action(s104, 'union') = <shift, s313>
action(s104, 'unsigned') = <shift, s332>
action(s104, 'void') = <shift, s333>
action(s104, 'volatile') = <shift, s322>
action(s104, '{') = <shift, s14>
action(s104, TYPE_NAME) = <shift, s334>
action(s105, 'auto') = <shift, s298>
action(s105, 'char') = <shift, s325>
action(s105, 'const') = <shift, s321>
action(s105, 'double') = <shift, s326>
action(s105, 'enum') = <shift, s168>
action(s105, 'extern') = <shift, s299>
action(s105, 'float') = <shift, s327>
action(s105, 'int') = <shift, s328>
action(s105, 'long') = <shift, s329>
action(s105, 'register') = <shift, s300>
action(s105, 'short') = <shift, s330>
action(s105, 'signed') = <shift, s331>
action(s105, 'static') = <shift, s301>
action(s105, 'struct') = <shift, s312>
action(s105, 'typedef') = <shift, s302>
action(s105, 'union') = <shift, s313>
action(s105, 'unsigned') = <shift, s332>
action(s105, 'void') = <shift, s333>
action(s105, 'volatile') = <shift, s322>
action(s105, '{') = <shift, s14>
action(s105, TYPE_NAME) = <shift, s334>
action(s106, '!') = <reduce, compound_statement -> '{' '}'>
action(s106, '&') = <reduce, compound_statement -> '{' '}'>
action(s106, '(') = <reduce, compound_statement -> '{' '}'>
action(s106, '*') = <reduce, compound_statement -> '{' '}'>
action(s106, '+') = <reduce, compound_statement -> '{' '}'>
action(s106, '++') = <reduce, compound_statement -> '{' '}'>
action(s106, '-') = <reduce, compound_statement -> '{' '}'>
action(s106, '--') = <reduce, compound_statement -> '{' '}'>
action(s106, ';') = <reduce, compound_statement -> '{' '}'>
action(s106, 'auto') = <reduce, compound_statement -> '{' '}'>
action(s106, 'break') = <reduce, compound_statement -> '{' '}'>
action(s106, 'case') = <reduce, compound_statement -> '{' '}'>
action(s106, 'char') = <reduce, compound_statement -> '{' '}'>
action(s106, 'const') = <reduce, compound_statement -> '{' '}'>
action(s106, 'continue') = <reduce, compound_statement -> '{' '}'>
action(s106, 'default') = <reduce, compound_statement -> '{' '}'>
action(s106, 'do') = <reduce, compound_statement -> '{' '}'>
action(s106, 'double') = <reduce, compound_statement -> '{' '}'>
action(s106, 'else') = <reduce, compound_statement -> '{' '}'>
action(s106, 'enum') = <reduce, compound_statement -> '{' '}'>
action(s106, 'extern') = <reduce, compound_statement -> '{' '}'>
action(s106, 'float') = <reduce, compound_statement -> '{' '}'>
action(s106, 'for') = <reduce, compound_statement -> '{' '}'>
action(s106, 'goto') = <reduce, compound_statement -> '{' '}'>
action(s106, 'if') = <reduce, compound_statement -> '{' '}'>
action(s106, 'int') = <reduce, compound_statement -> '{' '}'>
action(s106, 'long') = <reduce, compound_statement -> '{' '}'>
action(s106, 'register') = <reduce, compound_statement -> '{' '}'>
action(s106, 'return') = <reduce, compound_statement -> '{' '}'>
action(s106, 'short') = <reduce, compound_statement -> '{' '}'>
action(s106, 'signed') = <reduce, compound_statement -> '{' '}'>
action(s106, 'sizeof') = <reduce, compound_statement -> '{' '}'>
action(s106, 'static') = <reduce, compound_statement -> '{' '}'>
action(s106, 'struct') = <reduce, compound_statement -> '{' '}'>
action(s106, 'switch') = <reduce, compound_statement -> '{' '}'>
action(s106, 'typedef') = <reduce, compound_statement -> '{' '}'>
action(s106, 'union') = <reduce, compound_statement -> '{' '}'>
action(s106, 'unsigned') = <reduce, compound_statement -> '{' '}'>
action(s106, 'void') = <reduce, compound_statement -> '{' '}'>
action(s106, 'volatile') = <reduce, compound_statement -> '{' '}'>
action(s106, 'while') = <reduce, compound_statement -> '{' '}'>
action(s106, '{') = <reduce, compound_statement -> '{' '}'>
action(s106, '}') = <reduce, compound_statement -> '{' '}'>
action(s106, '~') = <reduce, compound_statement -> '{' '}'>
action(s106, CONSTANT) = <reduce, compound_statement -> '{' '}'>
action(s106, IDENTIFIER) = <reduce, compound_statement -> '{' '}'>
action(s106, STRING_LITERAL) = <reduce, compound_statement -> '{' '}'>
action(s106, TYPE_NAME) = <reduce, compound_statement -> '{' '}'>
action(s107, '!') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, '&') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, '(') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, '*') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, '+') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, '++') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, '-') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, '--') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, ';') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'auto') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'break') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'case') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'char') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'const') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'continue') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'default') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'do') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'double') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'else') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'enum') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'extern') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'float') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'for') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'goto') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'if') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'int') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'long') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'register') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'return') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'short') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'signed') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'sizeof') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'static') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'struct') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'switch') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'typedef') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'union') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'unsigned') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'void') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'volatile') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, 'while') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, '{') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, '}') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, '~') = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, CONSTANT) = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, IDENTIFIER) = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, STRING_LITERAL) = <reduce, compound_statement -> '{' declaration_list '}'>
action(s107, TYPE_NAME) = <reduce, compound_statement -> '{' declaration_list '}'>
action(s108, '!') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, '&') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, '(') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, '*') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, '+') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, '++') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, '-') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, '--') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, ';') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'auto') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'break') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'case') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'char') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'const') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'continue') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'default') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'do') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'double') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'else') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'enum') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'extern') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'float') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'for') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'goto') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'if') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'int') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'long') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'register') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'return') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'short') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'signed') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'sizeof') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'static') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'struct') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'switch') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'typedef') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'union') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'unsigned') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'void') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'volatile') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, 'while') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, '{') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, '}') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, '~') = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, CONSTANT) = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, IDENTIFIER) = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, STRING_LITERAL) = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s108, TYPE_NAME) = <reduce, compound_statement -> '{' declaration_list statement_list '}'>
action(s109, '!') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, '&') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, '(') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, '*') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, '+') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, '++') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, '-') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, '--') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, ';') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'auto') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'break') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'case') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'char') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'const') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'continue') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'default') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'do') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'double') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'else') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'enum') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'extern') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'float') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'for') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'goto') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'if') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'int') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'long') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'register') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'return') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'short') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'signed') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'sizeof') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'static') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'struct') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'switch') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'typedef') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'union') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'unsigned') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'void') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'volatile') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, 'while') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, '{') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, '}') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, '~') = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, CONSTANT) = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, IDENTIFIER) = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, STRING_LITERAL) = <reduce, compound_statement -> '{' statement_list '}'>
action(s109, TYPE_NAME) = <reduce, compound_statement -> '{' statement_list '}'>
action(s110, ')') = <reduce, conditional_expression -> logical_or_expression>
action(s110, ',') = <reduce, conditional_expression -> logical_or_expression>
action(s110, ':') = <reduce, conditional_expression -> logical_or_expression>
action(s110, ';') = <reduce, conditional_expression -> logical_or_expression>
action(s110, '?') = <shift, s28>
action(s110, ']') = <reduce, conditional_expression -> logical_or_expression>
action(s110, '||') = <shift, s52>
action(s110, '}') = <reduce, conditional_expression -> logical_or_expression>
action(s111, ',') = <shift, s40>
action(s111, ':') = <shift, s44>
action(s112, ')') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s112, ',') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s112, ':') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s112, ';') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s112, ']') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s112, '}') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s113, ',') = <reduce, constant_expression -> conditional_expression>
action(s113, ':') = <reduce, constant_expression -> conditional_expression>
action(s113, ';') = <reduce, constant_expression -> conditional_expression>
action(s113, ']') = <reduce, constant_expression -> conditional_expression>
action(s113, '}') = <reduce, constant_expression -> conditional_expression>
action(s114, '(') = <shift, s130>
action(s114, '*') = <shift, s256>
action(s114, ';') = <shift, s116>
action(s114, IDENTIFIER) = <shift, s153>
action(s115, '(') = <shift, s130>
action(s115, '*') = <shift, s256>
action(s115, ';') = <shift, s116>
action(s115, IDENTIFIER) = <shift, s153>
action(s116, '!') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, '&') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, '(') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, '*') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, '+') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, '++') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, '-') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, '--') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, ';') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'auto') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'break') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'case') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'char') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'const') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'continue') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'default') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'do') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'double') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'enum') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'extern') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'float') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'for') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'goto') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'if') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'int') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'long') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'register') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'return') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'short') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'signed') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'sizeof') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'static') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'struct') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'switch') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'typedef') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'union') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'unsigned') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'void') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'volatile') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, 'while') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, '{') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, '}') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, '~') = <reduce, declaration -> declaration_specifiers ';'>
action(s116, CONSTANT) = <reduce, declaration -> declaration_specifiers ';'>
action(s116, IDENTIFIER) = <reduce, declaration -> declaration_specifiers ';'>
action(s116, STRING_LITERAL) = <reduce, declaration -> declaration_specifiers ';'>
action(s116, TYPE_NAME) = <reduce, declaration -> declaration_specifiers ';'>
action(s117, ',') = <shift, s131>
action(s117, ';') = <shift, s118>
action(s118, '!') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, '&') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, '(') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, '*') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, '+') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, '++') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, '-') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, '--') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, ';') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'auto') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'break') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'case') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'char') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'const') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'continue') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'default') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'do') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'double') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'enum') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'extern') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'float') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'for') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'goto') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'if') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'int') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'long') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'register') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'return') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'short') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'signed') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'sizeof') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'static') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'struct') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'switch') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'typedef') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'union') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'unsigned') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'void') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'volatile') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, 'while') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, '{') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, '}') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, '~') = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, CONSTANT) = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, IDENTIFIER) = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, STRING_LITERAL) = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s118, TYPE_NAME) = <reduce, declaration -> declaration_specifiers init_declarator_list ';'>
action(s119, '!') = <reduce, declaration_list -> declaration>
action(s119, '&') = <reduce, declaration_list -> declaration>
action(s119, '(') = <reduce, declaration_list -> declaration>
action(s119, '*') = <reduce, declaration_list -> declaration>
action(s119, '+') = <reduce, declaration_list -> declaration>
action(s119, '++') = <reduce, declaration_list -> declaration>
action(s119, '-') = <reduce, declaration_list -> declaration>
action(s119, '--') = <reduce, declaration_list -> declaration>
action(s119, ';') = <reduce, declaration_list -> declaration>
action(s119, 'auto') = <reduce, declaration_list -> declaration>
action(s119, 'break') = <reduce, declaration_list -> declaration>
action(s119, 'case') = <reduce, declaration_list -> declaration>
action(s119, 'char') = <reduce, declaration_list -> declaration>
action(s119, 'const') = <reduce, declaration_list -> declaration>
action(s119, 'continue') = <reduce, declaration_list -> declaration>
action(s119, 'default') = <reduce, declaration_list -> declaration>
action(s119, 'do') = <reduce, declaration_list -> declaration>
action(s119, 'double') = <reduce, declaration_list -> declaration>
action(s119, 'enum') = <reduce, declaration_list -> declaration>
action(s119, 'extern') = <reduce, declaration_list -> declaration>
action(s119, 'float') = <reduce, declaration_list -> declaration>
action(s119, 'for') = <reduce, declaration_list -> declaration>
action(s119, 'goto') = <reduce, declaration_list -> declaration>
action(s119, 'if') = <reduce, declaration_list -> declaration>
action(s119, 'int') = <reduce, declaration_list -> declaration>
action(s119, 'long') = <reduce, declaration_list -> declaration>
action(s119, 'register') = <reduce, declaration_list -> declaration>
action(s119, 'return') = <reduce, declaration_list -> declaration>
action(s119, 'short') = <reduce, declaration_list -> declaration>
action(s119, 'signed') = <reduce, declaration_list -> declaration>
action(s119, 'sizeof') = <reduce, declaration_list -> declaration>
action(s119, 'static') = <reduce, declaration_list -> declaration>
action(s119, 'struct') = <reduce, declaration_list -> declaration>
action(s119, 'switch') = <reduce, declaration_list -> declaration>
action(s119, 'typedef') = <reduce, declaration_list -> declaration>
action(s119, 'union') = <reduce, declaration_list -> declaration>
action(s119, 'unsigned') = <reduce, declaration_list -> declaration>
action(s119, 'void') = <reduce, declaration_list -> declaration>
action(s119, 'volatile') = <reduce, declaration_list -> declaration>
action(s119, 'while') = <reduce, declaration_list -> declaration>
action(s119, '{') = <reduce, declaration_list -> declaration>
action(s119, '}') = <reduce, declaration_list -> declaration>
action(s119, '~') = <reduce, declaration_list -> declaration>
action(s119, CONSTANT) = <reduce, declaration_list -> declaration>
action(s119, IDENTIFIER) = <reduce, declaration_list -> declaration>
action(s119, STRING_LITERAL) = <reduce, declaration_list -> declaration>
action(s119, TYPE_NAME) = <reduce, declaration_list -> declaration>
action(s120, '!') = <reduce, declaration_list -> declaration_list declaration>
action(s120, '&') = <reduce, declaration_list -> declaration_list declaration>
action(s120, '(') = <reduce, declaration_list -> declaration_list declaration>
action(s120, '*') = <reduce, declaration_list -> declaration_list declaration>
action(s120, '+') = <reduce, declaration_list -> declaration_list declaration>
action(s120, '++') = <reduce, declaration_list -> declaration_list declaration>
action(s120, '-') = <reduce, declaration_list -> declaration_list declaration>
action(s120, '--') = <reduce, declaration_list -> declaration_list declaration>
action(s120, ';') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'auto') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'break') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'case') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'char') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'const') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'continue') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'default') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'do') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'double') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'enum') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'extern') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'float') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'for') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'goto') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'if') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'int') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'long') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'register') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'return') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'short') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'signed') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'sizeof') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'static') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'struct') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'switch') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'typedef') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'union') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'unsigned') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'void') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'volatile') = <reduce, declaration_list -> declaration_list declaration>
action(s120, 'while') = <reduce, declaration_list -> declaration_list declaration>
action(s120, '{') = <reduce, declaration_list -> declaration_list declaration>
action(s120, '}') = <reduce, declaration_list -> declaration_list declaration>
action(s120, '~') = <reduce, declaration_list -> declaration_list declaration>
action(s120, CONSTANT) = <reduce, declaration_list -> declaration_list declaration>
action(s120, IDENTIFIER) = <reduce, declaration_list -> declaration_list declaration>
action(s120, STRING_LITERAL) = <reduce, declaration_list -> declaration_list declaration>
action(s120, TYPE_NAME) = <reduce, declaration_list -> declaration_list declaration>
action(s121, '(') = <reduce, declaration_specifiers -> storage_class_specifier>
action(s121, ')') = <reduce, declaration_specifiers -> storage_class_specifier>
action(s121, '*') = <reduce, declaration_specifiers -> storage_class_specifier>
action(s121, ',') = <reduce, declaration_specifiers -> storage_class_specifier>
action(s121, ';') = <reduce, declaration_specifiers -> storage_class_specifier>
action(s121, '[') = <reduce, declaration_specifiers -> storage_class_specifier>
action(s121, 'auto') = <shift, s298>
action(s121, 'char') = <shift, s325>
action(s121, 'const') = <shift, s321>
action(s121, 'double') = <shift, s326>
action(s121, 'enum') = <shift, s168>
action(s121, 'extern') = <shift, s299>
action(s121, 'float') = <shift, s327>
action(s121, 'int') = <shift, s328>
action(s121, 'long') = <shift, s329>
action(s121, 'register') = <shift, s300>
action(s121, 'short') = <shift, s330>
action(s121, 'signed') = <shift, s331>
action(s121, 'static') = <shift, s301>
action(s121, 'struct') = <shift, s312>
action(s121, 'typedef') = <shift, s302>
action(s121, 'union') = <shift, s313>
action(s121, 'unsigned') = <shift, s332>
action(s121, 'void') = <shift, s333>
action(s121, 'volatile') = <shift, s322>
action(s121, IDENTIFIER) = <reduce, declaration_specifiers -> storage_class_specifier>
action(s121, TYPE_NAME) = <shift, s334>
action(s122, '(') = <reduce, declaration_specifiers -> type_qualifier>
action(s122, ')') = <reduce, declaration_specifiers -> type_qualifier>
action(s122, '*') = <reduce, declaration_specifiers -> type_qualifier>
action(s122, ',') = <reduce, declaration_specifiers -> type_qualifier>
action(s122, ';') = <reduce, declaration_specifiers -> type_qualifier>
action(s122, '[') = <reduce, declaration_specifiers -> type_qualifier>
action(s122, 'auto') = <shift, s298>
action(s122, 'char') = <shift, s325>
action(s122, 'const') = <shift, s321>
action(s122, 'double') = <shift, s326>
action(s122, 'enum') = <shift, s168>
action(s122, 'extern') = <shift, s299>
action(s122, 'float') = <shift, s327>
action(s122, 'int') = <shift, s328>
action(s122, 'long') = <shift, s329>
action(s122, 'register') = <shift, s300>
action(s122, 'short') = <shift, s330>
action(s122, 'signed') = <shift, s331>
action(s122, 'static') = <shift, s301>
action(s122, 'struct') = <shift, s312>
action(s122, 'typedef') = <shift, s302>
action(s122, 'union') = <shift, s313>
action(s122, 'unsigned') = <shift, s332>
action(s122, 'void') = <shift, s333>
action(s122, 'volatile') = <shift, s322>
action(s122, IDENTIFIER) = <reduce, declaration_specifiers -> type_qualifier>
action(s122, TYPE_NAME) = <shift, s334>
action(s123, '(') = <reduce, declaration_specifiers -> type_specifier>
action(s123, ')') = <reduce, declaration_specifiers -> type_specifier>
action(s123, '*') = <reduce, declaration_specifiers -> type_specifier>
action(s123, ',') = <reduce, declaration_specifiers -> type_specifier>
action(s123, ';') = <reduce, declaration_specifiers -> type_specifier>
action(s123, '[') = <reduce, declaration_specifiers -> type_specifier>
action(s123, 'auto') = <shift, s298>
action(s123, 'char') = <shift, s325>
action(s123, 'const') = <shift, s321>
action(s123, 'double') = <shift, s326>
action(s123, 'enum') = <shift, s168>
action(s123, 'extern') = <shift, s299>
action(s123, 'float') = <shift, s327>
action(s123, 'int') = <shift, s328>
action(s123, 'long') = <shift, s329>
action(s123, 'register') = <shift, s300>
action(s123, 'short') = <shift, s330>
action(s123, 'signed') = <shift, s331>
action(s123, 'static') = <shift, s301>
action(s123, 'struct') = <shift, s312>
action(s123, 'typedef') = <shift, s302>
action(s123, 'union') = <shift, s313>
action(s123, 'unsigned') = <shift, s332>
action(s123, 'void') = <shift, s333>
action(s123, 'volatile') = <shift, s322>
action(s123, IDENTIFIER) = <reduce, declaration_specifiers -> type_specifier>
action(s123, TYPE_NAME) = <shift, s334>
action(s124, ')') = <shift, s145>
action(s124, 'auto') = <shift, s298>
action(s124, 'char') = <shift, s325>
action(s124, 'const') = <shift, s321>
action(s124, 'double') = <shift, s326>
action(s124, 'enum') = <shift, s168>
action(s124, 'extern') = <shift, s299>
action(s124, 'float') = <shift, s327>
action(s124, 'int') = <shift, s328>
action(s124, 'long') = <shift, s329>
action(s124, 'register') = <shift, s300>
action(s124, 'short') = <shift, s330>
action(s124, 'signed') = <shift, s331>
action(s124, 'static') = <shift, s301>
action(s124, 'struct') = <shift, s312>
action(s124, 'typedef') = <shift, s302>
action(s124, 'union') = <shift, s313>
action(s124, 'unsigned') = <shift, s332>
action(s124, 'void') = <shift, s333>
action(s124, 'volatile') = <shift, s322>
action(s124, TYPE_NAME) = <shift, s334>
action(s125, ')') = <shift, s154>
action(s125, 'auto') = <shift, s298>
action(s125, 'char') = <shift, s325>
action(s125, 'const') = <shift, s321>
action(s125, 'double') = <shift, s326>
action(s125, 'enum') = <shift, s168>
action(s125, 'extern') = <shift, s299>
action(s125, 'float') = <shift, s327>
action(s125, 'int') = <shift, s328>
action(s125, 'long') = <shift, s329>
action(s125, 'register') = <shift, s300>
action(s125, 'short') = <shift, s330>
action(s125, 'signed') = <shift, s331>
action(s125, 'static') = <shift, s301>
action(s125, 'struct') = <shift, s312>
action(s125, 'typedef') = <shift, s302>
action(s125, 'union') = <shift, s313>
action(s125, 'unsigned') = <shift, s332>
action(s125, 'void') = <shift, s333>
action(s125, 'volatile') = <shift, s322>
action(s125, IDENTIFIER) = <shift, s205>
action(s125, TYPE_NAME) = <shift, s334>
action(s126, '...') = <shift, s255>
action(s126, 'auto') = <shift, s298>
action(s126, 'char') = <shift, s325>
action(s126, 'const') = <shift, s321>
action(s126, 'double') = <shift, s326>
action(s126, 'enum') = <shift, s168>
action(s126, 'extern') = <shift, s299>
action(s126, 'float') = <shift, s327>
action(s126, 'int') = <shift, s328>
action(s126, 'long') = <shift, s329>
action(s126, 'register') = <shift, s300>
action(s126, 'short') = <shift, s330>
action(s126, 'signed') = <shift, s331>
action(s126, 'static') = <shift, s301>
action(s126, 'struct') = <shift, s312>
action(s126, 'typedef') = <shift, s302>
action(s126, 'union') = <shift, s313>
action(s126, 'unsigned') = <shift, s332>
action(s126, 'void') = <shift, s333>
action(s126, 'volatile') = <shift, s322>
action(s126, TYPE_NAME) = <shift, s334>
action(s127, '(') = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s127, ')') = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s127, '*') = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s127, ',') = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s127, ';') = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s127, '[') = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s127, IDENTIFIER) = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s128, '(') = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s128, ')') = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s128, '*') = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s128, ',') = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s128, ';') = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s128, '[') = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s128, IDENTIFIER) = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s129, '(') = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s129, ')') = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s129, '*') = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s129, ',') = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s129, ';') = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s129, '[') = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s129, IDENTIFIER) = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s130, '(') = <shift, s130>
action(s130, '*') = <shift, s256>
action(s130, IDENTIFIER) = <shift, s153>
action(s131, '(') = <shift, s130>
action(s131, '*') = <shift, s256>
action(s131, IDENTIFIER) = <shift, s153>
action(s132, '(') = <shift, s130>
action(s132, '*') = <shift, s256>
action(s132, ':') = <shift, s50>
action(s132, IDENTIFIER) = <shift, s153>
action(s133, '(') = <shift, s130>
action(s133, '*') = <shift, s256>
action(s133, ':') = <shift, s50>
action(s133, IDENTIFIER) = <shift, s153>
action(s134, '(') = <shift, s125>
action(s134, ')') = <reduce, declarator -> direct_declarator>
action(s134, ',') = <reduce, declarator -> direct_declarator>
action(s134, ':') = <reduce, declarator -> direct_declarator>
action(s134, ';') = <reduce, declarator -> direct_declarator>
action(s134, '=') = <reduce, declarator -> direct_declarator>
action(s134, '[') = <shift, s47>
action(s134, 'auto') = <reduce, declarator -> direct_declarator>
action(s134, 'char') = <reduce, declarator -> direct_declarator>
action(s134, 'const') = <reduce, declarator -> direct_declarator>
action(s134, 'double') = <reduce, declarator -> direct_declarator>
action(s134, 'enum') = <reduce, declarator -> direct_declarator>
action(s134, 'extern') = <reduce, declarator -> direct_declarator>
action(s134, 'float') = <reduce, declarator -> direct_declarator>
action(s134, 'int') = <reduce, declarator -> direct_declarator>
action(s134, 'long') = <reduce, declarator -> direct_declarator>
action(s134, 'register') = <reduce, declarator -> direct_declarator>
action(s134, 'short') = <reduce, declarator -> direct_declarator>
action(s134, 'signed') = <reduce, declarator -> direct_declarator>
action(s134, 'static') = <reduce, declarator -> direct_declarator>
action(s134, 'struct') = <reduce, declarator -> direct_declarator>
action(s134, 'typedef') = <reduce, declarator -> direct_declarator>
action(s134, 'union') = <reduce, declarator -> direct_declarator>
action(s134, 'unsigned') = <reduce, declarator -> direct_declarator>
action(s134, 'void') = <reduce, declarator -> direct_declarator>
action(s134, 'volatile') = <reduce, declarator -> direct_declarator>
action(s134, '{') = <reduce, declarator -> direct_declarator>
action(s134, TYPE_NAME) = <reduce, declarator -> direct_declarator>
action(s135, '(') = <shift, s130>
action(s135, IDENTIFIER) = <shift, s153>
action(s136, '(') = <shift, s125>
action(s136, ')') = <reduce, declarator -> pointer direct_declarator>
action(s136, ',') = <reduce, declarator -> pointer direct_declarator>
action(s136, ':') = <reduce, declarator -> pointer direct_declarator>
action(s136, ';') = <reduce, declarator -> pointer direct_declarator>
action(s136, '=') = <reduce, declarator -> pointer direct_declarator>
action(s136, '[') = <shift, s47>
action(s136, 'auto') = <reduce, declarator -> pointer direct_declarator>
action(s136, 'char') = <reduce, declarator -> pointer direct_declarator>
action(s136, 'const') = <reduce, declarator -> pointer direct_declarator>
action(s136, 'double') = <reduce, declarator -> pointer direct_declarator>
action(s136, 'enum') = <reduce, declarator -> pointer direct_declarator>
action(s136, 'extern') = <reduce, declarator -> pointer direct_declarator>
action(s136, 'float') = <reduce, declarator -> pointer direct_declarator>
action(s136, 'int') = <reduce, declarator -> pointer direct_declarator>
action(s136, 'long') = <reduce, declarator -> pointer direct_declarator>
action(s136, 'register') = <reduce, declarator -> pointer direct_declarator>
action(s136, 'short') = <reduce, declarator -> pointer direct_declarator>
action(s136, 'signed') = <reduce, declarator -> pointer direct_declarator>
action(s136, 'static') = <reduce, declarator -> pointer direct_declarator>
action(s136, 'struct') = <reduce, declarator -> pointer direct_declarator>
action(s136, 'typedef') = <reduce, declarator -> pointer direct_declarator>
action(s136, 'union') = <reduce, declarator -> pointer direct_declarator>
action(s136, 'unsigned') = <reduce, declarator -> pointer direct_declarator>
action(s136, 'void') = <reduce, declarator -> pointer direct_declarator>
action(s136, 'volatile') = <reduce, declarator -> pointer direct_declarator>
action(s136, '{') = <reduce, declarator -> pointer direct_declarator>
action(s136, TYPE_NAME) = <reduce, declarator -> pointer direct_declarator>
action(s137, '(') = <reduce, direct_abstract_declarator -> '(' ')'>
action(s137, ')') = <reduce, direct_abstract_declarator -> '(' ')'>
action(s137, ',') = <reduce, direct_abstract_declarator -> '(' ')'>
action(s137, '[') = <reduce, direct_abstract_declarator -> '(' ')'>
action(s138, ')') = <shift, s139>
action(s139, '(') = <reduce, direct_abstract_declarator -> '(' abstract_declarator ')'>
action(s139, ')') = <reduce, direct_abstract_declarator -> '(' abstract_declarator ')'>
action(s139, ',') = <reduce, direct_abstract_declarator -> '(' abstract_declarator ')'>
action(s139, '[') = <reduce, direct_abstract_declarator -> '(' abstract_declarator ')'>
action(s140, ')') = <shift, s141>
action(s141, '(') = <reduce, direct_abstract_declarator -> '(' parameter_type_list ')'>
action(s141, ')') = <reduce, direct_abstract_declarator -> '(' parameter_type_list ')'>
action(s141, ',') = <reduce, direct_abstract_declarator -> '(' parameter_type_list ')'>
action(s141, '[') = <reduce, direct_abstract_declarator -> '(' parameter_type_list ')'>
action(s142, '(') = <reduce, direct_abstract_declarator -> '[' ']'>
action(s142, ')') = <reduce, direct_abstract_declarator -> '[' ']'>
action(s142, ',') = <reduce, direct_abstract_declarator -> '[' ']'>
action(s142, '[') = <reduce, direct_abstract_declarator -> '[' ']'>
action(s143, ']') = <shift, s144>
action(s144, '(') = <reduce, direct_abstract_declarator -> '[' constant_expression ']'>
action(s144, ')') = <reduce, direct_abstract_declarator -> '[' constant_expression ']'>
action(s144, ',') = <reduce, direct_abstract_declarator -> '[' constant_expression ']'>
action(s144, '[') = <reduce, direct_abstract_declarator -> '[' constant_expression ']'>
action(s145, '(') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' ')'>
action(s145, ')') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' ')'>
action(s145, ',') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' ')'>
action(s145, '[') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' ')'>
action(s146, ')') = <shift, s147>
action(s147, '(') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'>
action(s147, ')') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'>
action(s147, ',') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'>
action(s147, '[') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'>
action(s148, '(') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' ']'>
action(s148, ')') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' ']'>
action(s148, ',') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' ']'>
action(s148, '[') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' ']'>
action(s149, ']') = <shift, s150>
action(s150, '(') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']'>
action(s150, ')') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']'>
action(s150, ',') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']'>
action(s150, '[') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']'>
action(s151, ')') = <shift, s152>
action(s152, '(') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, ')') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, ',') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, ':') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, ';') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, '=') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, '[') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'auto') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'char') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'const') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'double') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'enum') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'extern') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'float') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'int') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'long') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'register') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'short') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'signed') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'static') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'struct') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'typedef') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'union') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'unsigned') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'void') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, 'volatile') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, '{') = <reduce, direct_declarator -> '(' declarator ')'>
action(s152, TYPE_NAME) = <reduce, direct_declarator -> '(' declarator ')'>
action(s153, '(') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, ')') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, ',') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, ':') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, ';') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, '=') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, '[') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'auto') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'char') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'const') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'double') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'enum') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'extern') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'float') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'int') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'long') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'register') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'short') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'signed') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'static') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'struct') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'typedef') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'union') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'unsigned') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'void') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, 'volatile') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, '{') = <reduce, direct_declarator -> IDENTIFIER>
action(s153, TYPE_NAME) = <reduce, direct_declarator -> IDENTIFIER>
action(s154, '(') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, ')') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, ',') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, ':') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, ';') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, '=') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, '[') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'auto') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'char') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'const') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'double') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'enum') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'extern') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'float') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'int') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'long') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'register') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'short') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'signed') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'static') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'struct') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'typedef') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'union') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'unsigned') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'void') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, 'volatile') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, '{') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s154, TYPE_NAME) = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s155, ')') = <shift, s156>
action(s155, ',') = <shift, s206>
action(s156, '(') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, ')') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, ',') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, ':') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, ';') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, '=') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, '[') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'auto') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'char') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'const') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'double') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'enum') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'extern') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'float') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'int') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'long') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'register') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'short') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'signed') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'static') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'struct') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'typedef') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'union') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'unsigned') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'void') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, 'volatile') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, '{') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s156, TYPE_NAME) = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s157, ')') = <shift, s158>
action(s158, '(') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, ')') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, ',') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, ':') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, ';') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, '=') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, '[') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'auto') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'char') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'const') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'double') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'enum') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'extern') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'float') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'int') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'long') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'register') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'short') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'signed') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'static') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'struct') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'typedef') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'union') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'unsigned') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'void') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, 'volatile') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, '{') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s158, TYPE_NAME) = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s159, '(') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, ')') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, ',') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, ':') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, ';') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, '=') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, '[') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'auto') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'char') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'const') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'double') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'enum') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'extern') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'float') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'int') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'long') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'register') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'short') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'signed') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'static') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'struct') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'typedef') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'union') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'unsigned') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'void') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, 'volatile') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, '{') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s159, TYPE_NAME) = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s160, ']') = <shift, s161>
action(s161, '(') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, ')') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, ',') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, ':') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, ';') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, '=') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, '[') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'auto') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'char') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'const') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'double') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'enum') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'extern') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'float') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'int') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'long') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'register') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'short') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'signed') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'static') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'struct') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'typedef') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'union') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'unsigned') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'void') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, 'volatile') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, '{') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s161, TYPE_NAME) = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s162, '(') = <reduce, specifier_qualifier_list -> type_qualifier>
action(s162, ')') = <reduce, specifier_qualifier_list -> type_qualifier>
action(s162, '*') = <reduce, specifier_qualifier_list -> type_qualifier>
action(s162, ':') = <reduce, specifier_qualifier_list -> type_qualifier>
action(s162, '[') = <reduce, specifier_qualifier_list -> type_qualifier>
action(s162, 'char') = <shift, s325>
action(s162, 'const') = <shift, s321>
action(s162, 'double') = <shift, s326>
action(s162, 'enum') = <shift, s168>
action(s162, 'float') = <shift, s327>
action(s162, 'int') = <shift, s328>
action(s162, 'long') = <shift, s329>
action(s162, 'short') = <shift, s330>
action(s162, 'signed') = <shift, s331>
action(s162, 'struct') = <shift, s312>
action(s162, 'union') = <shift, s313>
action(s162, 'unsigned') = <shift, s332>
action(s162, 'void') = <shift, s333>
action(s162, 'volatile') = <shift, s322>
action(s162, IDENTIFIER) = <reduce, specifier_qualifier_list -> type_qualifier>
action(s162, TYPE_NAME) = <shift, s334>
action(s163, '(') = <reduce, specifier_qualifier_list -> type_specifier>
action(s163, ')') = <reduce, specifier_qualifier_list -> type_specifier>
action(s163, '*') = <reduce, specifier_qualifier_list -> type_specifier>
action(s163, ':') = <reduce, specifier_qualifier_list -> type_specifier>
action(s163, '[') = <reduce, specifier_qualifier_list -> type_specifier>
action(s163, 'char') = <shift, s325>
action(s163, 'const') = <shift, s321>
action(s163, 'double') = <shift, s326>
action(s163, 'enum') = <shift, s168>
action(s163, 'float') = <shift, s327>
action(s163, 'int') = <shift, s328>
action(s163, 'long') = <shift, s329>
action(s163, 'short') = <shift, s330>
action(s163, 'signed') = <shift, s331>
action(s163, 'struct') = <shift, s312>
action(s163, 'union') = <shift, s313>
action(s163, 'unsigned') = <shift, s332>
action(s163, 'void') = <shift, s333>
action(s163, 'volatile') = <shift, s322>
action(s163, IDENTIFIER) = <reduce, specifier_qualifier_list -> type_specifier>
action(s163, TYPE_NAME) = <shift, s334>
action(s164, 'char') = <shift, s325>
action(s164, 'const') = <shift, s321>
action(s164, 'double') = <shift, s326>
action(s164, 'enum') = <shift, s168>
action(s164, 'float') = <shift, s327>
action(s164, 'int') = <shift, s328>
action(s164, 'long') = <shift, s329>
action(s164, 'short') = <shift, s330>
action(s164, 'signed') = <shift, s331>
action(s164, 'struct') = <shift, s312>
action(s164, 'union') = <shift, s313>
action(s164, 'unsigned') = <shift, s332>
action(s164, 'void') = <shift, s333>
action(s164, 'volatile') = <shift, s322>
action(s164, TYPE_NAME) = <shift, s334>
action(s165, 'char') = <shift, s325>
action(s165, 'const') = <shift, s321>
action(s165, 'double') = <shift, s326>
action(s165, 'enum') = <shift, s168>
action(s165, 'float') = <shift, s327>
action(s165, 'int') = <shift, s328>
action(s165, 'long') = <shift, s329>
action(s165, 'short') = <shift, s330>
action(s165, 'signed') = <shift, s331>
action(s165, 'struct') = <shift, s312>
action(s165, 'union') = <shift, s313>
action(s165, 'unsigned') = <shift, s332>
action(s165, 'void') = <shift, s333>
action(s165, 'volatile') = <shift, s322>
action(s165, TYPE_NAME) = <shift, s334>
action(s166, 'char') = <shift, s325>
action(s166, 'const') = <shift, s321>
action(s166, 'double') = <shift, s326>
action(s166, 'enum') = <shift, s168>
action(s166, 'float') = <shift, s327>
action(s166, 'int') = <shift, s328>
action(s166, 'long') = <shift, s329>
action(s166, 'short') = <shift, s330>
action(s166, 'signed') = <shift, s331>
action(s166, 'struct') = <shift, s312>
action(s166, 'union') = <shift, s313>
action(s166, 'unsigned') = <shift, s332>
action(s166, 'void') = <shift, s333>
action(s166, 'volatile') = <shift, s322>
action(s166, '}') = <shift, s315>
action(s166, TYPE_NAME) = <shift, s334>
action(s167, 'char') = <shift, s325>
action(s167, 'const') = <shift, s321>
action(s167, 'double') = <shift, s326>
action(s167, 'enum') = <shift, s168>
action(s167, 'float') = <shift, s327>
action(s167, 'int') = <shift, s328>
action(s167, 'long') = <shift, s329>
action(s167, 'short') = <shift, s330>
action(s167, 'signed') = <shift, s331>
action(s167, 'struct') = <shift, s312>
action(s167, 'union') = <shift, s313>
action(s167, 'unsigned') = <shift, s332>
action(s167, 'void') = <shift, s333>
action(s167, 'volatile') = <shift, s322>
action(s167, '}') = <shift, s317>
action(s167, TYPE_NAME) = <shift, s334>
action(s168, '{') = <shift, s169>
action(s168, IDENTIFIER) = <shift, s172>
action(s169, IDENTIFIER) = <shift, s177>
action(s170, ',') = <shift, s176>
action(s170, '}') = <shift, s171>
action(s171, '(') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, ')') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, '*') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, ',') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, ':') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, ';') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, '[') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'auto') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'char') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'const') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'double') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'enum') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'extern') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'float') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'int') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'long') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'register') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'short') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'signed') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'static') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'struct') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'typedef') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'union') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'unsigned') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'void') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, 'volatile') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, IDENTIFIER) = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s171, TYPE_NAME) = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s172, '(') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, ')') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, '*') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, ',') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, ':') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, ';') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, '[') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'auto') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'char') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'const') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'double') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'enum') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'extern') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'float') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'int') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'long') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'register') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'short') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'signed') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'static') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'struct') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'typedef') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'union') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'unsigned') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'void') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, 'volatile') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, '{') = <shift, s173>
action(s172, IDENTIFIER) = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s172, TYPE_NAME) = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s173, IDENTIFIER) = <shift, s177>
action(s174, ',') = <shift, s176>
action(s174, '}') = <shift, s175>
action(s175, '(') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, ')') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, '*') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, ',') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, ':') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, ';') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, '[') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'auto') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'char') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'const') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'double') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'enum') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'extern') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'float') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'int') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'long') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'register') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'short') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'signed') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'static') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'struct') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'typedef') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'union') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'unsigned') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'void') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, 'volatile') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, IDENTIFIER) = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s175, TYPE_NAME) = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s176, IDENTIFIER) = <shift, s177>
action(s177, ',') = <reduce, enumerator -> IDENTIFIER>
action(s177, '=') = <shift, s48>
action(s177, '}') = <reduce, enumerator -> IDENTIFIER>
action(s178, ',') = <reduce, enumerator -> IDENTIFIER '=' constant_expression>
action(s178, '}') = <reduce, enumerator -> IDENTIFIER '=' constant_expression>
action(s179, ',') = <reduce, enumerator_list -> enumerator>
action(s179, '}') = <reduce, enumerator_list -> enumerator>
action(s180, ',') = <reduce, enumerator_list -> enumerator_list ',' enumerator>
action(s180, '}') = <reduce, enumerator_list -> enumerator_list ',' enumerator>
action(s181, '!=') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s181, '&&') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s181, '&') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s181, ')') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s181, ',') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s181, ':') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s181, ';') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s181, '<') = <shift, s59>
action(s181, '<=') = <shift, s60>
action(s181, '==') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s181, '>') = <shift, s61>
action(s181, '>=') = <shift, s62>
action(s181, '?') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s181, ']') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s181, '^') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s181, '|') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s181, '||') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s181, '}') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s182, '!=') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s182, '&&') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s182, '&') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s182, ')') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s182, ',') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s182, ':') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s182, ';') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s182, '<') = <shift, s59>
action(s182, '<=') = <shift, s60>
action(s182, '==') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s182, '>') = <shift, s61>
action(s182, '>=') = <shift, s62>
action(s182, '?') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s182, ']') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s182, '^') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s182, '|') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s182, '||') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s182, '}') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s183, '!=') = <reduce, equality_expression -> relational_expression>
action(s183, '&&') = <reduce, equality_expression -> relational_expression>
action(s183, '&') = <reduce, equality_expression -> relational_expression>
action(s183, ')') = <reduce, equality_expression -> relational_expression>
action(s183, ',') = <reduce, equality_expression -> relational_expression>
action(s183, ':') = <reduce, equality_expression -> relational_expression>
action(s183, ';') = <reduce, equality_expression -> relational_expression>
action(s183, '<') = <shift, s59>
action(s183, '<=') = <shift, s60>
action(s183, '==') = <reduce, equality_expression -> relational_expression>
action(s183, '>') = <shift, s61>
action(s183, '>=') = <shift, s62>
action(s183, '?') = <reduce, equality_expression -> relational_expression>
action(s183, ']') = <reduce, equality_expression -> relational_expression>
action(s183, '^') = <reduce, equality_expression -> relational_expression>
action(s183, '|') = <reduce, equality_expression -> relational_expression>
action(s183, '||') = <reduce, equality_expression -> relational_expression>
action(s183, '}') = <reduce, equality_expression -> relational_expression>
action(s184, '&&') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s184, ')') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s184, ',') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s184, ':') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s184, ';') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s184, '?') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s184, ']') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s184, '^') = <shift, s55>
action(s184, '|') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s184, '||') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s184, '}') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s185, '&&') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s185, ')') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s185, ',') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s185, ':') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s185, ';') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s185, '?') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s185, ']') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s185, '^') = <shift, s55>
action(s185, '|') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s185, '||') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s185, '}') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s186, ')') = <reduce, expression -> assignment_expression>
action(s186, ',') = <reduce, expression -> assignment_expression>
action(s186, ':') = <reduce, expression -> assignment_expression>
action(s186, ';') = <reduce, expression -> assignment_expression>
action(s186, ']') = <reduce, expression -> assignment_expression>
action(s187, ',') = <shift, s40>
action(s187, ';') = <shift, s198>
action(s188, ')') = <shift, s222>
action(s188, ',') = <shift, s40>
action(s189, ')') = <shift, s20>
action(s189, ',') = <shift, s40>
action(s190, ')') = <shift, s21>
action(s190, ',') = <shift, s40>
action(s191, ',') = <shift, s40>
action(s191, ';') = <shift, s237>
action(s192, ',') = <shift, s40>
action(s192, ']') = <shift, s272>
action(s193, ')') = <shift, s274>
action(s193, ',') = <shift, s40>
action(s194, ')') = <shift, s25>
action(s194, ',') = <shift, s40>
action(s195, ')') = <shift, s27>
action(s195, ',') = <shift, s40>
action(s196, ')') = <reduce, expression -> expression ',' assignment_expression>
action(s196, ',') = <reduce, expression -> expression ',' assignment_expression>
action(s196, ':') = <reduce, expression -> expression ',' assignment_expression>
action(s196, ';') = <reduce, expression -> expression ',' assignment_expression>
action(s196, ']') = <reduce, expression -> expression ',' assignment_expression>
action(s197, '!') = <reduce, expression_statement -> ';'>
action(s197, '&') = <reduce, expression_statement -> ';'>
action(s197, '(') = <reduce, expression_statement -> ';'>
action(s197, ')') = <reduce, expression_statement -> ';'>
action(s197, '*') = <reduce, expression_statement -> ';'>
action(s197, '+') = <reduce, expression_statement -> ';'>
action(s197, '++') = <reduce, expression_statement -> ';'>
action(s197, '-') = <reduce, expression_statement -> ';'>
action(s197, '--') = <reduce, expression_statement -> ';'>
action(s197, ';') = <reduce, expression_statement -> ';'>
action(s197, 'break') = <reduce, expression_statement -> ';'>
action(s197, 'case') = <reduce, expression_statement -> ';'>
action(s197, 'continue') = <reduce, expression_statement -> ';'>
action(s197, 'default') = <reduce, expression_statement -> ';'>
action(s197, 'do') = <reduce, expression_statement -> ';'>
action(s197, 'else') = <reduce, expression_statement -> ';'>
action(s197, 'for') = <reduce, expression_statement -> ';'>
action(s197, 'goto') = <reduce, expression_statement -> ';'>
action(s197, 'if') = <reduce, expression_statement -> ';'>
action(s197, 'return') = <reduce, expression_statement -> ';'>
action(s197, 'sizeof') = <reduce, expression_statement -> ';'>
action(s197, 'switch') = <reduce, expression_statement -> ';'>
action(s197, 'while') = <reduce, expression_statement -> ';'>
action(s197, '{') = <reduce, expression_statement -> ';'>
action(s197, '}') = <reduce, expression_statement -> ';'>
action(s197, '~') = <reduce, expression_statement -> ';'>
action(s197, CONSTANT) = <reduce, expression_statement -> ';'>
action(s197, IDENTIFIER) = <reduce, expression_statement -> ';'>
action(s197, STRING_LITERAL) = <reduce, expression_statement -> ';'>
action(s198, '!') = <reduce, expression_statement -> expression ';'>
action(s198, '&') = <reduce, expression_statement -> expression ';'>
action(s198, '(') = <reduce, expression_statement -> expression ';'>
action(s198, ')') = <reduce, expression_statement -> expression ';'>
action(s198, '*') = <reduce, expression_statement -> expression ';'>
action(s198, '+') = <reduce, expression_statement -> expression ';'>
action(s198, '++') = <reduce, expression_statement -> expression ';'>
action(s198, '-') = <reduce, expression_statement -> expression ';'>
action(s198, '--') = <reduce, expression_statement -> expression ';'>
action(s198, ';') = <reduce, expression_statement -> expression ';'>
action(s198, 'break') = <reduce, expression_statement -> expression ';'>
action(s198, 'case') = <reduce, expression_statement -> expression ';'>
action(s198, 'continue') = <reduce, expression_statement -> expression ';'>
action(s198, 'default') = <reduce, expression_statement -> expression ';'>
action(s198, 'do') = <reduce, expression_statement -> expression ';'>
action(s198, 'else') = <reduce, expression_statement -> expression ';'>
action(s198, 'for') = <reduce, expression_statement -> expression ';'>
action(s198, 'goto') = <reduce, expression_statement -> expression ';'>
action(s198, 'if') = <reduce, expression_statement -> expression ';'>
action(s198, 'return') = <reduce, expression_statement -> expression ';'>
action(s198, 'sizeof') = <reduce, expression_statement -> expression ';'>
action(s198, 'switch') = <reduce, expression_statement -> expression ';'>
action(s198, 'while') = <reduce, expression_statement -> expression ';'>
action(s198, '{') = <reduce, expression_statement -> expression ';'>
action(s198, '}') = <reduce, expression_statement -> expression ';'>
action(s198, '~') = <reduce, expression_statement -> expression ';'>
action(s198, CONSTANT) = <reduce, expression_statement -> expression ';'>
action(s198, IDENTIFIER) = <reduce, expression_statement -> expression ';'>
action(s198, STRING_LITERAL) = <reduce, expression_statement -> expression ';'>
action(s199, '(') = <reduce, external_declaration -> declaration>
action(s199, '*') = <reduce, external_declaration -> declaration>
action(s199, 'auto') = <reduce, external_declaration -> declaration>
action(s199, 'char') = <reduce, external_declaration -> declaration>
action(s199, 'const') = <reduce, external_declaration -> declaration>
action(s199, 'double') = <reduce, external_declaration -> declaration>
action(s199, 'enum') = <reduce, external_declaration -> declaration>
action(s199, 'extern') = <reduce, external_declaration -> declaration>
action(s199, 'float') = <reduce, external_declaration -> declaration>
action(s199, 'int') = <reduce, external_declaration -> declaration>
action(s199, 'long') = <reduce, external_declaration -> declaration>
action(s199, 'register') = <reduce, external_declaration -> declaration>
action(s199, 'short') = <reduce, external_declaration -> declaration>
action(s199, 'signed') = <reduce, external_declaration -> declaration>
action(s199, 'static') = <reduce, external_declaration -> declaration>
action(s199, 'struct') = <reduce, external_declaration -> declaration>
action(s199, 'typedef') = <reduce, external_declaration -> declaration>
action(s199, 'union') = <reduce, external_declaration -> declaration>
action(s199, 'unsigned') = <reduce, external_declaration -> declaration>
action(s199, 'void') = <reduce, external_declaration -> declaration>
action(s199, 'volatile') = <reduce, external_declaration -> declaration>
action(s199, IDENTIFIER) = <reduce, external_declaration -> declaration>
action(s199, TYPE_NAME) = <reduce, external_declaration -> declaration>
action(s200, '(') = <reduce, external_declaration -> function_definition>
action(s200, '*') = <reduce, external_declaration -> function_definition>
action(s200, 'auto') = <reduce, external_declaration -> function_definition>
action(s200, 'char') = <reduce, external_declaration -> function_definition>
action(s200, 'const') = <reduce, external_declaration -> function_definition>
action(s200, 'double') = <reduce, external_declaration -> function_definition>
action(s200, 'enum') = <reduce, external_declaration -> function_definition>
action(s200, 'extern') = <reduce, external_declaration -> function_definition>
action(s200, 'float') = <reduce, external_declaration -> function_definition>
action(s200, 'int') = <reduce, external_declaration -> function_definition>
action(s200, 'long') = <reduce, external_declaration -> function_definition>
action(s200, 'register') = <reduce, external_declaration -> function_definition>
action(s200, 'short') = <reduce, external_declaration -> function_definition>
action(s200, 'signed') = <reduce, external_declaration -> function_definition>
action(s200, 'static') = <reduce, external_declaration -> function_definition>
action(s200, 'struct') = <reduce, external_declaration -> function_definition>
action(s200, 'typedef') = <reduce, external_declaration -> function_definition>
action(s200, 'union') = <reduce, external_declaration -> function_definition>
action(s200, 'unsigned') = <reduce, external_declaration -> function_definition>
action(s200, 'void') = <reduce, external_declaration -> function_definition>
action(s200, 'volatile') = <reduce, external_declaration -> function_definition>
action(s200, IDENTIFIER) = <reduce, external_declaration -> function_definition>
action(s200, TYPE_NAME) = <reduce, external_declaration -> function_definition>
action(s201, '(') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, '*') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'auto') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'char') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'const') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'double') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'enum') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'extern') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'float') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'int') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'long') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'register') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'short') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'signed') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'static') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'struct') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'typedef') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'union') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'unsigned') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'void') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, 'volatile') = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, IDENTIFIER) = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s201, TYPE_NAME) = <reduce, function_definition -> declaration_specifiers declarator compound_statement>
action(s202, '(') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, '*') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'auto') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'char') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'const') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'double') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'enum') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'extern') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'float') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'int') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'long') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'register') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'short') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'signed') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'static') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'struct') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'typedef') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'union') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'unsigned') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'void') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, 'volatile') = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, IDENTIFIER) = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s202, TYPE_NAME) = <reduce, function_definition -> declaration_specifiers declarator declaration_list compound_statement>
action(s203, '(') = <reduce, function_definition -> declarator compound_statement>
action(s203, '*') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'auto') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'char') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'const') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'double') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'enum') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'extern') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'float') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'int') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'long') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'register') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'short') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'signed') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'static') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'struct') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'typedef') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'union') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'unsigned') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'void') = <reduce, function_definition -> declarator compound_statement>
action(s203, 'volatile') = <reduce, function_definition -> declarator compound_statement>
action(s203, IDENTIFIER) = <reduce, function_definition -> declarator compound_statement>
action(s203, TYPE_NAME) = <reduce, function_definition -> declarator compound_statement>
action(s204, '(') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, '*') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'auto') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'char') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'const') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'double') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'enum') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'extern') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'float') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'int') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'long') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'register') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'short') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'signed') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'static') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'struct') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'typedef') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'union') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'unsigned') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'void') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, 'volatile') = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, IDENTIFIER) = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s204, TYPE_NAME) = <reduce, function_definition -> declarator declaration_list compound_statement>
action(s205, ')') = <reduce, identifier_list -> IDENTIFIER>
action(s205, ',') = <reduce, identifier_list -> IDENTIFIER>
action(s206, IDENTIFIER) = <shift, s207>
action(s207, ')') = <reduce, identifier_list -> identifier_list ',' IDENTIFIER>
action(s207, ',') = <reduce, identifier_list -> identifier_list ',' IDENTIFIER>
action(s208, '&&') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s208, ')') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s208, ',') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s208, ':') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s208, ';') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s208, '?') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s208, ']') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s208, '|') = <shift, s54>
action(s208, '||') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s208, '}') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s209, '&&') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s209, ')') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s209, ',') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s209, ':') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s209, ';') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s209, '?') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s209, ']') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s209, '|') = <shift, s54>
action(s209, '||') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s209, '}') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s210, ',') = <reduce, init_declarator -> declarator>
action(s210, ';') = <reduce, init_declarator -> declarator>
action(s210, '=') = <shift, s41>
action(s211, ',') = <reduce, init_declarator -> declarator '=' initializer>
action(s211, ';') = <reduce, init_declarator -> declarator '=' initializer>
action(s212, ',') = <reduce, init_declarator_list -> init_declarator>
action(s212, ';') = <reduce, init_declarator_list -> init_declarator>
action(s213, ',') = <reduce, init_declarator_list -> init_declarator_list ',' init_declarator>
action(s213, ';') = <reduce, init_declarator_list -> init_declarator_list ',' init_declarator>
action(s214, ',') = <shift, s43>
action(s214, '}') = <shift, s216>
action(s215, ',') = <reduce, initializer -> '{' initializer_list ',' '}'>
action(s215, ';') = <reduce, initializer -> '{' initializer_list ',' '}'>
action(s215, '}') = <reduce, initializer -> '{' initializer_list ',' '}'>
action(s216, ',') = <reduce, initializer -> '{' initializer_list '}'>
action(s216, ';') = <reduce, initializer -> '{' initializer_list '}'>
action(s216, '}') = <reduce, initializer -> '{' initializer_list '}'>
action(s217, ',') = <reduce, initializer -> assignment_expression>
action(s217, ';') = <reduce, initializer -> assignment_expression>
action(s217, '}') = <reduce, initializer -> assignment_expression>
action(s218, ',') = <reduce, initializer_list -> initializer>
action(s218, '}') = <reduce, initializer_list -> initializer>
action(s219, ',') = <reduce, initializer_list -> initializer_list ',' initializer>
action(s219, '}') = <reduce, initializer_list -> initializer_list ',' initializer>
action(s220, 'while') = <shift, s221>
action(s221, '(') = <shift, s32>
action(s222, ';') = <shift, s223>
action(s223, '!') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, '&') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, '(') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, '*') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, '+') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, '++') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, '-') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, '--') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, ';') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, 'break') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, 'case') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, 'continue') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, 'default') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, 'do') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, 'else') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, 'for') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, 'goto') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, 'if') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, 'return') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, 'sizeof') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, 'switch') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, 'while') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, '{') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, '}') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, '~') = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, CONSTANT) = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, IDENTIFIER) = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s223, STRING_LITERAL) = <reduce, iteration_statement -> 'do' statement 'while' '(' expression ')' ';'>
action(s224, '(') = <shift, s30>
action(s225, '!') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, '&') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, '(') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, '*') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, '+') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, '++') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, '-') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, '--') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, ';') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, 'break') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, 'case') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, 'continue') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, 'default') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, 'do') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, 'else') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, 'for') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, 'goto') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, 'if') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, 'return') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, 'sizeof') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, 'switch') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, 'while') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, '{') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, '}') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, '~') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, CONSTANT) = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, IDENTIFIER) = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s225, STRING_LITERAL) = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement>
action(s226, '!') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, '&') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, '(') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, '*') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, '+') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, '++') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, '-') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, '--') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, ';') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, 'break') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, 'case') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, 'continue') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, 'default') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, 'do') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, 'else') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, 'for') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, 'goto') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, 'if') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, 'return') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, 'sizeof') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, 'switch') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, 'while') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, '{') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, '}') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, '~') = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, CONSTANT) = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, IDENTIFIER) = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s226, STRING_LITERAL) = <reduce, iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement>
action(s227, '(') = <shift, s34>
action(s228, '!') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, '&') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, '(') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, '*') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, '+') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, '++') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, '-') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, '--') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, ';') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, 'break') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, 'case') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, 'continue') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, 'default') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, 'do') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, 'else') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, 'for') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, 'goto') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, 'if') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, 'return') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, 'sizeof') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, 'switch') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, 'while') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, '{') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, '}') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, '~') = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, CONSTANT) = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, IDENTIFIER) = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s228, STRING_LITERAL) = <reduce, iteration_statement -> 'while' '(' expression ')' statement>
action(s229, ';') = <shift, s230>
action(s230, '!') = <reduce, jump_statement -> 'break' ';'>
action(s230, '&') = <reduce, jump_statement -> 'break' ';'>
action(s230, '(') = <reduce, jump_statement -> 'break' ';'>
action(s230, '*') = <reduce, jump_statement -> 'break' ';'>
action(s230, '+') = <reduce, jump_statement -> 'break' ';'>
action(s230, '++') = <reduce, jump_statement -> 'break' ';'>
action(s230, '-') = <reduce, jump_statement -> 'break' ';'>
action(s230, '--') = <reduce, jump_statement -> 'break' ';'>
action(s230, ';') = <reduce, jump_statement -> 'break' ';'>
action(s230, 'break') = <reduce, jump_statement -> 'break' ';'>
action(s230, 'case') = <reduce, jump_statement -> 'break' ';'>
action(s230, 'continue') = <reduce, jump_statement -> 'break' ';'>
action(s230, 'default') = <reduce, jump_statement -> 'break' ';'>
action(s230, 'do') = <reduce, jump_statement -> 'break' ';'>
action(s230, 'else') = <reduce, jump_statement -> 'break' ';'>
action(s230, 'for') = <reduce, jump_statement -> 'break' ';'>
action(s230, 'goto') = <reduce, jump_statement -> 'break' ';'>
action(s230, 'if') = <reduce, jump_statement -> 'break' ';'>
action(s230, 'return') = <reduce, jump_statement -> 'break' ';'>
action(s230, 'sizeof') = <reduce, jump_statement -> 'break' ';'>
action(s230, 'switch') = <reduce, jump_statement -> 'break' ';'>
action(s230, 'while') = <reduce, jump_statement -> 'break' ';'>
action(s230, '{') = <reduce, jump_statement -> 'break' ';'>
action(s230, '}') = <reduce, jump_statement -> 'break' ';'>
action(s230, '~') = <reduce, jump_statement -> 'break' ';'>
action(s230, CONSTANT) = <reduce, jump_statement -> 'break' ';'>
action(s230, IDENTIFIER) = <reduce, jump_statement -> 'break' ';'>
action(s230, STRING_LITERAL) = <reduce, jump_statement -> 'break' ';'>
action(s231, ';') = <shift, s232>
action(s232, '!') = <reduce, jump_statement -> 'continue' ';'>
action(s232, '&') = <reduce, jump_statement -> 'continue' ';'>
action(s232, '(') = <reduce, jump_statement -> 'continue' ';'>
action(s232, '*') = <reduce, jump_statement -> 'continue' ';'>
action(s232, '+') = <reduce, jump_statement -> 'continue' ';'>
action(s232, '++') = <reduce, jump_statement -> 'continue' ';'>
action(s232, '-') = <reduce, jump_statement -> 'continue' ';'>
action(s232, '--') = <reduce, jump_statement -> 'continue' ';'>
action(s232, ';') = <reduce, jump_statement -> 'continue' ';'>
action(s232, 'break') = <reduce, jump_statement -> 'continue' ';'>
action(s232, 'case') = <reduce, jump_statement -> 'continue' ';'>
action(s232, 'continue') = <reduce, jump_statement -> 'continue' ';'>
action(s232, 'default') = <reduce, jump_statement -> 'continue' ';'>
action(s232, 'do') = <reduce, jump_statement -> 'continue' ';'>
action(s232, 'else') = <reduce, jump_statement -> 'continue' ';'>
action(s232, 'for') = <reduce, jump_statement -> 'continue' ';'>
action(s232, 'goto') = <reduce, jump_statement -> 'continue' ';'>
action(s232, 'if') = <reduce, jump_statement -> 'continue' ';'>
action(s232, 'return') = <reduce, jump_statement -> 'continue' ';'>
action(s232, 'sizeof') = <reduce, jump_statement -> 'continue' ';'>
action(s232, 'switch') = <reduce, jump_statement -> 'continue' ';'>
action(s232, 'while') = <reduce, jump_statement -> 'continue' ';'>
action(s232, '{') = <reduce, jump_statement -> 'continue' ';'>
action(s232, '}') = <reduce, jump_statement -> 'continue' ';'>
action(s232, '~') = <reduce, jump_statement -> 'continue' ';'>
action(s232, CONSTANT) = <reduce, jump_statement -> 'continue' ';'>
action(s232, IDENTIFIER) = <reduce, jump_statement -> 'continue' ';'>
action(s232, STRING_LITERAL) = <reduce, jump_statement -> 'continue' ';'>
action(s233, IDENTIFIER) = <shift, s234>
action(s234, ';') = <shift, s235>
action(s235, '!') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, '&') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, '(') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, '*') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, '+') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, '++') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, '-') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, '--') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, ';') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, 'break') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, 'case') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, 'continue') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, 'default') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, 'do') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, 'else') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, 'for') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, 'goto') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, 'if') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, 'return') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, 'sizeof') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, 'switch') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, 'while') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, '{') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, '}') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, '~') = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, CONSTANT) = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, IDENTIFIER) = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s235, STRING_LITERAL) = <reduce, jump_statement -> 'goto' IDENTIFIER ';'>
action(s236, '!') = <reduce, jump_statement -> 'return' ';'>
action(s236, '&') = <reduce, jump_statement -> 'return' ';'>
action(s236, '(') = <reduce, jump_statement -> 'return' ';'>
action(s236, '*') = <reduce, jump_statement -> 'return' ';'>
action(s236, '+') = <reduce, jump_statement -> 'return' ';'>
action(s236, '++') = <reduce, jump_statement -> 'return' ';'>
action(s236, '-') = <reduce, jump_statement -> 'return' ';'>
action(s236, '--') = <reduce, jump_statement -> 'return' ';'>
action(s236, ';') = <reduce, jump_statement -> 'return' ';'>
action(s236, 'break') = <reduce, jump_statement -> 'return' ';'>
action(s236, 'case') = <reduce, jump_statement -> 'return' ';'>
action(s236, 'continue') = <reduce, jump_statement -> 'return' ';'>
action(s236, 'default') = <reduce, jump_statement -> 'return' ';'>
action(s236, 'do') = <reduce, jump_statement -> 'return' ';'>
action(s236, 'else') = <reduce, jump_statement -> 'return' ';'>
action(s236, 'for') = <reduce, jump_statement -> 'return' ';'>
action(s236, 'goto') = <reduce, jump_statement -> 'return' ';'>
action(s236, 'if') = <reduce, jump_statement -> 'return' ';'>
action(s236, 'return') = <reduce, jump_statement -> 'return' ';'>
action(s236, 'sizeof') = <reduce, jump_statement -> 'return' ';'>
action(s236, 'switch') = <reduce, jump_statement -> 'return' ';'>
action(s236, 'while') = <reduce, jump_statement -> 'return' ';'>
action(s236, '{') = <reduce, jump_statement -> 'return' ';'>
action(s236, '}') = <reduce, jump_statement -> 'return' ';'>
action(s236, '~') = <reduce, jump_statement -> 'return' ';'>
action(s236, CONSTANT) = <reduce, jump_statement -> 'return' ';'>
action(s236, IDENTIFIER) = <reduce, jump_statement -> 'return' ';'>
action(s236, STRING_LITERAL) = <reduce, jump_statement -> 'return' ';'>
action(s237, '!') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, '&') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, '(') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, '*') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, '+') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, '++') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, '-') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, '--') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, ';') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, 'break') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, 'case') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, 'continue') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, 'default') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, 'do') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, 'else') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, 'for') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, 'goto') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, 'if') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, 'return') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, 'sizeof') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, 'switch') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, 'while') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, '{') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, '}') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, '~') = <reduce, jump_statement -> 'return' expression ';'>
action(s237, CONSTANT) = <reduce, jump_statement -> 'return' expression ';'>
action(s237, IDENTIFIER) = <reduce, jump_statement -> 'return' expression ';'>
action(s237, STRING_LITERAL) = <reduce, jump_statement -> 'return' expression ';'>
action(s238, ':') = <shift, s22>
action(s239, '!') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, '&') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, '(') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, '*') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, '+') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, '++') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, '-') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, '--') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, ';') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, 'break') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, 'case') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, 'continue') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, 'default') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, 'do') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, 'else') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, 'for') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, 'goto') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, 'if') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, 'return') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, 'sizeof') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, 'switch') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, 'while') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, '{') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, '}') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, '~') = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, CONSTANT) = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, IDENTIFIER) = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s239, STRING_LITERAL) = <reduce, labeled_statement -> 'case' constant_expression ':' statement>
action(s240, ':') = <shift, s23>
action(s241, '!') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, '&') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, '(') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, '*') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, '+') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, '++') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, '-') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, '--') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, ';') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, 'break') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, 'case') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, 'continue') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, 'default') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, 'do') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, 'else') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, 'for') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, 'goto') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, 'if') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, 'return') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, 'sizeof') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, 'switch') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, 'while') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, '{') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, '}') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, '~') = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, CONSTANT) = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, IDENTIFIER) = <reduce, labeled_statement -> 'default' ':' statement>
action(s241, STRING_LITERAL) = <reduce, labeled_statement -> 'default' ':' statement>
action(s242, '!=') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '%') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '%=') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '&&') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '&') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '&=') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '(') = <reduce, primary_expression -> IDENTIFIER>
action(s242, ')') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '*') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '*=') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '+') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '++') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '+=') = <reduce, primary_expression -> IDENTIFIER>
action(s242, ',') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '-') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '--') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '-=') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '->') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '.') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '/') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '/=') = <reduce, primary_expression -> IDENTIFIER>

Conflict on action([labeled_statement -> IDENTIFIER <*> ':' statement, primary_expression -> IDENTIFIER <*>], ':'):
<shift, [additive_expression -> <*> additive_expression '+' multiplicative_expression, additive_expression -> <*> additive_expression '-' multiplicative_expression, additive_expression -> <*> multiplicative_expression, and_expression -> <*> and_expression '&' equality_expression, and_expression -> <*> equality_expression, assignment_expression -> <*> conditional_expression, assignment_expression -> <*> unary_expression assignment_operator assignment_expression, cast_expression -> <*> '(' type_name ')' cast_expression, cast_expression -> <*> unary_expression, compound_statement -> <*> '{' '}', compound_statement -> <*> '{' declaration_list '}', compound_statement -> <*> '{' declaration_list statement_list '}', compound_statement -> <*> '{' statement_list '}', conditional_expression -> <*> logical_or_expression, conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression, equality_expression -> <*> equality_expression '!=' relational_expression, equality_expression -> <*> equality_expression '==' relational_expression, equality_expression -> <*> relational_expression, exclusive_or_expression -> <*> and_expression, exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression, expression -> <*> assignment_expression, expression -> <*> expression ',' assignment_expression, expression_statement -> <*> ';', expression_statement -> <*> expression ';', inclusive_or_expression -> <*> exclusive_or_expression, inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression, iteration_statement -> <*> 'do' statement 'while' '(' expression ')' ';', iteration_statement -> <*> 'for' '(' expression_statement expression_statement ')' statement, iteration_statement -> <*> 'for' '(' expression_statement expression_statement expression ')' statement, iteration_statement -> <*> 'while' '(' expression ')' statement, jump_statement -> <*> 'break' ';', jump_statement -> <*> 'continue' ';', jump_statement -> <*> 'goto' IDENTIFIER ';', jump_statement -> <*> 'return' ';', jump_statement -> <*> 'return' expression ';', labeled_statement -> <*> 'case' constant_expression ':' statement, labeled_statement -> <*> 'default' ':' statement, labeled_statement -> <*> IDENTIFIER ':' statement, labeled_statement -> IDENTIFIER ':' <*> statement, logical_and_expression -> <*> inclusive_or_expression, logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> <*> logical_and_expression, logical_or_expression -> <*> logical_or_expression '||' logical_and_expression, multiplicative_expression -> <*> cast_expression, multiplicative_expression -> <*> multiplicative_expression '%' cast_expression, multiplicative_expression -> <*> multiplicative_expression '*' cast_expression, multiplicative_expression -> <*> multiplicative_expression '/' cast_expression, postfix_expression -> <*> postfix_expression '(' ')', postfix_expression -> <*> postfix_expression '(' argument_expression_list ')', postfix_expression -> <*> postfix_expression '++', postfix_expression -> <*> postfix_expression '--', postfix_expression -> <*> postfix_expression '->' IDENTIFIER, postfix_expression -> <*> postfix_expression '.' IDENTIFIER, postfix_expression -> <*> postfix_expression '[' expression ']', postfix_expression -> <*> primary_expression, primary_expression -> <*> '(' expression ')', primary_expression -> <*> CONSTANT, primary_expression -> <*> IDENTIFIER, primary_expression -> <*> STRING_LITERAL, relational_expression -> <*> relational_expression '<' shift_expression, relational_expression -> <*> relational_expression '<=' shift_expression, relational_expression -> <*> relational_expression '>' shift_expression, relational_expression -> <*> relational_expression '>=' shift_expression, relational_expression -> <*> shift_expression, selection_statement -> <*> 'if' '(' expression ')' statement, selection_statement -> <*> 'if' '(' expression ')' statement 'else' statement, selection_statement -> <*> 'switch' '(' expression ')' statement, shift_expression -> <*> additive_expression, shift_expression -> <*> shift_expression '<<' additive_expression, shift_expression -> <*> shift_expression '>>' additive_expression, statement -> <*> compound_statement, statement -> <*> expression_statement, statement -> <*> iteration_statement, statement -> <*> jump_statement, statement -> <*> labeled_statement, statement -> <*> selection_statement, unary_expression -> <*> '++' unary_expression, unary_expression -> <*> '--' unary_expression, unary_expression -> <*> 'sizeof' '(' type_name ')', unary_expression -> <*> 'sizeof' unary_expression, unary_expression -> <*> postfix_expression, unary_expression -> <*> unary_operator cast_expression, unary_operator -> <*> '!', unary_operator -> <*> '&', unary_operator -> <*> '*', unary_operator -> <*> '+', unary_operator -> <*> '-', unary_operator -> <*> '~']>
<reduce, primary_expression -> IDENTIFIER>

action(s242, ':') = shift-reduce conflict
action(s242, ';') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '<') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '<<') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '<<=') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '<=') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '=') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '==') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '>') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '>=') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '>>') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '>>=') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '?') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '[') = <reduce, primary_expression -> IDENTIFIER>
action(s242, ']') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '^') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '^=') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '|') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '|=') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '||') = <reduce, primary_expression -> IDENTIFIER>
action(s242, '}') = <reduce, primary_expression -> IDENTIFIER>
action(s243, '!') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, '&') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, '(') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, '*') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, '+') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, '++') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, '-') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, '--') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, ';') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, 'break') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, 'case') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, 'continue') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, 'default') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, 'do') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, 'else') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, 'for') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, 'goto') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, 'if') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, 'return') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, 'sizeof') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, 'switch') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, 'while') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, '{') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, '}') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, '~') = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, CONSTANT) = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, IDENTIFIER) = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s243, STRING_LITERAL) = <reduce, labeled_statement -> IDENTIFIER ':' statement>
action(s244, '&&') = <shift, s53>
action(s244, ')') = <reduce, logical_or_expression -> logical_and_expression>
action(s244, ',') = <reduce, logical_or_expression -> logical_and_expression>
action(s244, ':') = <reduce, logical_or_expression -> logical_and_expression>
action(s244, ';') = <reduce, logical_or_expression -> logical_and_expression>
action(s244, '?') = <reduce, logical_or_expression -> logical_and_expression>
action(s244, ']') = <reduce, logical_or_expression -> logical_and_expression>
action(s244, '||') = <reduce, logical_or_expression -> logical_and_expression>
action(s244, '}') = <reduce, logical_or_expression -> logical_and_expression>
action(s245, '&&') = <shift, s53>
action(s245, ')') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s245, ',') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s245, ':') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s245, ';') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s245, '?') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s245, ']') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s245, '||') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s245, '}') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s246, '!=') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '%') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '&&') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '&') = <reduce, multiplicative_expression -> cast_expression>
action(s246, ')') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '*') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '+') = <reduce, multiplicative_expression -> cast_expression>
action(s246, ',') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '-') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '/') = <reduce, multiplicative_expression -> cast_expression>
action(s246, ':') = <reduce, multiplicative_expression -> cast_expression>
action(s246, ';') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '<') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '<<') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '<=') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '==') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '>') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '>=') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '>>') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '?') = <reduce, multiplicative_expression -> cast_expression>
action(s246, ']') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '^') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '|') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '||') = <reduce, multiplicative_expression -> cast_expression>
action(s246, '}') = <reduce, multiplicative_expression -> cast_expression>
action(s247, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '%') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '&') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, ')') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '*') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '+') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, ',') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '-') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '/') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, ':') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, ';') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '<') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '==') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '>') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '?') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, ']') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '^') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '|') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '||') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s247, '}') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s248, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '%') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '&') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, ')') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '*') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '+') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, ',') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '-') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '/') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, ':') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, ';') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '<') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '==') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '>') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '?') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, ']') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '^') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '|') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '||') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s248, '}') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s249, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '%') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '&') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, ')') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '*') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '+') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, ',') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '-') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '/') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, ':') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, ';') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '<') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '==') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '>') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '?') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, ']') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '^') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '|') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '||') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s249, '}') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s250, ')') = <reduce, parameter_declaration -> declaration_specifiers abstract_declarator>
action(s250, ',') = <reduce, parameter_declaration -> declaration_specifiers abstract_declarator>
action(s251, ')') = <reduce, parameter_declaration -> declaration_specifiers declarator>
action(s251, ',') = <reduce, parameter_declaration -> declaration_specifiers declarator>
action(s252, ')') = <reduce, parameter_list -> parameter_declaration>
action(s252, ',') = <reduce, parameter_list -> parameter_declaration>
action(s253, ')') = <reduce, parameter_type_list -> parameter_list>
action(s253, ',') = <shift, s126>
action(s254, ')') = <reduce, parameter_list -> parameter_list ',' parameter_declaration>
action(s254, ',') = <reduce, parameter_list -> parameter_list ',' parameter_declaration>
action(s255, ')') = <reduce, parameter_type_list -> parameter_list ',' '...'>
action(s256, '(') = <reduce, pointer -> '*'>
action(s256, ')') = <reduce, pointer -> '*'>
action(s256, '*') = <shift, s256>
action(s256, ',') = <reduce, pointer -> '*'>
action(s256, '[') = <reduce, pointer -> '*'>
action(s256, 'const') = <shift, s321>
action(s256, 'volatile') = <shift, s322>
action(s256, IDENTIFIER) = <reduce, pointer -> '*'>
action(s257, '(') = <reduce, pointer -> '*' type_qualifier_list>
action(s257, ')') = <reduce, pointer -> '*' type_qualifier_list>
action(s257, '*') = <shift, s256>
action(s257, ',') = <reduce, pointer -> '*' type_qualifier_list>
action(s257, '[') = <reduce, pointer -> '*' type_qualifier_list>
action(s257, 'const') = <shift, s321>
action(s257, 'volatile') = <shift, s322>
action(s257, IDENTIFIER) = <reduce, pointer -> '*' type_qualifier_list>
action(s258, '(') = <reduce, pointer -> '*' pointer>
action(s258, ')') = <reduce, pointer -> '*' pointer>
action(s258, ',') = <reduce, pointer -> '*' pointer>
action(s258, '[') = <reduce, pointer -> '*' pointer>
action(s258, IDENTIFIER) = <reduce, pointer -> '*' pointer>
action(s259, '(') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s259, ')') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s259, ',') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s259, '[') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s259, IDENTIFIER) = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s260, '!') = <shift, s343>
action(s260, '&') = <shift, s344>
action(s260, '(') = <shift, s37>
action(s260, '*') = <shift, s345>
action(s260, '+') = <shift, s346>
action(s260, '++') = <shift, s260>
action(s260, '-') = <shift, s347>
action(s260, '--') = <shift, s261>
action(s260, 'sizeof') = <shift, s262>
action(s260, '~') = <shift, s348>
action(s260, CONSTANT) = <shift, s275>
action(s260, IDENTIFIER) = <shift, s276>
action(s260, STRING_LITERAL) = <shift, s277>
action(s261, '!') = <shift, s343>
action(s261, '&') = <shift, s344>
action(s261, '(') = <shift, s37>
action(s261, '*') = <shift, s345>
action(s261, '+') = <shift, s346>
action(s261, '++') = <shift, s260>
action(s261, '-') = <shift, s347>
action(s261, '--') = <shift, s261>
action(s261, 'sizeof') = <shift, s262>
action(s261, '~') = <shift, s348>
action(s261, CONSTANT) = <shift, s275>
action(s261, IDENTIFIER) = <shift, s276>
action(s261, STRING_LITERAL) = <shift, s277>
action(s262, '!') = <shift, s343>
action(s262, '&') = <shift, s344>
action(s262, '(') = <shift, s29>
action(s262, '*') = <shift, s345>
action(s262, '+') = <shift, s346>
action(s262, '++') = <shift, s260>
action(s262, '-') = <shift, s347>
action(s262, '--') = <shift, s261>
action(s262, 'sizeof') = <shift, s262>
action(s262, '~') = <shift, s348>
action(s262, CONSTANT) = <shift, s275>
action(s262, IDENTIFIER) = <shift, s276>
action(s262, STRING_LITERAL) = <shift, s277>
action(s263, '!=') = <reduce, unary_expression -> postfix_expression>
action(s263, '%') = <reduce, unary_expression -> postfix_expression>
action(s263, '%=') = <reduce, unary_expression -> postfix_expression>
action(s263, '&&') = <reduce, unary_expression -> postfix_expression>
action(s263, '&') = <reduce, unary_expression -> postfix_expression>
action(s263, '&=') = <reduce, unary_expression -> postfix_expression>
action(s263, '(') = <shift, s10>
action(s263, ')') = <reduce, unary_expression -> postfix_expression>
action(s263, '*') = <reduce, unary_expression -> postfix_expression>
action(s263, '*=') = <reduce, unary_expression -> postfix_expression>
action(s263, '+') = <reduce, unary_expression -> postfix_expression>
action(s263, '++') = <shift, s266>
action(s263, '+=') = <reduce, unary_expression -> postfix_expression>
action(s263, ',') = <reduce, unary_expression -> postfix_expression>
action(s263, '-') = <reduce, unary_expression -> postfix_expression>
action(s263, '--') = <shift, s267>
action(s263, '-=') = <reduce, unary_expression -> postfix_expression>
action(s263, '->') = <shift, s268>
action(s263, '.') = <shift, s270>
action(s263, '/') = <reduce, unary_expression -> postfix_expression>
action(s263, '/=') = <reduce, unary_expression -> postfix_expression>
action(s263, ':') = <reduce, unary_expression -> postfix_expression>
action(s263, ';') = <reduce, unary_expression -> postfix_expression>
action(s263, '<') = <reduce, unary_expression -> postfix_expression>
action(s263, '<<') = <reduce, unary_expression -> postfix_expression>
action(s263, '<<=') = <reduce, unary_expression -> postfix_expression>
action(s263, '<=') = <reduce, unary_expression -> postfix_expression>
action(s263, '=') = <reduce, unary_expression -> postfix_expression>
action(s263, '==') = <reduce, unary_expression -> postfix_expression>
action(s263, '>') = <reduce, unary_expression -> postfix_expression>
action(s263, '>=') = <reduce, unary_expression -> postfix_expression>
action(s263, '>>') = <reduce, unary_expression -> postfix_expression>
action(s263, '>>=') = <reduce, unary_expression -> postfix_expression>
action(s263, '?') = <reduce, unary_expression -> postfix_expression>
action(s263, '[') = <shift, s36>
action(s263, ']') = <reduce, unary_expression -> postfix_expression>
action(s263, '^') = <reduce, unary_expression -> postfix_expression>
action(s263, '^=') = <reduce, unary_expression -> postfix_expression>
action(s263, '|') = <reduce, unary_expression -> postfix_expression>
action(s263, '|=') = <reduce, unary_expression -> postfix_expression>
action(s263, '||') = <reduce, unary_expression -> postfix_expression>
action(s263, '}') = <reduce, unary_expression -> postfix_expression>
action(s264, '!=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '%') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '%=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '&&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '&=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '(') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, ')') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '*') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '*=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '+') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '++') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '+=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, ',') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '-') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '--') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '-=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '->') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '.') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '/') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '/=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, ':') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, ';') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '<<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '<<=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '<=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '==') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '>=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '>>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '>>=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '?') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '[') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, ']') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '^') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '^=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '|') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '|=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '||') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s264, '}') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s265, '!=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '%') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '%=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '&&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '&=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '(') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, ')') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '*') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '*=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '+') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '++') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '+=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, ',') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '-') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '--') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '-=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '->') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '.') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '/') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '/=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, ':') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, ';') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '<<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '<<=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '<=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '==') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '>=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '>>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '>>=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '?') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '[') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, ']') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '^') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '^=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '|') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '|=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '||') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s265, '}') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s266, '!=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '%') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '%=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '&&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '&=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '(') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, ')') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '*') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '*=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '+') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '++') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '+=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, ',') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '-') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '--') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '-=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '->') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '.') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '/') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '/=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, ':') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, ';') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '<<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '<<=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '<=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '==') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '>=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '>>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '>>=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '?') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '[') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, ']') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '^') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '^=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '|') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '|=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '||') = <reduce, postfix_expression -> postfix_expression '++'>
action(s266, '}') = <reduce, postfix_expression -> postfix_expression '++'>
action(s267, '!=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '%') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '%=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '&&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '&=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '(') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, ')') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '*') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '*=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '+') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '++') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '+=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, ',') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '-') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '--') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '-=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '->') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '.') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '/') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '/=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, ':') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, ';') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '<<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '<<=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '<=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '==') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '>=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '>>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '>>=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '?') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '[') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, ']') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '^') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '^=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '|') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '|=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '||') = <reduce, postfix_expression -> postfix_expression '--'>
action(s267, '}') = <reduce, postfix_expression -> postfix_expression '--'>
action(s268, IDENTIFIER) = <shift, s269>
action(s269, '!=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '%') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '%=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '&&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '&=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '(') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, ')') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '*') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '*=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '+') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '++') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '+=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, ',') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '-') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '--') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '-=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '->') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '.') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '/') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '/=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, ':') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, ';') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '<<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '<<=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '<=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '==') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '>=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '>>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '>>=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '?') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '[') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, ']') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '^') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '^=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '|') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '|=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '||') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s269, '}') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s270, IDENTIFIER) = <shift, s271>
action(s271, '!=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '%') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '%=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '&&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '&=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '(') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, ')') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '*') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '*=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '+') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '++') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '+=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, ',') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '-') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '--') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '-=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '->') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '.') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '/') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '/=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, ':') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, ';') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '<<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '<<=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '<=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '==') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '>=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '>>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '>>=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '?') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '[') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, ']') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '^') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '^=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '|') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '|=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '||') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s271, '}') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s272, '!=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '%') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '%=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '&&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '&=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '(') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, ')') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '*') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '*=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '+') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '++') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '+=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, ',') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '-') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '--') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '-=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '->') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '.') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '/') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '/=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, ':') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, ';') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '<<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '<<=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '<=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '==') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '>=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '>>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '>>=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '?') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '[') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, ']') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '^') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '^=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '|') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '|=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '||') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s272, '}') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s273, '!=') = <reduce, postfix_expression -> primary_expression>
action(s273, '%') = <reduce, postfix_expression -> primary_expression>
action(s273, '%=') = <reduce, postfix_expression -> primary_expression>
action(s273, '&&') = <reduce, postfix_expression -> primary_expression>
action(s273, '&') = <reduce, postfix_expression -> primary_expression>
action(s273, '&=') = <reduce, postfix_expression -> primary_expression>
action(s273, '(') = <reduce, postfix_expression -> primary_expression>
action(s273, ')') = <reduce, postfix_expression -> primary_expression>
action(s273, '*') = <reduce, postfix_expression -> primary_expression>
action(s273, '*=') = <reduce, postfix_expression -> primary_expression>
action(s273, '+') = <reduce, postfix_expression -> primary_expression>
action(s273, '++') = <reduce, postfix_expression -> primary_expression>
action(s273, '+=') = <reduce, postfix_expression -> primary_expression>
action(s273, ',') = <reduce, postfix_expression -> primary_expression>
action(s273, '-') = <reduce, postfix_expression -> primary_expression>
action(s273, '--') = <reduce, postfix_expression -> primary_expression>
action(s273, '-=') = <reduce, postfix_expression -> primary_expression>
action(s273, '->') = <reduce, postfix_expression -> primary_expression>
action(s273, '.') = <reduce, postfix_expression -> primary_expression>
action(s273, '/') = <reduce, postfix_expression -> primary_expression>
action(s273, '/=') = <reduce, postfix_expression -> primary_expression>
action(s273, ':') = <reduce, postfix_expression -> primary_expression>
action(s273, ';') = <reduce, postfix_expression -> primary_expression>
action(s273, '<') = <reduce, postfix_expression -> primary_expression>
action(s273, '<<') = <reduce, postfix_expression -> primary_expression>
action(s273, '<<=') = <reduce, postfix_expression -> primary_expression>
action(s273, '<=') = <reduce, postfix_expression -> primary_expression>
action(s273, '=') = <reduce, postfix_expression -> primary_expression>
action(s273, '==') = <reduce, postfix_expression -> primary_expression>
action(s273, '>') = <reduce, postfix_expression -> primary_expression>
action(s273, '>=') = <reduce, postfix_expression -> primary_expression>
action(s273, '>>') = <reduce, postfix_expression -> primary_expression>
action(s273, '>>=') = <reduce, postfix_expression -> primary_expression>
action(s273, '?') = <reduce, postfix_expression -> primary_expression>
action(s273, '[') = <reduce, postfix_expression -> primary_expression>
action(s273, ']') = <reduce, postfix_expression -> primary_expression>
action(s273, '^') = <reduce, postfix_expression -> primary_expression>
action(s273, '^=') = <reduce, postfix_expression -> primary_expression>
action(s273, '|') = <reduce, postfix_expression -> primary_expression>
action(s273, '|=') = <reduce, postfix_expression -> primary_expression>
action(s273, '||') = <reduce, postfix_expression -> primary_expression>
action(s273, '}') = <reduce, postfix_expression -> primary_expression>
action(s274, '!=') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '%') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '%=') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '&&') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '&') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '&=') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '(') = <reduce, primary_expression -> '(' expression ')'>
action(s274, ')') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '*') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '*=') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '+') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '++') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '+=') = <reduce, primary_expression -> '(' expression ')'>
action(s274, ',') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '-') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '--') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '-=') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '->') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '.') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '/') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '/=') = <reduce, primary_expression -> '(' expression ')'>
action(s274, ':') = <reduce, primary_expression -> '(' expression ')'>
action(s274, ';') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '<') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '<<') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '<<=') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '<=') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '=') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '==') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '>') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '>=') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '>>') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '>>=') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '?') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '[') = <reduce, primary_expression -> '(' expression ')'>
action(s274, ']') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '^') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '^=') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '|') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '|=') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '||') = <reduce, primary_expression -> '(' expression ')'>
action(s274, '}') = <reduce, primary_expression -> '(' expression ')'>
action(s275, '!=') = <reduce, primary_expression -> CONSTANT>
action(s275, '%') = <reduce, primary_expression -> CONSTANT>
action(s275, '%=') = <reduce, primary_expression -> CONSTANT>
action(s275, '&&') = <reduce, primary_expression -> CONSTANT>
action(s275, '&') = <reduce, primary_expression -> CONSTANT>
action(s275, '&=') = <reduce, primary_expression -> CONSTANT>
action(s275, '(') = <reduce, primary_expression -> CONSTANT>
action(s275, ')') = <reduce, primary_expression -> CONSTANT>
action(s275, '*') = <reduce, primary_expression -> CONSTANT>
action(s275, '*=') = <reduce, primary_expression -> CONSTANT>
action(s275, '+') = <reduce, primary_expression -> CONSTANT>
action(s275, '++') = <reduce, primary_expression -> CONSTANT>
action(s275, '+=') = <reduce, primary_expression -> CONSTANT>
action(s275, ',') = <reduce, primary_expression -> CONSTANT>
action(s275, '-') = <reduce, primary_expression -> CONSTANT>
action(s275, '--') = <reduce, primary_expression -> CONSTANT>
action(s275, '-=') = <reduce, primary_expression -> CONSTANT>
action(s275, '->') = <reduce, primary_expression -> CONSTANT>
action(s275, '.') = <reduce, primary_expression -> CONSTANT>
action(s275, '/') = <reduce, primary_expression -> CONSTANT>
action(s275, '/=') = <reduce, primary_expression -> CONSTANT>
action(s275, ':') = <reduce, primary_expression -> CONSTANT>
action(s275, ';') = <reduce, primary_expression -> CONSTANT>
action(s275, '<') = <reduce, primary_expression -> CONSTANT>
action(s275, '<<') = <reduce, primary_expression -> CONSTANT>
action(s275, '<<=') = <reduce, primary_expression -> CONSTANT>
action(s275, '<=') = <reduce, primary_expression -> CONSTANT>
action(s275, '=') = <reduce, primary_expression -> CONSTANT>
action(s275, '==') = <reduce, primary_expression -> CONSTANT>
action(s275, '>') = <reduce, primary_expression -> CONSTANT>
action(s275, '>=') = <reduce, primary_expression -> CONSTANT>
action(s275, '>>') = <reduce, primary_expression -> CONSTANT>
action(s275, '>>=') = <reduce, primary_expression -> CONSTANT>
action(s275, '?') = <reduce, primary_expression -> CONSTANT>
action(s275, '[') = <reduce, primary_expression -> CONSTANT>
action(s275, ']') = <reduce, primary_expression -> CONSTANT>
action(s275, '^') = <reduce, primary_expression -> CONSTANT>
action(s275, '^=') = <reduce, primary_expression -> CONSTANT>
action(s275, '|') = <reduce, primary_expression -> CONSTANT>
action(s275, '|=') = <reduce, primary_expression -> CONSTANT>
action(s275, '||') = <reduce, primary_expression -> CONSTANT>
action(s275, '}') = <reduce, primary_expression -> CONSTANT>
action(s276, '!=') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '%') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '%=') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '&&') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '&') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '&=') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '(') = <reduce, primary_expression -> IDENTIFIER>
action(s276, ')') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '*') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '*=') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '+') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '++') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '+=') = <reduce, primary_expression -> IDENTIFIER>
action(s276, ',') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '-') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '--') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '-=') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '->') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '.') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '/') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '/=') = <reduce, primary_expression -> IDENTIFIER>
action(s276, ':') = <reduce, primary_expression -> IDENTIFIER>
action(s276, ';') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '<') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '<<') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '<<=') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '<=') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '=') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '==') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '>') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '>=') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '>>') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '>>=') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '?') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '[') = <reduce, primary_expression -> IDENTIFIER>
action(s276, ']') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '^') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '^=') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '|') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '|=') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '||') = <reduce, primary_expression -> IDENTIFIER>
action(s276, '}') = <reduce, primary_expression -> IDENTIFIER>
action(s277, '!=') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '%') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '%=') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '&&') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '&') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '&=') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '(') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, ')') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '*') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '*=') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '+') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '++') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '+=') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, ',') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '-') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '--') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '-=') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '->') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '.') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '/') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '/=') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, ':') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, ';') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '<') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '<<') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '<<=') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '<=') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '=') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '==') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '>') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '>=') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '>>') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '>>=') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '?') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '[') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, ']') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '^') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '^=') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '|') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '|=') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '||') = <reduce, primary_expression -> STRING_LITERAL>
action(s277, '}') = <reduce, primary_expression -> STRING_LITERAL>
action(s278, '!=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s278, '&&') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s278, '&') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s278, ')') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s278, ',') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s278, ':') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s278, ';') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s278, '<') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s278, '<<') = <shift, s63>
action(s278, '<=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s278, '==') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s278, '>') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s278, '>=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s278, '>>') = <shift, s64>
action(s278, '?') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s278, ']') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s278, '^') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s278, '|') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s278, '||') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s278, '}') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s279, '!=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s279, '&&') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s279, '&') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s279, ')') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s279, ',') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s279, ':') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s279, ';') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s279, '<') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s279, '<<') = <shift, s63>
action(s279, '<=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s279, '==') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s279, '>') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s279, '>=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s279, '>>') = <shift, s64>
action(s279, '?') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s279, ']') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s279, '^') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s279, '|') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s279, '||') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s279, '}') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s280, '!=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s280, '&&') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s280, '&') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s280, ')') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s280, ',') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s280, ':') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s280, ';') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s280, '<') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s280, '<<') = <shift, s63>
action(s280, '<=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s280, '==') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s280, '>') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s280, '>=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s280, '>>') = <shift, s64>
action(s280, '?') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s280, ']') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s280, '^') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s280, '|') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s280, '||') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s280, '}') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s281, '!=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s281, '&&') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s281, '&') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s281, ')') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s281, ',') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s281, ':') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s281, ';') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s281, '<') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s281, '<<') = <shift, s63>
action(s281, '<=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s281, '==') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s281, '>') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s281, '>=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s281, '>>') = <shift, s64>
action(s281, '?') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s281, ']') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s281, '^') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s281, '|') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s281, '||') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s281, '}') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s282, '!=') = <reduce, relational_expression -> shift_expression>
action(s282, '&&') = <reduce, relational_expression -> shift_expression>
action(s282, '&') = <reduce, relational_expression -> shift_expression>
action(s282, ')') = <reduce, relational_expression -> shift_expression>
action(s282, ',') = <reduce, relational_expression -> shift_expression>
action(s282, ':') = <reduce, relational_expression -> shift_expression>
action(s282, ';') = <reduce, relational_expression -> shift_expression>
action(s282, '<') = <reduce, relational_expression -> shift_expression>
action(s282, '<<') = <shift, s63>
action(s282, '<=') = <reduce, relational_expression -> shift_expression>
action(s282, '==') = <reduce, relational_expression -> shift_expression>
action(s282, '>') = <reduce, relational_expression -> shift_expression>
action(s282, '>=') = <reduce, relational_expression -> shift_expression>
action(s282, '>>') = <shift, s64>
action(s282, '?') = <reduce, relational_expression -> shift_expression>
action(s282, ']') = <reduce, relational_expression -> shift_expression>
action(s282, '^') = <reduce, relational_expression -> shift_expression>
action(s282, '|') = <reduce, relational_expression -> shift_expression>
action(s282, '||') = <reduce, relational_expression -> shift_expression>
action(s282, '}') = <reduce, relational_expression -> shift_expression>
action(s283, '(') = <shift, s38>
action(s284, '!') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, '&') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, '(') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, '*') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, '+') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, '++') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, '-') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, '--') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, ';') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, 'break') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, 'case') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, 'continue') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, 'default') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, 'do') = <reduce, selection_statement -> 'if' '(' expression ')' statement>

Conflict on action([selection_statement -> 'if' '(' expression ')' statement <*>, selection_statement -> 'if' '(' expression ')' statement <*> 'else' statement], 'else'):
<reduce, selection_statement -> 'if' '(' expression ')' statement>
<shift, [additive_expression -> <*> additive_expression '+' multiplicative_expression, additive_expression -> <*> additive_expression '-' multiplicative_expression, additive_expression -> <*> multiplicative_expression, and_expression -> <*> and_expression '&' equality_expression, and_expression -> <*> equality_expression, assignment_expression -> <*> conditional_expression, assignment_expression -> <*> unary_expression assignment_operator assignment_expression, cast_expression -> <*> '(' type_name ')' cast_expression, cast_expression -> <*> unary_expression, compound_statement -> <*> '{' '}', compound_statement -> <*> '{' declaration_list '}', compound_statement -> <*> '{' declaration_list statement_list '}', compound_statement -> <*> '{' statement_list '}', conditional_expression -> <*> logical_or_expression, conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression, equality_expression -> <*> equality_expression '!=' relational_expression, equality_expression -> <*> equality_expression '==' relational_expression, equality_expression -> <*> relational_expression, exclusive_or_expression -> <*> and_expression, exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression, expression -> <*> assignment_expression, expression -> <*> expression ',' assignment_expression, expression_statement -> <*> ';', expression_statement -> <*> expression ';', inclusive_or_expression -> <*> exclusive_or_expression, inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression, iteration_statement -> <*> 'do' statement 'while' '(' expression ')' ';', iteration_statement -> <*> 'for' '(' expression_statement expression_statement ')' statement, iteration_statement -> <*> 'for' '(' expression_statement expression_statement expression ')' statement, iteration_statement -> <*> 'while' '(' expression ')' statement, jump_statement -> <*> 'break' ';', jump_statement -> <*> 'continue' ';', jump_statement -> <*> 'goto' IDENTIFIER ';', jump_statement -> <*> 'return' ';', jump_statement -> <*> 'return' expression ';', labeled_statement -> <*> 'case' constant_expression ':' statement, labeled_statement -> <*> 'default' ':' statement, labeled_statement -> <*> IDENTIFIER ':' statement, logical_and_expression -> <*> inclusive_or_expression, logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> <*> logical_and_expression, logical_or_expression -> <*> logical_or_expression '||' logical_and_expression, multiplicative_expression -> <*> cast_expression, multiplicative_expression -> <*> multiplicative_expression '%' cast_expression, multiplicative_expression -> <*> multiplicative_expression '*' cast_expression, multiplicative_expression -> <*> multiplicative_expression '/' cast_expression, postfix_expression -> <*> postfix_expression '(' ')', postfix_expression -> <*> postfix_expression '(' argument_expression_list ')', postfix_expression -> <*> postfix_expression '++', postfix_expression -> <*> postfix_expression '--', postfix_expression -> <*> postfix_expression '->' IDENTIFIER, postfix_expression -> <*> postfix_expression '.' IDENTIFIER, postfix_expression -> <*> postfix_expression '[' expression ']', postfix_expression -> <*> primary_expression, primary_expression -> <*> '(' expression ')', primary_expression -> <*> CONSTANT, primary_expression -> <*> IDENTIFIER, primary_expression -> <*> STRING_LITERAL, relational_expression -> <*> relational_expression '<' shift_expression, relational_expression -> <*> relational_expression '<=' shift_expression, relational_expression -> <*> relational_expression '>' shift_expression, relational_expression -> <*> relational_expression '>=' shift_expression, relational_expression -> <*> shift_expression, selection_statement -> <*> 'if' '(' expression ')' statement, selection_statement -> <*> 'if' '(' expression ')' statement 'else' statement, selection_statement -> <*> 'switch' '(' expression ')' statement, selection_statement -> 'if' '(' expression ')' statement 'else' <*> statement, shift_expression -> <*> additive_expression, shift_expression -> <*> shift_expression '<<' additive_expression, shift_expression -> <*> shift_expression '>>' additive_expression, statement -> <*> compound_statement, statement -> <*> expression_statement, statement -> <*> iteration_statement, statement -> <*> jump_statement, statement -> <*> labeled_statement, statement -> <*> selection_statement, unary_expression -> <*> '++' unary_expression, unary_expression -> <*> '--' unary_expression, unary_expression -> <*> 'sizeof' '(' type_name ')', unary_expression -> <*> 'sizeof' unary_expression, unary_expression -> <*> postfix_expression, unary_expression -> <*> unary_operator cast_expression, unary_operator -> <*> '!', unary_operator -> <*> '&', unary_operator -> <*> '*', unary_operator -> <*> '+', unary_operator -> <*> '-', unary_operator -> <*> '~']>

action(s284, 'else') = shift-reduce conflict
action(s284, 'for') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, 'goto') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, 'if') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, 'return') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, 'sizeof') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, 'switch') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, 'while') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, '{') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, '}') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, '~') = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, CONSTANT) = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, IDENTIFIER) = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s284, STRING_LITERAL) = <reduce, selection_statement -> 'if' '(' expression ')' statement>
action(s285, '!') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, '&') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, '(') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, '*') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, '+') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, '++') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, '-') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, '--') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, ';') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, 'break') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, 'case') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, 'continue') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, 'default') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, 'do') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, 'else') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, 'for') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, 'goto') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, 'if') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, 'return') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, 'sizeof') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, 'switch') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, 'while') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, '{') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, '}') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, '~') = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, CONSTANT) = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, IDENTIFIER) = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s285, STRING_LITERAL) = <reduce, selection_statement -> 'if' '(' expression ')' statement 'else' statement>
action(s286, '(') = <shift, s39>
action(s287, '!') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, '&') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, '(') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, '*') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, '+') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, '++') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, '-') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, '--') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, ';') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, 'break') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, 'case') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, 'continue') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, 'default') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, 'do') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, 'else') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, 'for') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, 'goto') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, 'if') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, 'return') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, 'sizeof') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, 'switch') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, 'while') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, '{') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, '}') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, '~') = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, CONSTANT) = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, IDENTIFIER) = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s287, STRING_LITERAL) = <reduce, selection_statement -> 'switch' '(' expression ')' statement>
action(s288, '(') = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s288, ')') = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s288, '*') = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s288, ':') = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s288, '[') = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s288, IDENTIFIER) = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s289, '(') = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s289, ')') = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s289, '*') = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s289, ':') = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s289, '[') = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s289, IDENTIFIER) = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s290, '!') = <reduce, statement -> compound_statement>
action(s290, '&') = <reduce, statement -> compound_statement>
action(s290, '(') = <reduce, statement -> compound_statement>
action(s290, '*') = <reduce, statement -> compound_statement>
action(s290, '+') = <reduce, statement -> compound_statement>
action(s290, '++') = <reduce, statement -> compound_statement>
action(s290, '-') = <reduce, statement -> compound_statement>
action(s290, '--') = <reduce, statement -> compound_statement>
action(s290, ';') = <reduce, statement -> compound_statement>
action(s290, 'break') = <reduce, statement -> compound_statement>
action(s290, 'case') = <reduce, statement -> compound_statement>
action(s290, 'continue') = <reduce, statement -> compound_statement>
action(s290, 'default') = <reduce, statement -> compound_statement>
action(s290, 'do') = <reduce, statement -> compound_statement>
action(s290, 'else') = <reduce, statement -> compound_statement>
action(s290, 'for') = <reduce, statement -> compound_statement>
action(s290, 'goto') = <reduce, statement -> compound_statement>
action(s290, 'if') = <reduce, statement -> compound_statement>
action(s290, 'return') = <reduce, statement -> compound_statement>
action(s290, 'sizeof') = <reduce, statement -> compound_statement>
action(s290, 'switch') = <reduce, statement -> compound_statement>
action(s290, 'while') = <reduce, statement -> compound_statement>
action(s290, '{') = <reduce, statement -> compound_statement>
action(s290, '}') = <reduce, statement -> compound_statement>
action(s290, '~') = <reduce, statement -> compound_statement>
action(s290, CONSTANT) = <reduce, statement -> compound_statement>
action(s290, IDENTIFIER) = <reduce, statement -> compound_statement>
action(s290, STRING_LITERAL) = <reduce, statement -> compound_statement>
action(s291, '!') = <reduce, statement -> expression_statement>
action(s291, '&') = <reduce, statement -> expression_statement>
action(s291, '(') = <reduce, statement -> expression_statement>
action(s291, '*') = <reduce, statement -> expression_statement>
action(s291, '+') = <reduce, statement -> expression_statement>
action(s291, '++') = <reduce, statement -> expression_statement>
action(s291, '-') = <reduce, statement -> expression_statement>
action(s291, '--') = <reduce, statement -> expression_statement>
action(s291, ';') = <reduce, statement -> expression_statement>
action(s291, 'break') = <reduce, statement -> expression_statement>
action(s291, 'case') = <reduce, statement -> expression_statement>
action(s291, 'continue') = <reduce, statement -> expression_statement>
action(s291, 'default') = <reduce, statement -> expression_statement>
action(s291, 'do') = <reduce, statement -> expression_statement>
action(s291, 'else') = <reduce, statement -> expression_statement>
action(s291, 'for') = <reduce, statement -> expression_statement>
action(s291, 'goto') = <reduce, statement -> expression_statement>
action(s291, 'if') = <reduce, statement -> expression_statement>
action(s291, 'return') = <reduce, statement -> expression_statement>
action(s291, 'sizeof') = <reduce, statement -> expression_statement>
action(s291, 'switch') = <reduce, statement -> expression_statement>
action(s291, 'while') = <reduce, statement -> expression_statement>
action(s291, '{') = <reduce, statement -> expression_statement>
action(s291, '}') = <reduce, statement -> expression_statement>
action(s291, '~') = <reduce, statement -> expression_statement>
action(s291, CONSTANT) = <reduce, statement -> expression_statement>
action(s291, IDENTIFIER) = <reduce, statement -> expression_statement>
action(s291, STRING_LITERAL) = <reduce, statement -> expression_statement>
action(s292, '!') = <reduce, statement -> iteration_statement>
action(s292, '&') = <reduce, statement -> iteration_statement>
action(s292, '(') = <reduce, statement -> iteration_statement>
action(s292, '*') = <reduce, statement -> iteration_statement>
action(s292, '+') = <reduce, statement -> iteration_statement>
action(s292, '++') = <reduce, statement -> iteration_statement>
action(s292, '-') = <reduce, statement -> iteration_statement>
action(s292, '--') = <reduce, statement -> iteration_statement>
action(s292, ';') = <reduce, statement -> iteration_statement>
action(s292, 'break') = <reduce, statement -> iteration_statement>
action(s292, 'case') = <reduce, statement -> iteration_statement>
action(s292, 'continue') = <reduce, statement -> iteration_statement>
action(s292, 'default') = <reduce, statement -> iteration_statement>
action(s292, 'do') = <reduce, statement -> iteration_statement>
action(s292, 'else') = <reduce, statement -> iteration_statement>
action(s292, 'for') = <reduce, statement -> iteration_statement>
action(s292, 'goto') = <reduce, statement -> iteration_statement>
action(s292, 'if') = <reduce, statement -> iteration_statement>
action(s292, 'return') = <reduce, statement -> iteration_statement>
action(s292, 'sizeof') = <reduce, statement -> iteration_statement>
action(s292, 'switch') = <reduce, statement -> iteration_statement>
action(s292, 'while') = <reduce, statement -> iteration_statement>
action(s292, '{') = <reduce, statement -> iteration_statement>
action(s292, '}') = <reduce, statement -> iteration_statement>
action(s292, '~') = <reduce, statement -> iteration_statement>
action(s292, CONSTANT) = <reduce, statement -> iteration_statement>
action(s292, IDENTIFIER) = <reduce, statement -> iteration_statement>
action(s292, STRING_LITERAL) = <reduce, statement -> iteration_statement>
action(s293, '!') = <reduce, statement -> jump_statement>
action(s293, '&') = <reduce, statement -> jump_statement>
action(s293, '(') = <reduce, statement -> jump_statement>
action(s293, '*') = <reduce, statement -> jump_statement>
action(s293, '+') = <reduce, statement -> jump_statement>
action(s293, '++') = <reduce, statement -> jump_statement>
action(s293, '-') = <reduce, statement -> jump_statement>
action(s293, '--') = <reduce, statement -> jump_statement>
action(s293, ';') = <reduce, statement -> jump_statement>
action(s293, 'break') = <reduce, statement -> jump_statement>
action(s293, 'case') = <reduce, statement -> jump_statement>
action(s293, 'continue') = <reduce, statement -> jump_statement>
action(s293, 'default') = <reduce, statement -> jump_statement>
action(s293, 'do') = <reduce, statement -> jump_statement>
action(s293, 'else') = <reduce, statement -> jump_statement>
action(s293, 'for') = <reduce, statement -> jump_statement>
action(s293, 'goto') = <reduce, statement -> jump_statement>
action(s293, 'if') = <reduce, statement -> jump_statement>
action(s293, 'return') = <reduce, statement -> jump_statement>
action(s293, 'sizeof') = <reduce, statement -> jump_statement>
action(s293, 'switch') = <reduce, statement -> jump_statement>
action(s293, 'while') = <reduce, statement -> jump_statement>
action(s293, '{') = <reduce, statement -> jump_statement>
action(s293, '}') = <reduce, statement -> jump_statement>
action(s293, '~') = <reduce, statement -> jump_statement>
action(s293, CONSTANT) = <reduce, statement -> jump_statement>
action(s293, IDENTIFIER) = <reduce, statement -> jump_statement>
action(s293, STRING_LITERAL) = <reduce, statement -> jump_statement>
action(s294, '!') = <reduce, statement -> labeled_statement>
action(s294, '&') = <reduce, statement -> labeled_statement>
action(s294, '(') = <reduce, statement -> labeled_statement>
action(s294, '*') = <reduce, statement -> labeled_statement>
action(s294, '+') = <reduce, statement -> labeled_statement>
action(s294, '++') = <reduce, statement -> labeled_statement>
action(s294, '-') = <reduce, statement -> labeled_statement>
action(s294, '--') = <reduce, statement -> labeled_statement>
action(s294, ';') = <reduce, statement -> labeled_statement>
action(s294, 'break') = <reduce, statement -> labeled_statement>
action(s294, 'case') = <reduce, statement -> labeled_statement>
action(s294, 'continue') = <reduce, statement -> labeled_statement>
action(s294, 'default') = <reduce, statement -> labeled_statement>
action(s294, 'do') = <reduce, statement -> labeled_statement>
action(s294, 'else') = <reduce, statement -> labeled_statement>
action(s294, 'for') = <reduce, statement -> labeled_statement>
action(s294, 'goto') = <reduce, statement -> labeled_statement>
action(s294, 'if') = <reduce, statement -> labeled_statement>
action(s294, 'return') = <reduce, statement -> labeled_statement>
action(s294, 'sizeof') = <reduce, statement -> labeled_statement>
action(s294, 'switch') = <reduce, statement -> labeled_statement>
action(s294, 'while') = <reduce, statement -> labeled_statement>
action(s294, '{') = <reduce, statement -> labeled_statement>
action(s294, '}') = <reduce, statement -> labeled_statement>
action(s294, '~') = <reduce, statement -> labeled_statement>
action(s294, CONSTANT) = <reduce, statement -> labeled_statement>
action(s294, IDENTIFIER) = <reduce, statement -> labeled_statement>
action(s294, STRING_LITERAL) = <reduce, statement -> labeled_statement>
action(s295, '!') = <reduce, statement -> selection_statement>
action(s295, '&') = <reduce, statement -> selection_statement>
action(s295, '(') = <reduce, statement -> selection_statement>
action(s295, '*') = <reduce, statement -> selection_statement>
action(s295, '+') = <reduce, statement -> selection_statement>
action(s295, '++') = <reduce, statement -> selection_statement>
action(s295, '-') = <reduce, statement -> selection_statement>
action(s295, '--') = <reduce, statement -> selection_statement>
action(s295, ';') = <reduce, statement -> selection_statement>
action(s295, 'break') = <reduce, statement -> selection_statement>
action(s295, 'case') = <reduce, statement -> selection_statement>
action(s295, 'continue') = <reduce, statement -> selection_statement>
action(s295, 'default') = <reduce, statement -> selection_statement>
action(s295, 'do') = <reduce, statement -> selection_statement>
action(s295, 'else') = <reduce, statement -> selection_statement>
action(s295, 'for') = <reduce, statement -> selection_statement>
action(s295, 'goto') = <reduce, statement -> selection_statement>
action(s295, 'if') = <reduce, statement -> selection_statement>
action(s295, 'return') = <reduce, statement -> selection_statement>
action(s295, 'sizeof') = <reduce, statement -> selection_statement>
action(s295, 'switch') = <reduce, statement -> selection_statement>
action(s295, 'while') = <reduce, statement -> selection_statement>
action(s295, '{') = <reduce, statement -> selection_statement>
action(s295, '}') = <reduce, statement -> selection_statement>
action(s295, '~') = <reduce, statement -> selection_statement>
action(s295, CONSTANT) = <reduce, statement -> selection_statement>
action(s295, IDENTIFIER) = <reduce, statement -> selection_statement>
action(s295, STRING_LITERAL) = <reduce, statement -> selection_statement>
action(s296, '!') = <reduce, statement_list -> statement>
action(s296, '&') = <reduce, statement_list -> statement>
action(s296, '(') = <reduce, statement_list -> statement>
action(s296, '*') = <reduce, statement_list -> statement>
action(s296, '+') = <reduce, statement_list -> statement>
action(s296, '++') = <reduce, statement_list -> statement>
action(s296, '-') = <reduce, statement_list -> statement>
action(s296, '--') = <reduce, statement_list -> statement>
action(s296, ';') = <reduce, statement_list -> statement>
action(s296, 'break') = <reduce, statement_list -> statement>
action(s296, 'case') = <reduce, statement_list -> statement>
action(s296, 'continue') = <reduce, statement_list -> statement>
action(s296, 'default') = <reduce, statement_list -> statement>
action(s296, 'do') = <reduce, statement_list -> statement>
action(s296, 'for') = <reduce, statement_list -> statement>
action(s296, 'goto') = <reduce, statement_list -> statement>
action(s296, 'if') = <reduce, statement_list -> statement>
action(s296, 'return') = <reduce, statement_list -> statement>
action(s296, 'sizeof') = <reduce, statement_list -> statement>
action(s296, 'switch') = <reduce, statement_list -> statement>
action(s296, 'while') = <reduce, statement_list -> statement>
action(s296, '{') = <reduce, statement_list -> statement>
action(s296, '}') = <reduce, statement_list -> statement>
action(s296, '~') = <reduce, statement_list -> statement>
action(s296, CONSTANT) = <reduce, statement_list -> statement>
action(s296, IDENTIFIER) = <reduce, statement_list -> statement>
action(s296, STRING_LITERAL) = <reduce, statement_list -> statement>
action(s297, '!') = <reduce, statement_list -> statement_list statement>
action(s297, '&') = <reduce, statement_list -> statement_list statement>
action(s297, '(') = <reduce, statement_list -> statement_list statement>
action(s297, '*') = <reduce, statement_list -> statement_list statement>
action(s297, '+') = <reduce, statement_list -> statement_list statement>
action(s297, '++') = <reduce, statement_list -> statement_list statement>
action(s297, '-') = <reduce, statement_list -> statement_list statement>
action(s297, '--') = <reduce, statement_list -> statement_list statement>
action(s297, ';') = <reduce, statement_list -> statement_list statement>
action(s297, 'break') = <reduce, statement_list -> statement_list statement>
action(s297, 'case') = <reduce, statement_list -> statement_list statement>
action(s297, 'continue') = <reduce, statement_list -> statement_list statement>
action(s297, 'default') = <reduce, statement_list -> statement_list statement>
action(s297, 'do') = <reduce, statement_list -> statement_list statement>
action(s297, 'for') = <reduce, statement_list -> statement_list statement>
action(s297, 'goto') = <reduce, statement_list -> statement_list statement>
action(s297, 'if') = <reduce, statement_list -> statement_list statement>
action(s297, 'return') = <reduce, statement_list -> statement_list statement>
action(s297, 'sizeof') = <reduce, statement_list -> statement_list statement>
action(s297, 'switch') = <reduce, statement_list -> statement_list statement>
action(s297, 'while') = <reduce, statement_list -> statement_list statement>
action(s297, '{') = <reduce, statement_list -> statement_list statement>
action(s297, '}') = <reduce, statement_list -> statement_list statement>
action(s297, '~') = <reduce, statement_list -> statement_list statement>
action(s297, CONSTANT) = <reduce, statement_list -> statement_list statement>
action(s297, IDENTIFIER) = <reduce, statement_list -> statement_list statement>
action(s297, STRING_LITERAL) = <reduce, statement_list -> statement_list statement>
action(s298, '(') = <reduce, storage_class_specifier -> 'auto'>
action(s298, ')') = <reduce, storage_class_specifier -> 'auto'>
action(s298, '*') = <reduce, storage_class_specifier -> 'auto'>
action(s298, ',') = <reduce, storage_class_specifier -> 'auto'>
action(s298, ';') = <reduce, storage_class_specifier -> 'auto'>
action(s298, '[') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'auto') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'char') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'const') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'double') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'enum') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'extern') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'float') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'int') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'long') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'register') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'short') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'signed') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'static') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'struct') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'typedef') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'union') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'unsigned') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'void') = <reduce, storage_class_specifier -> 'auto'>
action(s298, 'volatile') = <reduce, storage_class_specifier -> 'auto'>
action(s298, IDENTIFIER) = <reduce, storage_class_specifier -> 'auto'>
action(s298, TYPE_NAME) = <reduce, storage_class_specifier -> 'auto'>
action(s299, '(') = <reduce, storage_class_specifier -> 'extern'>
action(s299, ')') = <reduce, storage_class_specifier -> 'extern'>
action(s299, '*') = <reduce, storage_class_specifier -> 'extern'>
action(s299, ',') = <reduce, storage_class_specifier -> 'extern'>
action(s299, ';') = <reduce, storage_class_specifier -> 'extern'>
action(s299, '[') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'auto') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'char') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'const') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'double') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'enum') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'extern') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'float') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'int') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'long') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'register') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'short') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'signed') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'static') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'struct') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'typedef') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'union') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'unsigned') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'void') = <reduce, storage_class_specifier -> 'extern'>
action(s299, 'volatile') = <reduce, storage_class_specifier -> 'extern'>
action(s299, IDENTIFIER) = <reduce, storage_class_specifier -> 'extern'>
action(s299, TYPE_NAME) = <reduce, storage_class_specifier -> 'extern'>
action(s300, '(') = <reduce, storage_class_specifier -> 'register'>
action(s300, ')') = <reduce, storage_class_specifier -> 'register'>
action(s300, '*') = <reduce, storage_class_specifier -> 'register'>
action(s300, ',') = <reduce, storage_class_specifier -> 'register'>
action(s300, ';') = <reduce, storage_class_specifier -> 'register'>
action(s300, '[') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'auto') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'char') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'const') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'double') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'enum') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'extern') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'float') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'int') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'long') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'register') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'short') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'signed') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'static') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'struct') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'typedef') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'union') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'unsigned') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'void') = <reduce, storage_class_specifier -> 'register'>
action(s300, 'volatile') = <reduce, storage_class_specifier -> 'register'>
action(s300, IDENTIFIER) = <reduce, storage_class_specifier -> 'register'>
action(s300, TYPE_NAME) = <reduce, storage_class_specifier -> 'register'>
action(s301, '(') = <reduce, storage_class_specifier -> 'static'>
action(s301, ')') = <reduce, storage_class_specifier -> 'static'>
action(s301, '*') = <reduce, storage_class_specifier -> 'static'>
action(s301, ',') = <reduce, storage_class_specifier -> 'static'>
action(s301, ';') = <reduce, storage_class_specifier -> 'static'>
action(s301, '[') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'auto') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'char') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'const') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'double') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'enum') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'extern') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'float') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'int') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'long') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'register') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'short') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'signed') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'static') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'struct') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'typedef') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'union') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'unsigned') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'void') = <reduce, storage_class_specifier -> 'static'>
action(s301, 'volatile') = <reduce, storage_class_specifier -> 'static'>
action(s301, IDENTIFIER) = <reduce, storage_class_specifier -> 'static'>
action(s301, TYPE_NAME) = <reduce, storage_class_specifier -> 'static'>
action(s302, '(') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, ')') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, '*') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, ',') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, ';') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, '[') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'auto') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'char') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'const') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'double') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'enum') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'extern') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'float') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'int') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'long') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'register') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'short') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'signed') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'static') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'struct') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'typedef') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'union') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'unsigned') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'void') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, 'volatile') = <reduce, storage_class_specifier -> 'typedef'>
action(s302, IDENTIFIER) = <reduce, storage_class_specifier -> 'typedef'>
action(s302, TYPE_NAME) = <reduce, storage_class_specifier -> 'typedef'>
action(s303, ',') = <shift, s133>
action(s303, ';') = <shift, s304>
action(s304, 'char') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s304, 'const') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s304, 'double') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s304, 'enum') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s304, 'float') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s304, 'int') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s304, 'long') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s304, 'short') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s304, 'signed') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s304, 'struct') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s304, 'union') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s304, 'unsigned') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s304, 'void') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s304, 'volatile') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s304, '}') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s304, TYPE_NAME) = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s305, 'char') = <reduce, struct_declaration_list -> struct_declaration>
action(s305, 'const') = <reduce, struct_declaration_list -> struct_declaration>
action(s305, 'double') = <reduce, struct_declaration_list -> struct_declaration>
action(s305, 'enum') = <reduce, struct_declaration_list -> struct_declaration>
action(s305, 'float') = <reduce, struct_declaration_list -> struct_declaration>
action(s305, 'int') = <reduce, struct_declaration_list -> struct_declaration>
action(s305, 'long') = <reduce, struct_declaration_list -> struct_declaration>
action(s305, 'short') = <reduce, struct_declaration_list -> struct_declaration>
action(s305, 'signed') = <reduce, struct_declaration_list -> struct_declaration>
action(s305, 'struct') = <reduce, struct_declaration_list -> struct_declaration>
action(s305, 'union') = <reduce, struct_declaration_list -> struct_declaration>
action(s305, 'unsigned') = <reduce, struct_declaration_list -> struct_declaration>
action(s305, 'void') = <reduce, struct_declaration_list -> struct_declaration>
action(s305, 'volatile') = <reduce, struct_declaration_list -> struct_declaration>
action(s305, '}') = <reduce, struct_declaration_list -> struct_declaration>
action(s305, TYPE_NAME) = <reduce, struct_declaration_list -> struct_declaration>
action(s306, 'char') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s306, 'const') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s306, 'double') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s306, 'enum') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s306, 'float') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s306, 'int') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s306, 'long') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s306, 'short') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s306, 'signed') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s306, 'struct') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s306, 'union') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s306, 'unsigned') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s306, 'void') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s306, 'volatile') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s306, '}') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s306, TYPE_NAME) = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s307, ',') = <reduce, struct_declarator -> ':' constant_expression>
action(s307, ';') = <reduce, struct_declarator -> ':' constant_expression>
action(s308, ',') = <reduce, struct_declarator -> declarator>
action(s308, ':') = <shift, s51>
action(s308, ';') = <reduce, struct_declarator -> declarator>
action(s309, ',') = <reduce, struct_declarator -> declarator ':' constant_expression>
action(s309, ';') = <reduce, struct_declarator -> declarator ':' constant_expression>
action(s310, ',') = <reduce, struct_declarator_list -> struct_declarator>
action(s310, ';') = <reduce, struct_declarator_list -> struct_declarator>
action(s311, ',') = <reduce, struct_declarator_list -> struct_declarator_list ',' struct_declarator>
action(s311, ';') = <reduce, struct_declarator_list -> struct_declarator_list ',' struct_declarator>
action(s312, '{') = <reduce, struct_or_union -> 'struct'>
action(s312, IDENTIFIER) = <reduce, struct_or_union -> 'struct'>
action(s313, '{') = <reduce, struct_or_union -> 'union'>
action(s313, IDENTIFIER) = <reduce, struct_or_union -> 'union'>
action(s314, '{') = <shift, s164>
action(s314, IDENTIFIER) = <shift, s316>
action(s315, '(') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, ')') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, '*') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, ',') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, ':') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, ';') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, '[') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'auto') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'char') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'const') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'double') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'enum') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'extern') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'float') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'int') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'long') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'register') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'short') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'signed') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'static') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'struct') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'typedef') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'union') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'unsigned') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'void') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, 'volatile') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, IDENTIFIER) = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s315, TYPE_NAME) = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s316, '(') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, ')') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, '*') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, ',') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, ':') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, ';') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, '[') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'auto') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'char') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'const') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'double') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'enum') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'extern') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'float') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'int') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'long') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'register') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'short') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'signed') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'static') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'struct') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'typedef') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'union') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'unsigned') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'void') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, 'volatile') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, '{') = <shift, s165>
action(s316, IDENTIFIER) = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s316, TYPE_NAME) = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s317, '(') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, ')') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, '*') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, ',') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, ':') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, ';') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, '[') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'auto') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'char') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'const') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'double') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'enum') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'extern') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'float') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'int') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'long') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'register') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'short') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'signed') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'static') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'struct') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'typedef') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'union') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'unsigned') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'void') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, 'volatile') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, IDENTIFIER) = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s317, TYPE_NAME) = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s318, '(') = <reduce, translation_unit -> external_declaration>
action(s318, '*') = <reduce, translation_unit -> external_declaration>
action(s318, 'auto') = <reduce, translation_unit -> external_declaration>
action(s318, 'char') = <reduce, translation_unit -> external_declaration>
action(s318, 'const') = <reduce, translation_unit -> external_declaration>
action(s318, 'double') = <reduce, translation_unit -> external_declaration>
action(s318, 'enum') = <reduce, translation_unit -> external_declaration>
action(s318, 'extern') = <reduce, translation_unit -> external_declaration>
action(s318, 'float') = <reduce, translation_unit -> external_declaration>
action(s318, 'int') = <reduce, translation_unit -> external_declaration>
action(s318, 'long') = <reduce, translation_unit -> external_declaration>
action(s318, 'register') = <reduce, translation_unit -> external_declaration>
action(s318, 'short') = <reduce, translation_unit -> external_declaration>
action(s318, 'signed') = <reduce, translation_unit -> external_declaration>
action(s318, 'static') = <reduce, translation_unit -> external_declaration>
action(s318, 'struct') = <reduce, translation_unit -> external_declaration>
action(s318, 'typedef') = <reduce, translation_unit -> external_declaration>
action(s318, 'union') = <reduce, translation_unit -> external_declaration>
action(s318, 'unsigned') = <reduce, translation_unit -> external_declaration>
action(s318, 'void') = <reduce, translation_unit -> external_declaration>
action(s318, 'volatile') = <reduce, translation_unit -> external_declaration>
action(s318, IDENTIFIER) = <reduce, translation_unit -> external_declaration>
action(s318, TYPE_NAME) = <reduce, translation_unit -> external_declaration>
action(s319, '(') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, '*') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'auto') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'char') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'const') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'double') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'enum') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'extern') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'float') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'int') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'long') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'register') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'short') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'signed') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'static') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'struct') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'typedef') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'union') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'unsigned') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'void') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, 'volatile') = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, IDENTIFIER) = <reduce, translation_unit -> translation_unit external_declaration>
action(s319, TYPE_NAME) = <reduce, translation_unit -> translation_unit external_declaration>
action(s320, ')') = <reduce, type_name -> specifier_qualifier_list abstract_declarator>
action(s321, '(') = <reduce, type_qualifier -> 'const'>
action(s321, ')') = <reduce, type_qualifier -> 'const'>
action(s321, '*') = <reduce, type_qualifier -> 'const'>
action(s321, ',') = <reduce, type_qualifier -> 'const'>
action(s321, ':') = <reduce, type_qualifier -> 'const'>
action(s321, ';') = <reduce, type_qualifier -> 'const'>
action(s321, '[') = <reduce, type_qualifier -> 'const'>
action(s321, 'auto') = <reduce, type_qualifier -> 'const'>
action(s321, 'char') = <reduce, type_qualifier -> 'const'>
action(s321, 'const') = <reduce, type_qualifier -> 'const'>
action(s321, 'double') = <reduce, type_qualifier -> 'const'>
action(s321, 'enum') = <reduce, type_qualifier -> 'const'>
action(s321, 'extern') = <reduce, type_qualifier -> 'const'>
action(s321, 'float') = <reduce, type_qualifier -> 'const'>
action(s321, 'int') = <reduce, type_qualifier -> 'const'>
action(s321, 'long') = <reduce, type_qualifier -> 'const'>
action(s321, 'register') = <reduce, type_qualifier -> 'const'>
action(s321, 'short') = <reduce, type_qualifier -> 'const'>
action(s321, 'signed') = <reduce, type_qualifier -> 'const'>
action(s321, 'static') = <reduce, type_qualifier -> 'const'>
action(s321, 'struct') = <reduce, type_qualifier -> 'const'>
action(s321, 'typedef') = <reduce, type_qualifier -> 'const'>
action(s321, 'union') = <reduce, type_qualifier -> 'const'>
action(s321, 'unsigned') = <reduce, type_qualifier -> 'const'>
action(s321, 'void') = <reduce, type_qualifier -> 'const'>
action(s321, 'volatile') = <reduce, type_qualifier -> 'const'>
action(s321, IDENTIFIER) = <reduce, type_qualifier -> 'const'>
action(s321, TYPE_NAME) = <reduce, type_qualifier -> 'const'>
action(s322, '(') = <reduce, type_qualifier -> 'volatile'>
action(s322, ')') = <reduce, type_qualifier -> 'volatile'>
action(s322, '*') = <reduce, type_qualifier -> 'volatile'>
action(s322, ',') = <reduce, type_qualifier -> 'volatile'>
action(s322, ':') = <reduce, type_qualifier -> 'volatile'>
action(s322, ';') = <reduce, type_qualifier -> 'volatile'>
action(s322, '[') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'auto') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'char') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'const') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'double') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'enum') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'extern') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'float') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'int') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'long') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'register') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'short') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'signed') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'static') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'struct') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'typedef') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'union') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'unsigned') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'void') = <reduce, type_qualifier -> 'volatile'>
action(s322, 'volatile') = <reduce, type_qualifier -> 'volatile'>
action(s322, IDENTIFIER) = <reduce, type_qualifier -> 'volatile'>
action(s322, TYPE_NAME) = <reduce, type_qualifier -> 'volatile'>
action(s323, '(') = <reduce, type_qualifier_list -> type_qualifier>
action(s323, ')') = <reduce, type_qualifier_list -> type_qualifier>
action(s323, '*') = <reduce, type_qualifier_list -> type_qualifier>
action(s323, ',') = <reduce, type_qualifier_list -> type_qualifier>
action(s323, '[') = <reduce, type_qualifier_list -> type_qualifier>
action(s323, 'const') = <reduce, type_qualifier_list -> type_qualifier>
action(s323, 'volatile') = <reduce, type_qualifier_list -> type_qualifier>
action(s323, IDENTIFIER) = <reduce, type_qualifier_list -> type_qualifier>
action(s324, '(') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s324, ')') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s324, '*') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s324, ',') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s324, '[') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s324, 'const') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s324, 'volatile') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s324, IDENTIFIER) = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s325, '(') = <reduce, type_specifier -> 'char'>
action(s325, ')') = <reduce, type_specifier -> 'char'>
action(s325, '*') = <reduce, type_specifier -> 'char'>
action(s325, ',') = <reduce, type_specifier -> 'char'>
action(s325, ':') = <reduce, type_specifier -> 'char'>
action(s325, ';') = <reduce, type_specifier -> 'char'>
action(s325, '[') = <reduce, type_specifier -> 'char'>
action(s325, 'auto') = <reduce, type_specifier -> 'char'>
action(s325, 'char') = <reduce, type_specifier -> 'char'>
action(s325, 'const') = <reduce, type_specifier -> 'char'>
action(s325, 'double') = <reduce, type_specifier -> 'char'>
action(s325, 'enum') = <reduce, type_specifier -> 'char'>
action(s325, 'extern') = <reduce, type_specifier -> 'char'>
action(s325, 'float') = <reduce, type_specifier -> 'char'>
action(s325, 'int') = <reduce, type_specifier -> 'char'>
action(s325, 'long') = <reduce, type_specifier -> 'char'>
action(s325, 'register') = <reduce, type_specifier -> 'char'>
action(s325, 'short') = <reduce, type_specifier -> 'char'>
action(s325, 'signed') = <reduce, type_specifier -> 'char'>
action(s325, 'static') = <reduce, type_specifier -> 'char'>
action(s325, 'struct') = <reduce, type_specifier -> 'char'>
action(s325, 'typedef') = <reduce, type_specifier -> 'char'>
action(s325, 'union') = <reduce, type_specifier -> 'char'>
action(s325, 'unsigned') = <reduce, type_specifier -> 'char'>
action(s325, 'void') = <reduce, type_specifier -> 'char'>
action(s325, 'volatile') = <reduce, type_specifier -> 'char'>
action(s325, IDENTIFIER) = <reduce, type_specifier -> 'char'>
action(s325, TYPE_NAME) = <reduce, type_specifier -> 'char'>
action(s326, '(') = <reduce, type_specifier -> 'double'>
action(s326, ')') = <reduce, type_specifier -> 'double'>
action(s326, '*') = <reduce, type_specifier -> 'double'>
action(s326, ',') = <reduce, type_specifier -> 'double'>
action(s326, ':') = <reduce, type_specifier -> 'double'>
action(s326, ';') = <reduce, type_specifier -> 'double'>
action(s326, '[') = <reduce, type_specifier -> 'double'>
action(s326, 'auto') = <reduce, type_specifier -> 'double'>
action(s326, 'char') = <reduce, type_specifier -> 'double'>
action(s326, 'const') = <reduce, type_specifier -> 'double'>
action(s326, 'double') = <reduce, type_specifier -> 'double'>
action(s326, 'enum') = <reduce, type_specifier -> 'double'>
action(s326, 'extern') = <reduce, type_specifier -> 'double'>
action(s326, 'float') = <reduce, type_specifier -> 'double'>
action(s326, 'int') = <reduce, type_specifier -> 'double'>
action(s326, 'long') = <reduce, type_specifier -> 'double'>
action(s326, 'register') = <reduce, type_specifier -> 'double'>
action(s326, 'short') = <reduce, type_specifier -> 'double'>
action(s326, 'signed') = <reduce, type_specifier -> 'double'>
action(s326, 'static') = <reduce, type_specifier -> 'double'>
action(s326, 'struct') = <reduce, type_specifier -> 'double'>
action(s326, 'typedef') = <reduce, type_specifier -> 'double'>
action(s326, 'union') = <reduce, type_specifier -> 'double'>
action(s326, 'unsigned') = <reduce, type_specifier -> 'double'>
action(s326, 'void') = <reduce, type_specifier -> 'double'>
action(s326, 'volatile') = <reduce, type_specifier -> 'double'>
action(s326, IDENTIFIER) = <reduce, type_specifier -> 'double'>
action(s326, TYPE_NAME) = <reduce, type_specifier -> 'double'>
action(s327, '(') = <reduce, type_specifier -> 'float'>
action(s327, ')') = <reduce, type_specifier -> 'float'>
action(s327, '*') = <reduce, type_specifier -> 'float'>
action(s327, ',') = <reduce, type_specifier -> 'float'>
action(s327, ':') = <reduce, type_specifier -> 'float'>
action(s327, ';') = <reduce, type_specifier -> 'float'>
action(s327, '[') = <reduce, type_specifier -> 'float'>
action(s327, 'auto') = <reduce, type_specifier -> 'float'>
action(s327, 'char') = <reduce, type_specifier -> 'float'>
action(s327, 'const') = <reduce, type_specifier -> 'float'>
action(s327, 'double') = <reduce, type_specifier -> 'float'>
action(s327, 'enum') = <reduce, type_specifier -> 'float'>
action(s327, 'extern') = <reduce, type_specifier -> 'float'>
action(s327, 'float') = <reduce, type_specifier -> 'float'>
action(s327, 'int') = <reduce, type_specifier -> 'float'>
action(s327, 'long') = <reduce, type_specifier -> 'float'>
action(s327, 'register') = <reduce, type_specifier -> 'float'>
action(s327, 'short') = <reduce, type_specifier -> 'float'>
action(s327, 'signed') = <reduce, type_specifier -> 'float'>
action(s327, 'static') = <reduce, type_specifier -> 'float'>
action(s327, 'struct') = <reduce, type_specifier -> 'float'>
action(s327, 'typedef') = <reduce, type_specifier -> 'float'>
action(s327, 'union') = <reduce, type_specifier -> 'float'>
action(s327, 'unsigned') = <reduce, type_specifier -> 'float'>
action(s327, 'void') = <reduce, type_specifier -> 'float'>
action(s327, 'volatile') = <reduce, type_specifier -> 'float'>
action(s327, IDENTIFIER) = <reduce, type_specifier -> 'float'>
action(s327, TYPE_NAME) = <reduce, type_specifier -> 'float'>
action(s328, '(') = <reduce, type_specifier -> 'int'>
action(s328, ')') = <reduce, type_specifier -> 'int'>
action(s328, '*') = <reduce, type_specifier -> 'int'>
action(s328, ',') = <reduce, type_specifier -> 'int'>
action(s328, ':') = <reduce, type_specifier -> 'int'>
action(s328, ';') = <reduce, type_specifier -> 'int'>
action(s328, '[') = <reduce, type_specifier -> 'int'>
action(s328, 'auto') = <reduce, type_specifier -> 'int'>
action(s328, 'char') = <reduce, type_specifier -> 'int'>
action(s328, 'const') = <reduce, type_specifier -> 'int'>
action(s328, 'double') = <reduce, type_specifier -> 'int'>
action(s328, 'enum') = <reduce, type_specifier -> 'int'>
action(s328, 'extern') = <reduce, type_specifier -> 'int'>
action(s328, 'float') = <reduce, type_specifier -> 'int'>
action(s328, 'int') = <reduce, type_specifier -> 'int'>
action(s328, 'long') = <reduce, type_specifier -> 'int'>
action(s328, 'register') = <reduce, type_specifier -> 'int'>
action(s328, 'short') = <reduce, type_specifier -> 'int'>
action(s328, 'signed') = <reduce, type_specifier -> 'int'>
action(s328, 'static') = <reduce, type_specifier -> 'int'>
action(s328, 'struct') = <reduce, type_specifier -> 'int'>
action(s328, 'typedef') = <reduce, type_specifier -> 'int'>
action(s328, 'union') = <reduce, type_specifier -> 'int'>
action(s328, 'unsigned') = <reduce, type_specifier -> 'int'>
action(s328, 'void') = <reduce, type_specifier -> 'int'>
action(s328, 'volatile') = <reduce, type_specifier -> 'int'>
action(s328, IDENTIFIER) = <reduce, type_specifier -> 'int'>
action(s328, TYPE_NAME) = <reduce, type_specifier -> 'int'>
action(s329, '(') = <reduce, type_specifier -> 'long'>
action(s329, ')') = <reduce, type_specifier -> 'long'>
action(s329, '*') = <reduce, type_specifier -> 'long'>
action(s329, ',') = <reduce, type_specifier -> 'long'>
action(s329, ':') = <reduce, type_specifier -> 'long'>
action(s329, ';') = <reduce, type_specifier -> 'long'>
action(s329, '[') = <reduce, type_specifier -> 'long'>
action(s329, 'auto') = <reduce, type_specifier -> 'long'>
action(s329, 'char') = <reduce, type_specifier -> 'long'>
action(s329, 'const') = <reduce, type_specifier -> 'long'>
action(s329, 'double') = <reduce, type_specifier -> 'long'>
action(s329, 'enum') = <reduce, type_specifier -> 'long'>
action(s329, 'extern') = <reduce, type_specifier -> 'long'>
action(s329, 'float') = <reduce, type_specifier -> 'long'>
action(s329, 'int') = <reduce, type_specifier -> 'long'>
action(s329, 'long') = <reduce, type_specifier -> 'long'>
action(s329, 'register') = <reduce, type_specifier -> 'long'>
action(s329, 'short') = <reduce, type_specifier -> 'long'>
action(s329, 'signed') = <reduce, type_specifier -> 'long'>
action(s329, 'static') = <reduce, type_specifier -> 'long'>
action(s329, 'struct') = <reduce, type_specifier -> 'long'>
action(s329, 'typedef') = <reduce, type_specifier -> 'long'>
action(s329, 'union') = <reduce, type_specifier -> 'long'>
action(s329, 'unsigned') = <reduce, type_specifier -> 'long'>
action(s329, 'void') = <reduce, type_specifier -> 'long'>
action(s329, 'volatile') = <reduce, type_specifier -> 'long'>
action(s329, IDENTIFIER) = <reduce, type_specifier -> 'long'>
action(s329, TYPE_NAME) = <reduce, type_specifier -> 'long'>
action(s330, '(') = <reduce, type_specifier -> 'short'>
action(s330, ')') = <reduce, type_specifier -> 'short'>
action(s330, '*') = <reduce, type_specifier -> 'short'>
action(s330, ',') = <reduce, type_specifier -> 'short'>
action(s330, ':') = <reduce, type_specifier -> 'short'>
action(s330, ';') = <reduce, type_specifier -> 'short'>
action(s330, '[') = <reduce, type_specifier -> 'short'>
action(s330, 'auto') = <reduce, type_specifier -> 'short'>
action(s330, 'char') = <reduce, type_specifier -> 'short'>
action(s330, 'const') = <reduce, type_specifier -> 'short'>
action(s330, 'double') = <reduce, type_specifier -> 'short'>
action(s330, 'enum') = <reduce, type_specifier -> 'short'>
action(s330, 'extern') = <reduce, type_specifier -> 'short'>
action(s330, 'float') = <reduce, type_specifier -> 'short'>
action(s330, 'int') = <reduce, type_specifier -> 'short'>
action(s330, 'long') = <reduce, type_specifier -> 'short'>
action(s330, 'register') = <reduce, type_specifier -> 'short'>
action(s330, 'short') = <reduce, type_specifier -> 'short'>
action(s330, 'signed') = <reduce, type_specifier -> 'short'>
action(s330, 'static') = <reduce, type_specifier -> 'short'>
action(s330, 'struct') = <reduce, type_specifier -> 'short'>
action(s330, 'typedef') = <reduce, type_specifier -> 'short'>
action(s330, 'union') = <reduce, type_specifier -> 'short'>
action(s330, 'unsigned') = <reduce, type_specifier -> 'short'>
action(s330, 'void') = <reduce, type_specifier -> 'short'>
action(s330, 'volatile') = <reduce, type_specifier -> 'short'>
action(s330, IDENTIFIER) = <reduce, type_specifier -> 'short'>
action(s330, TYPE_NAME) = <reduce, type_specifier -> 'short'>
action(s331, '(') = <reduce, type_specifier -> 'signed'>
action(s331, ')') = <reduce, type_specifier -> 'signed'>
action(s331, '*') = <reduce, type_specifier -> 'signed'>
action(s331, ',') = <reduce, type_specifier -> 'signed'>
action(s331, ':') = <reduce, type_specifier -> 'signed'>
action(s331, ';') = <reduce, type_specifier -> 'signed'>
action(s331, '[') = <reduce, type_specifier -> 'signed'>
action(s331, 'auto') = <reduce, type_specifier -> 'signed'>
action(s331, 'char') = <reduce, type_specifier -> 'signed'>
action(s331, 'const') = <reduce, type_specifier -> 'signed'>
action(s331, 'double') = <reduce, type_specifier -> 'signed'>
action(s331, 'enum') = <reduce, type_specifier -> 'signed'>
action(s331, 'extern') = <reduce, type_specifier -> 'signed'>
action(s331, 'float') = <reduce, type_specifier -> 'signed'>
action(s331, 'int') = <reduce, type_specifier -> 'signed'>
action(s331, 'long') = <reduce, type_specifier -> 'signed'>
action(s331, 'register') = <reduce, type_specifier -> 'signed'>
action(s331, 'short') = <reduce, type_specifier -> 'signed'>
action(s331, 'signed') = <reduce, type_specifier -> 'signed'>
action(s331, 'static') = <reduce, type_specifier -> 'signed'>
action(s331, 'struct') = <reduce, type_specifier -> 'signed'>
action(s331, 'typedef') = <reduce, type_specifier -> 'signed'>
action(s331, 'union') = <reduce, type_specifier -> 'signed'>
action(s331, 'unsigned') = <reduce, type_specifier -> 'signed'>
action(s331, 'void') = <reduce, type_specifier -> 'signed'>
action(s331, 'volatile') = <reduce, type_specifier -> 'signed'>
action(s331, IDENTIFIER) = <reduce, type_specifier -> 'signed'>
action(s331, TYPE_NAME) = <reduce, type_specifier -> 'signed'>
action(s332, '(') = <reduce, type_specifier -> 'unsigned'>
action(s332, ')') = <reduce, type_specifier -> 'unsigned'>
action(s332, '*') = <reduce, type_specifier -> 'unsigned'>
action(s332, ',') = <reduce, type_specifier -> 'unsigned'>
action(s332, ':') = <reduce, type_specifier -> 'unsigned'>
action(s332, ';') = <reduce, type_specifier -> 'unsigned'>
action(s332, '[') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'auto') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'char') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'const') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'double') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'enum') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'extern') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'float') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'int') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'long') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'register') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'short') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'signed') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'static') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'struct') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'typedef') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'union') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'unsigned') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'void') = <reduce, type_specifier -> 'unsigned'>
action(s332, 'volatile') = <reduce, type_specifier -> 'unsigned'>
action(s332, IDENTIFIER) = <reduce, type_specifier -> 'unsigned'>
action(s332, TYPE_NAME) = <reduce, type_specifier -> 'unsigned'>
action(s333, '(') = <reduce, type_specifier -> 'void'>
action(s333, ')') = <reduce, type_specifier -> 'void'>
action(s333, '*') = <reduce, type_specifier -> 'void'>
action(s333, ',') = <reduce, type_specifier -> 'void'>
action(s333, ':') = <reduce, type_specifier -> 'void'>
action(s333, ';') = <reduce, type_specifier -> 'void'>
action(s333, '[') = <reduce, type_specifier -> 'void'>
action(s333, 'auto') = <reduce, type_specifier -> 'void'>
action(s333, 'char') = <reduce, type_specifier -> 'void'>
action(s333, 'const') = <reduce, type_specifier -> 'void'>
action(s333, 'double') = <reduce, type_specifier -> 'void'>
action(s333, 'enum') = <reduce, type_specifier -> 'void'>
action(s333, 'extern') = <reduce, type_specifier -> 'void'>
action(s333, 'float') = <reduce, type_specifier -> 'void'>
action(s333, 'int') = <reduce, type_specifier -> 'void'>
action(s333, 'long') = <reduce, type_specifier -> 'void'>
action(s333, 'register') = <reduce, type_specifier -> 'void'>
action(s333, 'short') = <reduce, type_specifier -> 'void'>
action(s333, 'signed') = <reduce, type_specifier -> 'void'>
action(s333, 'static') = <reduce, type_specifier -> 'void'>
action(s333, 'struct') = <reduce, type_specifier -> 'void'>
action(s333, 'typedef') = <reduce, type_specifier -> 'void'>
action(s333, 'union') = <reduce, type_specifier -> 'void'>
action(s333, 'unsigned') = <reduce, type_specifier -> 'void'>
action(s333, 'void') = <reduce, type_specifier -> 'void'>
action(s333, 'volatile') = <reduce, type_specifier -> 'void'>
action(s333, IDENTIFIER) = <reduce, type_specifier -> 'void'>
action(s333, TYPE_NAME) = <reduce, type_specifier -> 'void'>
action(s334, '(') = <reduce, type_specifier -> TYPE_NAME>
action(s334, ')') = <reduce, type_specifier -> TYPE_NAME>
action(s334, '*') = <reduce, type_specifier -> TYPE_NAME>
action(s334, ',') = <reduce, type_specifier -> TYPE_NAME>
action(s334, ':') = <reduce, type_specifier -> TYPE_NAME>
action(s334, ';') = <reduce, type_specifier -> TYPE_NAME>
action(s334, '[') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'auto') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'char') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'const') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'double') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'enum') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'extern') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'float') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'int') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'long') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'register') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'short') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'signed') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'static') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'struct') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'typedef') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'union') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'unsigned') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'void') = <reduce, type_specifier -> TYPE_NAME>
action(s334, 'volatile') = <reduce, type_specifier -> TYPE_NAME>
action(s334, IDENTIFIER) = <reduce, type_specifier -> TYPE_NAME>
action(s334, TYPE_NAME) = <reduce, type_specifier -> TYPE_NAME>
action(s335, '(') = <reduce, type_specifier -> enum_specifier>
action(s335, ')') = <reduce, type_specifier -> enum_specifier>
action(s335, '*') = <reduce, type_specifier -> enum_specifier>
action(s335, ',') = <reduce, type_specifier -> enum_specifier>
action(s335, ':') = <reduce, type_specifier -> enum_specifier>
action(s335, ';') = <reduce, type_specifier -> enum_specifier>
action(s335, '[') = <reduce, type_specifier -> enum_specifier>
action(s335, 'auto') = <reduce, type_specifier -> enum_specifier>
action(s335, 'char') = <reduce, type_specifier -> enum_specifier>
action(s335, 'const') = <reduce, type_specifier -> enum_specifier>
action(s335, 'double') = <reduce, type_specifier -> enum_specifier>
action(s335, 'enum') = <reduce, type_specifier -> enum_specifier>
action(s335, 'extern') = <reduce, type_specifier -> enum_specifier>
action(s335, 'float') = <reduce, type_specifier -> enum_specifier>
action(s335, 'int') = <reduce, type_specifier -> enum_specifier>
action(s335, 'long') = <reduce, type_specifier -> enum_specifier>
action(s335, 'register') = <reduce, type_specifier -> enum_specifier>
action(s335, 'short') = <reduce, type_specifier -> enum_specifier>
action(s335, 'signed') = <reduce, type_specifier -> enum_specifier>
action(s335, 'static') = <reduce, type_specifier -> enum_specifier>
action(s335, 'struct') = <reduce, type_specifier -> enum_specifier>
action(s335, 'typedef') = <reduce, type_specifier -> enum_specifier>
action(s335, 'union') = <reduce, type_specifier -> enum_specifier>
action(s335, 'unsigned') = <reduce, type_specifier -> enum_specifier>
action(s335, 'void') = <reduce, type_specifier -> enum_specifier>
action(s335, 'volatile') = <reduce, type_specifier -> enum_specifier>
action(s335, IDENTIFIER) = <reduce, type_specifier -> enum_specifier>
action(s335, TYPE_NAME) = <reduce, type_specifier -> enum_specifier>
action(s336, '(') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, ')') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, '*') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, ',') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, ':') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, ';') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, '[') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'auto') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'char') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'const') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'double') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'enum') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'extern') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'float') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'int') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'long') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'register') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'short') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'signed') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'static') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'struct') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'typedef') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'union') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'unsigned') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'void') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, 'volatile') = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, IDENTIFIER) = <reduce, type_specifier -> struct_or_union_specifier>
action(s336, TYPE_NAME) = <reduce, type_specifier -> struct_or_union_specifier>
action(s337, '!=') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '%') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '%=') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '&&') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '&') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '&=') = <reduce, unary_expression -> '++' unary_expression>
action(s337, ')') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '*') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '*=') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '+') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '+=') = <reduce, unary_expression -> '++' unary_expression>
action(s337, ',') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '-') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '-=') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '/') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '/=') = <reduce, unary_expression -> '++' unary_expression>
action(s337, ':') = <reduce, unary_expression -> '++' unary_expression>
action(s337, ';') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '<') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '<<') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '<<=') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '<=') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '=') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '==') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '>') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '>=') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '>>') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '>>=') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '?') = <reduce, unary_expression -> '++' unary_expression>
action(s337, ']') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '^') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '^=') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '|') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '|=') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '||') = <reduce, unary_expression -> '++' unary_expression>
action(s337, '}') = <reduce, unary_expression -> '++' unary_expression>
action(s338, '!=') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '%') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '%=') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '&&') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '&') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '&=') = <reduce, unary_expression -> '--' unary_expression>
action(s338, ')') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '*') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '*=') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '+') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '+=') = <reduce, unary_expression -> '--' unary_expression>
action(s338, ',') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '-') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '-=') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '/') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '/=') = <reduce, unary_expression -> '--' unary_expression>
action(s338, ':') = <reduce, unary_expression -> '--' unary_expression>
action(s338, ';') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '<') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '<<') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '<<=') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '<=') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '=') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '==') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '>') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '>=') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '>>') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '>>=') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '?') = <reduce, unary_expression -> '--' unary_expression>
action(s338, ']') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '^') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '^=') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '|') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '|=') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '||') = <reduce, unary_expression -> '--' unary_expression>
action(s338, '}') = <reduce, unary_expression -> '--' unary_expression>
action(s339, ')') = <shift, s340>
action(s340, '!=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '%') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '%=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '&&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '&=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, ')') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '*') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '*=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '+') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '+=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, ',') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '-') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '-=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '/') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '/=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, ':') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, ';') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '<<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '<<=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '<=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '==') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '>=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '>>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '>>=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '?') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, ']') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '^') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '^=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '|') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '|=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '||') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s340, '}') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s341, '!=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '%') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '%=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '&&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '&=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, ')') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '*') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '*=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '+') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '+=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, ',') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '-') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '-=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '/') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '/=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, ':') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, ';') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '<<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '<<=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '<=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '==') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '>=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '>>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '>>=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '?') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, ']') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '^') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '^=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '|') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '|=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '||') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s341, '}') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s342, '!=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '%') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '%=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '&&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '&=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, ')') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '*') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '*=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '+') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '+=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, ',') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '-') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '-=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '/') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '/=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, ':') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, ';') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '<<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '<<=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '<=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '==') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '>=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '>>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '>>=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '?') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, ']') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '^') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '^=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '|') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '|=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '||') = <reduce, unary_expression -> unary_operator cast_expression>
action(s342, '}') = <reduce, unary_expression -> unary_operator cast_expression>
action(s343, '!') = <reduce, unary_operator -> '!'>
action(s343, '&') = <reduce, unary_operator -> '!'>
action(s343, '(') = <reduce, unary_operator -> '!'>
action(s343, '*') = <reduce, unary_operator -> '!'>
action(s343, '+') = <reduce, unary_operator -> '!'>
action(s343, '++') = <reduce, unary_operator -> '!'>
action(s343, '-') = <reduce, unary_operator -> '!'>
action(s343, '--') = <reduce, unary_operator -> '!'>
action(s343, 'sizeof') = <reduce, unary_operator -> '!'>
action(s343, '~') = <reduce, unary_operator -> '!'>
action(s343, CONSTANT) = <reduce, unary_operator -> '!'>
action(s343, IDENTIFIER) = <reduce, unary_operator -> '!'>
action(s343, STRING_LITERAL) = <reduce, unary_operator -> '!'>
action(s344, '!') = <reduce, unary_operator -> '&'>
action(s344, '&') = <reduce, unary_operator -> '&'>
action(s344, '(') = <reduce, unary_operator -> '&'>
action(s344, '*') = <reduce, unary_operator -> '&'>
action(s344, '+') = <reduce, unary_operator -> '&'>
action(s344, '++') = <reduce, unary_operator -> '&'>
action(s344, '-') = <reduce, unary_operator -> '&'>
action(s344, '--') = <reduce, unary_operator -> '&'>
action(s344, 'sizeof') = <reduce, unary_operator -> '&'>
action(s344, '~') = <reduce, unary_operator -> '&'>
action(s344, CONSTANT) = <reduce, unary_operator -> '&'>
action(s344, IDENTIFIER) = <reduce, unary_operator -> '&'>
action(s344, STRING_LITERAL) = <reduce, unary_operator -> '&'>
action(s345, '!') = <reduce, unary_operator -> '*'>
action(s345, '&') = <reduce, unary_operator -> '*'>
action(s345, '(') = <reduce, unary_operator -> '*'>
action(s345, '*') = <reduce, unary_operator -> '*'>
action(s345, '+') = <reduce, unary_operator -> '*'>
action(s345, '++') = <reduce, unary_operator -> '*'>
action(s345, '-') = <reduce, unary_operator -> '*'>
action(s345, '--') = <reduce, unary_operator -> '*'>
action(s345, 'sizeof') = <reduce, unary_operator -> '*'>
action(s345, '~') = <reduce, unary_operator -> '*'>
action(s345, CONSTANT) = <reduce, unary_operator -> '*'>
action(s345, IDENTIFIER) = <reduce, unary_operator -> '*'>
action(s345, STRING_LITERAL) = <reduce, unary_operator -> '*'>
action(s346, '!') = <reduce, unary_operator -> '+'>
action(s346, '&') = <reduce, unary_operator -> '+'>
action(s346, '(') = <reduce, unary_operator -> '+'>
action(s346, '*') = <reduce, unary_operator -> '+'>
action(s346, '+') = <reduce, unary_operator -> '+'>
action(s346, '++') = <reduce, unary_operator -> '+'>
action(s346, '-') = <reduce, unary_operator -> '+'>
action(s346, '--') = <reduce, unary_operator -> '+'>
action(s346, 'sizeof') = <reduce, unary_operator -> '+'>
action(s346, '~') = <reduce, unary_operator -> '+'>
action(s346, CONSTANT) = <reduce, unary_operator -> '+'>
action(s346, IDENTIFIER) = <reduce, unary_operator -> '+'>
action(s346, STRING_LITERAL) = <reduce, unary_operator -> '+'>
action(s347, '!') = <reduce, unary_operator -> '-'>
action(s347, '&') = <reduce, unary_operator -> '-'>
action(s347, '(') = <reduce, unary_operator -> '-'>
action(s347, '*') = <reduce, unary_operator -> '-'>
action(s347, '+') = <reduce, unary_operator -> '-'>
action(s347, '++') = <reduce, unary_operator -> '-'>
action(s347, '-') = <reduce, unary_operator -> '-'>
action(s347, '--') = <reduce, unary_operator -> '-'>
action(s347, 'sizeof') = <reduce, unary_operator -> '-'>
action(s347, '~') = <reduce, unary_operator -> '-'>
action(s347, CONSTANT) = <reduce, unary_operator -> '-'>
action(s347, IDENTIFIER) = <reduce, unary_operator -> '-'>
action(s347, STRING_LITERAL) = <reduce, unary_operator -> '-'>
action(s348, '!') = <reduce, unary_operator -> '~'>
action(s348, '&') = <reduce, unary_operator -> '~'>
action(s348, '(') = <reduce, unary_operator -> '~'>
action(s348, '*') = <reduce, unary_operator -> '~'>
action(s348, '+') = <reduce, unary_operator -> '~'>
action(s348, '++') = <reduce, unary_operator -> '~'>
action(s348, '-') = <reduce, unary_operator -> '~'>
action(s348, '--') = <reduce, unary_operator -> '~'>
action(s348, 'sizeof') = <reduce, unary_operator -> '~'>
action(s348, '~') = <reduce, unary_operator -> '~'>
action(s348, CONSTANT) = <reduce, unary_operator -> '~'>
action(s348, IDENTIFIER) = <reduce, unary_operator -> '~'>
action(s348, STRING_LITERAL) = <reduce, unary_operator -> '~'>

Goto Table:
goto(s0, declaration) = s199
goto(s0, declaration_specifiers) = s114
goto(s0, declarator) = s103
goto(s0, direct_declarator) = s134
goto(s0, enum_specifier) = s335
goto(s0, external_declaration) = s318
goto(s0, function_definition) = s200
goto(s0, pointer) = s135
goto(s0, storage_class_specifier) = s121
goto(s0, struct_or_union) = s314
goto(s0, struct_or_union_specifier) = s336
goto(s0, translation_unit) = s1
goto(s0, type_qualifier) = s122
goto(s0, type_specifier) = s123
goto(s0, '(') = s130
goto(s0, '*') = s256
goto(s0, 'auto') = s298
goto(s0, 'char') = s325
goto(s0, 'const') = s321
goto(s0, 'double') = s326
goto(s0, 'enum') = s168
goto(s0, 'extern') = s299
goto(s0, 'float') = s327
goto(s0, 'int') = s328
goto(s0, 'long') = s329
goto(s0, 'register') = s300
goto(s0, 'short') = s330
goto(s0, 'signed') = s331
goto(s0, 'static') = s301
goto(s0, 'struct') = s312
goto(s0, 'typedef') = s302
goto(s0, 'union') = s313
goto(s0, 'unsigned') = s332
goto(s0, 'void') = s333
goto(s0, 'volatile') = s322
goto(s0, IDENTIFIER) = s153
goto(s0, TYPE_NAME) = s334
goto(s1, declaration) = s199
goto(s1, declaration_specifiers) = s114
goto(s1, declarator) = s103
goto(s1, direct_declarator) = s134
goto(s1, enum_specifier) = s335
goto(s1, external_declaration) = s319
goto(s1, function_definition) = s200
goto(s1, pointer) = s135
goto(s1, storage_class_specifier) = s121
goto(s1, struct_or_union) = s314
goto(s1, struct_or_union_specifier) = s336
goto(s1, type_qualifier) = s122
goto(s1, type_specifier) = s123
goto(s1, '(') = s130
goto(s1, '*') = s256
goto(s1, 'auto') = s298
goto(s1, 'char') = s325
goto(s1, 'const') = s321
goto(s1, 'double') = s326
goto(s1, 'enum') = s168
goto(s1, 'extern') = s299
goto(s1, 'float') = s327
goto(s1, 'int') = s328
goto(s1, 'long') = s329
goto(s1, 'register') = s300
goto(s1, 'short') = s330
goto(s1, 'signed') = s331
goto(s1, 'static') = s301
goto(s1, 'struct') = s312
goto(s1, 'typedef') = s302
goto(s1, 'union') = s313
goto(s1, 'unsigned') = s332
goto(s1, 'void') = s333
goto(s1, 'volatile') = s322
goto(s1, IDENTIFIER) = s153
goto(s1, TYPE_NAME) = s334
goto(s2, abstract_declarator) = s138
goto(s2, declaration_specifiers) = s4
goto(s2, declarator) = s151
goto(s2, direct_abstract_declarator) = s6
goto(s2, direct_declarator) = s134
goto(s2, enum_specifier) = s335
goto(s2, parameter_declaration) = s252
goto(s2, parameter_list) = s253
goto(s2, parameter_type_list) = s140
goto(s2, pointer) = s7
goto(s2, storage_class_specifier) = s121
goto(s2, struct_or_union) = s314
goto(s2, struct_or_union_specifier) = s336
goto(s2, type_qualifier) = s122
goto(s2, type_specifier) = s123
goto(s2, '(') = s2
goto(s2, ')') = s137
goto(s2, '*') = s256
goto(s2, '[') = s45
goto(s2, 'auto') = s298
goto(s2, 'char') = s325
goto(s2, 'const') = s321
goto(s2, 'double') = s326
goto(s2, 'enum') = s168
goto(s2, 'extern') = s299
goto(s2, 'float') = s327
goto(s2, 'int') = s328
goto(s2, 'long') = s329
goto(s2, 'register') = s300
goto(s2, 'short') = s330
goto(s2, 'signed') = s331
goto(s2, 'static') = s301
goto(s2, 'struct') = s312
goto(s2, 'typedef') = s302
goto(s2, 'union') = s313
goto(s2, 'unsigned') = s332
goto(s2, 'void') = s333
goto(s2, 'volatile') = s322
goto(s2, IDENTIFIER) = s153
goto(s2, TYPE_NAME) = s334
goto(s3, abstract_declarator) = s138
goto(s3, declaration_specifiers) = s4
goto(s3, direct_abstract_declarator) = s6
goto(s3, enum_specifier) = s335
goto(s3, parameter_declaration) = s252
goto(s3, parameter_list) = s253
goto(s3, parameter_type_list) = s140
goto(s3, pointer) = s8
goto(s3, storage_class_specifier) = s121
goto(s3, struct_or_union) = s314
goto(s3, struct_or_union_specifier) = s336
goto(s3, type_qualifier) = s122
goto(s3, type_specifier) = s123
goto(s3, '(') = s3
goto(s3, ')') = s137
goto(s3, '*') = s256
goto(s3, '[') = s45
goto(s3, 'auto') = s298
goto(s3, 'char') = s325
goto(s3, 'const') = s321
goto(s3, 'double') = s326
goto(s3, 'enum') = s168
goto(s3, 'extern') = s299
goto(s3, 'float') = s327
goto(s3, 'int') = s328
goto(s3, 'long') = s329
goto(s3, 'register') = s300
goto(s3, 'short') = s330
goto(s3, 'signed') = s331
goto(s3, 'static') = s301
goto(s3, 'struct') = s312
goto(s3, 'typedef') = s302
goto(s3, 'union') = s313
goto(s3, 'unsigned') = s332
goto(s3, 'void') = s333
goto(s3, 'volatile') = s322
goto(s3, TYPE_NAME) = s334
goto(s4, abstract_declarator) = s250
goto(s4, declarator) = s251
goto(s4, direct_abstract_declarator) = s6
goto(s4, direct_declarator) = s134
goto(s4, pointer) = s7
goto(s4, '(') = s2
goto(s4, '*') = s256
goto(s4, '[') = s45
goto(s4, IDENTIFIER) = s153
goto(s5, abstract_declarator) = s320
goto(s5, direct_abstract_declarator) = s6
goto(s5, pointer) = s8
goto(s5, '(') = s3
goto(s5, '*') = s256
goto(s5, '[') = s45
goto(s6, '(') = s124
goto(s6, '[') = s46
goto(s7, direct_abstract_declarator) = s9
goto(s7, direct_declarator) = s136
goto(s7, '(') = s2
goto(s7, '[') = s45
goto(s7, IDENTIFIER) = s153
goto(s8, direct_abstract_declarator) = s9
goto(s8, '(') = s3
goto(s8, '[') = s45
goto(s9, '(') = s124
goto(s9, '[') = s46
goto(s10, additive_expression) = s65
goto(s10, and_expression) = s73
goto(s10, argument_expression_list) = s77
goto(s10, assignment_expression) = s79
goto(s10, cast_expression) = s246
goto(s10, conditional_expression) = s80
goto(s10, equality_expression) = s76
goto(s10, exclusive_or_expression) = s184
goto(s10, inclusive_or_expression) = s208
goto(s10, logical_and_expression) = s244
goto(s10, logical_or_expression) = s110
goto(s10, multiplicative_expression) = s72
goto(s10, postfix_expression) = s263
goto(s10, primary_expression) = s273
goto(s10, relational_expression) = s183
goto(s10, shift_expression) = s282
goto(s10, unary_expression) = s81
goto(s10, unary_operator) = s98
goto(s10, '!') = s343
goto(s10, '&') = s344
goto(s10, '(') = s13
goto(s10, ')') = s264
goto(s10, '*') = s345
goto(s10, '+') = s346
goto(s10, '++') = s260
goto(s10, '-') = s347
goto(s10, '--') = s261
goto(s10, 'sizeof') = s262
goto(s10, '~') = s348
goto(s10, CONSTANT) = s275
goto(s10, IDENTIFIER) = s276
goto(s10, STRING_LITERAL) = s277
goto(s11, additive_expression) = s65
goto(s11, and_expression) = s73
goto(s11, assignment_expression) = s78
goto(s11, cast_expression) = s246
goto(s11, conditional_expression) = s80
goto(s11, equality_expression) = s76
goto(s11, exclusive_or_expression) = s184
goto(s11, inclusive_or_expression) = s208
goto(s11, logical_and_expression) = s244
goto(s11, logical_or_expression) = s110
goto(s11, multiplicative_expression) = s72
goto(s11, postfix_expression) = s263
goto(s11, primary_expression) = s273
goto(s11, relational_expression) = s183
goto(s11, shift_expression) = s282
goto(s11, unary_expression) = s81
goto(s11, unary_operator) = s98
goto(s11, '!') = s343
goto(s11, '&') = s344
goto(s11, '(') = s13
goto(s11, '*') = s345
goto(s11, '+') = s346
goto(s11, '++') = s260
goto(s11, '-') = s347
goto(s11, '--') = s261
goto(s11, 'sizeof') = s262
goto(s11, '~') = s348
goto(s11, CONSTANT) = s275
goto(s11, IDENTIFIER) = s276
goto(s11, STRING_LITERAL) = s277
goto(s12, additive_expression) = s65
goto(s12, and_expression) = s73
goto(s12, assignment_expression) = s82
goto(s12, cast_expression) = s246
goto(s12, conditional_expression) = s80
goto(s12, equality_expression) = s76
goto(s12, exclusive_or_expression) = s184
goto(s12, inclusive_or_expression) = s208
goto(s12, logical_and_expression) = s244
goto(s12, logical_or_expression) = s110
goto(s12, multiplicative_expression) = s72
goto(s12, postfix_expression) = s263
goto(s12, primary_expression) = s273
goto(s12, relational_expression) = s183
goto(s12, shift_expression) = s282
goto(s12, unary_expression) = s81
goto(s12, unary_operator) = s98
goto(s12, '!') = s343
goto(s12, '&') = s344
goto(s12, '(') = s13
goto(s12, '*') = s345
goto(s12, '+') = s346
goto(s12, '++') = s260
goto(s12, '-') = s347
goto(s12, '--') = s261
goto(s12, 'sizeof') = s262
goto(s12, '~') = s348
goto(s12, CONSTANT) = s275
goto(s12, IDENTIFIER) = s276
goto(s12, STRING_LITERAL) = s277
goto(s13, additive_expression) = s65
goto(s13, and_expression) = s73
goto(s13, assignment_expression) = s186
goto(s13, cast_expression) = s246
goto(s13, conditional_expression) = s80
goto(s13, enum_specifier) = s335
goto(s13, equality_expression) = s76
goto(s13, exclusive_or_expression) = s184
goto(s13, expression) = s193
goto(s13, inclusive_or_expression) = s208
goto(s13, logical_and_expression) = s244
goto(s13, logical_or_expression) = s110
goto(s13, multiplicative_expression) = s72
goto(s13, postfix_expression) = s263
goto(s13, primary_expression) = s273
goto(s13, relational_expression) = s183
goto(s13, shift_expression) = s282
goto(s13, specifier_qualifier_list) = s5
goto(s13, struct_or_union) = s314
goto(s13, struct_or_union_specifier) = s336
goto(s13, type_name) = s99
goto(s13, type_qualifier) = s162
goto(s13, type_specifier) = s163
goto(s13, unary_expression) = s81
goto(s13, unary_operator) = s98
goto(s13, '!') = s343
goto(s13, '&') = s344
goto(s13, '(') = s13
goto(s13, '*') = s345
goto(s13, '+') = s346
goto(s13, '++') = s260
goto(s13, '-') = s347
goto(s13, '--') = s261
goto(s13, 'char') = s325
goto(s13, 'const') = s321
goto(s13, 'double') = s326
goto(s13, 'enum') = s168
goto(s13, 'float') = s327
goto(s13, 'int') = s328
goto(s13, 'long') = s329
goto(s13, 'short') = s330
goto(s13, 'signed') = s331
goto(s13, 'sizeof') = s262
goto(s13, 'struct') = s312
goto(s13, 'union') = s313
goto(s13, 'unsigned') = s332
goto(s13, 'void') = s333
goto(s13, 'volatile') = s322
goto(s13, '~') = s348
goto(s13, CONSTANT) = s275
goto(s13, IDENTIFIER) = s276
goto(s13, STRING_LITERAL) = s277
goto(s13, TYPE_NAME) = s334
goto(s14, additive_expression) = s65
goto(s14, and_expression) = s73
goto(s14, assignment_expression) = s186
goto(s14, cast_expression) = s246
goto(s14, compound_statement) = s290
goto(s14, conditional_expression) = s80
goto(s14, declaration) = s119
goto(s14, declaration_list) = s15
goto(s14, declaration_specifiers) = s115
goto(s14, enum_specifier) = s335
goto(s14, equality_expression) = s76
goto(s14, exclusive_or_expression) = s184
goto(s14, expression) = s187
goto(s14, expression_statement) = s291
goto(s14, inclusive_or_expression) = s208
goto(s14, iteration_statement) = s292
goto(s14, jump_statement) = s293
goto(s14, labeled_statement) = s294
goto(s14, logical_and_expression) = s244
goto(s14, logical_or_expression) = s110
goto(s14, multiplicative_expression) = s72
goto(s14, postfix_expression) = s263
goto(s14, primary_expression) = s273
goto(s14, relational_expression) = s183
goto(s14, selection_statement) = s295
goto(s14, shift_expression) = s282
goto(s14, statement) = s296
goto(s14, statement_list) = s17
goto(s14, storage_class_specifier) = s121
goto(s14, struct_or_union) = s314
goto(s14, struct_or_union_specifier) = s336
goto(s14, type_qualifier) = s122
goto(s14, type_specifier) = s123
goto(s14, unary_expression) = s81
goto(s14, unary_operator) = s98
goto(s14, '!') = s343
goto(s14, '&') = s344
goto(s14, '(') = s13
goto(s14, '*') = s345
goto(s14, '+') = s346
goto(s14, '++') = s260
goto(s14, '-') = s347
goto(s14, '--') = s261
goto(s14, ';') = s197
goto(s14, 'auto') = s298
goto(s14, 'break') = s229
goto(s14, 'case') = s49
goto(s14, 'char') = s325
goto(s14, 'const') = s321
goto(s14, 'continue') = s231
goto(s14, 'default') = s240
goto(s14, 'do') = s18
goto(s14, 'double') = s326
goto(s14, 'enum') = s168
goto(s14, 'extern') = s299
goto(s14, 'float') = s327
goto(s14, 'for') = s224
goto(s14, 'goto') = s233
goto(s14, 'if') = s283
goto(s14, 'int') = s328
goto(s14, 'long') = s329
goto(s14, 'register') = s300
goto(s14, 'return') = s35
goto(s14, 'short') = s330
goto(s14, 'signed') = s331
goto(s14, 'sizeof') = s262
goto(s14, 'static') = s301
goto(s14, 'struct') = s312
goto(s14, 'switch') = s286
goto(s14, 'typedef') = s302
goto(s14, 'union') = s313
goto(s14, 'unsigned') = s332
goto(s14, 'void') = s333
goto(s14, 'volatile') = s322
goto(s14, 'while') = s227
goto(s14, '{') = s14
goto(s14, '}') = s106
goto(s14, '~') = s348
goto(s14, CONSTANT) = s275
goto(s14, IDENTIFIER) = s242
goto(s14, STRING_LITERAL) = s277
goto(s14, TYPE_NAME) = s334
goto(s15, additive_expression) = s65
goto(s15, and_expression) = s73
goto(s15, assignment_expression) = s186
goto(s15, cast_expression) = s246
goto(s15, compound_statement) = s290
goto(s15, conditional_expression) = s80
goto(s15, declaration) = s120
goto(s15, declaration_specifiers) = s115
goto(s15, enum_specifier) = s335
goto(s15, equality_expression) = s76
goto(s15, exclusive_or_expression) = s184
goto(s15, expression) = s187
goto(s15, expression_statement) = s291
goto(s15, inclusive_or_expression) = s208
goto(s15, iteration_statement) = s292
goto(s15, jump_statement) = s293
goto(s15, labeled_statement) = s294
goto(s15, logical_and_expression) = s244
goto(s15, logical_or_expression) = s110
goto(s15, multiplicative_expression) = s72
goto(s15, postfix_expression) = s263
goto(s15, primary_expression) = s273
goto(s15, relational_expression) = s183
goto(s15, selection_statement) = s295
goto(s15, shift_expression) = s282
goto(s15, statement) = s296
goto(s15, statement_list) = s16
goto(s15, storage_class_specifier) = s121
goto(s15, struct_or_union) = s314
goto(s15, struct_or_union_specifier) = s336
goto(s15, type_qualifier) = s122
goto(s15, type_specifier) = s123
goto(s15, unary_expression) = s81
goto(s15, unary_operator) = s98
goto(s15, '!') = s343
goto(s15, '&') = s344
goto(s15, '(') = s13
goto(s15, '*') = s345
goto(s15, '+') = s346
goto(s15, '++') = s260
goto(s15, '-') = s347
goto(s15, '--') = s261
goto(s15, ';') = s197
goto(s15, 'auto') = s298
goto(s15, 'break') = s229
goto(s15, 'case') = s49
goto(s15, 'char') = s325
goto(s15, 'const') = s321
goto(s15, 'continue') = s231
goto(s15, 'default') = s240
goto(s15, 'do') = s18
goto(s15, 'double') = s326
goto(s15, 'enum') = s168
goto(s15, 'extern') = s299
goto(s15, 'float') = s327
goto(s15, 'for') = s224
goto(s15, 'goto') = s233
goto(s15, 'if') = s283
goto(s15, 'int') = s328
goto(s15, 'long') = s329
goto(s15, 'register') = s300
goto(s15, 'return') = s35
goto(s15, 'short') = s330
goto(s15, 'signed') = s331
goto(s15, 'sizeof') = s262
goto(s15, 'static') = s301
goto(s15, 'struct') = s312
goto(s15, 'switch') = s286
goto(s15, 'typedef') = s302
goto(s15, 'union') = s313
goto(s15, 'unsigned') = s332
goto(s15, 'void') = s333
goto(s15, 'volatile') = s322
goto(s15, 'while') = s227
goto(s15, '{') = s14
goto(s15, '}') = s107
goto(s15, '~') = s348
goto(s15, CONSTANT) = s275
goto(s15, IDENTIFIER) = s242
goto(s15, STRING_LITERAL) = s277
goto(s15, TYPE_NAME) = s334
goto(s16, additive_expression) = s65
goto(s16, and_expression) = s73
goto(s16, assignment_expression) = s186
goto(s16, cast_expression) = s246
goto(s16, compound_statement) = s290
goto(s16, conditional_expression) = s80
goto(s16, equality_expression) = s76
goto(s16, exclusive_or_expression) = s184
goto(s16, expression) = s187
goto(s16, expression_statement) = s291
goto(s16, inclusive_or_expression) = s208
goto(s16, iteration_statement) = s292
goto(s16, jump_statement) = s293
goto(s16, labeled_statement) = s294
goto(s16, logical_and_expression) = s244
goto(s16, logical_or_expression) = s110
goto(s16, multiplicative_expression) = s72
goto(s16, postfix_expression) = s263
goto(s16, primary_expression) = s273
goto(s16, relational_expression) = s183
goto(s16, selection_statement) = s295
goto(s16, shift_expression) = s282
goto(s16, statement) = s297
goto(s16, unary_expression) = s81
goto(s16, unary_operator) = s98
goto(s16, '!') = s343
goto(s16, '&') = s344
goto(s16, '(') = s13
goto(s16, '*') = s345
goto(s16, '+') = s346
goto(s16, '++') = s260
goto(s16, '-') = s347
goto(s16, '--') = s261
goto(s16, ';') = s197
goto(s16, 'break') = s229
goto(s16, 'case') = s49
goto(s16, 'continue') = s231
goto(s16, 'default') = s240
goto(s16, 'do') = s18
goto(s16, 'for') = s224
goto(s16, 'goto') = s233
goto(s16, 'if') = s283
goto(s16, 'return') = s35
goto(s16, 'sizeof') = s262
goto(s16, 'switch') = s286
goto(s16, 'while') = s227
goto(s16, '{') = s14
goto(s16, '}') = s108
goto(s16, '~') = s348
goto(s16, CONSTANT) = s275
goto(s16, IDENTIFIER) = s242
goto(s16, STRING_LITERAL) = s277
goto(s17, additive_expression) = s65
goto(s17, and_expression) = s73
goto(s17, assignment_expression) = s186
goto(s17, cast_expression) = s246
goto(s17, compound_statement) = s290
goto(s17, conditional_expression) = s80
goto(s17, equality_expression) = s76
goto(s17, exclusive_or_expression) = s184
goto(s17, expression) = s187
goto(s17, expression_statement) = s291
goto(s17, inclusive_or_expression) = s208
goto(s17, iteration_statement) = s292
goto(s17, jump_statement) = s293
goto(s17, labeled_statement) = s294
goto(s17, logical_and_expression) = s244
goto(s17, logical_or_expression) = s110
goto(s17, multiplicative_expression) = s72
goto(s17, postfix_expression) = s263
goto(s17, primary_expression) = s273
goto(s17, relational_expression) = s183
goto(s17, selection_statement) = s295
goto(s17, shift_expression) = s282
goto(s17, statement) = s297
goto(s17, unary_expression) = s81
goto(s17, unary_operator) = s98
goto(s17, '!') = s343
goto(s17, '&') = s344
goto(s17, '(') = s13
goto(s17, '*') = s345
goto(s17, '+') = s346
goto(s17, '++') = s260
goto(s17, '-') = s347
goto(s17, '--') = s261
goto(s17, ';') = s197
goto(s17, 'break') = s229
goto(s17, 'case') = s49
goto(s17, 'continue') = s231
goto(s17, 'default') = s240
goto(s17, 'do') = s18
goto(s17, 'for') = s224
goto(s17, 'goto') = s233
goto(s17, 'if') = s283
goto(s17, 'return') = s35
goto(s17, 'sizeof') = s262
goto(s17, 'switch') = s286
goto(s17, 'while') = s227
goto(s17, '{') = s14
goto(s17, '}') = s109
goto(s17, '~') = s348
goto(s17, CONSTANT) = s275
goto(s17, IDENTIFIER) = s242
goto(s17, STRING_LITERAL) = s277
goto(s18, additive_expression) = s65
goto(s18, and_expression) = s73
goto(s18, assignment_expression) = s186
goto(s18, cast_expression) = s246
goto(s18, compound_statement) = s290
goto(s18, conditional_expression) = s80
goto(s18, equality_expression) = s76
goto(s18, exclusive_or_expression) = s184
goto(s18, expression) = s187
goto(s18, expression_statement) = s291
goto(s18, inclusive_or_expression) = s208
goto(s18, iteration_statement) = s292
goto(s18, jump_statement) = s293
goto(s18, labeled_statement) = s294
goto(s18, logical_and_expression) = s244
goto(s18, logical_or_expression) = s110
goto(s18, multiplicative_expression) = s72
goto(s18, postfix_expression) = s263
goto(s18, primary_expression) = s273
goto(s18, relational_expression) = s183
goto(s18, selection_statement) = s295
goto(s18, shift_expression) = s282
goto(s18, statement) = s220
goto(s18, unary_expression) = s81
goto(s18, unary_operator) = s98
goto(s18, '!') = s343
goto(s18, '&') = s344
goto(s18, '(') = s13
goto(s18, '*') = s345
goto(s18, '+') = s346
goto(s18, '++') = s260
goto(s18, '-') = s347
goto(s18, '--') = s261
goto(s18, ';') = s197
goto(s18, 'break') = s229
goto(s18, 'case') = s49
goto(s18, 'continue') = s231
goto(s18, 'default') = s240
goto(s18, 'do') = s18
goto(s18, 'for') = s224
goto(s18, 'goto') = s233
goto(s18, 'if') = s283
goto(s18, 'return') = s35
goto(s18, 'sizeof') = s262
goto(s18, 'switch') = s286
goto(s18, 'while') = s227
goto(s18, '{') = s14
goto(s18, '~') = s348
goto(s18, CONSTANT) = s275
goto(s18, IDENTIFIER) = s242
goto(s18, STRING_LITERAL) = s277
goto(s19, additive_expression) = s65
goto(s19, and_expression) = s73
goto(s19, assignment_expression) = s186
goto(s19, cast_expression) = s246
goto(s19, compound_statement) = s290
goto(s19, conditional_expression) = s80
goto(s19, equality_expression) = s76
goto(s19, exclusive_or_expression) = s184
goto(s19, expression) = s187
goto(s19, expression_statement) = s291
goto(s19, inclusive_or_expression) = s208
goto(s19, iteration_statement) = s292
goto(s19, jump_statement) = s293
goto(s19, labeled_statement) = s294
goto(s19, logical_and_expression) = s244
goto(s19, logical_or_expression) = s110
goto(s19, multiplicative_expression) = s72
goto(s19, postfix_expression) = s263
goto(s19, primary_expression) = s273
goto(s19, relational_expression) = s183
goto(s19, selection_statement) = s295
goto(s19, shift_expression) = s282
goto(s19, statement) = s225
goto(s19, unary_expression) = s81
goto(s19, unary_operator) = s98
goto(s19, '!') = s343
goto(s19, '&') = s344
goto(s19, '(') = s13
goto(s19, '*') = s345
goto(s19, '+') = s346
goto(s19, '++') = s260
goto(s19, '-') = s347
goto(s19, '--') = s261
goto(s19, ';') = s197
goto(s19, 'break') = s229
goto(s19, 'case') = s49
goto(s19, 'continue') = s231
goto(s19, 'default') = s240
goto(s19, 'do') = s18
goto(s19, 'for') = s224
goto(s19, 'goto') = s233
goto(s19, 'if') = s283
goto(s19, 'return') = s35
goto(s19, 'sizeof') = s262
goto(s19, 'switch') = s286
goto(s19, 'while') = s227
goto(s19, '{') = s14
goto(s19, '~') = s348
goto(s19, CONSTANT) = s275
goto(s19, IDENTIFIER) = s242
goto(s19, STRING_LITERAL) = s277
goto(s20, additive_expression) = s65
goto(s20, and_expression) = s73
goto(s20, assignment_expression) = s186
goto(s20, cast_expression) = s246
goto(s20, compound_statement) = s290
goto(s20, conditional_expression) = s80
goto(s20, equality_expression) = s76
goto(s20, exclusive_or_expression) = s184
goto(s20, expression) = s187
goto(s20, expression_statement) = s291
goto(s20, inclusive_or_expression) = s208
goto(s20, iteration_statement) = s292
goto(s20, jump_statement) = s293
goto(s20, labeled_statement) = s294
goto(s20, logical_and_expression) = s244
goto(s20, logical_or_expression) = s110
goto(s20, multiplicative_expression) = s72
goto(s20, postfix_expression) = s263
goto(s20, primary_expression) = s273
goto(s20, relational_expression) = s183
goto(s20, selection_statement) = s295
goto(s20, shift_expression) = s282
goto(s20, statement) = s226
goto(s20, unary_expression) = s81
goto(s20, unary_operator) = s98
goto(s20, '!') = s343
goto(s20, '&') = s344
goto(s20, '(') = s13
goto(s20, '*') = s345
goto(s20, '+') = s346
goto(s20, '++') = s260
goto(s20, '-') = s347
goto(s20, '--') = s261
goto(s20, ';') = s197
goto(s20, 'break') = s229
goto(s20, 'case') = s49
goto(s20, 'continue') = s231
goto(s20, 'default') = s240
goto(s20, 'do') = s18
goto(s20, 'for') = s224
goto(s20, 'goto') = s233
goto(s20, 'if') = s283
goto(s20, 'return') = s35
goto(s20, 'sizeof') = s262
goto(s20, 'switch') = s286
goto(s20, 'while') = s227
goto(s20, '{') = s14
goto(s20, '~') = s348
goto(s20, CONSTANT) = s275
goto(s20, IDENTIFIER) = s242
goto(s20, STRING_LITERAL) = s277
goto(s21, additive_expression) = s65
goto(s21, and_expression) = s73
goto(s21, assignment_expression) = s186
goto(s21, cast_expression) = s246
goto(s21, compound_statement) = s290
goto(s21, conditional_expression) = s80
goto(s21, equality_expression) = s76
goto(s21, exclusive_or_expression) = s184
goto(s21, expression) = s187
goto(s21, expression_statement) = s291
goto(s21, inclusive_or_expression) = s208
goto(s21, iteration_statement) = s292
goto(s21, jump_statement) = s293
goto(s21, labeled_statement) = s294
goto(s21, logical_and_expression) = s244
goto(s21, logical_or_expression) = s110
goto(s21, multiplicative_expression) = s72
goto(s21, postfix_expression) = s263
goto(s21, primary_expression) = s273
goto(s21, relational_expression) = s183
goto(s21, selection_statement) = s295
goto(s21, shift_expression) = s282
goto(s21, statement) = s228
goto(s21, unary_expression) = s81
goto(s21, unary_operator) = s98
goto(s21, '!') = s343
goto(s21, '&') = s344
goto(s21, '(') = s13
goto(s21, '*') = s345
goto(s21, '+') = s346
goto(s21, '++') = s260
goto(s21, '-') = s347
goto(s21, '--') = s261
goto(s21, ';') = s197
goto(s21, 'break') = s229
goto(s21, 'case') = s49
goto(s21, 'continue') = s231
goto(s21, 'default') = s240
goto(s21, 'do') = s18
goto(s21, 'for') = s224
goto(s21, 'goto') = s233
goto(s21, 'if') = s283
goto(s21, 'return') = s35
goto(s21, 'sizeof') = s262
goto(s21, 'switch') = s286
goto(s21, 'while') = s227
goto(s21, '{') = s14
goto(s21, '~') = s348
goto(s21, CONSTANT) = s275
goto(s21, IDENTIFIER) = s242
goto(s21, STRING_LITERAL) = s277
goto(s22, additive_expression) = s65
goto(s22, and_expression) = s73
goto(s22, assignment_expression) = s186
goto(s22, cast_expression) = s246
goto(s22, compound_statement) = s290
goto(s22, conditional_expression) = s80
goto(s22, equality_expression) = s76
goto(s22, exclusive_or_expression) = s184
goto(s22, expression) = s187
goto(s22, expression_statement) = s291
goto(s22, inclusive_or_expression) = s208
goto(s22, iteration_statement) = s292
goto(s22, jump_statement) = s293
goto(s22, labeled_statement) = s294
goto(s22, logical_and_expression) = s244
goto(s22, logical_or_expression) = s110
goto(s22, multiplicative_expression) = s72
goto(s22, postfix_expression) = s263
goto(s22, primary_expression) = s273
goto(s22, relational_expression) = s183
goto(s22, selection_statement) = s295
goto(s22, shift_expression) = s282
goto(s22, statement) = s239
goto(s22, unary_expression) = s81
goto(s22, unary_operator) = s98
goto(s22, '!') = s343
goto(s22, '&') = s344
goto(s22, '(') = s13
goto(s22, '*') = s345
goto(s22, '+') = s346
goto(s22, '++') = s260
goto(s22, '-') = s347
goto(s22, '--') = s261
goto(s22, ';') = s197
goto(s22, 'break') = s229
goto(s22, 'case') = s49
goto(s22, 'continue') = s231
goto(s22, 'default') = s240
goto(s22, 'do') = s18
goto(s22, 'for') = s224
goto(s22, 'goto') = s233
goto(s22, 'if') = s283
goto(s22, 'return') = s35
goto(s22, 'sizeof') = s262
goto(s22, 'switch') = s286
goto(s22, 'while') = s227
goto(s22, '{') = s14
goto(s22, '~') = s348
goto(s22, CONSTANT) = s275
goto(s22, IDENTIFIER) = s242
goto(s22, STRING_LITERAL) = s277
goto(s23, additive_expression) = s65
goto(s23, and_expression) = s73
goto(s23, assignment_expression) = s186
goto(s23, cast_expression) = s246
goto(s23, compound_statement) = s290
goto(s23, conditional_expression) = s80
goto(s23, equality_expression) = s76
goto(s23, exclusive_or_expression) = s184
goto(s23, expression) = s187
goto(s23, expression_statement) = s291
goto(s23, inclusive_or_expression) = s208
goto(s23, iteration_statement) = s292
goto(s23, jump_statement) = s293
goto(s23, labeled_statement) = s294
goto(s23, logical_and_expression) = s244
goto(s23, logical_or_expression) = s110
goto(s23, multiplicative_expression) = s72
goto(s23, postfix_expression) = s263
goto(s23, primary_expression) = s273
goto(s23, relational_expression) = s183
goto(s23, selection_statement) = s295
goto(s23, shift_expression) = s282
goto(s23, statement) = s241
goto(s23, unary_expression) = s81
goto(s23, unary_operator) = s98
goto(s23, '!') = s343
goto(s23, '&') = s344
goto(s23, '(') = s13
goto(s23, '*') = s345
goto(s23, '+') = s346
goto(s23, '++') = s260
goto(s23, '-') = s347
goto(s23, '--') = s261
goto(s23, ';') = s197
goto(s23, 'break') = s229
goto(s23, 'case') = s49
goto(s23, 'continue') = s231
goto(s23, 'default') = s240
goto(s23, 'do') = s18
goto(s23, 'for') = s224
goto(s23, 'goto') = s233
goto(s23, 'if') = s283
goto(s23, 'return') = s35
goto(s23, 'sizeof') = s262
goto(s23, 'switch') = s286
goto(s23, 'while') = s227
goto(s23, '{') = s14
goto(s23, '~') = s348
goto(s23, CONSTANT) = s275
goto(s23, IDENTIFIER) = s242
goto(s23, STRING_LITERAL) = s277
goto(s24, additive_expression) = s65
goto(s24, and_expression) = s73
goto(s24, assignment_expression) = s186
goto(s24, cast_expression) = s246
goto(s24, compound_statement) = s290
goto(s24, conditional_expression) = s80
goto(s24, equality_expression) = s76
goto(s24, exclusive_or_expression) = s184
goto(s24, expression) = s187
goto(s24, expression_statement) = s291
goto(s24, inclusive_or_expression) = s208
goto(s24, iteration_statement) = s292
goto(s24, jump_statement) = s293
goto(s24, labeled_statement) = s294
goto(s24, logical_and_expression) = s244
goto(s24, logical_or_expression) = s110
goto(s24, multiplicative_expression) = s72
goto(s24, postfix_expression) = s263
goto(s24, primary_expression) = s273
goto(s24, relational_expression) = s183
goto(s24, selection_statement) = s295
goto(s24, shift_expression) = s282
goto(s24, statement) = s243
goto(s24, unary_expression) = s81
goto(s24, unary_operator) = s98
goto(s24, '!') = s343
goto(s24, '&') = s344
goto(s24, '(') = s13
goto(s24, '*') = s345
goto(s24, '+') = s346
goto(s24, '++') = s260
goto(s24, '-') = s347
goto(s24, '--') = s261
goto(s24, ';') = s197
goto(s24, 'break') = s229
goto(s24, 'case') = s49
goto(s24, 'continue') = s231
goto(s24, 'default') = s240
goto(s24, 'do') = s18
goto(s24, 'for') = s224
goto(s24, 'goto') = s233
goto(s24, 'if') = s283
goto(s24, 'return') = s35
goto(s24, 'sizeof') = s262
goto(s24, 'switch') = s286
goto(s24, 'while') = s227
goto(s24, '{') = s14
goto(s24, '~') = s348
goto(s24, CONSTANT) = s275
goto(s24, IDENTIFIER) = s242
goto(s24, STRING_LITERAL) = s277
goto(s25, additive_expression) = s65
goto(s25, and_expression) = s73
goto(s25, assignment_expression) = s186
goto(s25, cast_expression) = s246
goto(s25, compound_statement) = s290
goto(s25, conditional_expression) = s80
goto(s25, equality_expression) = s76
goto(s25, exclusive_or_expression) = s184
goto(s25, expression) = s187
goto(s25, expression_statement) = s291
goto(s25, inclusive_or_expression) = s208
goto(s25, iteration_statement) = s292
goto(s25, jump_statement) = s293
goto(s25, labeled_statement) = s294
goto(s25, logical_and_expression) = s244
goto(s25, logical_or_expression) = s110
goto(s25, multiplicative_expression) = s72
goto(s25, postfix_expression) = s263
goto(s25, primary_expression) = s273
goto(s25, relational_expression) = s183
goto(s25, selection_statement) = s295
goto(s25, shift_expression) = s282
goto(s25, statement) = s284
goto(s25, unary_expression) = s81
goto(s25, unary_operator) = s98
goto(s25, '!') = s343
goto(s25, '&') = s344
goto(s25, '(') = s13
goto(s25, '*') = s345
goto(s25, '+') = s346
goto(s25, '++') = s260
goto(s25, '-') = s347
goto(s25, '--') = s261
goto(s25, ';') = s197
goto(s25, 'break') = s229
goto(s25, 'case') = s49
goto(s25, 'continue') = s231
goto(s25, 'default') = s240
goto(s25, 'do') = s18
goto(s25, 'for') = s224
goto(s25, 'goto') = s233
goto(s25, 'if') = s283
goto(s25, 'return') = s35
goto(s25, 'sizeof') = s262
goto(s25, 'switch') = s286
goto(s25, 'while') = s227
goto(s25, '{') = s14
goto(s25, '~') = s348
goto(s25, CONSTANT) = s275
goto(s25, IDENTIFIER) = s242
goto(s25, STRING_LITERAL) = s277
goto(s26, additive_expression) = s65
goto(s26, and_expression) = s73
goto(s26, assignment_expression) = s186
goto(s26, cast_expression) = s246
goto(s26, compound_statement) = s290
goto(s26, conditional_expression) = s80
goto(s26, equality_expression) = s76
goto(s26, exclusive_or_expression) = s184
goto(s26, expression) = s187
goto(s26, expression_statement) = s291
goto(s26, inclusive_or_expression) = s208
goto(s26, iteration_statement) = s292
goto(s26, jump_statement) = s293
goto(s26, labeled_statement) = s294
goto(s26, logical_and_expression) = s244
goto(s26, logical_or_expression) = s110
goto(s26, multiplicative_expression) = s72
goto(s26, postfix_expression) = s263
goto(s26, primary_expression) = s273
goto(s26, relational_expression) = s183
goto(s26, selection_statement) = s295
goto(s26, shift_expression) = s282
goto(s26, statement) = s285
goto(s26, unary_expression) = s81
goto(s26, unary_operator) = s98
goto(s26, '!') = s343
goto(s26, '&') = s344
goto(s26, '(') = s13
goto(s26, '*') = s345
goto(s26, '+') = s346
goto(s26, '++') = s260
goto(s26, '-') = s347
goto(s26, '--') = s261
goto(s26, ';') = s197
goto(s26, 'break') = s229
goto(s26, 'case') = s49
goto(s26, 'continue') = s231
goto(s26, 'default') = s240
goto(s26, 'do') = s18
goto(s26, 'for') = s224
goto(s26, 'goto') = s233
goto(s26, 'if') = s283
goto(s26, 'return') = s35
goto(s26, 'sizeof') = s262
goto(s26, 'switch') = s286
goto(s26, 'while') = s227
goto(s26, '{') = s14
goto(s26, '~') = s348
goto(s26, CONSTANT) = s275
goto(s26, IDENTIFIER) = s242
goto(s26, STRING_LITERAL) = s277
goto(s27, additive_expression) = s65
goto(s27, and_expression) = s73
goto(s27, assignment_expression) = s186
goto(s27, cast_expression) = s246
goto(s27, compound_statement) = s290
goto(s27, conditional_expression) = s80
goto(s27, equality_expression) = s76
goto(s27, exclusive_or_expression) = s184
goto(s27, expression) = s187
goto(s27, expression_statement) = s291
goto(s27, inclusive_or_expression) = s208
goto(s27, iteration_statement) = s292
goto(s27, jump_statement) = s293
goto(s27, labeled_statement) = s294
goto(s27, logical_and_expression) = s244
goto(s27, logical_or_expression) = s110
goto(s27, multiplicative_expression) = s72
goto(s27, postfix_expression) = s263
goto(s27, primary_expression) = s273
goto(s27, relational_expression) = s183
goto(s27, selection_statement) = s295
goto(s27, shift_expression) = s282
goto(s27, statement) = s287
goto(s27, unary_expression) = s81
goto(s27, unary_operator) = s98
goto(s27, '!') = s343
goto(s27, '&') = s344
goto(s27, '(') = s13
goto(s27, '*') = s345
goto(s27, '+') = s346
goto(s27, '++') = s260
goto(s27, '-') = s347
goto(s27, '--') = s261
goto(s27, ';') = s197
goto(s27, 'break') = s229
goto(s27, 'case') = s49
goto(s27, 'continue') = s231
goto(s27, 'default') = s240
goto(s27, 'do') = s18
goto(s27, 'for') = s224
goto(s27, 'goto') = s233
goto(s27, 'if') = s283
goto(s27, 'return') = s35
goto(s27, 'sizeof') = s262
goto(s27, 'switch') = s286
goto(s27, 'while') = s227
goto(s27, '{') = s14
goto(s27, '~') = s348
goto(s27, CONSTANT) = s275
goto(s27, IDENTIFIER) = s242
goto(s27, STRING_LITERAL) = s277
goto(s28, additive_expression) = s65
goto(s28, and_expression) = s73
goto(s28, assignment_expression) = s186
goto(s28, cast_expression) = s246
goto(s28, conditional_expression) = s80
goto(s28, equality_expression) = s76
goto(s28, exclusive_or_expression) = s184
goto(s28, expression) = s111
goto(s28, inclusive_or_expression) = s208
goto(s28, logical_and_expression) = s244
goto(s28, logical_or_expression) = s110
goto(s28, multiplicative_expression) = s72
goto(s28, postfix_expression) = s263
goto(s28, primary_expression) = s273
goto(s28, relational_expression) = s183
goto(s28, shift_expression) = s282
goto(s28, unary_expression) = s81
goto(s28, unary_operator) = s98
goto(s28, '!') = s343
goto(s28, '&') = s344
goto(s28, '(') = s13
goto(s28, '*') = s345
goto(s28, '+') = s346
goto(s28, '++') = s260
goto(s28, '-') = s347
goto(s28, '--') = s261
goto(s28, 'sizeof') = s262
goto(s28, '~') = s348
goto(s28, CONSTANT) = s275
goto(s28, IDENTIFIER) = s276
goto(s28, STRING_LITERAL) = s277
goto(s29, additive_expression) = s65
goto(s29, and_expression) = s73
goto(s29, assignment_expression) = s186
goto(s29, cast_expression) = s246
goto(s29, conditional_expression) = s80
goto(s29, enum_specifier) = s335
goto(s29, equality_expression) = s76
goto(s29, exclusive_or_expression) = s184
goto(s29, expression) = s193
goto(s29, inclusive_or_expression) = s208
goto(s29, logical_and_expression) = s244
goto(s29, logical_or_expression) = s110
goto(s29, multiplicative_expression) = s72
goto(s29, postfix_expression) = s263
goto(s29, primary_expression) = s273
goto(s29, relational_expression) = s183
goto(s29, shift_expression) = s282
goto(s29, specifier_qualifier_list) = s5
goto(s29, struct_or_union) = s314
goto(s29, struct_or_union_specifier) = s336
goto(s29, type_name) = s339
goto(s29, type_qualifier) = s162
goto(s29, type_specifier) = s163
goto(s29, unary_expression) = s81
goto(s29, unary_operator) = s98
goto(s29, '!') = s343
goto(s29, '&') = s344
goto(s29, '(') = s13
goto(s29, '*') = s345
goto(s29, '+') = s346
goto(s29, '++') = s260
goto(s29, '-') = s347
goto(s29, '--') = s261
goto(s29, 'char') = s325
goto(s29, 'const') = s321
goto(s29, 'double') = s326
goto(s29, 'enum') = s168
goto(s29, 'float') = s327
goto(s29, 'int') = s328
goto(s29, 'long') = s329
goto(s29, 'short') = s330
goto(s29, 'signed') = s331
goto(s29, 'sizeof') = s262
goto(s29, 'struct') = s312
goto(s29, 'union') = s313
goto(s29, 'unsigned') = s332
goto(s29, 'void') = s333
goto(s29, 'volatile') = s322
goto(s29, '~') = s348
goto(s29, CONSTANT) = s275
goto(s29, IDENTIFIER) = s276
goto(s29, STRING_LITERAL) = s277
goto(s29, TYPE_NAME) = s334
goto(s30, additive_expression) = s65
goto(s30, and_expression) = s73
goto(s30, assignment_expression) = s186
goto(s30, cast_expression) = s246
goto(s30, conditional_expression) = s80
goto(s30, equality_expression) = s76
goto(s30, exclusive_or_expression) = s184
goto(s30, expression) = s187
goto(s30, expression_statement) = s31
goto(s30, inclusive_or_expression) = s208
goto(s30, logical_and_expression) = s244
goto(s30, logical_or_expression) = s110
goto(s30, multiplicative_expression) = s72
goto(s30, postfix_expression) = s263
goto(s30, primary_expression) = s273
goto(s30, relational_expression) = s183
goto(s30, shift_expression) = s282
goto(s30, unary_expression) = s81
goto(s30, unary_operator) = s98
goto(s30, '!') = s343
goto(s30, '&') = s344
goto(s30, '(') = s13
goto(s30, '*') = s345
goto(s30, '+') = s346
goto(s30, '++') = s260
goto(s30, '-') = s347
goto(s30, '--') = s261
goto(s30, ';') = s197
goto(s30, 'sizeof') = s262
goto(s30, '~') = s348
goto(s30, CONSTANT) = s275
goto(s30, IDENTIFIER) = s276
goto(s30, STRING_LITERAL) = s277
goto(s31, additive_expression) = s65
goto(s31, and_expression) = s73
goto(s31, assignment_expression) = s186
goto(s31, cast_expression) = s246
goto(s31, conditional_expression) = s80
goto(s31, equality_expression) = s76
goto(s31, exclusive_or_expression) = s184
goto(s31, expression) = s187
goto(s31, expression_statement) = s33
goto(s31, inclusive_or_expression) = s208
goto(s31, logical_and_expression) = s244
goto(s31, logical_or_expression) = s110
goto(s31, multiplicative_expression) = s72
goto(s31, postfix_expression) = s263
goto(s31, primary_expression) = s273
goto(s31, relational_expression) = s183
goto(s31, shift_expression) = s282
goto(s31, unary_expression) = s81
goto(s31, unary_operator) = s98
goto(s31, '!') = s343
goto(s31, '&') = s344
goto(s31, '(') = s13
goto(s31, '*') = s345
goto(s31, '+') = s346
goto(s31, '++') = s260
goto(s31, '-') = s347
goto(s31, '--') = s261
goto(s31, ';') = s197
goto(s31, 'sizeof') = s262
goto(s31, '~') = s348
goto(s31, CONSTANT) = s275
goto(s31, IDENTIFIER) = s276
goto(s31, STRING_LITERAL) = s277
goto(s32, additive_expression) = s65
goto(s32, and_expression) = s73
goto(s32, assignment_expression) = s186
goto(s32, cast_expression) = s246
goto(s32, conditional_expression) = s80
goto(s32, equality_expression) = s76
goto(s32, exclusive_or_expression) = s184
goto(s32, expression) = s188
goto(s32, inclusive_or_expression) = s208
goto(s32, logical_and_expression) = s244
goto(s32, logical_or_expression) = s110
goto(s32, multiplicative_expression) = s72
goto(s32, postfix_expression) = s263
goto(s32, primary_expression) = s273
goto(s32, relational_expression) = s183
goto(s32, shift_expression) = s282
goto(s32, unary_expression) = s81
goto(s32, unary_operator) = s98
goto(s32, '!') = s343
goto(s32, '&') = s344
goto(s32, '(') = s13
goto(s32, '*') = s345
goto(s32, '+') = s346
goto(s32, '++') = s260
goto(s32, '-') = s347
goto(s32, '--') = s261
goto(s32, 'sizeof') = s262
goto(s32, '~') = s348
goto(s32, CONSTANT) = s275
goto(s32, IDENTIFIER) = s276
goto(s32, STRING_LITERAL) = s277
goto(s33, additive_expression) = s65
goto(s33, and_expression) = s73
goto(s33, assignment_expression) = s186
goto(s33, cast_expression) = s246
goto(s33, conditional_expression) = s80
goto(s33, equality_expression) = s76
goto(s33, exclusive_or_expression) = s184
goto(s33, expression) = s189
goto(s33, inclusive_or_expression) = s208
goto(s33, logical_and_expression) = s244
goto(s33, logical_or_expression) = s110
goto(s33, multiplicative_expression) = s72
goto(s33, postfix_expression) = s263
goto(s33, primary_expression) = s273
goto(s33, relational_expression) = s183
goto(s33, shift_expression) = s282
goto(s33, unary_expression) = s81
goto(s33, unary_operator) = s98
goto(s33, '!') = s343
goto(s33, '&') = s344
goto(s33, '(') = s13
goto(s33, ')') = s19
goto(s33, '*') = s345
goto(s33, '+') = s346
goto(s33, '++') = s260
goto(s33, '-') = s347
goto(s33, '--') = s261
goto(s33, 'sizeof') = s262
goto(s33, '~') = s348
goto(s33, CONSTANT) = s275
goto(s33, IDENTIFIER) = s276
goto(s33, STRING_LITERAL) = s277
goto(s34, additive_expression) = s65
goto(s34, and_expression) = s73
goto(s34, assignment_expression) = s186
goto(s34, cast_expression) = s246
goto(s34, conditional_expression) = s80
goto(s34, equality_expression) = s76
goto(s34, exclusive_or_expression) = s184
goto(s34, expression) = s190
goto(s34, inclusive_or_expression) = s208
goto(s34, logical_and_expression) = s244
goto(s34, logical_or_expression) = s110
goto(s34, multiplicative_expression) = s72
goto(s34, postfix_expression) = s263
goto(s34, primary_expression) = s273
goto(s34, relational_expression) = s183
goto(s34, shift_expression) = s282
goto(s34, unary_expression) = s81
goto(s34, unary_operator) = s98
goto(s34, '!') = s343
goto(s34, '&') = s344
goto(s34, '(') = s13
goto(s34, '*') = s345
goto(s34, '+') = s346
goto(s34, '++') = s260
goto(s34, '-') = s347
goto(s34, '--') = s261
goto(s34, 'sizeof') = s262
goto(s34, '~') = s348
goto(s34, CONSTANT) = s275
goto(s34, IDENTIFIER) = s276
goto(s34, STRING_LITERAL) = s277
goto(s35, additive_expression) = s65
goto(s35, and_expression) = s73
goto(s35, assignment_expression) = s186
goto(s35, cast_expression) = s246
goto(s35, conditional_expression) = s80
goto(s35, equality_expression) = s76
goto(s35, exclusive_or_expression) = s184
goto(s35, expression) = s191
goto(s35, inclusive_or_expression) = s208
goto(s35, logical_and_expression) = s244
goto(s35, logical_or_expression) = s110
goto(s35, multiplicative_expression) = s72
goto(s35, postfix_expression) = s263
goto(s35, primary_expression) = s273
goto(s35, relational_expression) = s183
goto(s35, shift_expression) = s282
goto(s35, unary_expression) = s81
goto(s35, unary_operator) = s98
goto(s35, '!') = s343
goto(s35, '&') = s344
goto(s35, '(') = s13
goto(s35, '*') = s345
goto(s35, '+') = s346
goto(s35, '++') = s260
goto(s35, '-') = s347
goto(s35, '--') = s261
goto(s35, ';') = s236
goto(s35, 'sizeof') = s262
goto(s35, '~') = s348
goto(s35, CONSTANT) = s275
goto(s35, IDENTIFIER) = s276
goto(s35, STRING_LITERAL) = s277
goto(s36, additive_expression) = s65
goto(s36, and_expression) = s73
goto(s36, assignment_expression) = s186
goto(s36, cast_expression) = s246
goto(s36, conditional_expression) = s80
goto(s36, equality_expression) = s76
goto(s36, exclusive_or_expression) = s184
goto(s36, expression) = s192
goto(s36, inclusive_or_expression) = s208
goto(s36, logical_and_expression) = s244
goto(s36, logical_or_expression) = s110
goto(s36, multiplicative_expression) = s72
goto(s36, postfix_expression) = s263
goto(s36, primary_expression) = s273
goto(s36, relational_expression) = s183
goto(s36, shift_expression) = s282
goto(s36, unary_expression) = s81
goto(s36, unary_operator) = s98
goto(s36, '!') = s343
goto(s36, '&') = s344
goto(s36, '(') = s13
goto(s36, '*') = s345
goto(s36, '+') = s346
goto(s36, '++') = s260
goto(s36, '-') = s347
goto(s36, '--') = s261
goto(s36, 'sizeof') = s262
goto(s36, '~') = s348
goto(s36, CONSTANT) = s275
goto(s36, IDENTIFIER) = s276
goto(s36, STRING_LITERAL) = s277
goto(s37, additive_expression) = s65
goto(s37, and_expression) = s73
goto(s37, assignment_expression) = s186
goto(s37, cast_expression) = s246
goto(s37, conditional_expression) = s80
goto(s37, equality_expression) = s76
goto(s37, exclusive_or_expression) = s184
goto(s37, expression) = s193
goto(s37, inclusive_or_expression) = s208
goto(s37, logical_and_expression) = s244
goto(s37, logical_or_expression) = s110
goto(s37, multiplicative_expression) = s72
goto(s37, postfix_expression) = s263
goto(s37, primary_expression) = s273
goto(s37, relational_expression) = s183
goto(s37, shift_expression) = s282
goto(s37, unary_expression) = s81
goto(s37, unary_operator) = s98
goto(s37, '!') = s343
goto(s37, '&') = s344
goto(s37, '(') = s13
goto(s37, '*') = s345
goto(s37, '+') = s346
goto(s37, '++') = s260
goto(s37, '-') = s347
goto(s37, '--') = s261
goto(s37, 'sizeof') = s262
goto(s37, '~') = s348
goto(s37, CONSTANT) = s275
goto(s37, IDENTIFIER) = s276
goto(s37, STRING_LITERAL) = s277
goto(s38, additive_expression) = s65
goto(s38, and_expression) = s73
goto(s38, assignment_expression) = s186
goto(s38, cast_expression) = s246
goto(s38, conditional_expression) = s80
goto(s38, equality_expression) = s76
goto(s38, exclusive_or_expression) = s184
goto(s38, expression) = s194
goto(s38, inclusive_or_expression) = s208
goto(s38, logical_and_expression) = s244
goto(s38, logical_or_expression) = s110
goto(s38, multiplicative_expression) = s72
goto(s38, postfix_expression) = s263
goto(s38, primary_expression) = s273
goto(s38, relational_expression) = s183
goto(s38, shift_expression) = s282
goto(s38, unary_expression) = s81
goto(s38, unary_operator) = s98
goto(s38, '!') = s343
goto(s38, '&') = s344
goto(s38, '(') = s13
goto(s38, '*') = s345
goto(s38, '+') = s346
goto(s38, '++') = s260
goto(s38, '-') = s347
goto(s38, '--') = s261
goto(s38, 'sizeof') = s262
goto(s38, '~') = s348
goto(s38, CONSTANT) = s275
goto(s38, IDENTIFIER) = s276
goto(s38, STRING_LITERAL) = s277
goto(s39, additive_expression) = s65
goto(s39, and_expression) = s73
goto(s39, assignment_expression) = s186
goto(s39, cast_expression) = s246
goto(s39, conditional_expression) = s80
goto(s39, equality_expression) = s76
goto(s39, exclusive_or_expression) = s184
goto(s39, expression) = s195
goto(s39, inclusive_or_expression) = s208
goto(s39, logical_and_expression) = s244
goto(s39, logical_or_expression) = s110
goto(s39, multiplicative_expression) = s72
goto(s39, postfix_expression) = s263
goto(s39, primary_expression) = s273
goto(s39, relational_expression) = s183
goto(s39, shift_expression) = s282
goto(s39, unary_expression) = s81
goto(s39, unary_operator) = s98
goto(s39, '!') = s343
goto(s39, '&') = s344
goto(s39, '(') = s13
goto(s39, '*') = s345
goto(s39, '+') = s346
goto(s39, '++') = s260
goto(s39, '-') = s347
goto(s39, '--') = s261
goto(s39, 'sizeof') = s262
goto(s39, '~') = s348
goto(s39, CONSTANT) = s275
goto(s39, IDENTIFIER) = s276
goto(s39, STRING_LITERAL) = s277
goto(s40, additive_expression) = s65
goto(s40, and_expression) = s73
goto(s40, assignment_expression) = s196
goto(s40, cast_expression) = s246
goto(s40, conditional_expression) = s80
goto(s40, equality_expression) = s76
goto(s40, exclusive_or_expression) = s184
goto(s40, inclusive_or_expression) = s208
goto(s40, logical_and_expression) = s244
goto(s40, logical_or_expression) = s110
goto(s40, multiplicative_expression) = s72
goto(s40, postfix_expression) = s263
goto(s40, primary_expression) = s273
goto(s40, relational_expression) = s183
goto(s40, shift_expression) = s282
goto(s40, unary_expression) = s81
goto(s40, unary_operator) = s98
goto(s40, '!') = s343
goto(s40, '&') = s344
goto(s40, '(') = s13
goto(s40, '*') = s345
goto(s40, '+') = s346
goto(s40, '++') = s260
goto(s40, '-') = s347
goto(s40, '--') = s261
goto(s40, 'sizeof') = s262
goto(s40, '~') = s348
goto(s40, CONSTANT) = s275
goto(s40, IDENTIFIER) = s276
goto(s40, STRING_LITERAL) = s277
goto(s41, additive_expression) = s65
goto(s41, and_expression) = s73
goto(s41, assignment_expression) = s217
goto(s41, cast_expression) = s246
goto(s41, conditional_expression) = s80
goto(s41, equality_expression) = s76
goto(s41, exclusive_or_expression) = s184
goto(s41, inclusive_or_expression) = s208
goto(s41, initializer) = s211
goto(s41, logical_and_expression) = s244
goto(s41, logical_or_expression) = s110
goto(s41, multiplicative_expression) = s72
goto(s41, postfix_expression) = s263
goto(s41, primary_expression) = s273
goto(s41, relational_expression) = s183
goto(s41, shift_expression) = s282
goto(s41, unary_expression) = s81
goto(s41, unary_operator) = s98
goto(s41, '!') = s343
goto(s41, '&') = s344
goto(s41, '(') = s13
goto(s41, '*') = s345
goto(s41, '+') = s346
goto(s41, '++') = s260
goto(s41, '-') = s347
goto(s41, '--') = s261
goto(s41, 'sizeof') = s262
goto(s41, '{') = s42
goto(s41, '~') = s348
goto(s41, CONSTANT) = s275
goto(s41, IDENTIFIER) = s276
goto(s41, STRING_LITERAL) = s277
goto(s42, additive_expression) = s65
goto(s42, and_expression) = s73
goto(s42, assignment_expression) = s217
goto(s42, cast_expression) = s246
goto(s42, conditional_expression) = s80
goto(s42, equality_expression) = s76
goto(s42, exclusive_or_expression) = s184
goto(s42, inclusive_or_expression) = s208
goto(s42, initializer) = s218
goto(s42, initializer_list) = s214
goto(s42, logical_and_expression) = s244
goto(s42, logical_or_expression) = s110
goto(s42, multiplicative_expression) = s72
goto(s42, postfix_expression) = s263
goto(s42, primary_expression) = s273
goto(s42, relational_expression) = s183
goto(s42, shift_expression) = s282
goto(s42, unary_expression) = s81
goto(s42, unary_operator) = s98
goto(s42, '!') = s343
goto(s42, '&') = s344
goto(s42, '(') = s13
goto(s42, '*') = s345
goto(s42, '+') = s346
goto(s42, '++') = s260
goto(s42, '-') = s347
goto(s42, '--') = s261
goto(s42, 'sizeof') = s262
goto(s42, '{') = s42
goto(s42, '~') = s348
goto(s42, CONSTANT) = s275
goto(s42, IDENTIFIER) = s276
goto(s42, STRING_LITERAL) = s277
goto(s43, additive_expression) = s65
goto(s43, and_expression) = s73
goto(s43, assignment_expression) = s217
goto(s43, cast_expression) = s246
goto(s43, conditional_expression) = s80
goto(s43, equality_expression) = s76
goto(s43, exclusive_or_expression) = s184
goto(s43, inclusive_or_expression) = s208
goto(s43, initializer) = s219
goto(s43, logical_and_expression) = s244
goto(s43, logical_or_expression) = s110
goto(s43, multiplicative_expression) = s72
goto(s43, postfix_expression) = s263
goto(s43, primary_expression) = s273
goto(s43, relational_expression) = s183
goto(s43, shift_expression) = s282
goto(s43, unary_expression) = s81
goto(s43, unary_operator) = s98
goto(s43, '!') = s343
goto(s43, '&') = s344
goto(s43, '(') = s13
goto(s43, '*') = s345
goto(s43, '+') = s346
goto(s43, '++') = s260
goto(s43, '-') = s347
goto(s43, '--') = s261
goto(s43, 'sizeof') = s262
goto(s43, '{') = s42
goto(s43, '}') = s215
goto(s43, '~') = s348
goto(s43, CONSTANT) = s275
goto(s43, IDENTIFIER) = s276
goto(s43, STRING_LITERAL) = s277
goto(s44, additive_expression) = s65
goto(s44, and_expression) = s73
goto(s44, cast_expression) = s246
goto(s44, conditional_expression) = s112
goto(s44, equality_expression) = s76
goto(s44, exclusive_or_expression) = s184
goto(s44, inclusive_or_expression) = s208
goto(s44, logical_and_expression) = s244
goto(s44, logical_or_expression) = s110
goto(s44, multiplicative_expression) = s72
goto(s44, postfix_expression) = s263
goto(s44, primary_expression) = s273
goto(s44, relational_expression) = s183
goto(s44, shift_expression) = s282
goto(s44, unary_expression) = s101
goto(s44, unary_operator) = s98
goto(s44, '!') = s343
goto(s44, '&') = s344
goto(s44, '(') = s13
goto(s44, '*') = s345
goto(s44, '+') = s346
goto(s44, '++') = s260
goto(s44, '-') = s347
goto(s44, '--') = s261
goto(s44, 'sizeof') = s262
goto(s44, '~') = s348
goto(s44, CONSTANT) = s275
goto(s44, IDENTIFIER) = s276
goto(s44, STRING_LITERAL) = s277
goto(s45, additive_expression) = s65
goto(s45, and_expression) = s73
goto(s45, cast_expression) = s246
goto(s45, conditional_expression) = s113
goto(s45, constant_expression) = s143
goto(s45, equality_expression) = s76
goto(s45, exclusive_or_expression) = s184
goto(s45, inclusive_or_expression) = s208
goto(s45, logical_and_expression) = s244
goto(s45, logical_or_expression) = s110
goto(s45, multiplicative_expression) = s72
goto(s45, postfix_expression) = s263
goto(s45, primary_expression) = s273
goto(s45, relational_expression) = s183
goto(s45, shift_expression) = s282
goto(s45, unary_expression) = s101
goto(s45, unary_operator) = s98
goto(s45, '!') = s343
goto(s45, '&') = s344
goto(s45, '(') = s13
goto(s45, '*') = s345
goto(s45, '+') = s346
goto(s45, '++') = s260
goto(s45, '-') = s347
goto(s45, '--') = s261
goto(s45, ']') = s142
goto(s45, 'sizeof') = s262
goto(s45, '~') = s348
goto(s45, CONSTANT) = s275
goto(s45, IDENTIFIER) = s276
goto(s45, STRING_LITERAL) = s277
goto(s46, additive_expression) = s65
goto(s46, and_expression) = s73
goto(s46, cast_expression) = s246
goto(s46, conditional_expression) = s113
goto(s46, constant_expression) = s149
goto(s46, equality_expression) = s76
goto(s46, exclusive_or_expression) = s184
goto(s46, inclusive_or_expression) = s208
goto(s46, logical_and_expression) = s244
goto(s46, logical_or_expression) = s110
goto(s46, multiplicative_expression) = s72
goto(s46, postfix_expression) = s263
goto(s46, primary_expression) = s273
goto(s46, relational_expression) = s183
goto(s46, shift_expression) = s282
goto(s46, unary_expression) = s101
goto(s46, unary_operator) = s98
goto(s46, '!') = s343
goto(s46, '&') = s344
goto(s46, '(') = s13
goto(s46, '*') = s345
goto(s46, '+') = s346
goto(s46, '++') = s260
goto(s46, '-') = s347
goto(s46, '--') = s261
goto(s46, ']') = s148
goto(s46, 'sizeof') = s262
goto(s46, '~') = s348
goto(s46, CONSTANT) = s275
goto(s46, IDENTIFIER) = s276
goto(s46, STRING_LITERAL) = s277
goto(s47, additive_expression) = s65
goto(s47, and_expression) = s73
goto(s47, cast_expression) = s246
goto(s47, conditional_expression) = s113
goto(s47, constant_expression) = s160
goto(s47, equality_expression) = s76
goto(s47, exclusive_or_expression) = s184
goto(s47, inclusive_or_expression) = s208
goto(s47, logical_and_expression) = s244
goto(s47, logical_or_expression) = s110
goto(s47, multiplicative_expression) = s72
goto(s47, postfix_expression) = s263
goto(s47, primary_expression) = s273
goto(s47, relational_expression) = s183
goto(s47, shift_expression) = s282
goto(s47, unary_expression) = s101
goto(s47, unary_operator) = s98
goto(s47, '!') = s343
goto(s47, '&') = s344
goto(s47, '(') = s13
goto(s47, '*') = s345
goto(s47, '+') = s346
goto(s47, '++') = s260
goto(s47, '-') = s347
goto(s47, '--') = s261
goto(s47, ']') = s159
goto(s47, 'sizeof') = s262
goto(s47, '~') = s348
goto(s47, CONSTANT) = s275
goto(s47, IDENTIFIER) = s276
goto(s47, STRING_LITERAL) = s277
goto(s48, additive_expression) = s65
goto(s48, and_expression) = s73
goto(s48, cast_expression) = s246
goto(s48, conditional_expression) = s113
goto(s48, constant_expression) = s178
goto(s48, equality_expression) = s76
goto(s48, exclusive_or_expression) = s184
goto(s48, inclusive_or_expression) = s208
goto(s48, logical_and_expression) = s244
goto(s48, logical_or_expression) = s110
goto(s48, multiplicative_expression) = s72
goto(s48, postfix_expression) = s263
goto(s48, primary_expression) = s273
goto(s48, relational_expression) = s183
goto(s48, shift_expression) = s282
goto(s48, unary_expression) = s101
goto(s48, unary_operator) = s98
goto(s48, '!') = s343
goto(s48, '&') = s344
goto(s48, '(') = s13
goto(s48, '*') = s345
goto(s48, '+') = s346
goto(s48, '++') = s260
goto(s48, '-') = s347
goto(s48, '--') = s261
goto(s48, 'sizeof') = s262
goto(s48, '~') = s348
goto(s48, CONSTANT) = s275
goto(s48, IDENTIFIER) = s276
goto(s48, STRING_LITERAL) = s277
goto(s49, additive_expression) = s65
goto(s49, and_expression) = s73
goto(s49, cast_expression) = s246
goto(s49, conditional_expression) = s113
goto(s49, constant_expression) = s238
goto(s49, equality_expression) = s76
goto(s49, exclusive_or_expression) = s184
goto(s49, inclusive_or_expression) = s208
goto(s49, logical_and_expression) = s244
goto(s49, logical_or_expression) = s110
goto(s49, multiplicative_expression) = s72
goto(s49, postfix_expression) = s263
goto(s49, primary_expression) = s273
goto(s49, relational_expression) = s183
goto(s49, shift_expression) = s282
goto(s49, unary_expression) = s101
goto(s49, unary_operator) = s98
goto(s49, '!') = s343
goto(s49, '&') = s344
goto(s49, '(') = s13
goto(s49, '*') = s345
goto(s49, '+') = s346
goto(s49, '++') = s260
goto(s49, '-') = s347
goto(s49, '--') = s261
goto(s49, 'sizeof') = s262
goto(s49, '~') = s348
goto(s49, CONSTANT) = s275
goto(s49, IDENTIFIER) = s276
goto(s49, STRING_LITERAL) = s277
goto(s50, additive_expression) = s65
goto(s50, and_expression) = s73
goto(s50, cast_expression) = s246
goto(s50, conditional_expression) = s113
goto(s50, constant_expression) = s307
goto(s50, equality_expression) = s76
goto(s50, exclusive_or_expression) = s184
goto(s50, inclusive_or_expression) = s208
goto(s50, logical_and_expression) = s244
goto(s50, logical_or_expression) = s110
goto(s50, multiplicative_expression) = s72
goto(s50, postfix_expression) = s263
goto(s50, primary_expression) = s273
goto(s50, relational_expression) = s183
goto(s50, shift_expression) = s282
goto(s50, unary_expression) = s101
goto(s50, unary_operator) = s98
goto(s50, '!') = s343
goto(s50, '&') = s344
goto(s50, '(') = s13
goto(s50, '*') = s345
goto(s50, '+') = s346
goto(s50, '++') = s260
goto(s50, '-') = s347
goto(s50, '--') = s261
goto(s50, 'sizeof') = s262
goto(s50, '~') = s348
goto(s50, CONSTANT) = s275
goto(s50, IDENTIFIER) = s276
goto(s50, STRING_LITERAL) = s277
goto(s51, additive_expression) = s65
goto(s51, and_expression) = s73
goto(s51, cast_expression) = s246
goto(s51, conditional_expression) = s113
goto(s51, constant_expression) = s309
goto(s51, equality_expression) = s76
goto(s51, exclusive_or_expression) = s184
goto(s51, inclusive_or_expression) = s208
goto(s51, logical_and_expression) = s244
goto(s51, logical_or_expression) = s110
goto(s51, multiplicative_expression) = s72
goto(s51, postfix_expression) = s263
goto(s51, primary_expression) = s273
goto(s51, relational_expression) = s183
goto(s51, shift_expression) = s282
goto(s51, unary_expression) = s101
goto(s51, unary_operator) = s98
goto(s51, '!') = s343
goto(s51, '&') = s344
goto(s51, '(') = s13
goto(s51, '*') = s345
goto(s51, '+') = s346
goto(s51, '++') = s260
goto(s51, '-') = s347
goto(s51, '--') = s261
goto(s51, 'sizeof') = s262
goto(s51, '~') = s348
goto(s51, CONSTANT) = s275
goto(s51, IDENTIFIER) = s276
goto(s51, STRING_LITERAL) = s277
goto(s52, additive_expression) = s65
goto(s52, and_expression) = s73
goto(s52, cast_expression) = s246
goto(s52, equality_expression) = s76
goto(s52, exclusive_or_expression) = s184
goto(s52, inclusive_or_expression) = s208
goto(s52, logical_and_expression) = s245
goto(s52, multiplicative_expression) = s72
goto(s52, postfix_expression) = s263
goto(s52, primary_expression) = s273
goto(s52, relational_expression) = s183
goto(s52, shift_expression) = s282
goto(s52, unary_expression) = s101
goto(s52, unary_operator) = s98
goto(s52, '!') = s343
goto(s52, '&') = s344
goto(s52, '(') = s13
goto(s52, '*') = s345
goto(s52, '+') = s346
goto(s52, '++') = s260
goto(s52, '-') = s347
goto(s52, '--') = s261
goto(s52, 'sizeof') = s262
goto(s52, '~') = s348
goto(s52, CONSTANT) = s275
goto(s52, IDENTIFIER) = s276
goto(s52, STRING_LITERAL) = s277
goto(s53, additive_expression) = s65
goto(s53, and_expression) = s73
goto(s53, cast_expression) = s246
goto(s53, equality_expression) = s76
goto(s53, exclusive_or_expression) = s184
goto(s53, inclusive_or_expression) = s209
goto(s53, multiplicative_expression) = s72
goto(s53, postfix_expression) = s263
goto(s53, primary_expression) = s273
goto(s53, relational_expression) = s183
goto(s53, shift_expression) = s282
goto(s53, unary_expression) = s101
goto(s53, unary_operator) = s98
goto(s53, '!') = s343
goto(s53, '&') = s344
goto(s53, '(') = s13
goto(s53, '*') = s345
goto(s53, '+') = s346
goto(s53, '++') = s260
goto(s53, '-') = s347
goto(s53, '--') = s261
goto(s53, 'sizeof') = s262
goto(s53, '~') = s348
goto(s53, CONSTANT) = s275
goto(s53, IDENTIFIER) = s276
goto(s53, STRING_LITERAL) = s277
goto(s54, additive_expression) = s65
goto(s54, and_expression) = s73
goto(s54, cast_expression) = s246
goto(s54, equality_expression) = s76
goto(s54, exclusive_or_expression) = s185
goto(s54, multiplicative_expression) = s72
goto(s54, postfix_expression) = s263
goto(s54, primary_expression) = s273
goto(s54, relational_expression) = s183
goto(s54, shift_expression) = s282
goto(s54, unary_expression) = s101
goto(s54, unary_operator) = s98
goto(s54, '!') = s343
goto(s54, '&') = s344
goto(s54, '(') = s13
goto(s54, '*') = s345
goto(s54, '+') = s346
goto(s54, '++') = s260
goto(s54, '-') = s347
goto(s54, '--') = s261
goto(s54, 'sizeof') = s262
goto(s54, '~') = s348
goto(s54, CONSTANT) = s275
goto(s54, IDENTIFIER) = s276
goto(s54, STRING_LITERAL) = s277
goto(s55, additive_expression) = s65
goto(s55, and_expression) = s74
goto(s55, cast_expression) = s246
goto(s55, equality_expression) = s76
goto(s55, multiplicative_expression) = s72
goto(s55, postfix_expression) = s263
goto(s55, primary_expression) = s273
goto(s55, relational_expression) = s183
goto(s55, shift_expression) = s282
goto(s55, unary_expression) = s101
goto(s55, unary_operator) = s98
goto(s55, '!') = s343
goto(s55, '&') = s344
goto(s55, '(') = s13
goto(s55, '*') = s345
goto(s55, '+') = s346
goto(s55, '++') = s260
goto(s55, '-') = s347
goto(s55, '--') = s261
goto(s55, 'sizeof') = s262
goto(s55, '~') = s348
goto(s55, CONSTANT) = s275
goto(s55, IDENTIFIER) = s276
goto(s55, STRING_LITERAL) = s277
goto(s56, additive_expression) = s65
goto(s56, cast_expression) = s246
goto(s56, equality_expression) = s75
goto(s56, multiplicative_expression) = s72
goto(s56, postfix_expression) = s263
goto(s56, primary_expression) = s273
goto(s56, relational_expression) = s183
goto(s56, shift_expression) = s282
goto(s56, unary_expression) = s101
goto(s56, unary_operator) = s98
goto(s56, '!') = s343
goto(s56, '&') = s344
goto(s56, '(') = s13
goto(s56, '*') = s345
goto(s56, '+') = s346
goto(s56, '++') = s260
goto(s56, '-') = s347
goto(s56, '--') = s261
goto(s56, 'sizeof') = s262
goto(s56, '~') = s348
goto(s56, CONSTANT) = s275
goto(s56, IDENTIFIER) = s276
goto(s56, STRING_LITERAL) = s277
goto(s57, additive_expression) = s65
goto(s57, cast_expression) = s246
goto(s57, multiplicative_expression) = s72
goto(s57, postfix_expression) = s263
goto(s57, primary_expression) = s273
goto(s57, relational_expression) = s181
goto(s57, shift_expression) = s282
goto(s57, unary_expression) = s101
goto(s57, unary_operator) = s98
goto(s57, '!') = s343
goto(s57, '&') = s344
goto(s57, '(') = s13
goto(s57, '*') = s345
goto(s57, '+') = s346
goto(s57, '++') = s260
goto(s57, '-') = s347
goto(s57, '--') = s261
goto(s57, 'sizeof') = s262
goto(s57, '~') = s348
goto(s57, CONSTANT) = s275
goto(s57, IDENTIFIER) = s276
goto(s57, STRING_LITERAL) = s277
goto(s58, additive_expression) = s65
goto(s58, cast_expression) = s246
goto(s58, multiplicative_expression) = s72
goto(s58, postfix_expression) = s263
goto(s58, primary_expression) = s273
goto(s58, relational_expression) = s182
goto(s58, shift_expression) = s282
goto(s58, unary_expression) = s101
goto(s58, unary_operator) = s98
goto(s58, '!') = s343
goto(s58, '&') = s344
goto(s58, '(') = s13
goto(s58, '*') = s345
goto(s58, '+') = s346
goto(s58, '++') = s260
goto(s58, '-') = s347
goto(s58, '--') = s261
goto(s58, 'sizeof') = s262
goto(s58, '~') = s348
goto(s58, CONSTANT) = s275
goto(s58, IDENTIFIER) = s276
goto(s58, STRING_LITERAL) = s277
goto(s59, additive_expression) = s65
goto(s59, cast_expression) = s246
goto(s59, multiplicative_expression) = s72
goto(s59, postfix_expression) = s263
goto(s59, primary_expression) = s273
goto(s59, shift_expression) = s278
goto(s59, unary_expression) = s101
goto(s59, unary_operator) = s98
goto(s59, '!') = s343
goto(s59, '&') = s344
goto(s59, '(') = s13
goto(s59, '*') = s345
goto(s59, '+') = s346
goto(s59, '++') = s260
goto(s59, '-') = s347
goto(s59, '--') = s261
goto(s59, 'sizeof') = s262
goto(s59, '~') = s348
goto(s59, CONSTANT) = s275
goto(s59, IDENTIFIER) = s276
goto(s59, STRING_LITERAL) = s277
goto(s60, additive_expression) = s65
goto(s60, cast_expression) = s246
goto(s60, multiplicative_expression) = s72
goto(s60, postfix_expression) = s263
goto(s60, primary_expression) = s273
goto(s60, shift_expression) = s279
goto(s60, unary_expression) = s101
goto(s60, unary_operator) = s98
goto(s60, '!') = s343
goto(s60, '&') = s344
goto(s60, '(') = s13
goto(s60, '*') = s345
goto(s60, '+') = s346
goto(s60, '++') = s260
goto(s60, '-') = s347
goto(s60, '--') = s261
goto(s60, 'sizeof') = s262
goto(s60, '~') = s348
goto(s60, CONSTANT) = s275
goto(s60, IDENTIFIER) = s276
goto(s60, STRING_LITERAL) = s277
goto(s61, additive_expression) = s65
goto(s61, cast_expression) = s246
goto(s61, multiplicative_expression) = s72
goto(s61, postfix_expression) = s263
goto(s61, primary_expression) = s273
goto(s61, shift_expression) = s280
goto(s61, unary_expression) = s101
goto(s61, unary_operator) = s98
goto(s61, '!') = s343
goto(s61, '&') = s344
goto(s61, '(') = s13
goto(s61, '*') = s345
goto(s61, '+') = s346
goto(s61, '++') = s260
goto(s61, '-') = s347
goto(s61, '--') = s261
goto(s61, 'sizeof') = s262
goto(s61, '~') = s348
goto(s61, CONSTANT) = s275
goto(s61, IDENTIFIER) = s276
goto(s61, STRING_LITERAL) = s277
goto(s62, additive_expression) = s65
goto(s62, cast_expression) = s246
goto(s62, multiplicative_expression) = s72
goto(s62, postfix_expression) = s263
goto(s62, primary_expression) = s273
goto(s62, shift_expression) = s281
goto(s62, unary_expression) = s101
goto(s62, unary_operator) = s98
goto(s62, '!') = s343
goto(s62, '&') = s344
goto(s62, '(') = s13
goto(s62, '*') = s345
goto(s62, '+') = s346
goto(s62, '++') = s260
goto(s62, '-') = s347
goto(s62, '--') = s261
goto(s62, 'sizeof') = s262
goto(s62, '~') = s348
goto(s62, CONSTANT) = s275
goto(s62, IDENTIFIER) = s276
goto(s62, STRING_LITERAL) = s277
goto(s63, additive_expression) = s66
goto(s63, cast_expression) = s246
goto(s63, multiplicative_expression) = s72
goto(s63, postfix_expression) = s263
goto(s63, primary_expression) = s273
goto(s63, unary_expression) = s101
goto(s63, unary_operator) = s98
goto(s63, '!') = s343
goto(s63, '&') = s344
goto(s63, '(') = s13
goto(s63, '*') = s345
goto(s63, '+') = s346
goto(s63, '++') = s260
goto(s63, '-') = s347
goto(s63, '--') = s261
goto(s63, 'sizeof') = s262
goto(s63, '~') = s348
goto(s63, CONSTANT) = s275
goto(s63, IDENTIFIER) = s276
goto(s63, STRING_LITERAL) = s277
goto(s64, additive_expression) = s67
goto(s64, cast_expression) = s246
goto(s64, multiplicative_expression) = s72
goto(s64, postfix_expression) = s263
goto(s64, primary_expression) = s273
goto(s64, unary_expression) = s101
goto(s64, unary_operator) = s98
goto(s64, '!') = s343
goto(s64, '&') = s344
goto(s64, '(') = s13
goto(s64, '*') = s345
goto(s64, '+') = s346
goto(s64, '++') = s260
goto(s64, '-') = s347
goto(s64, '--') = s261
goto(s64, 'sizeof') = s262
goto(s64, '~') = s348
goto(s64, CONSTANT) = s275
goto(s64, IDENTIFIER) = s276
goto(s64, STRING_LITERAL) = s277
goto(s65, '+') = s68
goto(s65, '-') = s70
goto(s66, '+') = s68
goto(s66, '-') = s70
goto(s67, '+') = s68
goto(s67, '-') = s70
goto(s68, cast_expression) = s246
goto(s68, multiplicative_expression) = s69
goto(s68, postfix_expression) = s263
goto(s68, primary_expression) = s273
goto(s68, unary_expression) = s101
goto(s68, unary_operator) = s98
goto(s68, '!') = s343
goto(s68, '&') = s344
goto(s68, '(') = s13
goto(s68, '*') = s345
goto(s68, '+') = s346
goto(s68, '++') = s260
goto(s68, '-') = s347
goto(s68, '--') = s261
goto(s68, 'sizeof') = s262
goto(s68, '~') = s348
goto(s68, CONSTANT) = s275
goto(s68, IDENTIFIER) = s276
goto(s68, STRING_LITERAL) = s277
goto(s69, '%') = s95
goto(s69, '*') = s96
goto(s69, '/') = s97
goto(s70, cast_expression) = s246
goto(s70, multiplicative_expression) = s71
goto(s70, postfix_expression) = s263
goto(s70, primary_expression) = s273
goto(s70, unary_expression) = s101
goto(s70, unary_operator) = s98
goto(s70, '!') = s343
goto(s70, '&') = s344
goto(s70, '(') = s13
goto(s70, '*') = s345
goto(s70, '+') = s346
goto(s70, '++') = s260
goto(s70, '-') = s347
goto(s70, '--') = s261
goto(s70, 'sizeof') = s262
goto(s70, '~') = s348
goto(s70, CONSTANT) = s275
goto(s70, IDENTIFIER) = s276
goto(s70, STRING_LITERAL) = s277
goto(s71, '%') = s95
goto(s71, '*') = s96
goto(s71, '/') = s97
goto(s72, '%') = s95
goto(s72, '*') = s96
goto(s72, '/') = s97
goto(s73, '&') = s56
goto(s74, '&') = s56
goto(s75, '!=') = s57
goto(s75, '==') = s58
goto(s76, '!=') = s57
goto(s76, '==') = s58
goto(s77, ')') = s265
goto(s77, ',') = s11
goto(s81, assignment_operator) = s12
goto(s81, '%=') = s83
goto(s81, '&=') = s84
goto(s81, '*=') = s85
goto(s81, '+=') = s86
goto(s81, '-=') = s87
goto(s81, '/=') = s88
goto(s81, '<<=') = s89
goto(s81, '=') = s90
goto(s81, '>>=') = s91
goto(s81, '^=') = s92
goto(s81, '|=') = s93
goto(s94, cast_expression) = s100
goto(s94, postfix_expression) = s263
goto(s94, primary_expression) = s273
goto(s94, unary_expression) = s101
goto(s94, unary_operator) = s98
goto(s94, '!') = s343
goto(s94, '&') = s344
goto(s94, '(') = s13
goto(s94, '*') = s345
goto(s94, '+') = s346
goto(s94, '++') = s260
goto(s94, '-') = s347
goto(s94, '--') = s261
goto(s94, 'sizeof') = s262
goto(s94, '~') = s348
goto(s94, CONSTANT) = s275
goto(s94, IDENTIFIER) = s276
goto(s94, STRING_LITERAL) = s277
goto(s95, cast_expression) = s247
goto(s95, postfix_expression) = s263
goto(s95, primary_expression) = s273
goto(s95, unary_expression) = s101
goto(s95, unary_operator) = s98
goto(s95, '!') = s343
goto(s95, '&') = s344
goto(s95, '(') = s13
goto(s95, '*') = s345
goto(s95, '+') = s346
goto(s95, '++') = s260
goto(s95, '-') = s347
goto(s95, '--') = s261
goto(s95, 'sizeof') = s262
goto(s95, '~') = s348
goto(s95, CONSTANT) = s275
goto(s95, IDENTIFIER) = s276
goto(s95, STRING_LITERAL) = s277
goto(s96, cast_expression) = s248
goto(s96, postfix_expression) = s263
goto(s96, primary_expression) = s273
goto(s96, unary_expression) = s101
goto(s96, unary_operator) = s98
goto(s96, '!') = s343
goto(s96, '&') = s344
goto(s96, '(') = s13
goto(s96, '*') = s345
goto(s96, '+') = s346
goto(s96, '++') = s260
goto(s96, '-') = s347
goto(s96, '--') = s261
goto(s96, 'sizeof') = s262
goto(s96, '~') = s348
goto(s96, CONSTANT) = s275
goto(s96, IDENTIFIER) = s276
goto(s96, STRING_LITERAL) = s277
goto(s97, cast_expression) = s249
goto(s97, postfix_expression) = s263
goto(s97, primary_expression) = s273
goto(s97, unary_expression) = s101
goto(s97, unary_operator) = s98
goto(s97, '!') = s343
goto(s97, '&') = s344
goto(s97, '(') = s13
goto(s97, '*') = s345
goto(s97, '+') = s346
goto(s97, '++') = s260
goto(s97, '-') = s347
goto(s97, '--') = s261
goto(s97, 'sizeof') = s262
goto(s97, '~') = s348
goto(s97, CONSTANT) = s275
goto(s97, IDENTIFIER) = s276
goto(s97, STRING_LITERAL) = s277
goto(s98, cast_expression) = s342
goto(s98, postfix_expression) = s263
goto(s98, primary_expression) = s273
goto(s98, unary_expression) = s101
goto(s98, unary_operator) = s98
goto(s98, '!') = s343
goto(s98, '&') = s344
goto(s98, '(') = s13
goto(s98, '*') = s345
goto(s98, '+') = s346
goto(s98, '++') = s260
goto(s98, '-') = s347
goto(s98, '--') = s261
goto(s98, 'sizeof') = s262
goto(s98, '~') = s348
goto(s98, CONSTANT) = s275
goto(s98, IDENTIFIER) = s276
goto(s98, STRING_LITERAL) = s277
goto(s99, ')') = s94
goto(s102, compound_statement) = s201
goto(s102, declaration) = s119
goto(s102, declaration_list) = s104
goto(s102, declaration_specifiers) = s115
goto(s102, enum_specifier) = s335
goto(s102, storage_class_specifier) = s121
goto(s102, struct_or_union) = s314
goto(s102, struct_or_union_specifier) = s336
goto(s102, type_qualifier) = s122
goto(s102, type_specifier) = s123
goto(s102, '=') = s41
goto(s102, 'auto') = s298
goto(s102, 'char') = s325
goto(s102, 'const') = s321
goto(s102, 'double') = s326
goto(s102, 'enum') = s168
goto(s102, 'extern') = s299
goto(s102, 'float') = s327
goto(s102, 'int') = s328
goto(s102, 'long') = s329
goto(s102, 'register') = s300
goto(s102, 'short') = s330
goto(s102, 'signed') = s331
goto(s102, 'static') = s301
goto(s102, 'struct') = s312
goto(s102, 'typedef') = s302
goto(s102, 'union') = s313
goto(s102, 'unsigned') = s332
goto(s102, 'void') = s333
goto(s102, 'volatile') = s322
goto(s102, '{') = s14
goto(s102, TYPE_NAME) = s334
goto(s103, compound_statement) = s203
goto(s103, declaration) = s119
goto(s103, declaration_list) = s105
goto(s103, declaration_specifiers) = s115
goto(s103, enum_specifier) = s335
goto(s103, storage_class_specifier) = s121
goto(s103, struct_or_union) = s314
goto(s103, struct_or_union_specifier) = s336
goto(s103, type_qualifier) = s122
goto(s103, type_specifier) = s123
goto(s103, 'auto') = s298
goto(s103, 'char') = s325
goto(s103, 'const') = s321
goto(s103, 'double') = s326
goto(s103, 'enum') = s168
goto(s103, 'extern') = s299
goto(s103, 'float') = s327
goto(s103, 'int') = s328
goto(s103, 'long') = s329
goto(s103, 'register') = s300
goto(s103, 'short') = s330
goto(s103, 'signed') = s331
goto(s103, 'static') = s301
goto(s103, 'struct') = s312
goto(s103, 'typedef') = s302
goto(s103, 'union') = s313
goto(s103, 'unsigned') = s332
goto(s103, 'void') = s333
goto(s103, 'volatile') = s322
goto(s103, '{') = s14
goto(s103, TYPE_NAME) = s334
goto(s104, compound_statement) = s202
goto(s104, declaration) = s120
goto(s104, declaration_specifiers) = s115
goto(s104, enum_specifier) = s335
goto(s104, storage_class_specifier) = s121
goto(s104, struct_or_union) = s314
goto(s104, struct_or_union_specifier) = s336
goto(s104, type_qualifier) = s122
goto(s104, type_specifier) = s123
goto(s104, 'auto') = s298
goto(s104, 'char') = s325
goto(s104, 'const') = s321
goto(s104, 'double') = s326
goto(s104, 'enum') = s168
goto(s104, 'extern') = s299
goto(s104, 'float') = s327
goto(s104, 'int') = s328
goto(s104, 'long') = s329
goto(s104, 'register') = s300
goto(s104, 'short') = s330
goto(s104, 'signed') = s331
goto(s104, 'static') = s301
goto(s104, 'struct') = s312
goto(s104, 'typedef') = s302
goto(s104, 'union') = s313
goto(s104, 'unsigned') = s332
goto(s104, 'void') = s333
goto(s104, 'volatile') = s322
goto(s104, '{') = s14
goto(s104, TYPE_NAME) = s334
goto(s105, compound_statement) = s204
goto(s105, declaration) = s120
goto(s105, declaration_specifiers) = s115
goto(s105, enum_specifier) = s335
goto(s105, storage_class_specifier) = s121
goto(s105, struct_or_union) = s314
goto(s105, struct_or_union_specifier) = s336
goto(s105, type_qualifier) = s122
goto(s105, type_specifier) = s123
goto(s105, 'auto') = s298
goto(s105, 'char') = s325
goto(s105, 'const') = s321
goto(s105, 'double') = s326
goto(s105, 'enum') = s168
goto(s105, 'extern') = s299
goto(s105, 'float') = s327
goto(s105, 'int') = s328
goto(s105, 'long') = s329
goto(s105, 'register') = s300
goto(s105, 'short') = s330
goto(s105, 'signed') = s331
goto(s105, 'static') = s301
goto(s105, 'struct') = s312
goto(s105, 'typedef') = s302
goto(s105, 'union') = s313
goto(s105, 'unsigned') = s332
goto(s105, 'void') = s333
goto(s105, 'volatile') = s322
goto(s105, '{') = s14
goto(s105, TYPE_NAME) = s334
goto(s110, '?') = s28
goto(s110, '||') = s52
goto(s111, ',') = s40
goto(s111, ':') = s44
goto(s114, declarator) = s102
goto(s114, direct_declarator) = s134
goto(s114, init_declarator) = s212
goto(s114, init_declarator_list) = s117
goto(s114, pointer) = s135
goto(s114, '(') = s130
goto(s114, '*') = s256
goto(s114, ';') = s116
goto(s114, IDENTIFIER) = s153
goto(s115, declarator) = s210
goto(s115, direct_declarator) = s134
goto(s115, init_declarator) = s212
goto(s115, init_declarator_list) = s117
goto(s115, pointer) = s135
goto(s115, '(') = s130
goto(s115, '*') = s256
goto(s115, ';') = s116
goto(s115, IDENTIFIER) = s153
goto(s117, ',') = s131
goto(s117, ';') = s118
goto(s121, declaration_specifiers) = s127
goto(s121, enum_specifier) = s335
goto(s121, storage_class_specifier) = s121
goto(s121, struct_or_union) = s314
goto(s121, struct_or_union_specifier) = s336
goto(s121, type_qualifier) = s122
goto(s121, type_specifier) = s123
goto(s121, 'auto') = s298
goto(s121, 'char') = s325
goto(s121, 'const') = s321
goto(s121, 'double') = s326
goto(s121, 'enum') = s168
goto(s121, 'extern') = s299
goto(s121, 'float') = s327
goto(s121, 'int') = s328
goto(s121, 'long') = s329
goto(s121, 'register') = s300
goto(s121, 'short') = s330
goto(s121, 'signed') = s331
goto(s121, 'static') = s301
goto(s121, 'struct') = s312
goto(s121, 'typedef') = s302
goto(s121, 'union') = s313
goto(s121, 'unsigned') = s332
goto(s121, 'void') = s333
goto(s121, 'volatile') = s322
goto(s121, TYPE_NAME) = s334
goto(s122, declaration_specifiers) = s128
goto(s122, enum_specifier) = s335
goto(s122, storage_class_specifier) = s121
goto(s122, struct_or_union) = s314
goto(s122, struct_or_union_specifier) = s336
goto(s122, type_qualifier) = s122
goto(s122, type_specifier) = s123
goto(s122, 'auto') = s298
goto(s122, 'char') = s325
goto(s122, 'const') = s321
goto(s122, 'double') = s326
goto(s122, 'enum') = s168
goto(s122, 'extern') = s299
goto(s122, 'float') = s327
goto(s122, 'int') = s328
goto(s122, 'long') = s329
goto(s122, 'register') = s300
goto(s122, 'short') = s330
goto(s122, 'signed') = s331
goto(s122, 'static') = s301
goto(s122, 'struct') = s312
goto(s122, 'typedef') = s302
goto(s122, 'union') = s313
goto(s122, 'unsigned') = s332
goto(s122, 'void') = s333
goto(s122, 'volatile') = s322
goto(s122, TYPE_NAME) = s334
goto(s123, declaration_specifiers) = s129
goto(s123, enum_specifier) = s335
goto(s123, storage_class_specifier) = s121
goto(s123, struct_or_union) = s314
goto(s123, struct_or_union_specifier) = s336
goto(s123, type_qualifier) = s122
goto(s123, type_specifier) = s123
goto(s123, 'auto') = s298
goto(s123, 'char') = s325
goto(s123, 'const') = s321
goto(s123, 'double') = s326
goto(s123, 'enum') = s168
goto(s123, 'extern') = s299
goto(s123, 'float') = s327
goto(s123, 'int') = s328
goto(s123, 'long') = s329
goto(s123, 'register') = s300
goto(s123, 'short') = s330
goto(s123, 'signed') = s331
goto(s123, 'static') = s301
goto(s123, 'struct') = s312
goto(s123, 'typedef') = s302
goto(s123, 'union') = s313
goto(s123, 'unsigned') = s332
goto(s123, 'void') = s333
goto(s123, 'volatile') = s322
goto(s123, TYPE_NAME) = s334
goto(s124, declaration_specifiers) = s4
goto(s124, enum_specifier) = s335
goto(s124, parameter_declaration) = s252
goto(s124, parameter_list) = s253
goto(s124, parameter_type_list) = s146
goto(s124, storage_class_specifier) = s121
goto(s124, struct_or_union) = s314
goto(s124, struct_or_union_specifier) = s336
goto(s124, type_qualifier) = s122
goto(s124, type_specifier) = s123
goto(s124, ')') = s145
goto(s124, 'auto') = s298
goto(s124, 'char') = s325
goto(s124, 'const') = s321
goto(s124, 'double') = s326
goto(s124, 'enum') = s168
goto(s124, 'extern') = s299
goto(s124, 'float') = s327
goto(s124, 'int') = s328
goto(s124, 'long') = s329
goto(s124, 'register') = s300
goto(s124, 'short') = s330
goto(s124, 'signed') = s331
goto(s124, 'static') = s301
goto(s124, 'struct') = s312
goto(s124, 'typedef') = s302
goto(s124, 'union') = s313
goto(s124, 'unsigned') = s332
goto(s124, 'void') = s333
goto(s124, 'volatile') = s322
goto(s124, TYPE_NAME) = s334
goto(s125, declaration_specifiers) = s4
goto(s125, enum_specifier) = s335
goto(s125, identifier_list) = s155
goto(s125, parameter_declaration) = s252
goto(s125, parameter_list) = s253
goto(s125, parameter_type_list) = s157
goto(s125, storage_class_specifier) = s121
goto(s125, struct_or_union) = s314
goto(s125, struct_or_union_specifier) = s336
goto(s125, type_qualifier) = s122
goto(s125, type_specifier) = s123
goto(s125, ')') = s154
goto(s125, 'auto') = s298
goto(s125, 'char') = s325
goto(s125, 'const') = s321
goto(s125, 'double') = s326
goto(s125, 'enum') = s168
goto(s125, 'extern') = s299
goto(s125, 'float') = s327
goto(s125, 'int') = s328
goto(s125, 'long') = s329
goto(s125, 'register') = s300
goto(s125, 'short') = s330
goto(s125, 'signed') = s331
goto(s125, 'static') = s301
goto(s125, 'struct') = s312
goto(s125, 'typedef') = s302
goto(s125, 'union') = s313
goto(s125, 'unsigned') = s332
goto(s125, 'void') = s333
goto(s125, 'volatile') = s322
goto(s125, IDENTIFIER) = s205
goto(s125, TYPE_NAME) = s334
goto(s126, declaration_specifiers) = s4
goto(s126, enum_specifier) = s335
goto(s126, parameter_declaration) = s254
goto(s126, storage_class_specifier) = s121
goto(s126, struct_or_union) = s314
goto(s126, struct_or_union_specifier) = s336
goto(s126, type_qualifier) = s122
goto(s126, type_specifier) = s123
goto(s126, '...') = s255
goto(s126, 'auto') = s298
goto(s126, 'char') = s325
goto(s126, 'const') = s321
goto(s126, 'double') = s326
goto(s126, 'enum') = s168
goto(s126, 'extern') = s299
goto(s126, 'float') = s327
goto(s126, 'int') = s328
goto(s126, 'long') = s329
goto(s126, 'register') = s300
goto(s126, 'short') = s330
goto(s126, 'signed') = s331
goto(s126, 'static') = s301
goto(s126, 'struct') = s312
goto(s126, 'typedef') = s302
goto(s126, 'union') = s313
goto(s126, 'unsigned') = s332
goto(s126, 'void') = s333
goto(s126, 'volatile') = s322
goto(s126, TYPE_NAME) = s334
goto(s130, declarator) = s151
goto(s130, direct_declarator) = s134
goto(s130, pointer) = s135
goto(s130, '(') = s130
goto(s130, '*') = s256
goto(s130, IDENTIFIER) = s153
goto(s131, declarator) = s210
goto(s131, direct_declarator) = s134
goto(s131, init_declarator) = s213
goto(s131, pointer) = s135
goto(s131, '(') = s130
goto(s131, '*') = s256
goto(s131, IDENTIFIER) = s153
goto(s132, declarator) = s308
goto(s132, direct_declarator) = s134
goto(s132, pointer) = s135
goto(s132, struct_declarator) = s310
goto(s132, struct_declarator_list) = s303
goto(s132, '(') = s130
goto(s132, '*') = s256
goto(s132, ':') = s50
goto(s132, IDENTIFIER) = s153
goto(s133, declarator) = s308
goto(s133, direct_declarator) = s134
goto(s133, pointer) = s135
goto(s133, struct_declarator) = s311
goto(s133, '(') = s130
goto(s133, '*') = s256
goto(s133, ':') = s50
goto(s133, IDENTIFIER) = s153
goto(s134, '(') = s125
goto(s134, '[') = s47
goto(s135, direct_declarator) = s136
goto(s135, '(') = s130
goto(s135, IDENTIFIER) = s153
goto(s136, '(') = s125
goto(s136, '[') = s47
goto(s138, ')') = s139
goto(s140, ')') = s141
goto(s143, ']') = s144
goto(s146, ')') = s147
goto(s149, ']') = s150
goto(s151, ')') = s152
goto(s155, ')') = s156
goto(s155, ',') = s206
goto(s157, ')') = s158
goto(s160, ']') = s161
goto(s162, enum_specifier) = s335
goto(s162, specifier_qualifier_list) = s288
goto(s162, struct_or_union) = s314
goto(s162, struct_or_union_specifier) = s336
goto(s162, type_qualifier) = s162
goto(s162, type_specifier) = s163
goto(s162, 'char') = s325
goto(s162, 'const') = s321
goto(s162, 'double') = s326
goto(s162, 'enum') = s168
goto(s162, 'float') = s327
goto(s162, 'int') = s328
goto(s162, 'long') = s329
goto(s162, 'short') = s330
goto(s162, 'signed') = s331
goto(s162, 'struct') = s312
goto(s162, 'union') = s313
goto(s162, 'unsigned') = s332
goto(s162, 'void') = s333
goto(s162, 'volatile') = s322
goto(s162, TYPE_NAME) = s334
goto(s163, enum_specifier) = s335
goto(s163, specifier_qualifier_list) = s289
goto(s163, struct_or_union) = s314
goto(s163, struct_or_union_specifier) = s336
goto(s163, type_qualifier) = s162
goto(s163, type_specifier) = s163
goto(s163, 'char') = s325
goto(s163, 'const') = s321
goto(s163, 'double') = s326
goto(s163, 'enum') = s168
goto(s163, 'float') = s327
goto(s163, 'int') = s328
goto(s163, 'long') = s329
goto(s163, 'short') = s330
goto(s163, 'signed') = s331
goto(s163, 'struct') = s312
goto(s163, 'union') = s313
goto(s163, 'unsigned') = s332
goto(s163, 'void') = s333
goto(s163, 'volatile') = s322
goto(s163, TYPE_NAME) = s334
goto(s164, enum_specifier) = s335
goto(s164, specifier_qualifier_list) = s132
goto(s164, struct_declaration) = s305
goto(s164, struct_declaration_list) = s166
goto(s164, struct_or_union) = s314
goto(s164, struct_or_union_specifier) = s336
goto(s164, type_qualifier) = s162
goto(s164, type_specifier) = s163
goto(s164, 'char') = s325
goto(s164, 'const') = s321
goto(s164, 'double') = s326
goto(s164, 'enum') = s168
goto(s164, 'float') = s327
goto(s164, 'int') = s328
goto(s164, 'long') = s329
goto(s164, 'short') = s330
goto(s164, 'signed') = s331
goto(s164, 'struct') = s312
goto(s164, 'union') = s313
goto(s164, 'unsigned') = s332
goto(s164, 'void') = s333
goto(s164, 'volatile') = s322
goto(s164, TYPE_NAME) = s334
goto(s165, enum_specifier) = s335
goto(s165, specifier_qualifier_list) = s132
goto(s165, struct_declaration) = s305
goto(s165, struct_declaration_list) = s167
goto(s165, struct_or_union) = s314
goto(s165, struct_or_union_specifier) = s336
goto(s165, type_qualifier) = s162
goto(s165, type_specifier) = s163
goto(s165, 'char') = s325
goto(s165, 'const') = s321
goto(s165, 'double') = s326
goto(s165, 'enum') = s168
goto(s165, 'float') = s327
goto(s165, 'int') = s328
goto(s165, 'long') = s329
goto(s165, 'short') = s330
goto(s165, 'signed') = s331
goto(s165, 'struct') = s312
goto(s165, 'union') = s313
goto(s165, 'unsigned') = s332
goto(s165, 'void') = s333
goto(s165, 'volatile') = s322
goto(s165, TYPE_NAME) = s334
goto(s166, enum_specifier) = s335
goto(s166, specifier_qualifier_list) = s132
goto(s166, struct_declaration) = s306
goto(s166, struct_or_union) = s314
goto(s166, struct_or_union_specifier) = s336
goto(s166, type_qualifier) = s162
goto(s166, type_specifier) = s163
goto(s166, 'char') = s325
goto(s166, 'const') = s321
goto(s166, 'double') = s326
goto(s166, 'enum') = s168
goto(s166, 'float') = s327
goto(s166, 'int') = s328
goto(s166, 'long') = s329
goto(s166, 'short') = s330
goto(s166, 'signed') = s331
goto(s166, 'struct') = s312
goto(s166, 'union') = s313
goto(s166, 'unsigned') = s332
goto(s166, 'void') = s333
goto(s166, 'volatile') = s322
goto(s166, '}') = s315
goto(s166, TYPE_NAME) = s334
goto(s167, enum_specifier) = s335
goto(s167, specifier_qualifier_list) = s132
goto(s167, struct_declaration) = s306
goto(s167, struct_or_union) = s314
goto(s167, struct_or_union_specifier) = s336
goto(s167, type_qualifier) = s162
goto(s167, type_specifier) = s163
goto(s167, 'char') = s325
goto(s167, 'const') = s321
goto(s167, 'double') = s326
goto(s167, 'enum') = s168
goto(s167, 'float') = s327
goto(s167, 'int') = s328
goto(s167, 'long') = s329
goto(s167, 'short') = s330
goto(s167, 'signed') = s331
goto(s167, 'struct') = s312
goto(s167, 'union') = s313
goto(s167, 'unsigned') = s332
goto(s167, 'void') = s333
goto(s167, 'volatile') = s322
goto(s167, '}') = s317
goto(s167, TYPE_NAME) = s334
goto(s168, '{') = s169
goto(s168, IDENTIFIER) = s172
goto(s169, enumerator) = s179
goto(s169, enumerator_list) = s170
goto(s169, IDENTIFIER) = s177
goto(s170, ',') = s176
goto(s170, '}') = s171
goto(s172, '{') = s173
goto(s173, enumerator) = s179
goto(s173, enumerator_list) = s174
goto(s173, IDENTIFIER) = s177
goto(s174, ',') = s176
goto(s174, '}') = s175
goto(s176, enumerator) = s180
goto(s176, IDENTIFIER) = s177
goto(s177, '=') = s48
goto(s181, '<') = s59
goto(s181, '<=') = s60
goto(s181, '>') = s61
goto(s181, '>=') = s62
goto(s182, '<') = s59
goto(s182, '<=') = s60
goto(s182, '>') = s61
goto(s182, '>=') = s62
goto(s183, '<') = s59
goto(s183, '<=') = s60
goto(s183, '>') = s61
goto(s183, '>=') = s62
goto(s184, '^') = s55
goto(s185, '^') = s55
goto(s187, ',') = s40
goto(s187, ';') = s198
goto(s188, ')') = s222
goto(s188, ',') = s40
goto(s189, ')') = s20
goto(s189, ',') = s40
goto(s190, ')') = s21
goto(s190, ',') = s40
goto(s191, ',') = s40
goto(s191, ';') = s237
goto(s192, ',') = s40
goto(s192, ']') = s272
goto(s193, ')') = s274
goto(s193, ',') = s40
goto(s194, ')') = s25
goto(s194, ',') = s40
goto(s195, ')') = s27
goto(s195, ',') = s40
goto(s206, IDENTIFIER) = s207
goto(s208, '|') = s54
goto(s209, '|') = s54
goto(s210, '=') = s41
goto(s214, ',') = s43
goto(s214, '}') = s216
goto(s220, 'while') = s221
goto(s221, '(') = s32
goto(s222, ';') = s223
goto(s224, '(') = s30
goto(s227, '(') = s34
goto(s229, ';') = s230
goto(s231, ';') = s232
goto(s233, IDENTIFIER) = s234
goto(s234, ';') = s235
goto(s238, ':') = s22
goto(s240, ':') = s23
goto(s242, ':') = s24
goto(s244, '&&') = s53
goto(s245, '&&') = s53
goto(s253, ',') = s126
goto(s256, pointer) = s258
goto(s256, type_qualifier) = s323
goto(s256, type_qualifier_list) = s257
goto(s256, '*') = s256
goto(s256, 'const') = s321
goto(s256, 'volatile') = s322
goto(s257, pointer) = s259
goto(s257, type_qualifier) = s324
goto(s257, '*') = s256
goto(s257, 'const') = s321
goto(s257, 'volatile') = s322
goto(s260, postfix_expression) = s263
goto(s260, primary_expression) = s273
goto(s260, unary_expression) = s337
goto(s260, unary_operator) = s98
goto(s260, '!') = s343
goto(s260, '&') = s344
goto(s260, '(') = s37
goto(s260, '*') = s345
goto(s260, '+') = s346
goto(s260, '++') = s260
goto(s260, '-') = s347
goto(s260, '--') = s261
goto(s260, 'sizeof') = s262
goto(s260, '~') = s348
goto(s260, CONSTANT) = s275
goto(s260, IDENTIFIER) = s276
goto(s260, STRING_LITERAL) = s277
goto(s261, postfix_expression) = s263
goto(s261, primary_expression) = s273
goto(s261, unary_expression) = s338
goto(s261, unary_operator) = s98
goto(s261, '!') = s343
goto(s261, '&') = s344
goto(s261, '(') = s37
goto(s261, '*') = s345
goto(s261, '+') = s346
goto(s261, '++') = s260
goto(s261, '-') = s347
goto(s261, '--') = s261
goto(s261, 'sizeof') = s262
goto(s261, '~') = s348
goto(s261, CONSTANT) = s275
goto(s261, IDENTIFIER) = s276
goto(s261, STRING_LITERAL) = s277
goto(s262, postfix_expression) = s263
goto(s262, primary_expression) = s273
goto(s262, unary_expression) = s341
goto(s262, unary_operator) = s98
goto(s262, '!') = s343
goto(s262, '&') = s344
goto(s262, '(') = s29
goto(s262, '*') = s345
goto(s262, '+') = s346
goto(s262, '++') = s260
goto(s262, '-') = s347
goto(s262, '--') = s261
goto(s262, 'sizeof') = s262
goto(s262, '~') = s348
goto(s262, CONSTANT) = s275
goto(s262, IDENTIFIER) = s276
goto(s262, STRING_LITERAL) = s277
goto(s263, '(') = s10
goto(s263, '++') = s266
goto(s263, '--') = s267
goto(s263, '->') = s268
goto(s263, '.') = s270
goto(s263, '[') = s36
goto(s268, IDENTIFIER) = s269
goto(s270, IDENTIFIER) = s271
goto(s278, '<<') = s63
goto(s278, '>>') = s64
goto(s279, '<<') = s63
goto(s279, '>>') = s64
goto(s280, '<<') = s63
goto(s280, '>>') = s64
goto(s281, '<<') = s63
goto(s281, '>>') = s64
goto(s282, '<<') = s63
goto(s282, '>>') = s64
goto(s283, '(') = s38
goto(s284, 'else') = s26
goto(s286, '(') = s39
goto(s303, ',') = s133
goto(s303, ';') = s304
goto(s308, ':') = s51
goto(s314, '{') = s164
goto(s314, IDENTIFIER) = s316
goto(s316, '{') = s165
goto(s339, ')') = s340

Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '%='):
<shift, [assignment_operator -> '%=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '&='):
<shift, [assignment_operator -> '&=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '*='):
<shift, [assignment_operator -> '*=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '+='):
<shift, [assignment_operator -> '+=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '-='):
<shift, [assignment_operator -> '-=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '/='):
<shift, [assignment_operator -> '/=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '<<='):
<shift, [assignment_operator -> '<<=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '='):
<shift, [assignment_operator -> '=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '>>='):
<shift, [assignment_operator -> '>>=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '^='):
<shift, [assignment_operator -> '^=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([assignment_expression -> unary_expression <*> assignment_operator assignment_expression, assignment_operator -> <*> '%=', assignment_operator -> <*> '&=', assignment_operator -> <*> '*=', assignment_operator -> <*> '+=', assignment_operator -> <*> '-=', assignment_operator -> <*> '/=', assignment_operator -> <*> '<<=', assignment_operator -> <*> '=', assignment_operator -> <*> '>>=', assignment_operator -> <*> '^=', assignment_operator -> <*> '|=', cast_expression -> unary_expression <*>], '|='):
<shift, [assignment_operator -> '|=' <*>]>
<reduce, cast_expression -> unary_expression>


Conflict on action([labeled_statement -> IDENTIFIER <*> ':' statement, primary_expression -> IDENTIFIER <*>], ':'):
<shift, [additive_expression -> <*> additive_expression '+' multiplicative_expression, additive_expression -> <*> additive_expression '-' multiplicative_expression, additive_expression -> <*> multiplicative_expression, and_expression -> <*> and_expression '&' equality_expression, and_expression -> <*> equality_expression, assignment_expression -> <*> conditional_expression, assignment_expression -> <*> unary_expression assignment_operator assignment_expression, cast_expression -> <*> '(' type_name ')' cast_expression, cast_expression -> <*> unary_expression, compound_statement -> <*> '{' '}', compound_statement -> <*> '{' declaration_list '}', compound_statement -> <*> '{' declaration_list statement_list '}', compound_statement -> <*> '{' statement_list '}', conditional_expression -> <*> logical_or_expression, conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression, equality_expression -> <*> equality_expression '!=' relational_expression, equality_expression -> <*> equality_expression '==' relational_expression, equality_expression -> <*> relational_expression, exclusive_or_expression -> <*> and_expression, exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression, expression -> <*> assignment_expression, expression -> <*> expression ',' assignment_expression, expression_statement -> <*> ';', expression_statement -> <*> expression ';', inclusive_or_expression -> <*> exclusive_or_expression, inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression, iteration_statement -> <*> 'do' statement 'while' '(' expression ')' ';', iteration_statement -> <*> 'for' '(' expression_statement expression_statement ')' statement, iteration_statement -> <*> 'for' '(' expression_statement expression_statement expression ')' statement, iteration_statement -> <*> 'while' '(' expression ')' statement, jump_statement -> <*> 'break' ';', jump_statement -> <*> 'continue' ';', jump_statement -> <*> 'goto' IDENTIFIER ';', jump_statement -> <*> 'return' ';', jump_statement -> <*> 'return' expression ';', labeled_statement -> <*> 'case' constant_expression ':' statement, labeled_statement -> <*> 'default' ':' statement, labeled_statement -> <*> IDENTIFIER ':' statement, labeled_statement -> IDENTIFIER ':' <*> statement, logical_and_expression -> <*> inclusive_or_expression, logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> <*> logical_and_expression, logical_or_expression -> <*> logical_or_expression '||' logical_and_expression, multiplicative_expression -> <*> cast_expression, multiplicative_expression -> <*> multiplicative_expression '%' cast_expression, multiplicative_expression -> <*> multiplicative_expression '*' cast_expression, multiplicative_expression -> <*> multiplicative_expression '/' cast_expression, postfix_expression -> <*> postfix_expression '(' ')', postfix_expression -> <*> postfix_expression '(' argument_expression_list ')', postfix_expression -> <*> postfix_expression '++', postfix_expression -> <*> postfix_expression '--', postfix_expression -> <*> postfix_expression '->' IDENTIFIER, postfix_expression -> <*> postfix_expression '.' IDENTIFIER, postfix_expression -> <*> postfix_expression '[' expression ']', postfix_expression -> <*> primary_expression, primary_expression -> <*> '(' expression ')', primary_expression -> <*> CONSTANT, primary_expression -> <*> IDENTIFIER, primary_expression -> <*> STRING_LITERAL, relational_expression -> <*> relational_expression '<' shift_expression, relational_expression -> <*> relational_expression '<=' shift_expression, relational_expression -> <*> relational_expression '>' shift_expression, relational_expression -> <*> relational_expression '>=' shift_expression, relational_expression -> <*> shift_expression, selection_statement -> <*> 'if' '(' expression ')' statement, selection_statement -> <*> 'if' '(' expression ')' statement 'else' statement, selection_statement -> <*> 'switch' '(' expression ')' statement, shift_expression -> <*> additive_expression, shift_expression -> <*> shift_expression '<<' additive_expression, shift_expression -> <*> shift_expression '>>' additive_expression, statement -> <*> compound_statement, statement -> <*> expression_statement, statement -> <*> iteration_statement, statement -> <*> jump_statement, statement -> <*> labeled_statement, statement -> <*> selection_statement, unary_expression -> <*> '++' unary_expression, unary_expression -> <*> '--' unary_expression, unary_expression -> <*> 'sizeof' '(' type_name ')', unary_expression -> <*> 'sizeof' unary_expression, unary_expression -> <*> postfix_expression, unary_expression -> <*> unary_operator cast_expression, unary_operator -> <*> '!', unary_operator -> <*> '&', unary_operator -> <*> '*', unary_operator -> <*> '+', unary_operator -> <*> '-', unary_operator -> <*> '~']>
<reduce, primary_expression -> IDENTIFIER>


Conflict on action([selection_statement -> 'if' '(' expression ')' statement <*>, selection_statement -> 'if' '(' expression ')' statement <*> 'else' statement], 'else'):
<reduce, selection_statement -> 'if' '(' expression ')' statement>
<shift, [additive_expression -> <*> additive_expression '+' multiplicative_expression, additive_expression -> <*> additive_expression '-' multiplicative_expression, additive_expression -> <*> multiplicative_expression, and_expression -> <*> and_expression '&' equality_expression, and_expression -> <*> equality_expression, assignment_expression -> <*> conditional_expression, assignment_expression -> <*> unary_expression assignment_operator assignment_expression, cast_expression -> <*> '(' type_name ')' cast_expression, cast_expression -> <*> unary_expression, compound_statement -> <*> '{' '}', compound_statement -> <*> '{' declaration_list '}', compound_statement -> <*> '{' declaration_list statement_list '}', compound_statement -> <*> '{' statement_list '}', conditional_expression -> <*> logical_or_expression, conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression, equality_expression -> <*> equality_expression '!=' relational_expression, equality_expression -> <*> equality_expression '==' relational_expression, equality_expression -> <*> relational_expression, exclusive_or_expression -> <*> and_expression, exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression, expression -> <*> assignment_expression, expression -> <*> expression ',' assignment_expression, expression_statement -> <*> ';', expression_statement -> <*> expression ';', inclusive_or_expression -> <*> exclusive_or_expression, inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression, iteration_statement -> <*> 'do' statement 'while' '(' expression ')' ';', iteration_statement -> <*> 'for' '(' expression_statement expression_statement ')' statement, iteration_statement -> <*> 'for' '(' expression_statement expression_statement expression ')' statement, iteration_statement -> <*> 'while' '(' expression ')' statement, jump_statement -> <*> 'break' ';', jump_statement -> <*> 'continue' ';', jump_statement -> <*> 'goto' IDENTIFIER ';', jump_statement -> <*> 'return' ';', jump_statement -> <*> 'return' expression ';', labeled_statement -> <*> 'case' constant_expression ':' statement, labeled_statement -> <*> 'default' ':' statement, labeled_statement -> <*> IDENTIFIER ':' statement, logical_and_expression -> <*> inclusive_or_expression, logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression, logical_or_expression -> <*> logical_and_expression, logical_or_expression -> <*> logical_or_expression '||' logical_and_expression, multiplicative_expression -> <*> cast_expression, multiplicative_expression -> <*> multiplicative_expression '%' cast_expression, multiplicative_expression -> <*> multiplicative_expression '*' cast_expression, multiplicative_expression -> <*> multiplicative_expression '/' cast_expression, postfix_expression -> <*> postfix_expression '(' ')', postfix_expression -> <*> postfix_expression '(' argument_expression_list ')', postfix_expression -> <*> postfix_expression '++', postfix_expression -> <*> postfix_expression '--', postfix_expression -> <*> postfix_expression '->' IDENTIFIER, postfix_expression -> <*> postfix_expression '.' IDENTIFIER, postfix_expression -> <*> postfix_expression '[' expression ']', postfix_expression -> <*> primary_expression, primary_expression -> <*> '(' expression ')', primary_expression -> <*> CONSTANT, primary_expression -> <*> IDENTIFIER, primary_expression -> <*> STRING_LITERAL, relational_expression -> <*> relational_expression '<' shift_expression, relational_expression -> <*> relational_expression '<=' shift_expression, relational_expression -> <*> relational_expression '>' shift_expression, relational_expression -> <*> relational_expression '>=' shift_expression, relational_expression -> <*> shift_expression, selection_statement -> <*> 'if' '(' expression ')' statement, selection_statement -> <*> 'if' '(' expression ')' statement 'else' statement, selection_statement -> <*> 'switch' '(' expression ')' statement, selection_statement -> 'if' '(' expression ')' statement 'else' <*> statement, shift_expression -> <*> additive_expression, shift_expression -> <*> shift_expression '<<' additive_expression, shift_expression -> <*> shift_expression '>>' additive_expression, statement -> <*> compound_statement, statement -> <*> expression_statement, statement -> <*> iteration_statement, statement -> <*> jump_statement, statement -> <*> labeled_statement, statement -> <*> selection_statement, unary_expression -> <*> '++' unary_expression, unary_expression -> <*> '--' unary_expression, unary_expression -> <*> 'sizeof' '(' type_name ')', unary_expression -> <*> 'sizeof' unary_expression, unary_expression -> <*> postfix_expression, unary_expression -> <*> unary_operator cast_expression, unary_operator -> <*> '!', unary_operator -> <*> '&', unary_operator -> <*> '*', unary_operator -> <*> '+', unary_operator -> <*> '-', unary_operator -> <*> '~']>

