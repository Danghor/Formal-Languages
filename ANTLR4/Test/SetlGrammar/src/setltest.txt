-- Es war einmal ein Bauer, der wollte mit einem wolf, einer goat und
-- einer Kiste cabbage über einen Fluß übersetzen.  In dem Boot war aber
-- nicht genug Platz für alles, der Bauer konnte maximal ein Tiere oder 
-- das Gemüse mitnehmen.  Er konnte aber auch wolf und goat nicht 
-- alleine lassen, denn dann hätte der wolf die goat gefressen.
-- Ebensowenig konnte er die goat mit dem cabbage alleine lassen, denn
-- dann hätte die goat den cabbage gefressen.

	print("ANFANG");
	
    -- The set S presents a problem if either the goat and the cabbage or the
    -- wolf and the goat are contained in S.
    procedure problem(S);
	
	--print("problem procedure");
		if((3 in S) and (4 in S)) or (2 in S and 3 in S) then
        	return 1;
        else
			return 0;
		end if;
    end problem;

    procedure cyclic(p);
	
	--print("cyclic procedure");
		if #({x: x in p }) < #(p) then
			return 1;
        else
			return 0;
		end if;
    end cyclic;

    -- The product call add(p,q) computes the sum of the lists p and q.
    -- The last point of p has to be the first point of q.
    procedure add(p, q);
	
	--print("add procedure");
        result := p;
		 for x in [2 .. #(q)] loop
		     result := result + [ q[x-1] ];
	      end loop;
	      return result;
    end add;

    -- The procedure call product(P, Q) computes the path product P * Q.
    procedure path_product(P, Q);
	
	--print("path_product procedure");
	
        return { add(p,q) : p in P, q in Q | p[#(p) -1]==q[0] and not cyclic(add(p,q))==1};
    end path_product; 

    -- Check wether there is a path from x to y in R and compute it.
    procedure reachable(x, y, R);
	--print("reachable procedure");
        P := { [x] };
		print(P);
        while 1 == 1 loop
			Old_P := P;
            P     := P + path_product(P, R);
             print(P);
            Found := {p: p in P | p[#(p)-1] == y };
			print("FOUND");
			print(Found);
            if Found != {} then
                return arb (Found);
            end if;
            if P == Old_P then
			    print("else stmnt");
				print(P);
                return;
            end if;
        end loop;
    end reachable;
    
	R:= {[{1},{2}],[{2},{3}]};
	start:={1};
	goal:={3};
	
	path:=reachable(start, goal, R);
    --print("path:=reachable(start, goal, R)");
		
	print(path);
	print("FERTIG");


