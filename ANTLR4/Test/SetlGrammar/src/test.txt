print({ [2], {3} });

-- Es war einmal ein Bauer, der wollte mit einem wolf, einer goat und
-- einer Kiste cabbage über einen Fluss übersetzen.  In dem Boot war aber
-- nicht genug Platz für alles, der Bauer konnte maximal ein Tiere oder 
-- das Gemüse mitnehmen.  Er konnte aber auch wolf und goat nicht 
-- alleine lassen, denn dann hätte der wolf die goat gefressen.
-- Ebensowenig konnte er die goat mit dem cabbage alleine lassen, denn
-- dann hätte die goat den cabbage gefressen.

    print("ANFANG");
    
    -- The set S presents a problem if either the goat and the cabbage or the
    -- wolf and the goat are contained in S.
    procedure problem(S);
    
    --print("problem procedure");
        if((3 in S) and (4 in S)) or (2 in S and 3 in S) then
            return 1;
        else
            return 0;
        end if;
    end problem;

    procedure cyclic(p);
    
    --print("cyclic procedure");
        if #({x: x in p }) < #(p) then
            return 1;
        else
            return 0;
        end if;
    end cyclic;

    -- The product call add(p,q) computes the sum of the lists p and q.
    -- The last point of p has to be the first point of q.
    procedure add(p, q);
    
    --print("add procedure");
        result := p;
         for x in [2 .. #(q)] loop
             result := result + [ q[x-1] ];
          end loop;
          return result;
    end add;

    -- The procedure call product(P, Q) computes the path product P * Q.
    procedure path_product(A, B);
	    print("vorher");
	    print(A);
    --print("path_product procedure");
    
        R := { add(p,q) : p in A, q in B | p[#(p) -1]==q[0] and not cyclic(add(p,q))==1};
	    print("nachher");
		print(A);
		return R;
    end path_product; 

    -- Check wether there is a path from x to y in R and compute it.
    procedure reachable(x, y, R);
        print("reachable procedure");
        P := { [x] };
        print(P);
        while 1 == 1 loop
            Old_P := P;
			print("1");
			print(Old_P);
			PR := path_product(P, R);
            print(P);
            print(PR);
            P     := P + PR;
            print("2");
            print(P);
            Found := {p: p in P | p[#(p)-1] == y };
            if Found != {} then
                return arb (Found);
            end if;
            if P == Old_P then
                print(P);
                return;
            end if;
        end loop;
    end reachable;

    -- Gebe diesen Pfad Schritt für Schritt aus.
    procedure printPath(path, All);
    
    print("printPath procedure");
--    print("All");
    --print(All);
    --print("path");
    --print(path);
        for i in [1 .. #path] loop    
        
    print("test");
           print("made it");
           S1 := path[i-1];
            S2 := All - path[i-1];
            print(S1, "                                       ", S2);

            if i == #(path) then
                print("1 = farmer, ", "2 = wolf, ", "3 = goat, ", "4 = cabbage");
                exit; 
            end if;
            if 1 in S1 then
                B := S1 - path[i];
                print("                >>>> ", B, " >>>> " );
            else
                B := S2 - (All - path[i]);
                print("                <<<< ", B, " <<<< " );
            end if;
        end loop;
        
    print("procedure end");
    end printPath;
   

    All := { 1, 2, 3, 4 };
    print("All := { 1, 2, 3, 4 }");
    
    P   := pow (All);
    print("P = pow All");
    --print(P);
    
--    R1  := { [ S, S - B ] : S in P, B in pow (S) };
    R1  := { [ S, S - B ] : S in P, B in pow (S) | 1 in B and #(B) <= 2 and not (problem(S - B)==1) };
    
    print("R1");
    print(R1);
             
--    R2  := { [ S, S + B ] : S in P, B in pow (All - S) | 1 in B and #(B) <= 2 and not (problem(All - (S + B))==1) };
    R2  := { [ S, S + B ] : S in P, B in pow (All - S) };
    
    
    R   := R1 + R2;
    print("R");
    print(R);
    
    start := All;
    --print("start := All");
    
    goal  := {};
    --print("goal="+goal);
            
    path:=reachable(start, goal, R);
    print("path");
    print(path);
        
    printPath(path, All);
    print("FERTIG");


