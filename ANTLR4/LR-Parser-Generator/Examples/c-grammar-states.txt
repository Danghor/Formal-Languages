Tokens:    [$, '!', '!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '...', '/', '/=', ':', ';', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', 'auto', 'break', 'case', 'char', 'const', 'continue', 'default', 'do', 'double', 'else', 'enum', 'extern', 'float', 'for', 'goto', 'if', 'int', 'long', 'register', 'return', 'short', 'signed', 'sizeof', 'static', 'struct', 'switch', 'typedef', 'union', 'unsigned', 'void', 'volatile', 'while', '{', '|', '|=', '||', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL, TYPE_NAME]

Variables: [S, abstract_declarator, additive_expression, and_expression, argument_expression_list, assignment_expression, assignment_operator, cast_expression, compound_statement, conditional_expression, constant_expression, declaration, declaration_list, declaration_specifiers, declarator, direct_abstract_declarator, direct_declarator, enum_specifier, enumerator, enumerator_list, equality_expression, exclusive_or_expression, expression, expression_statement, external_declaration, function_definition, identifier_list, inclusive_or_expression, init_declarator, init_declarator_list, initializer, initializer_list, iteration_statement, jump_statement, labeled_statement, logical_and_expression, logical_or_expression, multiplicative_expression, parameter_declaration, parameter_list, parameter_type_list, pointer, postfix_expression, primary_expression, relational_expression, selection_statement, shift_expression, specifier_qualifier_list, statement, statement_list, storage_class_specifier, struct_declaration, struct_declaration_list, struct_declarator, struct_declarator_list, struct_or_union, struct_or_union_specifier, translation_unit, type_name, type_qualifier, type_qualifier_list, type_specifier, unary_expression, unary_operator]

Grammar: 
S -> primary_expression
abstract_declarator -> direct_abstract_declarator
abstract_declarator -> pointer
abstract_declarator -> pointer direct_abstract_declarator
additive_expression -> additive_expression '+' multiplicative_expression
additive_expression -> additive_expression '-' multiplicative_expression
additive_expression -> multiplicative_expression
and_expression -> and_expression '&' equality_expression
and_expression -> equality_expression
argument_expression_list -> argument_expression_list ',' assignment_expression
argument_expression_list -> assignment_expression
assignment_expression -> conditional_expression
assignment_expression -> unary_expression assignment_operator assignment_expression
assignment_operator -> '%='
assignment_operator -> '&='
assignment_operator -> '*='
assignment_operator -> '+='
assignment_operator -> '-='
assignment_operator -> '/='
assignment_operator -> '<<='
assignment_operator -> '='
assignment_operator -> '>>='
assignment_operator -> '^='
assignment_operator -> '|='
cast_expression -> '(' type_name ')' cast_expression
cast_expression -> unary_expression
compound_statement -> '{' '}'
compound_statement -> '{' declaration_list '}'
compound_statement -> '{' declaration_list statement_list '}'
compound_statement -> '{' statement_list '}'
conditional_expression -> logical_or_expression
conditional_expression -> logical_or_expression '?' expression ':' conditional_expression
constant_expression -> conditional_expression
declaration -> declaration_specifiers ';'
declaration -> declaration_specifiers init_declarator_list ';'
declaration_list -> declaration
declaration_list -> declaration_list declaration
declaration_specifiers -> storage_class_specifier
declaration_specifiers -> storage_class_specifier declaration_specifiers
declaration_specifiers -> type_qualifier
declaration_specifiers -> type_qualifier declaration_specifiers
declaration_specifiers -> type_specifier
declaration_specifiers -> type_specifier declaration_specifiers
declarator -> direct_declarator
declarator -> pointer direct_declarator
direct_abstract_declarator -> '(' ')'
direct_abstract_declarator -> '(' abstract_declarator ')'
direct_abstract_declarator -> '(' parameter_type_list ')'
direct_abstract_declarator -> '[' ']'
direct_abstract_declarator -> '[' constant_expression ']'
direct_abstract_declarator -> direct_abstract_declarator '(' ')'
direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'
direct_abstract_declarator -> direct_abstract_declarator '[' ']'
direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']'
direct_declarator -> '(' declarator ')'
direct_declarator -> IDENTIFIER
direct_declarator -> direct_declarator '(' ')'
direct_declarator -> direct_declarator '(' identifier_list ')'
direct_declarator -> direct_declarator '(' parameter_type_list ')'
direct_declarator -> direct_declarator '[' ']'
direct_declarator -> direct_declarator '[' constant_expression ']'
enum_specifier -> 'enum' '{' enumerator_list '}'
enum_specifier -> 'enum' IDENTIFIER
enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'
enumerator -> IDENTIFIER
enumerator -> IDENTIFIER '=' constant_expression
enumerator_list -> enumerator
enumerator_list -> enumerator_list ',' enumerator
equality_expression -> equality_expression '!=' relational_expression
equality_expression -> equality_expression '==' relational_expression
equality_expression -> relational_expression
exclusive_or_expression -> and_expression
exclusive_or_expression -> exclusive_or_expression '^' and_expression
expression -> assignment_expression
expression -> expression ',' assignment_expression
expression_statement -> ';'
expression_statement -> expression ';'
external_declaration -> declaration
external_declaration -> function_definition
function_definition -> declaration_specifiers declarator compound_statement
function_definition -> declaration_specifiers declarator declaration_list compound_statement
function_definition -> declarator compound_statement
function_definition -> declarator declaration_list compound_statement
identifier_list -> IDENTIFIER
identifier_list -> identifier_list ',' IDENTIFIER
inclusive_or_expression -> exclusive_or_expression
inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression
init_declarator -> declarator
init_declarator -> declarator '=' initializer
init_declarator_list -> init_declarator
init_declarator_list -> init_declarator_list ',' init_declarator
initializer -> '{' initializer_list ',' '}'
initializer -> '{' initializer_list '}'
initializer -> assignment_expression
initializer_list -> initializer
initializer_list -> initializer_list ',' initializer
iteration_statement -> 'do' statement 'while' '(' expression ')' ';'
iteration_statement -> 'for' '(' expression_statement expression_statement ')' statement
iteration_statement -> 'for' '(' expression_statement expression_statement expression ')' statement
iteration_statement -> 'while' '(' expression ')' statement
jump_statement -> 'break' ';'
jump_statement -> 'continue' ';'
jump_statement -> 'goto' IDENTIFIER ';'
jump_statement -> 'return' ';'
jump_statement -> 'return' expression ';'
labeled_statement -> 'case' constant_expression ':' statement
labeled_statement -> 'default' ':' statement
labeled_statement -> IDENTIFIER ':' statement
logical_and_expression -> inclusive_or_expression
logical_and_expression -> logical_and_expression '&&' inclusive_or_expression
logical_or_expression -> logical_and_expression
logical_or_expression -> logical_or_expression '||' logical_and_expression
multiplicative_expression -> cast_expression
multiplicative_expression -> multiplicative_expression '%' cast_expression
multiplicative_expression -> multiplicative_expression '*' cast_expression
multiplicative_expression -> multiplicative_expression '/' cast_expression
parameter_declaration -> declaration_specifiers
parameter_declaration -> declaration_specifiers abstract_declarator
parameter_declaration -> declaration_specifiers declarator
parameter_list -> parameter_declaration
parameter_list -> parameter_list ',' parameter_declaration
parameter_type_list -> parameter_list
parameter_type_list -> parameter_list ',' '...'
pointer -> '*'
pointer -> '*' pointer
pointer -> '*' type_qualifier_list
pointer -> '*' type_qualifier_list pointer
postfix_expression -> postfix_expression '(' ')'
postfix_expression -> postfix_expression '(' argument_expression_list ')'
postfix_expression -> postfix_expression '++'
postfix_expression -> postfix_expression '--'
postfix_expression -> postfix_expression '->' IDENTIFIER
postfix_expression -> postfix_expression '.' IDENTIFIER
postfix_expression -> postfix_expression '[' expression ']'
postfix_expression -> primary_expression
primary_expression -> '(' expression ')'
primary_expression -> CONSTANT
primary_expression -> IDENTIFIER
primary_expression -> STRING_LITERAL
relational_expression -> relational_expression '<' shift_expression
relational_expression -> relational_expression '<=' shift_expression
relational_expression -> relational_expression '>' shift_expression
relational_expression -> relational_expression '>=' shift_expression
relational_expression -> shift_expression
selection_statement -> 'if' '(' expression ')' statement
selection_statement -> 'if' '(' expression ')' statement 'else' statement
selection_statement -> 'switch' '(' expression ')' statement
shift_expression -> additive_expression
shift_expression -> shift_expression '<<' additive_expression
shift_expression -> shift_expression '>>' additive_expression
specifier_qualifier_list -> type_qualifier
specifier_qualifier_list -> type_qualifier specifier_qualifier_list
specifier_qualifier_list -> type_specifier
specifier_qualifier_list -> type_specifier specifier_qualifier_list
statement -> compound_statement
statement -> expression_statement
statement -> iteration_statement
statement -> jump_statement
statement -> labeled_statement
statement -> selection_statement
statement_list -> statement
statement_list -> statement_list statement
storage_class_specifier -> 'auto'
storage_class_specifier -> 'extern'
storage_class_specifier -> 'register'
storage_class_specifier -> 'static'
storage_class_specifier -> 'typedef'
struct_declaration -> specifier_qualifier_list struct_declarator_list ';'
struct_declaration_list -> struct_declaration
struct_declaration_list -> struct_declaration_list struct_declaration
struct_declarator -> ':' constant_expression
struct_declarator -> declarator
struct_declarator -> declarator ':' constant_expression
struct_declarator_list -> struct_declarator
struct_declarator_list -> struct_declarator_list ',' struct_declarator
struct_or_union -> 'struct'
struct_or_union -> 'union'
struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'
struct_or_union_specifier -> struct_or_union IDENTIFIER
struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'
translation_unit -> external_declaration
translation_unit -> translation_unit external_declaration
type_name -> specifier_qualifier_list
type_name -> specifier_qualifier_list abstract_declarator
type_qualifier -> 'const'
type_qualifier -> 'volatile'
type_qualifier_list -> type_qualifier
type_qualifier_list -> type_qualifier_list type_qualifier
type_specifier -> 'char'
type_specifier -> 'double'
type_specifier -> 'float'
type_specifier -> 'int'
type_specifier -> 'long'
type_specifier -> 'short'
type_specifier -> 'signed'
type_specifier -> 'unsigned'
type_specifier -> 'void'
type_specifier -> TYPE_NAME
type_specifier -> enum_specifier
type_specifier -> struct_or_union_specifier
unary_expression -> '++' unary_expression
unary_expression -> '--' unary_expression
unary_expression -> 'sizeof' '(' type_name ')'
unary_expression -> 'sizeof' unary_expression
unary_expression -> postfix_expression
unary_expression -> unary_operator cast_expression
unary_operator -> '!'
unary_operator -> '&'
unary_operator -> '*'
unary_operator -> '+'
unary_operator -> '-'
unary_operator -> '~'


Follow(  S) = []
Follow(  abstract_declarator) = [')', ',']
Follow(  additive_expression) = ['!=', '&&', '&', ')', '+', ',', '-', ':', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||', '}']
Follow(  and_expression) = ['&&', '&', ')', ',', ':', ';', '?', ']', '^', '|', '||', '}']
Follow(  argument_expression_list) = [')', ',']
Follow(  assignment_expression) = [')', ',', ':', ';', ']', '}']
Follow(  assignment_operator) = ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  cast_expression) = ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', ';', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||', '}']
Follow(  compound_statement) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'auto', 'break', 'case', 'char', 'const', 'continue', 'default', 'do', 'double', 'else', 'enum', 'extern', 'float', 'for', 'goto', 'if', 'int', 'long', 'register', 'return', 'short', 'signed', 'sizeof', 'static', 'struct', 'switch', 'typedef', 'union', 'unsigned', 'void', 'volatile', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL, TYPE_NAME]
Follow(  conditional_expression) = [')', ',', ':', ';', ']', '}']
Follow(  constant_expression) = [',', ':', ';', ']', '}']
Follow(  declaration) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'auto', 'break', 'case', 'char', 'const', 'continue', 'default', 'do', 'double', 'enum', 'extern', 'float', 'for', 'goto', 'if', 'int', 'long', 'register', 'return', 'short', 'signed', 'sizeof', 'static', 'struct', 'switch', 'typedef', 'union', 'unsigned', 'void', 'volatile', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL, TYPE_NAME]
Follow(  declaration_list) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'auto', 'break', 'case', 'char', 'const', 'continue', 'default', 'do', 'double', 'enum', 'extern', 'float', 'for', 'goto', 'if', 'int', 'long', 'register', 'return', 'short', 'signed', 'sizeof', 'static', 'struct', 'switch', 'typedef', 'union', 'unsigned', 'void', 'volatile', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL, TYPE_NAME]
Follow(  declaration_specifiers) = ['(', ')', '*', ',', ';', '[', IDENTIFIER]
Follow(  declarator) = [')', ',', ':', ';', '=', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', '{', TYPE_NAME]
Follow(  direct_abstract_declarator) = ['(', ')', ',', '[']
Follow(  direct_declarator) = ['(', ')', ',', ':', ';', '=', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', '{', TYPE_NAME]
Follow(  enum_specifier) = ['(', ')', '*', ',', ':', ';', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  enumerator) = [',', '}']
Follow(  enumerator_list) = [',', '}']
Follow(  equality_expression) = ['!=', '&&', '&', ')', ',', ':', ';', '==', '?', ']', '^', '|', '||', '}']
Follow(  exclusive_or_expression) = ['&&', ')', ',', ':', ';', '?', ']', '^', '|', '||', '}']
Follow(  expression) = [')', ',', ':', ';', ']']
Follow(  expression_statement) = ['!', '&', '(', ')', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'else', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  external_declaration) = ['(', '*', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  function_definition) = ['(', '*', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  identifier_list) = [')', ',']
Follow(  inclusive_or_expression) = ['&&', ')', ',', ':', ';', '?', ']', '|', '||', '}']
Follow(  init_declarator) = [',', ';']
Follow(  init_declarator_list) = [',', ';']
Follow(  initializer) = [',', ';', '}']
Follow(  initializer_list) = [',', '}']
Follow(  iteration_statement) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'else', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  jump_statement) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'else', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  labeled_statement) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'else', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  logical_and_expression) = ['&&', ')', ',', ':', ';', '?', ']', '||', '}']
Follow(  logical_or_expression) = [')', ',', ':', ';', '?', ']', '||', '}']
Follow(  multiplicative_expression) = ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', ':', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||', '}']
Follow(  parameter_declaration) = [')', ',']
Follow(  parameter_list) = [')', ',']
Follow(  parameter_type_list) = [')']
Follow(  pointer) = ['(', ')', ',', '[', IDENTIFIER]
Follow(  postfix_expression) = ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', ';', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||', '}']
Follow(  primary_expression) = ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', ';', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||', '}']
Follow(  relational_expression) = ['!=', '&&', '&', ')', ',', ':', ';', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||', '}']
Follow(  selection_statement) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'else', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  shift_expression) = ['!=', '&&', '&', ')', ',', ':', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||', '}']
Follow(  specifier_qualifier_list) = ['(', ')', '*', ':', '[', IDENTIFIER]
Follow(  statement) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'else', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  statement_list) = ['!', '&', '(', '*', '+', '++', '-', '--', ';', 'break', 'case', 'continue', 'default', 'do', 'for', 'goto', 'if', 'return', 'sizeof', 'switch', 'while', '{', '}', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
Follow(  storage_class_specifier) = ['(', ')', '*', ',', ';', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  struct_declaration) = ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME]
Follow(  struct_declaration_list) = ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME]
Follow(  struct_declarator) = [',', ';']
Follow(  struct_declarator_list) = [',', ';']
Follow(  struct_or_union) = ['{', IDENTIFIER]
Follow(  struct_or_union_specifier) = ['(', ')', '*', ',', ':', ';', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  translation_unit) = ['(', '*', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  type_name) = [')']
Follow(  type_qualifier) = ['(', ')', '*', ',', ':', ';', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  type_qualifier_list) = ['(', ')', '*', ',', '[', 'const', 'volatile', IDENTIFIER]
Follow(  type_specifier) = ['(', ')', '*', ',', ':', ';', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
Follow(  unary_expression) = ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', ';', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||', '}']
Follow(  unary_operator) = ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]


s0 = { S -> <*> primary_expression: [$],
       primary_expression -> <*> '(' expression ')': [$],
       primary_expression -> <*> CONSTANT: [$],
       primary_expression -> <*> IDENTIFIER: [$],
       primary_expression -> <*> STRING_LITERAL: [$]
     }

s1 = { S -> primary_expression <*>: [$] }

s2 = { abstract_declarator -> <*> direct_abstract_declarator: [')'],
       abstract_declarator -> <*> pointer: [')'],
       abstract_declarator -> <*> pointer direct_abstract_declarator: [')'],
       declaration_specifiers -> <*> storage_class_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> storage_class_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declarator -> <*> direct_declarator: [')'],
       declarator -> <*> pointer direct_declarator: [')'],
       direct_abstract_declarator -> <*> '(' ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> '(' abstract_declarator ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> '(' parameter_type_list ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> '[' ']': ['(', ')', '['],
       direct_abstract_declarator -> <*> '[' constant_expression ']': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']': ['(', ')', '['],
       direct_abstract_declarator -> '(' <*> ')': ['(', ')', ',', '['],
       direct_abstract_declarator -> '(' <*> abstract_declarator ')': ['(', ')', ',', '['],
       direct_abstract_declarator -> '(' <*> parameter_type_list ')': ['(', ')', ',', '['],
       direct_declarator -> <*> '(' declarator ')': ['(', ')', '['],
       direct_declarator -> <*> IDENTIFIER: ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '(' ')': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '(' identifier_list ')': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '[' ']': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '[' constant_expression ']': ['(', ')', '['],
       direct_declarator -> '(' <*> declarator ')': ['(', ')', ',', '['],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       parameter_declaration -> <*> declaration_specifiers: [')', ','],
       parameter_declaration -> <*> declaration_specifiers abstract_declarator: [')', ','],
       parameter_declaration -> <*> declaration_specifiers declarator: [')', ','],
       parameter_list -> <*> parameter_declaration: [')', ','],
       parameter_list -> <*> parameter_list ',' parameter_declaration: [')', ','],
       parameter_type_list -> <*> parameter_list: [')'],
       parameter_type_list -> <*> parameter_list ',' '...': [')'],
       pointer -> <*> '*': ['(', ')', '[', IDENTIFIER],
       pointer -> <*> '*' pointer: ['(', ')', '[', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list: ['(', ')', '[', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list pointer: ['(', ')', '[', IDENTIFIER],
       storage_class_specifier -> <*> 'auto': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'extern': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'register': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'static': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'typedef': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s3 = { abstract_declarator -> <*> direct_abstract_declarator: [')'],
       abstract_declarator -> <*> pointer: [')'],
       abstract_declarator -> <*> pointer direct_abstract_declarator: [')'],
       declaration_specifiers -> <*> storage_class_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> storage_class_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declarator -> <*> direct_declarator: [')'],
       declarator -> <*> pointer direct_declarator: [')'],
       direct_abstract_declarator -> <*> '(' ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> '(' abstract_declarator ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> '(' parameter_type_list ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> '[' ']': ['(', ')', '['],
       direct_abstract_declarator -> <*> '[' constant_expression ']': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']': ['(', ')', '['],
       direct_abstract_declarator -> '(' <*> ')': ['(', ')', '['],
       direct_abstract_declarator -> '(' <*> abstract_declarator ')': ['(', ')', '['],
       direct_abstract_declarator -> '(' <*> parameter_type_list ')': ['(', ')', '['],
       direct_declarator -> <*> '(' declarator ')': ['(', ')', '['],
       direct_declarator -> <*> IDENTIFIER: ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '(' ')': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '(' identifier_list ')': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '[' ']': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '[' constant_expression ']': ['(', ')', '['],
       direct_declarator -> '(' <*> declarator ')': ['(', ')', '['],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       parameter_declaration -> <*> declaration_specifiers: [')', ','],
       parameter_declaration -> <*> declaration_specifiers abstract_declarator: [')', ','],
       parameter_declaration -> <*> declaration_specifiers declarator: [')', ','],
       parameter_list -> <*> parameter_declaration: [')', ','],
       parameter_list -> <*> parameter_list ',' parameter_declaration: [')', ','],
       parameter_type_list -> <*> parameter_list: [')'],
       parameter_type_list -> <*> parameter_list ',' '...': [')'],
       pointer -> <*> '*': ['(', ')', '[', IDENTIFIER],
       pointer -> <*> '*' pointer: ['(', ')', '[', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list: ['(', ')', '[', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list pointer: ['(', ')', '[', IDENTIFIER],
       storage_class_specifier -> <*> 'auto': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'extern': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'register': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'static': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'typedef': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s4 = { abstract_declarator -> <*> direct_abstract_declarator: [')'],
       abstract_declarator -> <*> pointer: [')'],
       abstract_declarator -> <*> pointer direct_abstract_declarator: [')'],
       declaration_specifiers -> <*> storage_class_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> storage_class_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       direct_abstract_declarator -> <*> '(' ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> '(' abstract_declarator ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> '(' parameter_type_list ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> '[' ']': ['(', ')', '['],
       direct_abstract_declarator -> <*> '[' constant_expression ']': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']': ['(', ')', '['],
       direct_abstract_declarator -> '(' <*> ')': ['(', ')', '['],
       direct_abstract_declarator -> '(' <*> abstract_declarator ')': ['(', ')', '['],
       direct_abstract_declarator -> '(' <*> parameter_type_list ')': ['(', ')', '['],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       parameter_declaration -> <*> declaration_specifiers: [')', ','],
       parameter_declaration -> <*> declaration_specifiers abstract_declarator: [')', ','],
       parameter_declaration -> <*> declaration_specifiers declarator: [')', ','],
       parameter_list -> <*> parameter_declaration: [')', ','],
       parameter_list -> <*> parameter_list ',' parameter_declaration: [')', ','],
       parameter_type_list -> <*> parameter_list: [')'],
       parameter_type_list -> <*> parameter_list ',' '...': [')'],
       pointer -> <*> '*': ['(', ')', '['],
       pointer -> <*> '*' pointer: ['(', ')', '['],
       pointer -> <*> '*' type_qualifier_list: ['(', ')', '['],
       pointer -> <*> '*' type_qualifier_list pointer: ['(', ')', '['],
       storage_class_specifier -> <*> 'auto': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'extern': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'register': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'static': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'typedef': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s5 = { abstract_declarator -> <*> direct_abstract_declarator: [')'],
       abstract_declarator -> <*> pointer: [')'],
       abstract_declarator -> <*> pointer direct_abstract_declarator: [')'],
       direct_abstract_declarator -> <*> '(' ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> '(' abstract_declarator ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> '(' parameter_type_list ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> '[' ']': ['(', ')', '['],
       direct_abstract_declarator -> <*> '[' constant_expression ']': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']': ['(', ')', '['],
       pointer -> <*> '*': ['(', ')', '['],
       pointer -> <*> '*' pointer: ['(', ')', '['],
       pointer -> <*> '*' type_qualifier_list: ['(', ')', '['],
       pointer -> <*> '*' type_qualifier_list pointer: ['(', ')', '['],
       type_name -> specifier_qualifier_list <*>: [')'],
       type_name -> specifier_qualifier_list <*> abstract_declarator: [')']
     }

s6 = { abstract_declarator -> <*> direct_abstract_declarator: [')', ','],
       abstract_declarator -> <*> pointer: [')', ','],
       abstract_declarator -> <*> pointer direct_abstract_declarator: [')', ','],
       declarator -> <*> direct_declarator: [')', ','],
       declarator -> <*> pointer direct_declarator: [')', ','],
       direct_abstract_declarator -> <*> '(' ')': ['(', ')', ',', '['],
       direct_abstract_declarator -> <*> '(' abstract_declarator ')': ['(', ')', ',', '['],
       direct_abstract_declarator -> <*> '(' parameter_type_list ')': ['(', ')', ',', '['],
       direct_abstract_declarator -> <*> '[' ']': ['(', ')', ',', '['],
       direct_abstract_declarator -> <*> '[' constant_expression ']': ['(', ')', ',', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')': ['(', ')', ',', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')': ['(', ')', ',', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']': ['(', ')', ',', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']': ['(', ')', ',', '['],
       direct_declarator -> <*> '(' declarator ')': ['(', ')', ',', '['],
       direct_declarator -> <*> IDENTIFIER: ['(', ')', ',', '['],
       direct_declarator -> <*> direct_declarator '(' ')': ['(', ')', ',', '['],
       direct_declarator -> <*> direct_declarator '(' identifier_list ')': ['(', ')', ',', '['],
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')': ['(', ')', ',', '['],
       direct_declarator -> <*> direct_declarator '[' ']': ['(', ')', ',', '['],
       direct_declarator -> <*> direct_declarator '[' constant_expression ']': ['(', ')', ',', '['],
       parameter_declaration -> declaration_specifiers <*>: [')', ','],
       parameter_declaration -> declaration_specifiers <*> abstract_declarator: [')', ','],
       parameter_declaration -> declaration_specifiers <*> declarator: [')', ','],
       pointer -> <*> '*': ['(', ')', ',', '[', IDENTIFIER],
       pointer -> <*> '*' pointer: ['(', ')', ',', '[', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list: ['(', ')', ',', '[', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list pointer: ['(', ')', ',', '[', IDENTIFIER]
     }

s7 = { abstract_declarator -> direct_abstract_declarator <*>: [')'],
       direct_abstract_declarator -> direct_abstract_declarator <*> '(' ')': ['(', ')', '['],
       direct_abstract_declarator -> direct_abstract_declarator <*> '(' parameter_type_list ')': ['(', ')', '['],
       direct_abstract_declarator -> direct_abstract_declarator <*> '[' ']': ['(', ')', '['],
       direct_abstract_declarator -> direct_abstract_declarator <*> '[' constant_expression ']': ['(', ')', '[']
     }

s8 = { abstract_declarator -> direct_abstract_declarator <*>: [')', ','],
       direct_abstract_declarator -> direct_abstract_declarator <*> '(' ')': ['(', ')', ',', '['],
       direct_abstract_declarator -> direct_abstract_declarator <*> '(' parameter_type_list ')': ['(', ')', ',', '['],
       direct_abstract_declarator -> direct_abstract_declarator <*> '[' ']': ['(', ')', ',', '['],
       direct_abstract_declarator -> direct_abstract_declarator <*> '[' constant_expression ']': ['(', ')', ',', '[']
     }

s9 = { abstract_declarator -> pointer <*>: [')'],
       abstract_declarator -> pointer <*> direct_abstract_declarator: [')'],
       declarator -> pointer <*> direct_declarator: [')'],
       direct_abstract_declarator -> <*> '(' ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> '(' abstract_declarator ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> '(' parameter_type_list ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> '[' ']': ['(', ')', '['],
       direct_abstract_declarator -> <*> '[' constant_expression ']': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']': ['(', ')', '['],
       direct_declarator -> <*> '(' declarator ')': ['(', ')', '['],
       direct_declarator -> <*> IDENTIFIER: ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '(' ')': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '(' identifier_list ')': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '[' ']': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '[' constant_expression ']': ['(', ')', '[']
     }

s10 = { abstract_declarator -> pointer <*>: [')'],
       abstract_declarator -> pointer <*> direct_abstract_declarator: [')'],
       direct_abstract_declarator -> <*> '(' ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> '(' abstract_declarator ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> '(' parameter_type_list ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> '[' ']': ['(', ')', '['],
       direct_abstract_declarator -> <*> '[' constant_expression ']': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']': ['(', ')', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']': ['(', ')', '[']
     }

s11 = { abstract_declarator -> pointer <*>: [')', ','],
       abstract_declarator -> pointer <*> direct_abstract_declarator: [')', ','],
       declarator -> pointer <*> direct_declarator: [')', ','],
       direct_abstract_declarator -> <*> '(' ')': ['(', ')', ',', '['],
       direct_abstract_declarator -> <*> '(' abstract_declarator ')': ['(', ')', ',', '['],
       direct_abstract_declarator -> <*> '(' parameter_type_list ')': ['(', ')', ',', '['],
       direct_abstract_declarator -> <*> '[' ']': ['(', ')', ',', '['],
       direct_abstract_declarator -> <*> '[' constant_expression ']': ['(', ')', ',', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' ')': ['(', ')', ',', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '(' parameter_type_list ')': ['(', ')', ',', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' ']': ['(', ')', ',', '['],
       direct_abstract_declarator -> <*> direct_abstract_declarator '[' constant_expression ']': ['(', ')', ',', '['],
       direct_declarator -> <*> '(' declarator ')': ['(', ')', ',', '['],
       direct_declarator -> <*> IDENTIFIER: ['(', ')', ',', '['],
       direct_declarator -> <*> direct_declarator '(' ')': ['(', ')', ',', '['],
       direct_declarator -> <*> direct_declarator '(' identifier_list ')': ['(', ')', ',', '['],
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')': ['(', ')', ',', '['],
       direct_declarator -> <*> direct_declarator '[' ']': ['(', ')', ',', '['],
       direct_declarator -> <*> direct_declarator '[' constant_expression ']': ['(', ')', ',', '[']
     }

s12 = { abstract_declarator -> pointer direct_abstract_declarator <*>: [')'],
       direct_abstract_declarator -> direct_abstract_declarator <*> '(' ')': ['(', ')', '['],
       direct_abstract_declarator -> direct_abstract_declarator <*> '(' parameter_type_list ')': ['(', ')', '['],
       direct_abstract_declarator -> direct_abstract_declarator <*> '[' ']': ['(', ')', '['],
       direct_abstract_declarator -> direct_abstract_declarator <*> '[' constant_expression ']': ['(', ')', '[']
     }

s13 = { abstract_declarator -> pointer direct_abstract_declarator <*>: [')', ','],
       direct_abstract_declarator -> direct_abstract_declarator <*> '(' ')': ['(', ')', ',', '['],
       direct_abstract_declarator -> direct_abstract_declarator <*> '(' parameter_type_list ')': ['(', ')', ',', '['],
       direct_abstract_declarator -> direct_abstract_declarator <*> '[' ']': ['(', ')', ',', '['],
       direct_abstract_declarator -> direct_abstract_declarator <*> '[' constant_expression ']': ['(', ')', ',', '[']
     }

s14 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       argument_expression_list -> <*> argument_expression_list ',' assignment_expression: [')', ','],
       argument_expression_list -> <*> assignment_expression: [')', ','],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '(' <*> ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '(' <*> argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s15 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       argument_expression_list -> <*> argument_expression_list ',' assignment_expression: [')', ','],
       argument_expression_list -> <*> assignment_expression: [')', ','],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '(' <*> ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '(' <*> argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s16 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       argument_expression_list -> <*> argument_expression_list ',' assignment_expression: [')', ','],
       argument_expression_list -> <*> assignment_expression: [')', ','],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '(' <*> ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '(' <*> argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s17 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       argument_expression_list -> <*> argument_expression_list ',' assignment_expression: [')', ','],
       argument_expression_list -> <*> assignment_expression: [')', ','],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '(' <*> ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression '(' <*> argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s18 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       argument_expression_list -> <*> argument_expression_list ',' assignment_expression: [')', ','],
       argument_expression_list -> <*> assignment_expression: [')', ','],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '(' <*> ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression '(' <*> argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s19 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       argument_expression_list -> <*> argument_expression_list ',' assignment_expression: [')', ','],
       argument_expression_list -> <*> assignment_expression: [')', ','],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '(' <*> ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression '(' <*> argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s20 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       argument_expression_list -> <*> argument_expression_list ',' assignment_expression: [')', ','],
       argument_expression_list -> <*> assignment_expression: [')', ','],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '(' <*> ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> postfix_expression '(' <*> argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s21 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       argument_expression_list -> <*> argument_expression_list ',' assignment_expression: [')', ','],
       argument_expression_list -> <*> assignment_expression: [')', ','],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '(' <*> ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> postfix_expression '(' <*> argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s22 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       argument_expression_list -> <*> argument_expression_list ',' assignment_expression: [')', ','],
       argument_expression_list -> <*> assignment_expression: [')', ','],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '(' <*> ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> postfix_expression '(' <*> argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s23 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       argument_expression_list -> argument_expression_list ',' <*> assignment_expression: [')', ','],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s24 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       assignment_expression -> unary_expression assignment_operator <*> assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s25 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> '(' <*> type_name ')' cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s26 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> '(' <*> type_name ')' cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s27 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> '(' <*> type_name ')' cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s28 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> '(' <*> type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s29 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> '(' <*> type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s30 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> '(' <*> type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s31 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> '(' <*> type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s32 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> '(' <*> type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s33 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> '(' <*> type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s34 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> '(' <*> type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s35 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> '(' <*> type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s36 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> '(' <*> type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s37 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> 'sizeof' '(' <*> type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s38 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> 'sizeof' '(' <*> type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s39 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> 'sizeof' '(' <*> type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s40 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> 'sizeof' '(' <*> type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s41 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> 'sizeof' '(' <*> type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s42 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> 'sizeof' '(' <*> type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s43 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> 'sizeof' '(' <*> type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s44 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> 'sizeof' '(' <*> type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s45 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_name -> <*> specifier_qualifier_list: [')'],
       type_name -> <*> specifier_qualifier_list abstract_declarator: [')'],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> 'sizeof' '(' <*> type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s46 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': [$],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s47 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s48 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s49 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s50 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s51 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s52 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s53 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s54 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s55 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [')', ','],
       expression -> <*> expression ',' assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> '(' <*> expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s56 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [')', ','],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [')', ','],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       expression -> expression ',' <*> assignment_expression: [')', ','],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s57 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [')', ','],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [')', ','],
       conditional_expression -> logical_or_expression '?' expression ':' <*> conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [')', ',', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s58 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> logical_or_expression '||' <*> logical_and_expression: [')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s59 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> logical_and_expression '&&' <*> inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s60 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       inclusive_or_expression -> inclusive_or_expression '|' <*> exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s61 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> exclusive_or_expression '^' <*> and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s62 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> and_expression '&' <*> equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s63 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> equality_expression '!=' <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s64 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> equality_expression '==' <*> relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s65 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> relational_expression '<' <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s66 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> relational_expression '<=' <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s67 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> relational_expression '>' <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s68 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> relational_expression '>=' <*> shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s69 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       shift_expression -> shift_expression '<<' <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s70 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       shift_expression -> shift_expression '>>' <*> additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s71 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ':'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ':'],
       assignment_expression -> unary_expression assignment_operator <*> assignment_expression: [',', ':'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ':'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ':'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', ':', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', ':', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s72 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ':'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ':'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ':'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ':'],
       conditional_expression -> logical_or_expression '?' <*> expression ':' conditional_expression: [')', ','],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [',', ':'],
       expression -> <*> expression ',' assignment_expression: [',', ':'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', ':', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', ':', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s73 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ':'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ':'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ':'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ':'],
       conditional_expression -> logical_or_expression '?' <*> expression ':' conditional_expression: [',', ':'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [',', ':'],
       expression -> <*> expression ',' assignment_expression: [',', ':'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', ':', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', ':', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s74 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ':'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ':'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ':'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ':'],
       conditional_expression -> logical_or_expression '?' <*> expression ':' conditional_expression: [',', ';'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [',', ':'],
       expression -> <*> expression ',' assignment_expression: [',', ':'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', ':', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', ':', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s75 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ':'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ':'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ':'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ':'],
       conditional_expression -> logical_or_expression '?' <*> expression ':' conditional_expression: [',', ']'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [',', ':'],
       expression -> <*> expression ',' assignment_expression: [',', ':'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', ':', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', ':', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s76 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ':'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ':'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ':'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ':'],
       conditional_expression -> logical_or_expression '?' <*> expression ':' conditional_expression: [',', '}'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [',', ':'],
       expression -> <*> expression ',' assignment_expression: [',', ':'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', ':', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', ':', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s77 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ':'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ':'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ':'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ':'],
       conditional_expression -> logical_or_expression '?' <*> expression ':' conditional_expression: [']'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       expression -> <*> assignment_expression: [',', ':'],
       expression -> <*> expression ',' assignment_expression: [',', ':'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', ':', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', ':', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s78 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ':'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ':'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ':'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ':'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       expression -> expression ',' <*> assignment_expression: [',', ':'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', ':', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', ':', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s79 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ':'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ':'],
       conditional_expression -> logical_or_expression '?' expression ':' <*> conditional_expression: [',', ':'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', ':', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', ':', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s80 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_or_expression -> logical_or_expression '||' <*> logical_and_expression: [',', ':', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s81 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       logical_and_expression -> logical_and_expression '&&' <*> inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s82 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       inclusive_or_expression -> inclusive_or_expression '|' <*> exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s83 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> exclusive_or_expression '^' <*> and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s84 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> and_expression '&' <*> equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s85 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> equality_expression '!=' <*> relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s86 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> equality_expression '==' <*> relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s87 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> relational_expression '<' <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s88 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> relational_expression '<=' <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s89 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> relational_expression '>' <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s90 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> relational_expression '>=' <*> shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s91 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       shift_expression -> shift_expression '<<' <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s92 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       shift_expression -> shift_expression '>>' <*> additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s93 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ';'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ';'],
       conditional_expression -> logical_or_expression '?' expression ':' <*> conditional_expression: [',', ';'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', ';', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', ';', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', ';', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', ';', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', ';', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', ';', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', ';', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', ';', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s94 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ';'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ';'],
       constant_expression -> <*> conditional_expression: [',', ';'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', ';', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', ';', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', ';', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', ';', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', ';', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', ';', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', ';', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', ';', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       struct_declarator -> ':' <*> constant_expression: [',', ';'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s95 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ';'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ';'],
       constant_expression -> <*> conditional_expression: [',', ';'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', ';', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', ';', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', ';', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', ';', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', ';', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', ';', '?', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', ';', '?', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', ';', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       struct_declarator -> declarator ':' <*> constant_expression: [',', ';'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s96 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', ';', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', ';', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', ';', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', ';', '?', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', ';', '?', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', ';', '?', '||'],
       logical_or_expression -> logical_or_expression '||' <*> logical_and_expression: [',', ';', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s97 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', ';', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', ';', '?', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', ';', '?', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', ';', '?', '|', '||'],
       logical_and_expression -> logical_and_expression '&&' <*> inclusive_or_expression: ['&&', ',', ';', '?', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s98 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', ';', '?', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', ';', '?', '^', '|', '||'],
       inclusive_or_expression -> inclusive_or_expression '|' <*> exclusive_or_expression: ['&&', ',', ';', '?', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s99 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       exclusive_or_expression -> exclusive_or_expression '^' <*> and_expression: ['&&', ',', ';', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s100 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       and_expression -> and_expression '&' <*> equality_expression: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s101 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> equality_expression '!=' <*> relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s102 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       equality_expression -> equality_expression '==' <*> relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s103 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> relational_expression '<' <*> shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s104 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> relational_expression '<=' <*> shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s105 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> relational_expression '>' <*> shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s106 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       relational_expression -> relational_expression '>=' <*> shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s107 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       shift_expression -> shift_expression '<<' <*> additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s108 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       shift_expression -> shift_expression '>>' <*> additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s109 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ']'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ']'],
       assignment_expression -> unary_expression assignment_operator <*> assignment_expression: [',', ']'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ']'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', '?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', '?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s110 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ']'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ']'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ']'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       expression -> <*> assignment_expression: [',', ']'],
       expression -> <*> expression ',' assignment_expression: [',', ']'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', '?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', '?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '[' <*> expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s111 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ']'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ']'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ']'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       expression -> <*> assignment_expression: [',', ']'],
       expression -> <*> expression ',' assignment_expression: [',', ']'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', '?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', '?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '[' <*> expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s112 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ']'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ']'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ']'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       expression -> <*> assignment_expression: [',', ']'],
       expression -> <*> expression ',' assignment_expression: [',', ']'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', '?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', '?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '[' <*> expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s113 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ']'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ']'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ']'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       expression -> <*> assignment_expression: [',', ']'],
       expression -> <*> expression ',' assignment_expression: [',', ']'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', '?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', '?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '[' <*> expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s114 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ']'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ']'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ']'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       expression -> <*> assignment_expression: [',', ']'],
       expression -> <*> expression ',' assignment_expression: [',', ']'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', '?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', '?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '[' <*> expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s115 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ']'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ']'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ']'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       expression -> <*> assignment_expression: [',', ']'],
       expression -> <*> expression ',' assignment_expression: [',', ']'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', '?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', '?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '[' <*> expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s116 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ']'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ']'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ']'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       expression -> <*> assignment_expression: [',', ']'],
       expression -> <*> expression ',' assignment_expression: [',', ']'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', '?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', '?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '[' <*> expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s117 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ']'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ']'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ']'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       expression -> <*> assignment_expression: [',', ']'],
       expression -> <*> expression ',' assignment_expression: [',', ']'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', '?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', '?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '[' <*> expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s118 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ']'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ']'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ']'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       expression -> <*> assignment_expression: [',', ']'],
       expression -> <*> expression ',' assignment_expression: [',', ']'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', '?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', '?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression '[' <*> expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s119 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       assignment_expression -> <*> conditional_expression: [',', ']'],
       assignment_expression -> <*> unary_expression assignment_operator assignment_expression: [',', ']'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ']'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       expression -> expression ',' <*> assignment_expression: [',', ']'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', '?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', '?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s120 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [',', ']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', ']'],
       conditional_expression -> logical_or_expression '?' expression ':' <*> conditional_expression: [',', ']'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: [',', '?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', '?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s121 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_or_expression -> logical_or_expression '||' <*> logical_and_expression: [',', '?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s122 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       logical_and_expression -> logical_and_expression '&&' <*> inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s123 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> inclusive_or_expression '|' <*> exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s124 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> exclusive_or_expression '^' <*> and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s125 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> and_expression '&' <*> equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s126 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       equality_expression -> equality_expression '!=' <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s127 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       equality_expression -> equality_expression '==' <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s128 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> relational_expression '<' <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s129 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> relational_expression '<=' <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s130 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> relational_expression '>' <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s131 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> relational_expression '>=' <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s132 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       shift_expression -> shift_expression '<<' <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s133 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       shift_expression -> shift_expression '>>' <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s134 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', '^', '|', '||', '}'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', '^', '|', '||', '}'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       conditional_expression -> <*> logical_or_expression: [',', '}'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', '}'],
       conditional_expression -> logical_or_expression '?' expression ':' <*> conditional_expression: [',', '}'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', '^', '|', '||', '}'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', '^', '|', '||', '}'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', '?', '|', '||', '}'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', '?', '|', '||', '}'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', '?', '||', '}'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', '?', '||', '}'],
       logical_or_expression -> <*> logical_and_expression: [',', '?', '||', '}'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', '?', '||', '}'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s135 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', '^', '|', '||', '}'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', '^', '|', '||', '}'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       conditional_expression -> <*> logical_or_expression: [',', '}'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [',', '}'],
       constant_expression -> <*> conditional_expression: [',', '}'],
       enumerator -> IDENTIFIER '=' <*> constant_expression: [',', '}'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', '^', '|', '||', '}'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', '^', '|', '||', '}'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', '?', '|', '||', '}'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', '?', '|', '||', '}'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', '?', '||', '}'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', '?', '||', '}'],
       logical_or_expression -> <*> logical_and_expression: [',', '?', '||', '}'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: [',', '?', '||', '}'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s136 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', '^', '|', '||', '}'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', '^', '|', '||', '}'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', '^', '|', '||', '}'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', '^', '|', '||', '}'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', '?', '|', '||', '}'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', '?', '|', '||', '}'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', ',', '?', '||', '}'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', ',', '?', '||', '}'],
       logical_or_expression -> logical_or_expression '||' <*> logical_and_expression: [',', '?', '||', '}'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s137 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', '^', '|', '||', '}'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', '^', '|', '||', '}'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', '^', '|', '||', '}'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', '^', '|', '||', '}'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', ',', '?', '|', '||', '}'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', ',', '?', '|', '||', '}'],
       logical_and_expression -> logical_and_expression '&&' <*> inclusive_or_expression: ['&&', ',', '?', '||', '}'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s138 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', '^', '|', '||', '}'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', '^', '|', '||', '}'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       exclusive_or_expression -> <*> and_expression: ['&&', ',', '?', '^', '|', '||', '}'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', ',', '?', '^', '|', '||', '}'],
       inclusive_or_expression -> inclusive_or_expression '|' <*> exclusive_or_expression: ['&&', ',', '?', '|', '||', '}'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s139 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', ',', '?', '^', '|', '||', '}'],
       and_expression -> <*> equality_expression: ['&&', '&', ',', '?', '^', '|', '||', '}'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       exclusive_or_expression -> exclusive_or_expression '^' <*> and_expression: ['&&', ',', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s140 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       and_expression -> and_expression '&' <*> equality_expression: ['&&', '&', ',', '?', '^', '|', '||', '}'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s141 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       equality_expression -> equality_expression '!=' <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s142 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       equality_expression -> equality_expression '==' <*> relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s143 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       relational_expression -> relational_expression '<' <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s144 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       relational_expression -> relational_expression '<=' <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s145 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       relational_expression -> relational_expression '>' <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s146 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       relational_expression -> relational_expression '>=' <*> shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s147 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       shift_expression -> shift_expression '<<' <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s148 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       shift_expression -> shift_expression '>>' <*> additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s149 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [']'],
       conditional_expression -> logical_or_expression '?' expression ':' <*> conditional_expression: [']'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: ['?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: ['?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s150 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [']'],
       constant_expression -> <*> conditional_expression: [']'],
       direct_abstract_declarator -> '[' <*> ']': ['(', ')', ',', '['],
       direct_abstract_declarator -> '[' <*> constant_expression ']': ['(', ')', ',', '['],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: ['?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: ['?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s151 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [']'],
       constant_expression -> <*> conditional_expression: [']'],
       direct_abstract_declarator -> '[' <*> ']': ['(', ')', '['],
       direct_abstract_declarator -> '[' <*> constant_expression ']': ['(', ')', '['],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: ['?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: ['?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s152 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [']'],
       constant_expression -> <*> conditional_expression: [']'],
       direct_abstract_declarator -> direct_abstract_declarator '[' <*> ']': ['(', ')', ',', '['],
       direct_abstract_declarator -> direct_abstract_declarator '[' <*> constant_expression ']': ['(', ')', ',', '['],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: ['?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: ['?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s153 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [']'],
       constant_expression -> <*> conditional_expression: [']'],
       direct_abstract_declarator -> direct_abstract_declarator '[' <*> ']': ['(', ')', '['],
       direct_abstract_declarator -> direct_abstract_declarator '[' <*> constant_expression ']': ['(', ')', '['],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: ['?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: ['?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s154 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [']'],
       constant_expression -> <*> conditional_expression: [']'],
       direct_declarator -> direct_declarator '[' <*> ']': ['(', ')', ',', '['],
       direct_declarator -> direct_declarator '[' <*> constant_expression ']': ['(', ')', ',', '['],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: ['?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: ['?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s155 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [']'],
       constant_expression -> <*> conditional_expression: [']'],
       direct_declarator -> direct_declarator '[' <*> ']': ['(', ')', '['],
       direct_declarator -> direct_declarator '[' <*> constant_expression ']': ['(', ')', '['],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: ['?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: ['?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s156 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       conditional_expression -> <*> logical_or_expression: [']'],
       conditional_expression -> <*> logical_or_expression '?' expression ':' conditional_expression: [']'],
       constant_expression -> <*> conditional_expression: [']'],
       direct_declarator -> direct_declarator '[' <*> ']': ['(', ',', ':', ';', '['],
       direct_declarator -> direct_declarator '[' <*> constant_expression ']': ['(', ',', ':', ';', '['],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_or_expression -> <*> logical_and_expression: ['?', ']', '||'],
       logical_or_expression -> <*> logical_or_expression '||' logical_and_expression: ['?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s157 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       logical_and_expression -> <*> inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_and_expression -> <*> logical_and_expression '&&' inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_or_expression -> logical_or_expression '||' <*> logical_and_expression: ['?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s158 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> <*> exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       inclusive_or_expression -> <*> inclusive_or_expression '|' exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       logical_and_expression -> logical_and_expression '&&' <*> inclusive_or_expression: ['&&', '?', ']', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s159 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> and_expression: ['&&', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> <*> exclusive_or_expression '^' and_expression: ['&&', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> inclusive_or_expression '|' <*> exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s160 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> <*> and_expression '&' equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       and_expression -> <*> equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> exclusive_or_expression '^' <*> and_expression: ['&&', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s161 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       and_expression -> and_expression '&' <*> equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '!=' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> equality_expression '==' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> <*> relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s162 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       equality_expression -> equality_expression '!=' <*> relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s163 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       equality_expression -> equality_expression '==' <*> relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '<=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> relational_expression '>=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s164 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> relational_expression '<' <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s165 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> relational_expression '<=' <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s166 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> relational_expression '>' <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s167 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       relational_expression -> relational_expression '>=' <*> shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> <*> shift_expression '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s168 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       shift_expression -> shift_expression '<<' <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s169 = { additive_expression -> <*> additive_expression '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> additive_expression '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       shift_expression -> shift_expression '>>' <*> additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s170 = { additive_expression -> additive_expression <*> '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> additive_expression <*> '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> additive_expression <*>: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s171 = { additive_expression -> additive_expression <*> '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> additive_expression <*> '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression '<<' additive_expression <*>: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s172 = { additive_expression -> additive_expression <*> '+' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> additive_expression <*> '-' multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression '>>' additive_expression <*>: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s173 = { additive_expression -> additive_expression <*> '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> additive_expression <*> '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> additive_expression <*>: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s174 = { additive_expression -> additive_expression <*> '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> additive_expression <*> '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression '<<' additive_expression <*>: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s175 = { additive_expression -> additive_expression <*> '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> additive_expression <*> '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression '>>' additive_expression <*>: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s176 = { additive_expression -> additive_expression <*> '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> additive_expression <*> '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> additive_expression <*>: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s177 = { additive_expression -> additive_expression <*> '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> additive_expression <*> '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression '<<' additive_expression <*>: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s178 = { additive_expression -> additive_expression <*> '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       additive_expression -> additive_expression <*> '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression '>>' additive_expression <*>: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s179 = { additive_expression -> additive_expression <*> '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> additive_expression <*> '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> additive_expression <*>: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s180 = { additive_expression -> additive_expression <*> '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> additive_expression <*> '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression '<<' additive_expression <*>: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s181 = { additive_expression -> additive_expression <*> '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> additive_expression <*> '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression '>>' additive_expression <*>: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s182 = { additive_expression -> additive_expression <*> '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> additive_expression <*> '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> additive_expression <*>: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}']
     }

s183 = { additive_expression -> additive_expression <*> '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> additive_expression <*> '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> shift_expression '<<' additive_expression <*>: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}']
     }

s184 = { additive_expression -> additive_expression <*> '+' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       additive_expression -> additive_expression <*> '-' multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> shift_expression '>>' additive_expression <*>: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}']
     }

s185 = { additive_expression -> additive_expression <*> '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> additive_expression <*> '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> additive_expression <*>: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s186 = { additive_expression -> additive_expression <*> '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> additive_expression <*> '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression '<<' additive_expression <*>: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s187 = { additive_expression -> additive_expression <*> '+' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       additive_expression -> additive_expression <*> '-' multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression '>>' additive_expression <*>: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s188 = { additive_expression -> additive_expression '+' <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s189 = { additive_expression -> additive_expression '+' <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s190 = { additive_expression -> additive_expression '+' <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s191 = { additive_expression -> additive_expression '+' <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s192 = { additive_expression -> additive_expression '+' <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s193 = { additive_expression -> additive_expression '+' <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s194 = { additive_expression -> additive_expression '+' multiplicative_expression <*>: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s195 = { additive_expression -> additive_expression '+' multiplicative_expression <*>: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s196 = { additive_expression -> additive_expression '+' multiplicative_expression <*>: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s197 = { additive_expression -> additive_expression '+' multiplicative_expression <*>: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s198 = { additive_expression -> additive_expression '+' multiplicative_expression <*>: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> multiplicative_expression <*> '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> multiplicative_expression <*> '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> multiplicative_expression <*> '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}']
     }

s199 = { additive_expression -> additive_expression '+' multiplicative_expression <*>: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s200 = { additive_expression -> additive_expression '-' <*> multiplicative_expression: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s201 = { additive_expression -> additive_expression '-' <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s202 = { additive_expression -> additive_expression '-' <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s203 = { additive_expression -> additive_expression '-' <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s204 = { additive_expression -> additive_expression '-' <*> multiplicative_expression: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s205 = { additive_expression -> additive_expression '-' <*> multiplicative_expression: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> <*> multiplicative_expression '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s206 = { additive_expression -> additive_expression '-' multiplicative_expression <*>: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s207 = { additive_expression -> additive_expression '-' multiplicative_expression <*>: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s208 = { additive_expression -> additive_expression '-' multiplicative_expression <*>: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s209 = { additive_expression -> additive_expression '-' multiplicative_expression <*>: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s210 = { additive_expression -> additive_expression '-' multiplicative_expression <*>: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> multiplicative_expression <*> '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> multiplicative_expression <*> '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> multiplicative_expression <*> '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}']
     }

s211 = { additive_expression -> additive_expression '-' multiplicative_expression <*>: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s212 = { additive_expression -> multiplicative_expression <*>: ['!=', '&&', '&', ')', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '%' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '*' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '/' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s213 = { additive_expression -> multiplicative_expression <*>: ['!=', '&&', '&', '+', ',', '-', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s214 = { additive_expression -> multiplicative_expression <*>: ['!=', '&&', '&', '+', ',', '-', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s215 = { additive_expression -> multiplicative_expression <*>: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s216 = { additive_expression -> multiplicative_expression <*>: ['!=', '&&', '&', '+', ',', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> multiplicative_expression <*> '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> multiplicative_expression <*> '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> multiplicative_expression <*> '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}']
     }

s217 = { additive_expression -> multiplicative_expression <*>: ['!=', '&&', '&', '+', '-', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '%' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '*' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression <*> '/' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s218 = { and_expression -> and_expression <*> '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> and_expression <*>: ['&&', ')', ',', '?', '^', '|', '||']
     }

s219 = { and_expression -> and_expression <*> '&' equality_expression: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       exclusive_or_expression -> exclusive_or_expression '^' and_expression <*>: ['&&', ')', ',', '?', '^', '|', '||']
     }

s220 = { and_expression -> and_expression <*> '&' equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       exclusive_or_expression -> and_expression <*>: ['&&', ',', ':', '?', '^', '|', '||']
     }

s221 = { and_expression -> and_expression <*> '&' equality_expression: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       exclusive_or_expression -> exclusive_or_expression '^' and_expression <*>: ['&&', ',', ':', '?', '^', '|', '||']
     }

s222 = { and_expression -> and_expression <*> '&' equality_expression: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       exclusive_or_expression -> and_expression <*>: ['&&', ',', ';', '?', '^', '|', '||']
     }

s223 = { and_expression -> and_expression <*> '&' equality_expression: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       exclusive_or_expression -> exclusive_or_expression '^' and_expression <*>: ['&&', ',', ';', '?', '^', '|', '||']
     }

s224 = { and_expression -> and_expression <*> '&' equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> and_expression <*>: ['&&', ',', '?', ']', '^', '|', '||']
     }

s225 = { and_expression -> and_expression <*> '&' equality_expression: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> exclusive_or_expression '^' and_expression <*>: ['&&', ',', '?', ']', '^', '|', '||']
     }

s226 = { and_expression -> and_expression <*> '&' equality_expression: ['&&', '&', ',', '?', '^', '|', '||', '}'],
       exclusive_or_expression -> and_expression <*>: ['&&', ',', '?', '^', '|', '||', '}']
     }

s227 = { and_expression -> and_expression <*> '&' equality_expression: ['&&', '&', ',', '?', '^', '|', '||', '}'],
       exclusive_or_expression -> exclusive_or_expression '^' and_expression <*>: ['&&', ',', '?', '^', '|', '||', '}']
     }

s228 = { and_expression -> and_expression <*> '&' equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> and_expression <*>: ['&&', '?', ']', '^', '|', '||']
     }

s229 = { and_expression -> and_expression <*> '&' equality_expression: ['&&', '&', '?', ']', '^', '|', '||'],
       exclusive_or_expression -> exclusive_or_expression '^' and_expression <*>: ['&&', '?', ']', '^', '|', '||']
     }

s230 = { and_expression -> and_expression '&' equality_expression <*>: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       equality_expression -> equality_expression <*> '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> equality_expression <*> '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||']
     }

s231 = { and_expression -> and_expression '&' equality_expression <*>: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       equality_expression -> equality_expression <*> '!=' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> equality_expression <*> '==' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||']
     }

s232 = { and_expression -> and_expression '&' equality_expression <*>: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       equality_expression -> equality_expression <*> '!=' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       equality_expression -> equality_expression <*> '==' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||']
     }

s233 = { and_expression -> and_expression '&' equality_expression <*>: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       equality_expression -> equality_expression <*> '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> equality_expression <*> '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||']
     }

s234 = { and_expression -> and_expression '&' equality_expression <*>: ['&&', '&', ',', '?', '^', '|', '||', '}'],
       equality_expression -> equality_expression <*> '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       equality_expression -> equality_expression <*> '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}']
     }

s235 = { and_expression -> and_expression '&' equality_expression <*>: ['&&', '&', '?', ']', '^', '|', '||'],
       equality_expression -> equality_expression <*> '!=' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> equality_expression <*> '==' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||']
     }

s236 = { and_expression -> equality_expression <*>: ['&&', '&', ')', ',', '?', '^', '|', '||'],
       equality_expression -> equality_expression <*> '!=' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       equality_expression -> equality_expression <*> '==' relational_expression: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||']
     }

s237 = { and_expression -> equality_expression <*>: ['&&', '&', ',', ':', '?', '^', '|', '||'],
       equality_expression -> equality_expression <*> '!=' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       equality_expression -> equality_expression <*> '==' relational_expression: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||']
     }

s238 = { and_expression -> equality_expression <*>: ['&&', '&', ',', ';', '?', '^', '|', '||'],
       equality_expression -> equality_expression <*> '!=' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       equality_expression -> equality_expression <*> '==' relational_expression: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||']
     }

s239 = { and_expression -> equality_expression <*>: ['&&', '&', ',', '?', ']', '^', '|', '||'],
       equality_expression -> equality_expression <*> '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       equality_expression -> equality_expression <*> '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||']
     }

s240 = { and_expression -> equality_expression <*>: ['&&', '&', ',', '?', '^', '|', '||', '}'],
       equality_expression -> equality_expression <*> '!=' relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       equality_expression -> equality_expression <*> '==' relational_expression: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}']
     }

s241 = { and_expression -> equality_expression <*>: ['&&', '&', '?', ']', '^', '|', '||'],
       equality_expression -> equality_expression <*> '!=' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       equality_expression -> equality_expression <*> '==' relational_expression: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||']
     }

s242 = { argument_expression_list -> argument_expression_list <*> ',' assignment_expression: [')', ','],
       postfix_expression -> postfix_expression '(' argument_expression_list <*> ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||']
     }

s243 = { argument_expression_list -> argument_expression_list <*> ',' assignment_expression: [')', ','],
       postfix_expression -> postfix_expression '(' argument_expression_list <*> ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||']
     }

s244 = { argument_expression_list -> argument_expression_list <*> ',' assignment_expression: [')', ','],
       postfix_expression -> postfix_expression '(' argument_expression_list <*> ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||']
     }

s245 = { argument_expression_list -> argument_expression_list <*> ',' assignment_expression: [')', ','],
       postfix_expression -> postfix_expression '(' argument_expression_list <*> ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||']
     }

s246 = { argument_expression_list -> argument_expression_list <*> ',' assignment_expression: [')', ','],
       postfix_expression -> postfix_expression '(' argument_expression_list <*> ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||']
     }

s247 = { argument_expression_list -> argument_expression_list <*> ',' assignment_expression: [')', ','],
       postfix_expression -> postfix_expression '(' argument_expression_list <*> ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||']
     }

s248 = { argument_expression_list -> argument_expression_list <*> ',' assignment_expression: [')', ','],
       postfix_expression -> postfix_expression '(' argument_expression_list <*> ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||']
     }

s249 = { argument_expression_list -> argument_expression_list <*> ',' assignment_expression: [')', ','],
       postfix_expression -> postfix_expression '(' argument_expression_list <*> ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}']
     }

s250 = { argument_expression_list -> argument_expression_list <*> ',' assignment_expression: [')', ','],
       postfix_expression -> postfix_expression '(' argument_expression_list <*> ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||']
     }

s251 = { argument_expression_list -> argument_expression_list ',' assignment_expression <*>: [')', ','] }

s252 = { argument_expression_list -> assignment_expression <*>: [')', ','] }

s253 = { assignment_expression -> conditional_expression <*>: [')', ','] }

s254 = { assignment_expression -> conditional_expression <*>: [',', ':'] }

s255 = { assignment_expression -> conditional_expression <*>: [',', ']'] }

s256 = { assignment_expression -> unary_expression <*> assignment_operator assignment_expression: [')', ','],
       assignment_operator -> <*> '%=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '&=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '*=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '+=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '-=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '/=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '<<=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '>>=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '^=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '|=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       cast_expression -> unary_expression <*>: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s257 = { assignment_expression -> unary_expression <*> assignment_operator assignment_expression: [',', ':'],
       assignment_operator -> <*> '%=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '&=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '*=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '+=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '-=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '/=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '<<=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '>>=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '^=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '|=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       cast_expression -> unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s258 = { assignment_expression -> unary_expression <*> assignment_operator assignment_expression: [',', ']'],
       assignment_operator -> <*> '%=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '&=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '*=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '+=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '-=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '/=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '<<=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '>>=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '^=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       assignment_operator -> <*> '|=': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       cast_expression -> unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s259 = { assignment_expression -> unary_expression assignment_operator assignment_expression <*>: [')', ','] }

s260 = { assignment_expression -> unary_expression assignment_operator assignment_expression <*>: [',', ':'] }

s261 = { assignment_expression -> unary_expression assignment_operator assignment_expression <*>: [',', ']'] }

s262 = { assignment_operator -> '%=' <*>: ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL] }

s263 = { assignment_operator -> '&=' <*>: ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL] }

s264 = { assignment_operator -> '*=' <*>: ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL] }

s265 = { assignment_operator -> '+=' <*>: ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL] }

s266 = { assignment_operator -> '-=' <*>: ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL] }

s267 = { assignment_operator -> '/=' <*>: ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL] }

s268 = { assignment_operator -> '<<=' <*>: ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL] }

s269 = { assignment_operator -> '=' <*>: ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL] }

s270 = { assignment_operator -> '>>=' <*>: ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL] }

s271 = { assignment_operator -> '^=' <*>: ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL] }

s272 = { assignment_operator -> '|=' <*>: ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL] }

s273 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       cast_expression -> '(' type_name ')' <*> cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s274 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> unary_operator <*> cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s275 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       cast_expression -> '(' type_name ')' <*> cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s276 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> unary_operator <*> cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s277 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       cast_expression -> '(' type_name ')' <*> cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s278 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> unary_operator <*> cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s279 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> '(' type_name ')' <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s280 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression '%' <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s281 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression '*' <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s282 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression '/' <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s283 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> unary_operator <*> cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s284 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> '(' type_name ')' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s285 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression '%' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s286 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression '*' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s287 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression '/' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s288 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> unary_operator <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s289 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> '(' type_name ')' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s290 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression '%' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s291 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression '*' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s292 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression '/' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s293 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> unary_operator <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s294 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> '(' type_name ')' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s295 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression '%' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s296 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression '*' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s297 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression '/' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s298 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> unary_operator <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s299 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> '(' type_name ')' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s300 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> multiplicative_expression '%' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s301 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> multiplicative_expression '*' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s302 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       multiplicative_expression -> multiplicative_expression '/' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s303 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> unary_operator <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s304 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> '(' type_name ')' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s305 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression '%' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s306 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression '*' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s307 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       multiplicative_expression -> multiplicative_expression '/' <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s308 = { cast_expression -> <*> '(' type_name ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       cast_expression -> <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> unary_operator <*> cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s309 = { cast_expression -> '(' type_name <*> ')' cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'] }

s310 = { cast_expression -> '(' type_name <*> ')' cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'] }

s311 = { cast_expression -> '(' type_name <*> ')' cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'] }

s312 = { cast_expression -> '(' type_name <*> ')' cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s313 = { cast_expression -> '(' type_name <*> ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s314 = { cast_expression -> '(' type_name <*> ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s315 = { cast_expression -> '(' type_name <*> ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s316 = { cast_expression -> '(' type_name <*> ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'] }

s317 = { cast_expression -> '(' type_name <*> ')' cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s318 = { cast_expression -> '(' type_name ')' cast_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'] }

s319 = { cast_expression -> '(' type_name ')' cast_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'] }

s320 = { cast_expression -> '(' type_name ')' cast_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'] }

s321 = { cast_expression -> '(' type_name ')' cast_expression <*>: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s322 = { cast_expression -> '(' type_name ')' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s323 = { cast_expression -> '(' type_name ')' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s324 = { cast_expression -> '(' type_name ')' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s325 = { cast_expression -> '(' type_name ')' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'] }

s326 = { cast_expression -> '(' type_name ')' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s327 = { cast_expression -> unary_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'] }

s328 = { cast_expression -> unary_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'] }

s329 = { cast_expression -> unary_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'] }

s330 = { cast_expression -> unary_expression <*>: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s331 = { cast_expression -> unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s332 = { cast_expression -> unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s333 = { cast_expression -> unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s334 = { cast_expression -> unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'] }

s335 = { cast_expression -> unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s336 = { conditional_expression -> logical_or_expression <*>: [')', ','],
       conditional_expression -> logical_or_expression <*> '?' expression ':' conditional_expression: [')', ','],
       logical_or_expression -> logical_or_expression <*> '||' logical_and_expression: [')', ',', '?', '||']
     }

s337 = { conditional_expression -> logical_or_expression <*>: [',', ':'],
       conditional_expression -> logical_or_expression <*> '?' expression ':' conditional_expression: [',', ':'],
       logical_or_expression -> logical_or_expression <*> '||' logical_and_expression: [',', ':', '?', '||']
     }

s338 = { conditional_expression -> logical_or_expression <*>: [',', ';'],
       conditional_expression -> logical_or_expression <*> '?' expression ':' conditional_expression: [',', ';'],
       logical_or_expression -> logical_or_expression <*> '||' logical_and_expression: [',', ';', '?', '||']
     }

s339 = { conditional_expression -> logical_or_expression <*>: [',', ']'],
       conditional_expression -> logical_or_expression <*> '?' expression ':' conditional_expression: [',', ']'],
       logical_or_expression -> logical_or_expression <*> '||' logical_and_expression: [',', '?', ']', '||']
     }

s340 = { conditional_expression -> logical_or_expression <*>: [',', '}'],
       conditional_expression -> logical_or_expression <*> '?' expression ':' conditional_expression: [',', '}'],
       logical_or_expression -> logical_or_expression <*> '||' logical_and_expression: [',', '?', '||', '}']
     }

s341 = { conditional_expression -> logical_or_expression <*>: [']'],
       conditional_expression -> logical_or_expression <*> '?' expression ':' conditional_expression: [']'],
       logical_or_expression -> logical_or_expression <*> '||' logical_and_expression: ['?', ']', '||']
     }

s342 = { conditional_expression -> logical_or_expression '?' expression <*> ':' conditional_expression: [')', ','],
       expression -> expression <*> ',' assignment_expression: [',', ':']
     }

s343 = { conditional_expression -> logical_or_expression '?' expression <*> ':' conditional_expression: [',', ':'],
       expression -> expression <*> ',' assignment_expression: [',', ':']
     }

s344 = { conditional_expression -> logical_or_expression '?' expression <*> ':' conditional_expression: [',', ';'],
       expression -> expression <*> ',' assignment_expression: [',', ':']
     }

s345 = { conditional_expression -> logical_or_expression '?' expression <*> ':' conditional_expression: [',', ']'],
       expression -> expression <*> ',' assignment_expression: [',', ':']
     }

s346 = { conditional_expression -> logical_or_expression '?' expression <*> ':' conditional_expression: [',', '}'],
       expression -> expression <*> ',' assignment_expression: [',', ':']
     }

s347 = { conditional_expression -> logical_or_expression '?' expression <*> ':' conditional_expression: [']'],
       expression -> expression <*> ',' assignment_expression: [',', ':']
     }

s348 = { conditional_expression -> logical_or_expression '?' expression ':' conditional_expression <*>: [')', ','] }

s349 = { conditional_expression -> logical_or_expression '?' expression ':' conditional_expression <*>: [',', ':'] }

s350 = { conditional_expression -> logical_or_expression '?' expression ':' conditional_expression <*>: [',', ';'] }

s351 = { conditional_expression -> logical_or_expression '?' expression ':' conditional_expression <*>: [',', ']'] }

s352 = { conditional_expression -> logical_or_expression '?' expression ':' conditional_expression <*>: [',', '}'] }

s353 = { conditional_expression -> logical_or_expression '?' expression ':' conditional_expression <*>: [']'] }

s354 = { constant_expression -> conditional_expression <*>: [',', ';'] }

s355 = { constant_expression -> conditional_expression <*>: [',', '}'] }

s356 = { constant_expression -> conditional_expression <*>: [']'] }

s357 = { declaration_specifiers -> <*> storage_class_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> storage_class_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> storage_class_specifier <*>: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> storage_class_specifier <*> declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'auto': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'extern': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'register': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'static': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'typedef': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s358 = { declaration_specifiers -> <*> storage_class_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> storage_class_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> type_qualifier <*>: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> type_qualifier <*> declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'auto': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'extern': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'register': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'static': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'typedef': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s359 = { declaration_specifiers -> <*> storage_class_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> storage_class_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> type_specifier <*>: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> type_specifier <*> declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'auto': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'extern': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'register': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'static': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'typedef': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s360 = { declaration_specifiers -> <*> storage_class_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> storage_class_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       direct_abstract_declarator -> direct_abstract_declarator '(' <*> ')': ['(', ')', ',', '['],
       direct_abstract_declarator -> direct_abstract_declarator '(' <*> parameter_type_list ')': ['(', ')', ',', '['],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       parameter_declaration -> <*> declaration_specifiers: [')', ','],
       parameter_declaration -> <*> declaration_specifiers abstract_declarator: [')', ','],
       parameter_declaration -> <*> declaration_specifiers declarator: [')', ','],
       parameter_list -> <*> parameter_declaration: [')', ','],
       parameter_list -> <*> parameter_list ',' parameter_declaration: [')', ','],
       parameter_type_list -> <*> parameter_list: [')'],
       parameter_type_list -> <*> parameter_list ',' '...': [')'],
       storage_class_specifier -> <*> 'auto': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'extern': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'register': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'static': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'typedef': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s361 = { declaration_specifiers -> <*> storage_class_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> storage_class_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       direct_abstract_declarator -> direct_abstract_declarator '(' <*> ')': ['(', ')', '['],
       direct_abstract_declarator -> direct_abstract_declarator '(' <*> parameter_type_list ')': ['(', ')', '['],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       parameter_declaration -> <*> declaration_specifiers: [')', ','],
       parameter_declaration -> <*> declaration_specifiers abstract_declarator: [')', ','],
       parameter_declaration -> <*> declaration_specifiers declarator: [')', ','],
       parameter_list -> <*> parameter_declaration: [')', ','],
       parameter_list -> <*> parameter_list ',' parameter_declaration: [')', ','],
       parameter_type_list -> <*> parameter_list: [')'],
       parameter_type_list -> <*> parameter_list ',' '...': [')'],
       storage_class_specifier -> <*> 'auto': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'extern': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'register': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'static': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'typedef': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s362 = { declaration_specifiers -> <*> storage_class_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> storage_class_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       direct_declarator -> direct_declarator '(' <*> ')': ['(', ')', ',', '['],
       direct_declarator -> direct_declarator '(' <*> identifier_list ')': ['(', ')', ',', '['],
       direct_declarator -> direct_declarator '(' <*> parameter_type_list ')': ['(', ')', ',', '['],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       identifier_list -> <*> IDENTIFIER: [')', ','],
       identifier_list -> <*> identifier_list ',' IDENTIFIER: [')', ','],
       parameter_declaration -> <*> declaration_specifiers: [')', ','],
       parameter_declaration -> <*> declaration_specifiers abstract_declarator: [')', ','],
       parameter_declaration -> <*> declaration_specifiers declarator: [')', ','],
       parameter_list -> <*> parameter_declaration: [')', ','],
       parameter_list -> <*> parameter_list ',' parameter_declaration: [')', ','],
       parameter_type_list -> <*> parameter_list: [')'],
       parameter_type_list -> <*> parameter_list ',' '...': [')'],
       storage_class_specifier -> <*> 'auto': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'extern': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'register': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'static': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'typedef': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s363 = { declaration_specifiers -> <*> storage_class_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> storage_class_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       direct_declarator -> direct_declarator '(' <*> ')': ['(', ')', '['],
       direct_declarator -> direct_declarator '(' <*> identifier_list ')': ['(', ')', '['],
       direct_declarator -> direct_declarator '(' <*> parameter_type_list ')': ['(', ')', '['],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       identifier_list -> <*> IDENTIFIER: [')', ','],
       identifier_list -> <*> identifier_list ',' IDENTIFIER: [')', ','],
       parameter_declaration -> <*> declaration_specifiers: [')', ','],
       parameter_declaration -> <*> declaration_specifiers abstract_declarator: [')', ','],
       parameter_declaration -> <*> declaration_specifiers declarator: [')', ','],
       parameter_list -> <*> parameter_declaration: [')', ','],
       parameter_list -> <*> parameter_list ',' parameter_declaration: [')', ','],
       parameter_type_list -> <*> parameter_list: [')'],
       parameter_type_list -> <*> parameter_list ',' '...': [')'],
       storage_class_specifier -> <*> 'auto': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'extern': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'register': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'static': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'typedef': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s364 = { declaration_specifiers -> <*> storage_class_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> storage_class_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       direct_declarator -> direct_declarator '(' <*> ')': ['(', ',', ':', ';', '['],
       direct_declarator -> direct_declarator '(' <*> identifier_list ')': ['(', ',', ':', ';', '['],
       direct_declarator -> direct_declarator '(' <*> parameter_type_list ')': ['(', ',', ':', ';', '['],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       identifier_list -> <*> IDENTIFIER: [')', ','],
       identifier_list -> <*> identifier_list ',' IDENTIFIER: [')', ','],
       parameter_declaration -> <*> declaration_specifiers: [')', ','],
       parameter_declaration -> <*> declaration_specifiers abstract_declarator: [')', ','],
       parameter_declaration -> <*> declaration_specifiers declarator: [')', ','],
       parameter_list -> <*> parameter_declaration: [')', ','],
       parameter_list -> <*> parameter_list ',' parameter_declaration: [')', ','],
       parameter_type_list -> <*> parameter_list: [')'],
       parameter_type_list -> <*> parameter_list ',' '...': [')'],
       storage_class_specifier -> <*> 'auto': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'extern': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'register': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'static': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'typedef': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s365 = { declaration_specifiers -> <*> storage_class_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> storage_class_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_qualifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier: ['(', ')', '*', ',', '[', IDENTIFIER],
       declaration_specifiers -> <*> type_specifier declaration_specifiers: ['(', ')', '*', ',', '[', IDENTIFIER],
       enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       parameter_declaration -> <*> declaration_specifiers: [')', ','],
       parameter_declaration -> <*> declaration_specifiers abstract_declarator: [')', ','],
       parameter_declaration -> <*> declaration_specifiers declarator: [')', ','],
       parameter_list -> parameter_list ',' <*> parameter_declaration: [')', ','],
       parameter_type_list -> parameter_list ',' <*> '...': [')'],
       storage_class_specifier -> <*> 'auto': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'extern': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'register': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'static': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       storage_class_specifier -> <*> 'typedef': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s366 = { declaration_specifiers -> storage_class_specifier declaration_specifiers <*>: ['(', ')', '*', ',', '[', IDENTIFIER] }

s367 = { declaration_specifiers -> type_qualifier declaration_specifiers <*>: ['(', ')', '*', ',', '[', IDENTIFIER] }

s368 = { declaration_specifiers -> type_specifier declaration_specifiers <*>: ['(', ')', '*', ',', '[', IDENTIFIER] }

s369 = { declarator -> <*> direct_declarator: [')'],
       declarator -> <*> pointer direct_declarator: [')'],
       direct_declarator -> <*> '(' declarator ')': ['(', ')', '['],
       direct_declarator -> <*> IDENTIFIER: ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '(' ')': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '(' identifier_list ')': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '[' ']': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '[' constant_expression ']': ['(', ')', '['],
       direct_declarator -> '(' <*> declarator ')': ['(', ')', '['],
       pointer -> <*> '*': ['(', IDENTIFIER],
       pointer -> <*> '*' pointer: ['(', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list: ['(', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list pointer: ['(', IDENTIFIER]
     }

s370 = { declarator -> <*> direct_declarator: [')'],
       declarator -> <*> pointer direct_declarator: [')'],
       direct_declarator -> <*> '(' declarator ')': ['(', ')', '['],
       direct_declarator -> <*> IDENTIFIER: ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '(' ')': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '(' identifier_list ')': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '[' ']': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '[' constant_expression ']': ['(', ')', '['],
       direct_declarator -> '(' <*> declarator ')': ['(', ',', ':', ';', '['],
       pointer -> <*> '*': ['(', IDENTIFIER],
       pointer -> <*> '*' pointer: ['(', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list: ['(', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list pointer: ['(', IDENTIFIER]
     }

s371 = { declarator -> <*> direct_declarator: [',', ':', ';'],
       declarator -> <*> pointer direct_declarator: [',', ':', ';'],
       direct_declarator -> <*> '(' declarator ')': ['(', ',', ':', ';', '['],
       direct_declarator -> <*> IDENTIFIER: ['(', ',', ':', ';', '['],
       direct_declarator -> <*> direct_declarator '(' ')': ['(', ',', ':', ';', '['],
       direct_declarator -> <*> direct_declarator '(' identifier_list ')': ['(', ',', ':', ';', '['],
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')': ['(', ',', ':', ';', '['],
       direct_declarator -> <*> direct_declarator '[' ']': ['(', ',', ':', ';', '['],
       direct_declarator -> <*> direct_declarator '[' constant_expression ']': ['(', ',', ':', ';', '['],
       pointer -> <*> '*': ['(', IDENTIFIER],
       pointer -> <*> '*' pointer: ['(', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list: ['(', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list pointer: ['(', IDENTIFIER],
       struct_declaration -> specifier_qualifier_list <*> struct_declarator_list ';': ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declarator -> <*> ':' constant_expression: [',', ';'],
       struct_declarator -> <*> declarator: [',', ';'],
       struct_declarator -> <*> declarator ':' constant_expression: [',', ';'],
       struct_declarator_list -> <*> struct_declarator: [',', ';'],
       struct_declarator_list -> <*> struct_declarator_list ',' struct_declarator: [',', ';']
     }

s372 = { declarator -> <*> direct_declarator: [',', ':', ';'],
       declarator -> <*> pointer direct_declarator: [',', ':', ';'],
       direct_declarator -> <*> '(' declarator ')': ['(', ',', ':', ';', '['],
       direct_declarator -> <*> IDENTIFIER: ['(', ',', ':', ';', '['],
       direct_declarator -> <*> direct_declarator '(' ')': ['(', ',', ':', ';', '['],
       direct_declarator -> <*> direct_declarator '(' identifier_list ')': ['(', ',', ':', ';', '['],
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')': ['(', ',', ':', ';', '['],
       direct_declarator -> <*> direct_declarator '[' ']': ['(', ',', ':', ';', '['],
       direct_declarator -> <*> direct_declarator '[' constant_expression ']': ['(', ',', ':', ';', '['],
       pointer -> <*> '*': ['(', IDENTIFIER],
       pointer -> <*> '*' pointer: ['(', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list: ['(', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list pointer: ['(', IDENTIFIER],
       struct_declarator -> <*> ':' constant_expression: [',', ';'],
       struct_declarator -> <*> declarator: [',', ';'],
       struct_declarator -> <*> declarator ':' constant_expression: [',', ';'],
       struct_declarator_list -> struct_declarator_list ',' <*> struct_declarator: [',', ';']
     }

s373 = { declarator -> direct_declarator <*>: [')'],
       direct_declarator -> direct_declarator <*> '(' ')': ['(', ')', '['],
       direct_declarator -> direct_declarator <*> '(' identifier_list ')': ['(', ')', '['],
       direct_declarator -> direct_declarator <*> '(' parameter_type_list ')': ['(', ')', '['],
       direct_declarator -> direct_declarator <*> '[' ']': ['(', ')', '['],
       direct_declarator -> direct_declarator <*> '[' constant_expression ']': ['(', ')', '[']
     }

s374 = { declarator -> direct_declarator <*>: [')', ','],
       direct_declarator -> direct_declarator <*> '(' ')': ['(', ')', ',', '['],
       direct_declarator -> direct_declarator <*> '(' identifier_list ')': ['(', ')', ',', '['],
       direct_declarator -> direct_declarator <*> '(' parameter_type_list ')': ['(', ')', ',', '['],
       direct_declarator -> direct_declarator <*> '[' ']': ['(', ')', ',', '['],
       direct_declarator -> direct_declarator <*> '[' constant_expression ']': ['(', ')', ',', '[']
     }

s375 = { declarator -> direct_declarator <*>: [',', ':', ';'],
       direct_declarator -> direct_declarator <*> '(' ')': ['(', ',', ':', ';', '['],
       direct_declarator -> direct_declarator <*> '(' identifier_list ')': ['(', ',', ':', ';', '['],
       direct_declarator -> direct_declarator <*> '(' parameter_type_list ')': ['(', ',', ':', ';', '['],
       direct_declarator -> direct_declarator <*> '[' ']': ['(', ',', ':', ';', '['],
       direct_declarator -> direct_declarator <*> '[' constant_expression ']': ['(', ',', ':', ';', '[']
     }

s376 = { declarator -> pointer <*> direct_declarator: [')'],
       direct_declarator -> <*> '(' declarator ')': ['(', ')', '['],
       direct_declarator -> <*> IDENTIFIER: ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '(' ')': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '(' identifier_list ')': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '[' ']': ['(', ')', '['],
       direct_declarator -> <*> direct_declarator '[' constant_expression ']': ['(', ')', '[']
     }

s377 = { declarator -> pointer <*> direct_declarator: [',', ':', ';'],
       direct_declarator -> <*> '(' declarator ')': ['(', ',', ':', ';', '['],
       direct_declarator -> <*> IDENTIFIER: ['(', ',', ':', ';', '['],
       direct_declarator -> <*> direct_declarator '(' ')': ['(', ',', ':', ';', '['],
       direct_declarator -> <*> direct_declarator '(' identifier_list ')': ['(', ',', ':', ';', '['],
       direct_declarator -> <*> direct_declarator '(' parameter_type_list ')': ['(', ',', ':', ';', '['],
       direct_declarator -> <*> direct_declarator '[' ']': ['(', ',', ':', ';', '['],
       direct_declarator -> <*> direct_declarator '[' constant_expression ']': ['(', ',', ':', ';', '[']
     }

s378 = { declarator -> pointer direct_declarator <*>: [')'],
       direct_declarator -> direct_declarator <*> '(' ')': ['(', ')', '['],
       direct_declarator -> direct_declarator <*> '(' identifier_list ')': ['(', ')', '['],
       direct_declarator -> direct_declarator <*> '(' parameter_type_list ')': ['(', ')', '['],
       direct_declarator -> direct_declarator <*> '[' ']': ['(', ')', '['],
       direct_declarator -> direct_declarator <*> '[' constant_expression ']': ['(', ')', '[']
     }

s379 = { declarator -> pointer direct_declarator <*>: [')', ','],
       direct_declarator -> direct_declarator <*> '(' ')': ['(', ')', ',', '['],
       direct_declarator -> direct_declarator <*> '(' identifier_list ')': ['(', ')', ',', '['],
       direct_declarator -> direct_declarator <*> '(' parameter_type_list ')': ['(', ')', ',', '['],
       direct_declarator -> direct_declarator <*> '[' ']': ['(', ')', ',', '['],
       direct_declarator -> direct_declarator <*> '[' constant_expression ']': ['(', ')', ',', '[']
     }

s380 = { declarator -> pointer direct_declarator <*>: [',', ':', ';'],
       direct_declarator -> direct_declarator <*> '(' ')': ['(', ',', ':', ';', '['],
       direct_declarator -> direct_declarator <*> '(' identifier_list ')': ['(', ',', ':', ';', '['],
       direct_declarator -> direct_declarator <*> '(' parameter_type_list ')': ['(', ',', ':', ';', '['],
       direct_declarator -> direct_declarator <*> '[' ']': ['(', ',', ':', ';', '['],
       direct_declarator -> direct_declarator <*> '[' constant_expression ']': ['(', ',', ':', ';', '[']
     }

s381 = { direct_abstract_declarator -> '(' ')' <*>: ['(', ')', ',', '['] }

s382 = { direct_abstract_declarator -> '(' ')' <*>: ['(', ')', '['] }

s383 = { direct_abstract_declarator -> '(' abstract_declarator <*> ')': ['(', ')', ',', '['] }

s384 = { direct_abstract_declarator -> '(' abstract_declarator <*> ')': ['(', ')', '['] }

s385 = { direct_abstract_declarator -> '(' abstract_declarator ')' <*>: ['(', ')', ',', '['] }

s386 = { direct_abstract_declarator -> '(' abstract_declarator ')' <*>: ['(', ')', '['] }

s387 = { direct_abstract_declarator -> '(' parameter_type_list <*> ')': ['(', ')', ',', '['] }

s388 = { direct_abstract_declarator -> '(' parameter_type_list <*> ')': ['(', ')', '['] }

s389 = { direct_abstract_declarator -> '(' parameter_type_list ')' <*>: ['(', ')', ',', '['] }

s390 = { direct_abstract_declarator -> '(' parameter_type_list ')' <*>: ['(', ')', '['] }

s391 = { direct_abstract_declarator -> '[' ']' <*>: ['(', ')', ',', '['] }

s392 = { direct_abstract_declarator -> '[' ']' <*>: ['(', ')', '['] }

s393 = { direct_abstract_declarator -> '[' constant_expression <*> ']': ['(', ')', ',', '['] }

s394 = { direct_abstract_declarator -> '[' constant_expression <*> ']': ['(', ')', '['] }

s395 = { direct_abstract_declarator -> '[' constant_expression ']' <*>: ['(', ')', ',', '['] }

s396 = { direct_abstract_declarator -> '[' constant_expression ']' <*>: ['(', ')', '['] }

s397 = { direct_abstract_declarator -> direct_abstract_declarator '(' ')' <*>: ['(', ')', ',', '['] }

s398 = { direct_abstract_declarator -> direct_abstract_declarator '(' ')' <*>: ['(', ')', '['] }

s399 = { direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list <*> ')': ['(', ')', ',', '['] }

s400 = { direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list <*> ')': ['(', ')', '['] }

s401 = { direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')' <*>: ['(', ')', ',', '['] }

s402 = { direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')' <*>: ['(', ')', '['] }

s403 = { direct_abstract_declarator -> direct_abstract_declarator '[' ']' <*>: ['(', ')', ',', '['] }

s404 = { direct_abstract_declarator -> direct_abstract_declarator '[' ']' <*>: ['(', ')', '['] }

s405 = { direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression <*> ']': ['(', ')', ',', '['] }

s406 = { direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression <*> ']': ['(', ')', '['] }

s407 = { direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']' <*>: ['(', ')', ',', '['] }

s408 = { direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']' <*>: ['(', ')', '['] }

s409 = { direct_declarator -> '(' declarator <*> ')': ['(', ')', ',', '['] }

s410 = { direct_declarator -> '(' declarator <*> ')': ['(', ')', '['] }

s411 = { direct_declarator -> '(' declarator <*> ')': ['(', ',', ':', ';', '['] }

s412 = { direct_declarator -> '(' declarator ')' <*>: ['(', ')', ',', '['] }

s413 = { direct_declarator -> '(' declarator ')' <*>: ['(', ')', '['] }

s414 = { direct_declarator -> '(' declarator ')' <*>: ['(', ',', ':', ';', '['] }

s415 = { direct_declarator -> IDENTIFIER <*>: ['(', ')', ',', '['] }

s416 = { direct_declarator -> IDENTIFIER <*>: ['(', ')', '['] }

s417 = { direct_declarator -> IDENTIFIER <*>: ['(', ',', ':', ';', '['] }

s418 = { direct_declarator -> direct_declarator '(' ')' <*>: ['(', ')', ',', '['] }

s419 = { direct_declarator -> direct_declarator '(' ')' <*>: ['(', ')', '['] }

s420 = { direct_declarator -> direct_declarator '(' ')' <*>: ['(', ',', ':', ';', '['] }

s421 = { direct_declarator -> direct_declarator '(' identifier_list <*> ')': ['(', ')', ',', '['],
       identifier_list -> identifier_list <*> ',' IDENTIFIER: [')', ',']
     }

s422 = { direct_declarator -> direct_declarator '(' identifier_list <*> ')': ['(', ')', '['],
       identifier_list -> identifier_list <*> ',' IDENTIFIER: [')', ',']
     }

s423 = { direct_declarator -> direct_declarator '(' identifier_list <*> ')': ['(', ',', ':', ';', '['],
       identifier_list -> identifier_list <*> ',' IDENTIFIER: [')', ',']
     }

s424 = { direct_declarator -> direct_declarator '(' identifier_list ')' <*>: ['(', ')', ',', '['] }

s425 = { direct_declarator -> direct_declarator '(' identifier_list ')' <*>: ['(', ')', '['] }

s426 = { direct_declarator -> direct_declarator '(' identifier_list ')' <*>: ['(', ',', ':', ';', '['] }

s427 = { direct_declarator -> direct_declarator '(' parameter_type_list <*> ')': ['(', ')', ',', '['] }

s428 = { direct_declarator -> direct_declarator '(' parameter_type_list <*> ')': ['(', ')', '['] }

s429 = { direct_declarator -> direct_declarator '(' parameter_type_list <*> ')': ['(', ',', ':', ';', '['] }

s430 = { direct_declarator -> direct_declarator '(' parameter_type_list ')' <*>: ['(', ')', ',', '['] }

s431 = { direct_declarator -> direct_declarator '(' parameter_type_list ')' <*>: ['(', ')', '['] }

s432 = { direct_declarator -> direct_declarator '(' parameter_type_list ')' <*>: ['(', ',', ':', ';', '['] }

s433 = { direct_declarator -> direct_declarator '[' ']' <*>: ['(', ')', ',', '['] }

s434 = { direct_declarator -> direct_declarator '[' ']' <*>: ['(', ')', '['] }

s435 = { direct_declarator -> direct_declarator '[' ']' <*>: ['(', ',', ':', ';', '['] }

s436 = { direct_declarator -> direct_declarator '[' constant_expression <*> ']': ['(', ')', ',', '['] }

s437 = { direct_declarator -> direct_declarator '[' constant_expression <*> ']': ['(', ')', '['] }

s438 = { direct_declarator -> direct_declarator '[' constant_expression <*> ']': ['(', ',', ':', ';', '['] }

s439 = { direct_declarator -> direct_declarator '[' constant_expression ']' <*>: ['(', ')', ',', '['] }

s440 = { direct_declarator -> direct_declarator '[' constant_expression ']' <*>: ['(', ')', '['] }

s441 = { direct_declarator -> direct_declarator '[' constant_expression ']' <*>: ['(', ',', ':', ';', '['] }

s442 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> type_qualifier <*>: ['(', ')', '*', '['],
       specifier_qualifier_list -> type_qualifier <*> specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME]
     }

s443 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       specifier_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier: ['(', ')', '*', '['],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', ')', '*', '['],
       specifier_qualifier_list -> type_specifier <*>: ['(', ')', '*', '['],
       specifier_qualifier_list -> type_specifier <*> specifier_qualifier_list: ['(', ')', '*', '['],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'char': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'double': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'float': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'int': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'long': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'short': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> 'void': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME]
     }

s444 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       specifier_qualifier_list -> <*> type_qualifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> type_qualifier <*>: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> type_qualifier <*> specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s445 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       specifier_qualifier_list -> <*> type_qualifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> type_specifier <*>: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> type_specifier <*> specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s446 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       specifier_qualifier_list -> <*> type_qualifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';': ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declaration_list -> <*> struct_declaration: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declaration_list -> <*> struct_declaration_list struct_declaration: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> struct_or_union '{' <*> struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s447 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       specifier_qualifier_list -> <*> type_qualifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';': ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declaration_list -> <*> struct_declaration: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declaration_list -> <*> struct_declaration_list struct_declaration: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> struct_or_union '{' <*> struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s448 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       specifier_qualifier_list -> <*> type_qualifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';': ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declaration_list -> <*> struct_declaration: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declaration_list -> <*> struct_declaration_list struct_declaration: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> struct_or_union '{' <*> struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s449 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       specifier_qualifier_list -> <*> type_qualifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';': ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declaration_list -> <*> struct_declaration: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declaration_list -> <*> struct_declaration_list struct_declaration: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> struct_or_union IDENTIFIER '{' <*> struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s450 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       specifier_qualifier_list -> <*> type_qualifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';': ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declaration_list -> <*> struct_declaration: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declaration_list -> <*> struct_declaration_list struct_declaration: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> struct_or_union IDENTIFIER '{' <*> struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s451 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       specifier_qualifier_list -> <*> type_qualifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';': ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declaration_list -> <*> struct_declaration: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declaration_list -> <*> struct_declaration_list struct_declaration: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> struct_or_union IDENTIFIER '{' <*> struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s452 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       specifier_qualifier_list -> <*> type_qualifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';': ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declaration_list -> struct_declaration_list <*> struct_declaration: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> struct_or_union '{' struct_declaration_list <*> '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s453 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       specifier_qualifier_list -> <*> type_qualifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';': ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declaration_list -> struct_declaration_list <*> struct_declaration: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> struct_or_union '{' struct_declaration_list <*> '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s454 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       specifier_qualifier_list -> <*> type_qualifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';': ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declaration_list -> struct_declaration_list <*> struct_declaration: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> struct_or_union '{' struct_declaration_list <*> '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s455 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       specifier_qualifier_list -> <*> type_qualifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';': ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declaration_list -> struct_declaration_list <*> struct_declaration: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list <*> '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s456 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       specifier_qualifier_list -> <*> type_qualifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';': ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declaration_list -> struct_declaration_list <*> struct_declaration: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list <*> '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s457 = { enum_specifier -> <*> 'enum' '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> <*> 'enum' IDENTIFIER '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       specifier_qualifier_list -> <*> type_qualifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_qualifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier: ['(', '*', ':', IDENTIFIER],
       specifier_qualifier_list -> <*> type_specifier specifier_qualifier_list: ['(', '*', ':', IDENTIFIER],
       struct_declaration -> <*> specifier_qualifier_list struct_declarator_list ';': ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declaration_list -> struct_declaration_list <*> struct_declaration: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_or_union -> <*> 'struct': ['{', IDENTIFIER],
       struct_or_union -> <*> 'union': ['{', IDENTIFIER],
       struct_or_union_specifier -> <*> struct_or_union '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> <*> struct_or_union IDENTIFIER '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list <*> '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'const': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_qualifier -> <*> 'volatile': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'char': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'double': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'float': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'int': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'long': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'short': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'signed': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'unsigned': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> 'void': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> TYPE_NAME: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> enum_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       type_specifier -> <*> struct_or_union_specifier: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s458 = { enum_specifier -> 'enum' <*> '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> 'enum' <*> IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> 'enum' <*> IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s459 = { enum_specifier -> 'enum' <*> '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> 'enum' <*> IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> 'enum' <*> IDENTIFIER '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME]
     }

s460 = { enum_specifier -> 'enum' <*> '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> 'enum' <*> IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> 'enum' <*> IDENTIFIER '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s461 = { enum_specifier -> 'enum' '{' <*> enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enumerator -> <*> IDENTIFIER: [',', '}'],
       enumerator -> <*> IDENTIFIER '=' constant_expression: [',', '}'],
       enumerator_list -> <*> enumerator: [',', '}'],
       enumerator_list -> <*> enumerator_list ',' enumerator: [',', '}']
     }

s462 = { enum_specifier -> 'enum' '{' <*> enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enumerator -> <*> IDENTIFIER: [',', '}'],
       enumerator -> <*> IDENTIFIER '=' constant_expression: [',', '}'],
       enumerator_list -> <*> enumerator: [',', '}'],
       enumerator_list -> <*> enumerator_list ',' enumerator: [',', '}']
     }

s463 = { enum_specifier -> 'enum' '{' <*> enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enumerator -> <*> IDENTIFIER: [',', '}'],
       enumerator -> <*> IDENTIFIER '=' constant_expression: [',', '}'],
       enumerator_list -> <*> enumerator: [',', '}'],
       enumerator_list -> <*> enumerator_list ',' enumerator: [',', '}']
     }

s464 = { enum_specifier -> 'enum' '{' enumerator_list <*> '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enumerator_list -> enumerator_list <*> ',' enumerator: [',', '}']
     }

s465 = { enum_specifier -> 'enum' '{' enumerator_list <*> '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enumerator_list -> enumerator_list <*> ',' enumerator: [',', '}']
     }

s466 = { enum_specifier -> 'enum' '{' enumerator_list <*> '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enumerator_list -> enumerator_list <*> ',' enumerator: [',', '}']
     }

s467 = { enum_specifier -> 'enum' '{' enumerator_list '}' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s468 = { enum_specifier -> 'enum' '{' enumerator_list '}' <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME] }

s469 = { enum_specifier -> 'enum' '{' enumerator_list '}' <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s470 = { enum_specifier -> 'enum' IDENTIFIER <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> 'enum' IDENTIFIER <*> '{' enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s471 = { enum_specifier -> 'enum' IDENTIFIER <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enum_specifier -> 'enum' IDENTIFIER <*> '{' enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME]
     }

s472 = { enum_specifier -> 'enum' IDENTIFIER <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enum_specifier -> 'enum' IDENTIFIER <*> '{' enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s473 = { enum_specifier -> 'enum' IDENTIFIER '{' <*> enumerator_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enumerator -> <*> IDENTIFIER: [',', '}'],
       enumerator -> <*> IDENTIFIER '=' constant_expression: [',', '}'],
       enumerator_list -> <*> enumerator: [',', '}'],
       enumerator_list -> <*> enumerator_list ',' enumerator: [',', '}']
     }

s474 = { enum_specifier -> 'enum' IDENTIFIER '{' <*> enumerator_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enumerator -> <*> IDENTIFIER: [',', '}'],
       enumerator -> <*> IDENTIFIER '=' constant_expression: [',', '}'],
       enumerator_list -> <*> enumerator: [',', '}'],
       enumerator_list -> <*> enumerator_list ',' enumerator: [',', '}']
     }

s475 = { enum_specifier -> 'enum' IDENTIFIER '{' <*> enumerator_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enumerator -> <*> IDENTIFIER: [',', '}'],
       enumerator -> <*> IDENTIFIER '=' constant_expression: [',', '}'],
       enumerator_list -> <*> enumerator: [',', '}'],
       enumerator_list -> <*> enumerator_list ',' enumerator: [',', '}']
     }

s476 = { enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list <*> '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enumerator_list -> enumerator_list <*> ',' enumerator: [',', '}']
     }

s477 = { enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list <*> '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       enumerator_list -> enumerator_list <*> ',' enumerator: [',', '}']
     }

s478 = { enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list <*> '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       enumerator_list -> enumerator_list <*> ',' enumerator: [',', '}']
     }

s479 = { enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s480 = { enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}' <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME] }

s481 = { enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}' <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s482 = { enumerator -> <*> IDENTIFIER: [',', '}'],
       enumerator -> <*> IDENTIFIER '=' constant_expression: [',', '}'],
       enumerator_list -> enumerator_list ',' <*> enumerator: [',', '}']
     }

s483 = { enumerator -> IDENTIFIER <*>: [',', '}'],
       enumerator -> IDENTIFIER <*> '=' constant_expression: [',', '}']
     }

s484 = { enumerator -> IDENTIFIER '=' constant_expression <*>: [',', '}'] }

s485 = { enumerator_list -> enumerator <*>: [',', '}'] }

s486 = { enumerator_list -> enumerator_list ',' enumerator <*>: [',', '}'] }

s487 = { equality_expression -> equality_expression '!=' relational_expression <*>: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||']
     }

s488 = { equality_expression -> equality_expression '!=' relational_expression <*>: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||']
     }

s489 = { equality_expression -> equality_expression '!=' relational_expression <*>: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||']
     }

s490 = { equality_expression -> equality_expression '!=' relational_expression <*>: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||']
     }

s491 = { equality_expression -> equality_expression '!=' relational_expression <*>: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       relational_expression -> relational_expression <*> '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> relational_expression <*> '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> relational_expression <*> '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> relational_expression <*> '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}']
     }

s492 = { equality_expression -> equality_expression '!=' relational_expression <*>: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||']
     }

s493 = { equality_expression -> equality_expression '==' relational_expression <*>: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||']
     }

s494 = { equality_expression -> equality_expression '==' relational_expression <*>: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||']
     }

s495 = { equality_expression -> equality_expression '==' relational_expression <*>: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||']
     }

s496 = { equality_expression -> equality_expression '==' relational_expression <*>: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||']
     }

s497 = { equality_expression -> equality_expression '==' relational_expression <*>: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       relational_expression -> relational_expression <*> '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> relational_expression <*> '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> relational_expression <*> '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> relational_expression <*> '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}']
     }

s498 = { equality_expression -> equality_expression '==' relational_expression <*>: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||']
     }

s499 = { equality_expression -> relational_expression <*>: ['!=', '&&', '&', ')', ',', '==', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>=' shift_expression: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||']
     }

s500 = { equality_expression -> relational_expression <*>: ['!=', '&&', '&', ',', ':', '==', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>=' shift_expression: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||']
     }

s501 = { equality_expression -> relational_expression <*>: ['!=', '&&', '&', ',', ';', '==', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>=' shift_expression: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||']
     }

s502 = { equality_expression -> relational_expression <*>: ['!=', '&&', '&', ',', '==', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||']
     }

s503 = { equality_expression -> relational_expression <*>: ['!=', '&&', '&', ',', '==', '?', '^', '|', '||', '}'],
       relational_expression -> relational_expression <*> '<' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> relational_expression <*> '<=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> relational_expression <*> '>' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       relational_expression -> relational_expression <*> '>=' shift_expression: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}']
     }

s504 = { equality_expression -> relational_expression <*>: ['!=', '&&', '&', '==', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '<=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       relational_expression -> relational_expression <*> '>=' shift_expression: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||']
     }

s505 = { exclusive_or_expression -> exclusive_or_expression <*> '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       inclusive_or_expression -> exclusive_or_expression <*>: ['&&', ')', ',', '?', '|', '||']
     }

s506 = { exclusive_or_expression -> exclusive_or_expression <*> '^' and_expression: ['&&', ')', ',', '?', '^', '|', '||'],
       inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression <*>: ['&&', ')', ',', '?', '|', '||']
     }

s507 = { exclusive_or_expression -> exclusive_or_expression <*> '^' and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       inclusive_or_expression -> exclusive_or_expression <*>: ['&&', ',', ':', '?', '|', '||']
     }

s508 = { exclusive_or_expression -> exclusive_or_expression <*> '^' and_expression: ['&&', ',', ':', '?', '^', '|', '||'],
       inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression <*>: ['&&', ',', ':', '?', '|', '||']
     }

s509 = { exclusive_or_expression -> exclusive_or_expression <*> '^' and_expression: ['&&', ',', ';', '?', '^', '|', '||'],
       inclusive_or_expression -> exclusive_or_expression <*>: ['&&', ',', ';', '?', '|', '||']
     }

s510 = { exclusive_or_expression -> exclusive_or_expression <*> '^' and_expression: ['&&', ',', ';', '?', '^', '|', '||'],
       inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression <*>: ['&&', ',', ';', '?', '|', '||']
     }

s511 = { exclusive_or_expression -> exclusive_or_expression <*> '^' and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> exclusive_or_expression <*>: ['&&', ',', '?', ']', '|', '||']
     }

s512 = { exclusive_or_expression -> exclusive_or_expression <*> '^' and_expression: ['&&', ',', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression <*>: ['&&', ',', '?', ']', '|', '||']
     }

s513 = { exclusive_or_expression -> exclusive_or_expression <*> '^' and_expression: ['&&', ',', '?', '^', '|', '||', '}'],
       inclusive_or_expression -> exclusive_or_expression <*>: ['&&', ',', '?', '|', '||', '}']
     }

s514 = { exclusive_or_expression -> exclusive_or_expression <*> '^' and_expression: ['&&', ',', '?', '^', '|', '||', '}'],
       inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression <*>: ['&&', ',', '?', '|', '||', '}']
     }

s515 = { exclusive_or_expression -> exclusive_or_expression <*> '^' and_expression: ['&&', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> exclusive_or_expression <*>: ['&&', '?', ']', '|', '||']
     }

s516 = { exclusive_or_expression -> exclusive_or_expression <*> '^' and_expression: ['&&', '?', ']', '^', '|', '||'],
       inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression <*>: ['&&', '?', ']', '|', '||']
     }

s517 = { expression -> assignment_expression <*>: [')', ','] }

s518 = { expression -> assignment_expression <*>: [',', ':'] }

s519 = { expression -> assignment_expression <*>: [',', ']'] }

s520 = { expression -> expression <*> ',' assignment_expression: [')', ','],
       primary_expression -> '(' expression <*> ')': [$]
     }

s521 = { expression -> expression <*> ',' assignment_expression: [')', ','],
       primary_expression -> '(' expression <*> ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||']
     }

s522 = { expression -> expression <*> ',' assignment_expression: [')', ','],
       primary_expression -> '(' expression <*> ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||']
     }

s523 = { expression -> expression <*> ',' assignment_expression: [')', ','],
       primary_expression -> '(' expression <*> ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||']
     }

s524 = { expression -> expression <*> ',' assignment_expression: [')', ','],
       primary_expression -> '(' expression <*> ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||']
     }

s525 = { expression -> expression <*> ',' assignment_expression: [')', ','],
       primary_expression -> '(' expression <*> ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||']
     }

s526 = { expression -> expression <*> ',' assignment_expression: [')', ','],
       primary_expression -> '(' expression <*> ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||']
     }

s527 = { expression -> expression <*> ',' assignment_expression: [')', ','],
       primary_expression -> '(' expression <*> ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||']
     }

s528 = { expression -> expression <*> ',' assignment_expression: [')', ','],
       primary_expression -> '(' expression <*> ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}']
     }

s529 = { expression -> expression <*> ',' assignment_expression: [')', ','],
       primary_expression -> '(' expression <*> ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||']
     }

s530 = { expression -> expression <*> ',' assignment_expression: [',', ']'],
       postfix_expression -> postfix_expression '[' expression <*> ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||']
     }

s531 = { expression -> expression <*> ',' assignment_expression: [',', ']'],
       postfix_expression -> postfix_expression '[' expression <*> ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||']
     }

s532 = { expression -> expression <*> ',' assignment_expression: [',', ']'],
       postfix_expression -> postfix_expression '[' expression <*> ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||']
     }

s533 = { expression -> expression <*> ',' assignment_expression: [',', ']'],
       postfix_expression -> postfix_expression '[' expression <*> ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||']
     }

s534 = { expression -> expression <*> ',' assignment_expression: [',', ']'],
       postfix_expression -> postfix_expression '[' expression <*> ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||']
     }

s535 = { expression -> expression <*> ',' assignment_expression: [',', ']'],
       postfix_expression -> postfix_expression '[' expression <*> ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||']
     }

s536 = { expression -> expression <*> ',' assignment_expression: [',', ']'],
       postfix_expression -> postfix_expression '[' expression <*> ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||']
     }

s537 = { expression -> expression <*> ',' assignment_expression: [',', ']'],
       postfix_expression -> postfix_expression '[' expression <*> ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}']
     }

s538 = { expression -> expression <*> ',' assignment_expression: [',', ']'],
       postfix_expression -> postfix_expression '[' expression <*> ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||']
     }

s539 = { expression -> expression ',' assignment_expression <*>: [')', ','] }

s540 = { expression -> expression ',' assignment_expression <*>: [',', ':'] }

s541 = { expression -> expression ',' assignment_expression <*>: [',', ']'] }

s542 = { identifier_list -> IDENTIFIER <*>: [')', ','] }

s543 = { identifier_list -> identifier_list ',' <*> IDENTIFIER: [')', ','] }

s544 = { identifier_list -> identifier_list ',' IDENTIFIER <*>: [')', ','] }

s545 = { inclusive_or_expression -> inclusive_or_expression <*> '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> inclusive_or_expression <*>: ['&&', ')', ',', '?', '||']
     }

s546 = { inclusive_or_expression -> inclusive_or_expression <*> '|' exclusive_or_expression: ['&&', ')', ',', '?', '|', '||'],
       logical_and_expression -> logical_and_expression '&&' inclusive_or_expression <*>: ['&&', ')', ',', '?', '||']
     }

s547 = { inclusive_or_expression -> inclusive_or_expression <*> '|' exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       logical_and_expression -> inclusive_or_expression <*>: ['&&', ',', ':', '?', '||']
     }

s548 = { inclusive_or_expression -> inclusive_or_expression <*> '|' exclusive_or_expression: ['&&', ',', ':', '?', '|', '||'],
       logical_and_expression -> logical_and_expression '&&' inclusive_or_expression <*>: ['&&', ',', ':', '?', '||']
     }

s549 = { inclusive_or_expression -> inclusive_or_expression <*> '|' exclusive_or_expression: ['&&', ',', ';', '?', '|', '||'],
       logical_and_expression -> inclusive_or_expression <*>: ['&&', ',', ';', '?', '||']
     }

s550 = { inclusive_or_expression -> inclusive_or_expression <*> '|' exclusive_or_expression: ['&&', ',', ';', '?', '|', '||'],
       logical_and_expression -> logical_and_expression '&&' inclusive_or_expression <*>: ['&&', ',', ';', '?', '||']
     }

s551 = { inclusive_or_expression -> inclusive_or_expression <*> '|' exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       logical_and_expression -> inclusive_or_expression <*>: ['&&', ',', '?', ']', '||']
     }

s552 = { inclusive_or_expression -> inclusive_or_expression <*> '|' exclusive_or_expression: ['&&', ',', '?', ']', '|', '||'],
       logical_and_expression -> logical_and_expression '&&' inclusive_or_expression <*>: ['&&', ',', '?', ']', '||']
     }

s553 = { inclusive_or_expression -> inclusive_or_expression <*> '|' exclusive_or_expression: ['&&', ',', '?', '|', '||', '}'],
       logical_and_expression -> inclusive_or_expression <*>: ['&&', ',', '?', '||', '}']
     }

s554 = { inclusive_or_expression -> inclusive_or_expression <*> '|' exclusive_or_expression: ['&&', ',', '?', '|', '||', '}'],
       logical_and_expression -> logical_and_expression '&&' inclusive_or_expression <*>: ['&&', ',', '?', '||', '}']
     }

s555 = { inclusive_or_expression -> inclusive_or_expression <*> '|' exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       logical_and_expression -> inclusive_or_expression <*>: ['&&', '?', ']', '||']
     }

s556 = { inclusive_or_expression -> inclusive_or_expression <*> '|' exclusive_or_expression: ['&&', '?', ']', '|', '||'],
       logical_and_expression -> logical_and_expression '&&' inclusive_or_expression <*>: ['&&', '?', ']', '||']
     }

s557 = { logical_and_expression -> logical_and_expression <*> '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> logical_and_expression <*>: [')', ',', '?', '||']
     }

s558 = { logical_and_expression -> logical_and_expression <*> '&&' inclusive_or_expression: ['&&', ')', ',', '?', '||'],
       logical_or_expression -> logical_or_expression '||' logical_and_expression <*>: [')', ',', '?', '||']
     }

s559 = { logical_and_expression -> logical_and_expression <*> '&&' inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_or_expression -> logical_and_expression <*>: [',', ':', '?', '||']
     }

s560 = { logical_and_expression -> logical_and_expression <*> '&&' inclusive_or_expression: ['&&', ',', ':', '?', '||'],
       logical_or_expression -> logical_or_expression '||' logical_and_expression <*>: [',', ':', '?', '||']
     }

s561 = { logical_and_expression -> logical_and_expression <*> '&&' inclusive_or_expression: ['&&', ',', ';', '?', '||'],
       logical_or_expression -> logical_and_expression <*>: [',', ';', '?', '||']
     }

s562 = { logical_and_expression -> logical_and_expression <*> '&&' inclusive_or_expression: ['&&', ',', ';', '?', '||'],
       logical_or_expression -> logical_or_expression '||' logical_and_expression <*>: [',', ';', '?', '||']
     }

s563 = { logical_and_expression -> logical_and_expression <*> '&&' inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_or_expression -> logical_and_expression <*>: [',', '?', ']', '||']
     }

s564 = { logical_and_expression -> logical_and_expression <*> '&&' inclusive_or_expression: ['&&', ',', '?', ']', '||'],
       logical_or_expression -> logical_or_expression '||' logical_and_expression <*>: [',', '?', ']', '||']
     }

s565 = { logical_and_expression -> logical_and_expression <*> '&&' inclusive_or_expression: ['&&', ',', '?', '||', '}'],
       logical_or_expression -> logical_and_expression <*>: [',', '?', '||', '}']
     }

s566 = { logical_and_expression -> logical_and_expression <*> '&&' inclusive_or_expression: ['&&', ',', '?', '||', '}'],
       logical_or_expression -> logical_or_expression '||' logical_and_expression <*>: [',', '?', '||', '}']
     }

s567 = { logical_and_expression -> logical_and_expression <*> '&&' inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_or_expression -> logical_and_expression <*>: ['?', ']', '||']
     }

s568 = { logical_and_expression -> logical_and_expression <*> '&&' inclusive_or_expression: ['&&', '?', ']', '||'],
       logical_or_expression -> logical_or_expression '||' logical_and_expression <*>: ['?', ']', '||']
     }

s569 = { multiplicative_expression -> cast_expression <*>: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s570 = { multiplicative_expression -> cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s571 = { multiplicative_expression -> cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s572 = { multiplicative_expression -> cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s573 = { multiplicative_expression -> cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'] }

s574 = { multiplicative_expression -> cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s575 = { multiplicative_expression -> multiplicative_expression '%' cast_expression <*>: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s576 = { multiplicative_expression -> multiplicative_expression '%' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s577 = { multiplicative_expression -> multiplicative_expression '%' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s578 = { multiplicative_expression -> multiplicative_expression '%' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s579 = { multiplicative_expression -> multiplicative_expression '%' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'] }

s580 = { multiplicative_expression -> multiplicative_expression '%' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s581 = { multiplicative_expression -> multiplicative_expression '*' cast_expression <*>: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s582 = { multiplicative_expression -> multiplicative_expression '*' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s583 = { multiplicative_expression -> multiplicative_expression '*' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s584 = { multiplicative_expression -> multiplicative_expression '*' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s585 = { multiplicative_expression -> multiplicative_expression '*' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'] }

s586 = { multiplicative_expression -> multiplicative_expression '*' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s587 = { multiplicative_expression -> multiplicative_expression '/' cast_expression <*>: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s588 = { multiplicative_expression -> multiplicative_expression '/' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s589 = { multiplicative_expression -> multiplicative_expression '/' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s590 = { multiplicative_expression -> multiplicative_expression '/' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s591 = { multiplicative_expression -> multiplicative_expression '/' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'] }

s592 = { multiplicative_expression -> multiplicative_expression '/' cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s593 = { parameter_declaration -> declaration_specifiers abstract_declarator <*>: [')', ','] }

s594 = { parameter_declaration -> declaration_specifiers declarator <*>: [')', ','] }

s595 = { parameter_list -> parameter_declaration <*>: [')', ','] }

s596 = { parameter_list -> parameter_list <*> ',' parameter_declaration: [')', ','],
       parameter_type_list -> parameter_list <*>: [')'],
       parameter_type_list -> parameter_list <*> ',' '...': [')']
     }

s597 = { parameter_list -> parameter_list ',' parameter_declaration <*>: [')', ','] }

s598 = { parameter_type_list -> parameter_list ',' '...' <*>: [')'] }

s599 = { pointer -> <*> '*': ['(', ')', ',', '[', IDENTIFIER],
       pointer -> <*> '*' pointer: ['(', ')', ',', '[', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list: ['(', ')', ',', '[', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list pointer: ['(', ')', ',', '[', IDENTIFIER],
       pointer -> '*' <*>: ['(', ')', ',', '[', IDENTIFIER],
       pointer -> '*' <*> pointer: ['(', ')', ',', '[', IDENTIFIER],
       pointer -> '*' <*> type_qualifier_list: ['(', ')', ',', '[', IDENTIFIER],
       pointer -> '*' <*> type_qualifier_list pointer: ['(', ')', ',', '[', IDENTIFIER],
       type_qualifier -> <*> 'const': ['(', ')', '*', ',', '[', 'const', 'volatile', IDENTIFIER],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', ',', '[', 'const', 'volatile', IDENTIFIER],
       type_qualifier_list -> <*> type_qualifier: ['(', ')', '*', ',', '[', 'const', 'volatile', IDENTIFIER],
       type_qualifier_list -> <*> type_qualifier_list type_qualifier: ['(', ')', '*', ',', '[', 'const', 'volatile', IDENTIFIER]
     }

s600 = { pointer -> <*> '*': ['(', ')', ',', '[', IDENTIFIER],
       pointer -> <*> '*' pointer: ['(', ')', ',', '[', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list: ['(', ')', ',', '[', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list pointer: ['(', ')', ',', '[', IDENTIFIER],
       pointer -> '*' type_qualifier_list <*>: ['(', ')', ',', '[', IDENTIFIER],
       pointer -> '*' type_qualifier_list <*> pointer: ['(', ')', ',', '[', IDENTIFIER],
       type_qualifier -> <*> 'const': ['(', ')', '*', ',', '[', 'const', 'volatile', IDENTIFIER],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', ',', '[', 'const', 'volatile', IDENTIFIER],
       type_qualifier_list -> type_qualifier_list <*> type_qualifier: ['(', ')', '*', ',', '[', 'const', 'volatile', IDENTIFIER]
     }

s601 = { pointer -> <*> '*': ['(', ')', '['],
       pointer -> <*> '*' pointer: ['(', ')', '['],
       pointer -> <*> '*' type_qualifier_list: ['(', ')', '['],
       pointer -> <*> '*' type_qualifier_list pointer: ['(', ')', '['],
       pointer -> '*' <*>: ['(', ')', '['],
       pointer -> '*' <*> pointer: ['(', ')', '['],
       pointer -> '*' <*> type_qualifier_list: ['(', ')', '['],
       pointer -> '*' <*> type_qualifier_list pointer: ['(', ')', '['],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'const', 'volatile'],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'const', 'volatile'],
       type_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '[', 'const', 'volatile'],
       type_qualifier_list -> <*> type_qualifier_list type_qualifier: ['(', ')', '*', '[', 'const', 'volatile']
     }

s602 = { pointer -> <*> '*': ['(', ')', '['],
       pointer -> <*> '*' pointer: ['(', ')', '['],
       pointer -> <*> '*' type_qualifier_list: ['(', ')', '['],
       pointer -> <*> '*' type_qualifier_list pointer: ['(', ')', '['],
       pointer -> '*' type_qualifier_list <*>: ['(', ')', '['],
       pointer -> '*' type_qualifier_list <*> pointer: ['(', ')', '['],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'const', 'volatile'],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'const', 'volatile'],
       type_qualifier_list -> type_qualifier_list <*> type_qualifier: ['(', ')', '*', '[', 'const', 'volatile']
     }

s603 = { pointer -> <*> '*': ['(', ')', '[', IDENTIFIER],
       pointer -> <*> '*' pointer: ['(', ')', '[', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list: ['(', ')', '[', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list pointer: ['(', ')', '[', IDENTIFIER],
       pointer -> '*' <*>: ['(', ')', '[', IDENTIFIER],
       pointer -> '*' <*> pointer: ['(', ')', '[', IDENTIFIER],
       pointer -> '*' <*> type_qualifier_list: ['(', ')', '[', IDENTIFIER],
       pointer -> '*' <*> type_qualifier_list pointer: ['(', ')', '[', IDENTIFIER],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'const', 'volatile', IDENTIFIER],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'const', 'volatile', IDENTIFIER],
       type_qualifier_list -> <*> type_qualifier: ['(', ')', '*', '[', 'const', 'volatile', IDENTIFIER],
       type_qualifier_list -> <*> type_qualifier_list type_qualifier: ['(', ')', '*', '[', 'const', 'volatile', IDENTIFIER]
     }

s604 = { pointer -> <*> '*': ['(', ')', '[', IDENTIFIER],
       pointer -> <*> '*' pointer: ['(', ')', '[', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list: ['(', ')', '[', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list pointer: ['(', ')', '[', IDENTIFIER],
       pointer -> '*' type_qualifier_list <*>: ['(', ')', '[', IDENTIFIER],
       pointer -> '*' type_qualifier_list <*> pointer: ['(', ')', '[', IDENTIFIER],
       type_qualifier -> <*> 'const': ['(', ')', '*', '[', 'const', 'volatile', IDENTIFIER],
       type_qualifier -> <*> 'volatile': ['(', ')', '*', '[', 'const', 'volatile', IDENTIFIER],
       type_qualifier_list -> type_qualifier_list <*> type_qualifier: ['(', ')', '*', '[', 'const', 'volatile', IDENTIFIER]
     }

s605 = { pointer -> <*> '*': ['(', IDENTIFIER],
       pointer -> <*> '*' pointer: ['(', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list: ['(', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list pointer: ['(', IDENTIFIER],
       pointer -> '*' <*>: ['(', IDENTIFIER],
       pointer -> '*' <*> pointer: ['(', IDENTIFIER],
       pointer -> '*' <*> type_qualifier_list: ['(', IDENTIFIER],
       pointer -> '*' <*> type_qualifier_list pointer: ['(', IDENTIFIER],
       type_qualifier -> <*> 'const': ['(', '*', 'const', 'volatile', IDENTIFIER],
       type_qualifier -> <*> 'volatile': ['(', '*', 'const', 'volatile', IDENTIFIER],
       type_qualifier_list -> <*> type_qualifier: ['(', '*', 'const', 'volatile', IDENTIFIER],
       type_qualifier_list -> <*> type_qualifier_list type_qualifier: ['(', '*', 'const', 'volatile', IDENTIFIER]
     }

s606 = { pointer -> <*> '*': ['(', IDENTIFIER],
       pointer -> <*> '*' pointer: ['(', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list: ['(', IDENTIFIER],
       pointer -> <*> '*' type_qualifier_list pointer: ['(', IDENTIFIER],
       pointer -> '*' type_qualifier_list <*>: ['(', IDENTIFIER],
       pointer -> '*' type_qualifier_list <*> pointer: ['(', IDENTIFIER],
       type_qualifier -> <*> 'const': ['(', '*', 'const', 'volatile', IDENTIFIER],
       type_qualifier -> <*> 'volatile': ['(', '*', 'const', 'volatile', IDENTIFIER],
       type_qualifier_list -> type_qualifier_list <*> type_qualifier: ['(', '*', 'const', 'volatile', IDENTIFIER]
     }

s607 = { pointer -> '*' pointer <*>: ['(', ')', ',', '[', IDENTIFIER] }

s608 = { pointer -> '*' pointer <*>: ['(', ')', '['] }

s609 = { pointer -> '*' pointer <*>: ['(', ')', '[', IDENTIFIER] }

s610 = { pointer -> '*' pointer <*>: ['(', IDENTIFIER] }

s611 = { pointer -> '*' type_qualifier_list pointer <*>: ['(', ')', ',', '[', IDENTIFIER] }

s612 = { pointer -> '*' type_qualifier_list pointer <*>: ['(', ')', '['] }

s613 = { pointer -> '*' type_qualifier_list pointer <*>: ['(', ')', '[', IDENTIFIER] }

s614 = { pointer -> '*' type_qualifier_list pointer <*>: ['(', IDENTIFIER] }

s615 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> '++' <*> unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s616 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> '--' <*> unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s617 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> 'sizeof' <*> '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> 'sizeof' <*> unary_expression: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s618 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> '++' <*> unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s619 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> '--' <*> unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s620 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> 'sizeof' <*> '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_expression -> 'sizeof' <*> unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s621 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> '++' <*> unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s622 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> '--' <*> unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s623 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> 'sizeof' <*> '(' type_name ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> 'sizeof' <*> unary_expression: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s624 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> '++' <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s625 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> '--' <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s626 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> 'sizeof' <*> '(' type_name ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> 'sizeof' <*> unary_expression: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s627 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> '++' <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s628 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> '--' <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s629 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> 'sizeof' <*> '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> 'sizeof' <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s630 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> '++' <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s631 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> '--' <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s632 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> 'sizeof' <*> '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_expression -> 'sizeof' <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s633 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> '++' <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s634 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> '--' <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s635 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> 'sizeof' <*> '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> 'sizeof' <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s636 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> '++' <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s637 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> '--' <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s638 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> 'sizeof' <*> '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_expression -> 'sizeof' <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s639 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> '++' <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s640 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> '--' <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s641 = { postfix_expression -> <*> postfix_expression '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> postfix_expression '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> <*> primary_expression: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> '(' expression ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> CONSTANT: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       primary_expression -> <*> STRING_LITERAL: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> <*> '++' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> '--' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> 'sizeof' unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> postfix_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> <*> unary_operator cast_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> 'sizeof' <*> '(' type_name ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_expression -> 'sizeof' <*> unary_expression: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       unary_operator -> <*> '!': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '&': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '*': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '+': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '-': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL],
       unary_operator -> <*> '~': ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL]
     }

s642 = { postfix_expression -> postfix_expression <*> '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression <*> '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression <*> '++': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression <*> '--': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression <*> '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression <*> '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression <*> '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       unary_expression -> postfix_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||']
     }

s643 = { postfix_expression -> postfix_expression <*> '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression <*> '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression <*> '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression <*> '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression <*> '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression <*> '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression <*> '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'],
       unary_expression -> postfix_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||']
     }

s644 = { postfix_expression -> postfix_expression <*> '(' ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression <*> '(' argument_expression_list ')': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression <*> '++': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression <*> '--': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression <*> '->' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression <*> '.' IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       postfix_expression -> postfix_expression <*> '[' expression ']': ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'],
       unary_expression -> postfix_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||']
     }

s645 = { postfix_expression -> postfix_expression <*> '(' ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '++': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '--': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '[' expression ']': ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> postfix_expression <*>: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s646 = { postfix_expression -> postfix_expression <*> '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> postfix_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s647 = { postfix_expression -> postfix_expression <*> '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'],
       unary_expression -> postfix_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s648 = { postfix_expression -> postfix_expression <*> '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> postfix_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s649 = { postfix_expression -> postfix_expression <*> '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> postfix_expression <*> '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> postfix_expression <*> '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> postfix_expression <*> '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> postfix_expression <*> '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> postfix_expression <*> '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       postfix_expression -> postfix_expression <*> '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'],
       unary_expression -> postfix_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}']
     }

s650 = { postfix_expression -> postfix_expression <*> '(' ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '(' argument_expression_list ')': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '++': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '--': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '->' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '.' IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       postfix_expression -> postfix_expression <*> '[' expression ']': ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'],
       unary_expression -> postfix_expression <*>: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s651 = { postfix_expression -> postfix_expression '(' ')' <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s652 = { postfix_expression -> postfix_expression '(' ')' <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s653 = { postfix_expression -> postfix_expression '(' ')' <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'] }

s654 = { postfix_expression -> postfix_expression '(' ')' <*>: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s655 = { postfix_expression -> postfix_expression '(' ')' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s656 = { postfix_expression -> postfix_expression '(' ')' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s657 = { postfix_expression -> postfix_expression '(' ')' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s658 = { postfix_expression -> postfix_expression '(' ')' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'] }

s659 = { postfix_expression -> postfix_expression '(' ')' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s660 = { postfix_expression -> postfix_expression '(' argument_expression_list ')' <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s661 = { postfix_expression -> postfix_expression '(' argument_expression_list ')' <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s662 = { postfix_expression -> postfix_expression '(' argument_expression_list ')' <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'] }

s663 = { postfix_expression -> postfix_expression '(' argument_expression_list ')' <*>: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s664 = { postfix_expression -> postfix_expression '(' argument_expression_list ')' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s665 = { postfix_expression -> postfix_expression '(' argument_expression_list ')' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s666 = { postfix_expression -> postfix_expression '(' argument_expression_list ')' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s667 = { postfix_expression -> postfix_expression '(' argument_expression_list ')' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'] }

s668 = { postfix_expression -> postfix_expression '(' argument_expression_list ')' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s669 = { postfix_expression -> postfix_expression '++' <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s670 = { postfix_expression -> postfix_expression '++' <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s671 = { postfix_expression -> postfix_expression '++' <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'] }

s672 = { postfix_expression -> postfix_expression '++' <*>: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s673 = { postfix_expression -> postfix_expression '++' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s674 = { postfix_expression -> postfix_expression '++' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s675 = { postfix_expression -> postfix_expression '++' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s676 = { postfix_expression -> postfix_expression '++' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'] }

s677 = { postfix_expression -> postfix_expression '++' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s678 = { postfix_expression -> postfix_expression '--' <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s679 = { postfix_expression -> postfix_expression '--' <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s680 = { postfix_expression -> postfix_expression '--' <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'] }

s681 = { postfix_expression -> postfix_expression '--' <*>: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s682 = { postfix_expression -> postfix_expression '--' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s683 = { postfix_expression -> postfix_expression '--' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s684 = { postfix_expression -> postfix_expression '--' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s685 = { postfix_expression -> postfix_expression '--' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'] }

s686 = { postfix_expression -> postfix_expression '--' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s687 = { postfix_expression -> postfix_expression '->' <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s688 = { postfix_expression -> postfix_expression '->' <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s689 = { postfix_expression -> postfix_expression '->' <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'] }

s690 = { postfix_expression -> postfix_expression '->' <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s691 = { postfix_expression -> postfix_expression '->' <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s692 = { postfix_expression -> postfix_expression '->' <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s693 = { postfix_expression -> postfix_expression '->' <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s694 = { postfix_expression -> postfix_expression '->' <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'] }

s695 = { postfix_expression -> postfix_expression '->' <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s696 = { postfix_expression -> postfix_expression '->' IDENTIFIER <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s697 = { postfix_expression -> postfix_expression '->' IDENTIFIER <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s698 = { postfix_expression -> postfix_expression '->' IDENTIFIER <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'] }

s699 = { postfix_expression -> postfix_expression '->' IDENTIFIER <*>: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s700 = { postfix_expression -> postfix_expression '->' IDENTIFIER <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s701 = { postfix_expression -> postfix_expression '->' IDENTIFIER <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s702 = { postfix_expression -> postfix_expression '->' IDENTIFIER <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s703 = { postfix_expression -> postfix_expression '->' IDENTIFIER <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'] }

s704 = { postfix_expression -> postfix_expression '->' IDENTIFIER <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s705 = { postfix_expression -> postfix_expression '.' <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s706 = { postfix_expression -> postfix_expression '.' <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s707 = { postfix_expression -> postfix_expression '.' <*> IDENTIFIER: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'] }

s708 = { postfix_expression -> postfix_expression '.' <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s709 = { postfix_expression -> postfix_expression '.' <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s710 = { postfix_expression -> postfix_expression '.' <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s711 = { postfix_expression -> postfix_expression '.' <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s712 = { postfix_expression -> postfix_expression '.' <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'] }

s713 = { postfix_expression -> postfix_expression '.' <*> IDENTIFIER: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s714 = { postfix_expression -> postfix_expression '.' IDENTIFIER <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s715 = { postfix_expression -> postfix_expression '.' IDENTIFIER <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s716 = { postfix_expression -> postfix_expression '.' IDENTIFIER <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'] }

s717 = { postfix_expression -> postfix_expression '.' IDENTIFIER <*>: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s718 = { postfix_expression -> postfix_expression '.' IDENTIFIER <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s719 = { postfix_expression -> postfix_expression '.' IDENTIFIER <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s720 = { postfix_expression -> postfix_expression '.' IDENTIFIER <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s721 = { postfix_expression -> postfix_expression '.' IDENTIFIER <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'] }

s722 = { postfix_expression -> postfix_expression '.' IDENTIFIER <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s723 = { postfix_expression -> postfix_expression '[' expression ']' <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s724 = { postfix_expression -> postfix_expression '[' expression ']' <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s725 = { postfix_expression -> postfix_expression '[' expression ']' <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'] }

s726 = { postfix_expression -> postfix_expression '[' expression ']' <*>: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s727 = { postfix_expression -> postfix_expression '[' expression ']' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s728 = { postfix_expression -> postfix_expression '[' expression ']' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s729 = { postfix_expression -> postfix_expression '[' expression ']' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s730 = { postfix_expression -> postfix_expression '[' expression ']' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'] }

s731 = { postfix_expression -> postfix_expression '[' expression ']' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s732 = { postfix_expression -> primary_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s733 = { postfix_expression -> primary_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s734 = { postfix_expression -> primary_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'] }

s735 = { postfix_expression -> primary_expression <*>: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s736 = { postfix_expression -> primary_expression <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s737 = { postfix_expression -> primary_expression <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s738 = { postfix_expression -> primary_expression <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s739 = { postfix_expression -> primary_expression <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'] }

s740 = { postfix_expression -> primary_expression <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s741 = { primary_expression -> '(' expression ')' <*>: [$] }

s742 = { primary_expression -> '(' expression ')' <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s743 = { primary_expression -> '(' expression ')' <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s744 = { primary_expression -> '(' expression ')' <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'] }

s745 = { primary_expression -> '(' expression ')' <*>: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s746 = { primary_expression -> '(' expression ')' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s747 = { primary_expression -> '(' expression ')' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s748 = { primary_expression -> '(' expression ')' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s749 = { primary_expression -> '(' expression ')' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'] }

s750 = { primary_expression -> '(' expression ')' <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s751 = { primary_expression -> CONSTANT <*>: [$] }

s752 = { primary_expression -> CONSTANT <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s753 = { primary_expression -> CONSTANT <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s754 = { primary_expression -> CONSTANT <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'] }

s755 = { primary_expression -> CONSTANT <*>: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s756 = { primary_expression -> CONSTANT <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s757 = { primary_expression -> CONSTANT <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s758 = { primary_expression -> CONSTANT <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s759 = { primary_expression -> CONSTANT <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'] }

s760 = { primary_expression -> CONSTANT <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s761 = { primary_expression -> IDENTIFIER <*>: [$] }

s762 = { primary_expression -> IDENTIFIER <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s763 = { primary_expression -> IDENTIFIER <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s764 = { primary_expression -> IDENTIFIER <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'] }

s765 = { primary_expression -> IDENTIFIER <*>: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s766 = { primary_expression -> IDENTIFIER <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s767 = { primary_expression -> IDENTIFIER <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s768 = { primary_expression -> IDENTIFIER <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s769 = { primary_expression -> IDENTIFIER <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'] }

s770 = { primary_expression -> IDENTIFIER <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s771 = { primary_expression -> STRING_LITERAL <*>: [$] }

s772 = { primary_expression -> STRING_LITERAL <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', ')', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s773 = { primary_expression -> STRING_LITERAL <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', '^', '^=', '|', '|=', '||'] }

s774 = { primary_expression -> STRING_LITERAL <*>: ['!=', '%', '%=', '&&', '&', '&=', '(', '*', '*=', '+', '++', '+=', ',', '-', '--', '-=', '->', '.', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '[', ']', '^', '^=', '|', '|=', '||'] }

s775 = { primary_expression -> STRING_LITERAL <*>: ['!=', '%', '&&', '&', '(', ')', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s776 = { primary_expression -> STRING_LITERAL <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s777 = { primary_expression -> STRING_LITERAL <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||'] }

s778 = { primary_expression -> STRING_LITERAL <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s779 = { primary_expression -> STRING_LITERAL <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', ',', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', '^', '|', '||', '}'] }

s780 = { primary_expression -> STRING_LITERAL <*>: ['!=', '%', '&&', '&', '(', '*', '+', '++', '-', '--', '->', '.', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '[', ']', '^', '|', '||'] }

s781 = { relational_expression -> relational_expression '<' shift_expression <*>: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s782 = { relational_expression -> relational_expression '<' shift_expression <*>: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s783 = { relational_expression -> relational_expression '<' shift_expression <*>: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s784 = { relational_expression -> relational_expression '<' shift_expression <*>: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s785 = { relational_expression -> relational_expression '<' shift_expression <*>: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}']
     }

s786 = { relational_expression -> relational_expression '<' shift_expression <*>: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s787 = { relational_expression -> relational_expression '<=' shift_expression <*>: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s788 = { relational_expression -> relational_expression '<=' shift_expression <*>: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s789 = { relational_expression -> relational_expression '<=' shift_expression <*>: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s790 = { relational_expression -> relational_expression '<=' shift_expression <*>: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s791 = { relational_expression -> relational_expression '<=' shift_expression <*>: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}']
     }

s792 = { relational_expression -> relational_expression '<=' shift_expression <*>: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s793 = { relational_expression -> relational_expression '>' shift_expression <*>: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s794 = { relational_expression -> relational_expression '>' shift_expression <*>: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s795 = { relational_expression -> relational_expression '>' shift_expression <*>: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s796 = { relational_expression -> relational_expression '>' shift_expression <*>: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s797 = { relational_expression -> relational_expression '>' shift_expression <*>: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}']
     }

s798 = { relational_expression -> relational_expression '>' shift_expression <*>: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s799 = { relational_expression -> relational_expression '>=' shift_expression <*>: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s800 = { relational_expression -> relational_expression '>=' shift_expression <*>: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s801 = { relational_expression -> relational_expression '>=' shift_expression <*>: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s802 = { relational_expression -> relational_expression '>=' shift_expression <*>: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s803 = { relational_expression -> relational_expression '>=' shift_expression <*>: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}']
     }

s804 = { relational_expression -> relational_expression '>=' shift_expression <*>: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s805 = { relational_expression -> shift_expression <*>: ['!=', '&&', '&', ')', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ')', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s806 = { relational_expression -> shift_expression <*>: ['!=', '&&', '&', ',', ':', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s807 = { relational_expression -> shift_expression <*>: ['!=', '&&', '&', ',', ';', '<', '<=', '==', '>', '>=', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||']
     }

s808 = { relational_expression -> shift_expression <*>: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s809 = { relational_expression -> shift_expression <*>: ['!=', '&&', '&', ',', '<', '<=', '==', '>', '>=', '?', '^', '|', '||', '}'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', ',', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}']
     }

s810 = { relational_expression -> shift_expression <*>: ['!=', '&&', '&', '<', '<=', '==', '>', '>=', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '<<' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'],
       shift_expression -> shift_expression <*> '>>' additive_expression: ['!=', '&&', '&', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||']
     }

s811 = { specifier_qualifier_list -> type_qualifier specifier_qualifier_list <*>: ['(', ')', '*', '['] }

s812 = { specifier_qualifier_list -> type_qualifier specifier_qualifier_list <*>: ['(', '*', ':', IDENTIFIER] }

s813 = { specifier_qualifier_list -> type_specifier specifier_qualifier_list <*>: ['(', ')', '*', '['] }

s814 = { specifier_qualifier_list -> type_specifier specifier_qualifier_list <*>: ['(', '*', ':', IDENTIFIER] }

s815 = { storage_class_specifier -> 'auto' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s816 = { storage_class_specifier -> 'extern' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s817 = { storage_class_specifier -> 'register' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s818 = { storage_class_specifier -> 'static' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s819 = { storage_class_specifier -> 'typedef' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s820 = { struct_declaration -> specifier_qualifier_list struct_declarator_list <*> ';': ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME],
       struct_declarator_list -> struct_declarator_list <*> ',' struct_declarator: [',', ';']
     }

s821 = { struct_declaration -> specifier_qualifier_list struct_declarator_list ';' <*>: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME] }

s822 = { struct_declaration_list -> struct_declaration <*>: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME] }

s823 = { struct_declaration_list -> struct_declaration_list struct_declaration <*>: ['char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', '}', TYPE_NAME] }

s824 = { struct_declarator -> ':' constant_expression <*>: [',', ';'] }

s825 = { struct_declarator -> declarator <*>: [',', ';'],
       struct_declarator -> declarator <*> ':' constant_expression: [',', ';']
     }

s826 = { struct_declarator -> declarator ':' constant_expression <*>: [',', ';'] }

s827 = { struct_declarator_list -> struct_declarator <*>: [',', ';'] }

s828 = { struct_declarator_list -> struct_declarator_list ',' struct_declarator <*>: [',', ';'] }

s829 = { struct_or_union -> 'struct' <*>: ['{', IDENTIFIER] }

s830 = { struct_or_union -> 'union' <*>: ['{', IDENTIFIER] }

s831 = { struct_or_union_specifier -> struct_or_union <*> '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> struct_or_union <*> IDENTIFIER: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> struct_or_union <*> IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s832 = { struct_or_union_specifier -> struct_or_union <*> '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> struct_or_union <*> IDENTIFIER: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> struct_or_union <*> IDENTIFIER '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME]
     }

s833 = { struct_or_union_specifier -> struct_or_union <*> '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> struct_or_union <*> IDENTIFIER: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> struct_or_union <*> IDENTIFIER '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s834 = { struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s835 = { struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}' <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME] }

s836 = { struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}' <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s837 = { struct_or_union_specifier -> struct_or_union IDENTIFIER <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> struct_or_union IDENTIFIER <*> '{' struct_declaration_list '}': ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s838 = { struct_or_union_specifier -> struct_or_union IDENTIFIER <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME],
       struct_or_union_specifier -> struct_or_union IDENTIFIER <*> '{' struct_declaration_list '}': ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME]
     }

s839 = { struct_or_union_specifier -> struct_or_union IDENTIFIER <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME],
       struct_or_union_specifier -> struct_or_union IDENTIFIER <*> '{' struct_declaration_list '}': ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME]
     }

s840 = { struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s841 = { struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}' <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME] }

s842 = { struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}' <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s843 = { type_name -> specifier_qualifier_list abstract_declarator <*>: [')'] }

s844 = { type_qualifier -> 'const' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s845 = { type_qualifier -> 'const' <*>: ['(', ')', '*', ',', '[', 'const', 'volatile', IDENTIFIER] }

s846 = { type_qualifier -> 'const' <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME] }

s847 = { type_qualifier -> 'const' <*>: ['(', ')', '*', '[', 'const', 'volatile'] }

s848 = { type_qualifier -> 'const' <*>: ['(', ')', '*', '[', 'const', 'volatile', IDENTIFIER] }

s849 = { type_qualifier -> 'const' <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s850 = { type_qualifier -> 'const' <*>: ['(', '*', 'const', 'volatile', IDENTIFIER] }

s851 = { type_qualifier -> 'volatile' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s852 = { type_qualifier -> 'volatile' <*>: ['(', ')', '*', ',', '[', 'const', 'volatile', IDENTIFIER] }

s853 = { type_qualifier -> 'volatile' <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME] }

s854 = { type_qualifier -> 'volatile' <*>: ['(', ')', '*', '[', 'const', 'volatile'] }

s855 = { type_qualifier -> 'volatile' <*>: ['(', ')', '*', '[', 'const', 'volatile', IDENTIFIER] }

s856 = { type_qualifier -> 'volatile' <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s857 = { type_qualifier -> 'volatile' <*>: ['(', '*', 'const', 'volatile', IDENTIFIER] }

s858 = { type_qualifier_list -> type_qualifier <*>: ['(', ')', '*', ',', '[', 'const', 'volatile', IDENTIFIER] }

s859 = { type_qualifier_list -> type_qualifier <*>: ['(', ')', '*', '[', 'const', 'volatile'] }

s860 = { type_qualifier_list -> type_qualifier <*>: ['(', ')', '*', '[', 'const', 'volatile', IDENTIFIER] }

s861 = { type_qualifier_list -> type_qualifier <*>: ['(', '*', 'const', 'volatile', IDENTIFIER] }

s862 = { type_qualifier_list -> type_qualifier_list type_qualifier <*>: ['(', ')', '*', ',', '[', 'const', 'volatile', IDENTIFIER] }

s863 = { type_qualifier_list -> type_qualifier_list type_qualifier <*>: ['(', ')', '*', '[', 'const', 'volatile'] }

s864 = { type_qualifier_list -> type_qualifier_list type_qualifier <*>: ['(', ')', '*', '[', 'const', 'volatile', IDENTIFIER] }

s865 = { type_qualifier_list -> type_qualifier_list type_qualifier <*>: ['(', '*', 'const', 'volatile', IDENTIFIER] }

s866 = { type_specifier -> 'char' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s867 = { type_specifier -> 'char' <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME] }

s868 = { type_specifier -> 'char' <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s869 = { type_specifier -> 'double' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s870 = { type_specifier -> 'double' <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME] }

s871 = { type_specifier -> 'double' <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s872 = { type_specifier -> 'float' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s873 = { type_specifier -> 'float' <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME] }

s874 = { type_specifier -> 'float' <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s875 = { type_specifier -> 'int' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s876 = { type_specifier -> 'int' <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME] }

s877 = { type_specifier -> 'int' <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s878 = { type_specifier -> 'long' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s879 = { type_specifier -> 'long' <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME] }

s880 = { type_specifier -> 'long' <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s881 = { type_specifier -> 'short' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s882 = { type_specifier -> 'short' <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME] }

s883 = { type_specifier -> 'short' <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s884 = { type_specifier -> 'signed' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s885 = { type_specifier -> 'signed' <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME] }

s886 = { type_specifier -> 'signed' <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s887 = { type_specifier -> 'unsigned' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s888 = { type_specifier -> 'unsigned' <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME] }

s889 = { type_specifier -> 'unsigned' <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s890 = { type_specifier -> 'void' <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s891 = { type_specifier -> 'void' <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME] }

s892 = { type_specifier -> 'void' <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s893 = { type_specifier -> TYPE_NAME <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s894 = { type_specifier -> TYPE_NAME <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME] }

s895 = { type_specifier -> TYPE_NAME <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s896 = { type_specifier -> enum_specifier <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s897 = { type_specifier -> enum_specifier <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME] }

s898 = { type_specifier -> enum_specifier <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s899 = { type_specifier -> struct_or_union_specifier <*>: ['(', ')', '*', ',', '[', 'auto', 'char', 'const', 'double', 'enum', 'extern', 'float', 'int', 'long', 'register', 'short', 'signed', 'static', 'struct', 'typedef', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s900 = { type_specifier -> struct_or_union_specifier <*>: ['(', ')', '*', '[', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', TYPE_NAME] }

s901 = { type_specifier -> struct_or_union_specifier <*>: ['(', '*', ':', 'char', 'const', 'double', 'enum', 'float', 'int', 'long', 'short', 'signed', 'struct', 'union', 'unsigned', 'void', 'volatile', IDENTIFIER, TYPE_NAME] }

s902 = { unary_expression -> '++' unary_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'] }

s903 = { unary_expression -> '++' unary_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'] }

s904 = { unary_expression -> '++' unary_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'] }

s905 = { unary_expression -> '++' unary_expression <*>: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s906 = { unary_expression -> '++' unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s907 = { unary_expression -> '++' unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s908 = { unary_expression -> '++' unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s909 = { unary_expression -> '++' unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'] }

s910 = { unary_expression -> '++' unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s911 = { unary_expression -> '--' unary_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'] }

s912 = { unary_expression -> '--' unary_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'] }

s913 = { unary_expression -> '--' unary_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'] }

s914 = { unary_expression -> '--' unary_expression <*>: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s915 = { unary_expression -> '--' unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s916 = { unary_expression -> '--' unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s917 = { unary_expression -> '--' unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s918 = { unary_expression -> '--' unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'] }

s919 = { unary_expression -> '--' unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s920 = { unary_expression -> 'sizeof' '(' type_name <*> ')': ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'] }

s921 = { unary_expression -> 'sizeof' '(' type_name <*> ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'] }

s922 = { unary_expression -> 'sizeof' '(' type_name <*> ')': ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'] }

s923 = { unary_expression -> 'sizeof' '(' type_name <*> ')': ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s924 = { unary_expression -> 'sizeof' '(' type_name <*> ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s925 = { unary_expression -> 'sizeof' '(' type_name <*> ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s926 = { unary_expression -> 'sizeof' '(' type_name <*> ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s927 = { unary_expression -> 'sizeof' '(' type_name <*> ')': ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'] }

s928 = { unary_expression -> 'sizeof' '(' type_name <*> ')': ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s929 = { unary_expression -> 'sizeof' '(' type_name ')' <*>: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'] }

s930 = { unary_expression -> 'sizeof' '(' type_name ')' <*>: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'] }

s931 = { unary_expression -> 'sizeof' '(' type_name ')' <*>: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'] }

s932 = { unary_expression -> 'sizeof' '(' type_name ')' <*>: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s933 = { unary_expression -> 'sizeof' '(' type_name ')' <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s934 = { unary_expression -> 'sizeof' '(' type_name ')' <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s935 = { unary_expression -> 'sizeof' '(' type_name ')' <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s936 = { unary_expression -> 'sizeof' '(' type_name ')' <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'] }

s937 = { unary_expression -> 'sizeof' '(' type_name ')' <*>: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s938 = { unary_expression -> 'sizeof' unary_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'] }

s939 = { unary_expression -> 'sizeof' unary_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'] }

s940 = { unary_expression -> 'sizeof' unary_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'] }

s941 = { unary_expression -> 'sizeof' unary_expression <*>: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s942 = { unary_expression -> 'sizeof' unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s943 = { unary_expression -> 'sizeof' unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s944 = { unary_expression -> 'sizeof' unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s945 = { unary_expression -> 'sizeof' unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'] }

s946 = { unary_expression -> 'sizeof' unary_expression <*>: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s947 = { unary_expression -> unary_operator cast_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', ')', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'] }

s948 = { unary_expression -> unary_operator cast_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', ':', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', '^', '^=', '|', '|=', '||'] }

s949 = { unary_expression -> unary_operator cast_expression <*>: ['!=', '%', '%=', '&&', '&', '&=', '*', '*=', '+', '+=', ',', '-', '-=', '/', '/=', '<', '<<', '<<=', '<=', '=', '==', '>', '>=', '>>', '>>=', '?', ']', '^', '^=', '|', '|=', '||'] }

s950 = { unary_expression -> unary_operator cast_expression <*>: ['!=', '%', '&&', '&', ')', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s951 = { unary_expression -> unary_operator cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ':', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s952 = { unary_expression -> unary_operator cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', ';', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||'] }

s953 = { unary_expression -> unary_operator cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s954 = { unary_expression -> unary_operator cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', ',', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', '^', '|', '||', '}'] }

s955 = { unary_expression -> unary_operator cast_expression <*>: ['!=', '%', '&&', '&', '*', '+', '-', '/', '<', '<<', '<=', '==', '>', '>=', '>>', '?', ']', '^', '|', '||'] }

s956 = { unary_operator -> '!' <*>: ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL] }

s957 = { unary_operator -> '&' <*>: ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL] }

s958 = { unary_operator -> '*' <*>: ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL] }

s959 = { unary_operator -> '+' <*>: ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL] }

s960 = { unary_operator -> '-' <*>: ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL] }

s961 = { unary_operator -> '~' <*>: ['!', '&', '(', '*', '+', '++', '-', '--', 'sizeof', '~', CONSTANT, IDENTIFIER, STRING_LITERAL] }

Action Table:
action(s0, '(') = <shift, s46>
action(s0, CONSTANT) = <shift, s751>
action(s0, IDENTIFIER) = <shift, s761>
action(s0, STRING_LITERAL) = <shift, s771>
action(s1, $) = <accept>
action(s2, '(') = <shift, s3>
action(s2, ')') = <shift, s381>
action(s2, '*') = <shift, s603>
action(s2, '[') = <shift, s151>
action(s2, 'auto') = <shift, s815>
action(s2, 'char') = <shift, s866>
action(s2, 'const') = <shift, s844>
action(s2, 'double') = <shift, s869>
action(s2, 'enum') = <shift, s458>
action(s2, 'extern') = <shift, s816>
action(s2, 'float') = <shift, s872>
action(s2, 'int') = <shift, s875>
action(s2, 'long') = <shift, s878>
action(s2, 'register') = <shift, s817>
action(s2, 'short') = <shift, s881>
action(s2, 'signed') = <shift, s884>
action(s2, 'static') = <shift, s818>
action(s2, 'struct') = <shift, s829>
action(s2, 'typedef') = <shift, s819>
action(s2, 'union') = <shift, s830>
action(s2, 'unsigned') = <shift, s887>
action(s2, 'void') = <shift, s890>
action(s2, 'volatile') = <shift, s851>
action(s2, IDENTIFIER) = <shift, s416>
action(s2, TYPE_NAME) = <shift, s893>
action(s3, '(') = <shift, s3>
action(s3, ')') = <shift, s382>
action(s3, '*') = <shift, s603>
action(s3, '[') = <shift, s151>
action(s3, 'auto') = <shift, s815>
action(s3, 'char') = <shift, s866>
action(s3, 'const') = <shift, s844>
action(s3, 'double') = <shift, s869>
action(s3, 'enum') = <shift, s458>
action(s3, 'extern') = <shift, s816>
action(s3, 'float') = <shift, s872>
action(s3, 'int') = <shift, s875>
action(s3, 'long') = <shift, s878>
action(s3, 'register') = <shift, s817>
action(s3, 'short') = <shift, s881>
action(s3, 'signed') = <shift, s884>
action(s3, 'static') = <shift, s818>
action(s3, 'struct') = <shift, s829>
action(s3, 'typedef') = <shift, s819>
action(s3, 'union') = <shift, s830>
action(s3, 'unsigned') = <shift, s887>
action(s3, 'void') = <shift, s890>
action(s3, 'volatile') = <shift, s851>
action(s3, IDENTIFIER) = <shift, s416>
action(s3, TYPE_NAME) = <shift, s893>
action(s4, '(') = <shift, s4>
action(s4, ')') = <shift, s382>
action(s4, '*') = <shift, s601>
action(s4, '[') = <shift, s151>
action(s4, 'auto') = <shift, s815>
action(s4, 'char') = <shift, s866>
action(s4, 'const') = <shift, s844>
action(s4, 'double') = <shift, s869>
action(s4, 'enum') = <shift, s458>
action(s4, 'extern') = <shift, s816>
action(s4, 'float') = <shift, s872>
action(s4, 'int') = <shift, s875>
action(s4, 'long') = <shift, s878>
action(s4, 'register') = <shift, s817>
action(s4, 'short') = <shift, s881>
action(s4, 'signed') = <shift, s884>
action(s4, 'static') = <shift, s818>
action(s4, 'struct') = <shift, s829>
action(s4, 'typedef') = <shift, s819>
action(s4, 'union') = <shift, s830>
action(s4, 'unsigned') = <shift, s887>
action(s4, 'void') = <shift, s890>
action(s4, 'volatile') = <shift, s851>
action(s4, TYPE_NAME) = <shift, s893>
action(s5, '(') = <shift, s4>
action(s5, ')') = <reduce, type_name -> specifier_qualifier_list>
action(s5, '*') = <shift, s601>
action(s5, '[') = <shift, s151>
action(s6, '(') = <shift, s2>
action(s6, ')') = <reduce, parameter_declaration -> declaration_specifiers>
action(s6, '*') = <shift, s599>
action(s6, ',') = <reduce, parameter_declaration -> declaration_specifiers>
action(s6, '[') = <shift, s150>
action(s6, IDENTIFIER) = <shift, s415>
action(s7, '(') = <shift, s361>
action(s7, ')') = <reduce, abstract_declarator -> direct_abstract_declarator>
action(s7, '[') = <shift, s153>
action(s8, '(') = <shift, s360>
action(s8, ')') = <reduce, abstract_declarator -> direct_abstract_declarator>
action(s8, ',') = <reduce, abstract_declarator -> direct_abstract_declarator>
action(s8, '[') = <shift, s152>
action(s9, '(') = <shift, s3>
action(s9, ')') = <reduce, abstract_declarator -> pointer>
action(s9, '[') = <shift, s151>
action(s9, IDENTIFIER) = <shift, s416>
action(s10, '(') = <shift, s4>
action(s10, ')') = <reduce, abstract_declarator -> pointer>
action(s10, '[') = <shift, s151>
action(s11, '(') = <shift, s2>
action(s11, ')') = <reduce, abstract_declarator -> pointer>
action(s11, ',') = <reduce, abstract_declarator -> pointer>
action(s11, '[') = <shift, s150>
action(s11, IDENTIFIER) = <shift, s415>
action(s12, '(') = <shift, s361>
action(s12, ')') = <reduce, abstract_declarator -> pointer direct_abstract_declarator>
action(s12, '[') = <shift, s153>
action(s13, '(') = <shift, s360>
action(s13, ')') = <reduce, abstract_declarator -> pointer direct_abstract_declarator>
action(s13, ',') = <reduce, abstract_declarator -> pointer direct_abstract_declarator>
action(s13, '[') = <shift, s152>
action(s14, '!') = <shift, s956>
action(s14, '&') = <shift, s957>
action(s14, '(') = <shift, s28>
action(s14, ')') = <shift, s651>
action(s14, '*') = <shift, s958>
action(s14, '+') = <shift, s959>
action(s14, '++') = <shift, s615>
action(s14, '-') = <shift, s960>
action(s14, '--') = <shift, s616>
action(s14, 'sizeof') = <shift, s617>
action(s14, '~') = <shift, s961>
action(s14, CONSTANT) = <shift, s752>
action(s14, IDENTIFIER) = <shift, s762>
action(s14, STRING_LITERAL) = <shift, s772>
action(s15, '!') = <shift, s956>
action(s15, '&') = <shift, s957>
action(s15, '(') = <shift, s28>
action(s15, ')') = <shift, s652>
action(s15, '*') = <shift, s958>
action(s15, '+') = <shift, s959>
action(s15, '++') = <shift, s615>
action(s15, '-') = <shift, s960>
action(s15, '--') = <shift, s616>
action(s15, 'sizeof') = <shift, s617>
action(s15, '~') = <shift, s961>
action(s15, CONSTANT) = <shift, s752>
action(s15, IDENTIFIER) = <shift, s762>
action(s15, STRING_LITERAL) = <shift, s772>
action(s16, '!') = <shift, s956>
action(s16, '&') = <shift, s957>
action(s16, '(') = <shift, s28>
action(s16, ')') = <shift, s653>
action(s16, '*') = <shift, s958>
action(s16, '+') = <shift, s959>
action(s16, '++') = <shift, s615>
action(s16, '-') = <shift, s960>
action(s16, '--') = <shift, s616>
action(s16, 'sizeof') = <shift, s617>
action(s16, '~') = <shift, s961>
action(s16, CONSTANT) = <shift, s752>
action(s16, IDENTIFIER) = <shift, s762>
action(s16, STRING_LITERAL) = <shift, s772>
action(s17, '!') = <shift, s956>
action(s17, '&') = <shift, s957>
action(s17, '(') = <shift, s28>
action(s17, ')') = <shift, s654>
action(s17, '*') = <shift, s958>
action(s17, '+') = <shift, s959>
action(s17, '++') = <shift, s615>
action(s17, '-') = <shift, s960>
action(s17, '--') = <shift, s616>
action(s17, 'sizeof') = <shift, s617>
action(s17, '~') = <shift, s961>
action(s17, CONSTANT) = <shift, s752>
action(s17, IDENTIFIER) = <shift, s762>
action(s17, STRING_LITERAL) = <shift, s772>
action(s18, '!') = <shift, s956>
action(s18, '&') = <shift, s957>
action(s18, '(') = <shift, s28>
action(s18, ')') = <shift, s655>
action(s18, '*') = <shift, s958>
action(s18, '+') = <shift, s959>
action(s18, '++') = <shift, s615>
action(s18, '-') = <shift, s960>
action(s18, '--') = <shift, s616>
action(s18, 'sizeof') = <shift, s617>
action(s18, '~') = <shift, s961>
action(s18, CONSTANT) = <shift, s752>
action(s18, IDENTIFIER) = <shift, s762>
action(s18, STRING_LITERAL) = <shift, s772>
action(s19, '!') = <shift, s956>
action(s19, '&') = <shift, s957>
action(s19, '(') = <shift, s28>
action(s19, ')') = <shift, s656>
action(s19, '*') = <shift, s958>
action(s19, '+') = <shift, s959>
action(s19, '++') = <shift, s615>
action(s19, '-') = <shift, s960>
action(s19, '--') = <shift, s616>
action(s19, 'sizeof') = <shift, s617>
action(s19, '~') = <shift, s961>
action(s19, CONSTANT) = <shift, s752>
action(s19, IDENTIFIER) = <shift, s762>
action(s19, STRING_LITERAL) = <shift, s772>
action(s20, '!') = <shift, s956>
action(s20, '&') = <shift, s957>
action(s20, '(') = <shift, s28>
action(s20, ')') = <shift, s657>
action(s20, '*') = <shift, s958>
action(s20, '+') = <shift, s959>
action(s20, '++') = <shift, s615>
action(s20, '-') = <shift, s960>
action(s20, '--') = <shift, s616>
action(s20, 'sizeof') = <shift, s617>
action(s20, '~') = <shift, s961>
action(s20, CONSTANT) = <shift, s752>
action(s20, IDENTIFIER) = <shift, s762>
action(s20, STRING_LITERAL) = <shift, s772>
action(s21, '!') = <shift, s956>
action(s21, '&') = <shift, s957>
action(s21, '(') = <shift, s28>
action(s21, ')') = <shift, s658>
action(s21, '*') = <shift, s958>
action(s21, '+') = <shift, s959>
action(s21, '++') = <shift, s615>
action(s21, '-') = <shift, s960>
action(s21, '--') = <shift, s616>
action(s21, 'sizeof') = <shift, s617>
action(s21, '~') = <shift, s961>
action(s21, CONSTANT) = <shift, s752>
action(s21, IDENTIFIER) = <shift, s762>
action(s21, STRING_LITERAL) = <shift, s772>
action(s22, '!') = <shift, s956>
action(s22, '&') = <shift, s957>
action(s22, '(') = <shift, s28>
action(s22, ')') = <shift, s659>
action(s22, '*') = <shift, s958>
action(s22, '+') = <shift, s959>
action(s22, '++') = <shift, s615>
action(s22, '-') = <shift, s960>
action(s22, '--') = <shift, s616>
action(s22, 'sizeof') = <shift, s617>
action(s22, '~') = <shift, s961>
action(s22, CONSTANT) = <shift, s752>
action(s22, IDENTIFIER) = <shift, s762>
action(s22, STRING_LITERAL) = <shift, s772>
action(s23, '!') = <shift, s956>
action(s23, '&') = <shift, s957>
action(s23, '(') = <shift, s28>
action(s23, '*') = <shift, s958>
action(s23, '+') = <shift, s959>
action(s23, '++') = <shift, s615>
action(s23, '-') = <shift, s960>
action(s23, '--') = <shift, s616>
action(s23, 'sizeof') = <shift, s617>
action(s23, '~') = <shift, s961>
action(s23, CONSTANT) = <shift, s752>
action(s23, IDENTIFIER) = <shift, s762>
action(s23, STRING_LITERAL) = <shift, s772>
action(s24, '!') = <shift, s956>
action(s24, '&') = <shift, s957>
action(s24, '(') = <shift, s28>
action(s24, '*') = <shift, s958>
action(s24, '+') = <shift, s959>
action(s24, '++') = <shift, s615>
action(s24, '-') = <shift, s960>
action(s24, '--') = <shift, s616>
action(s24, 'sizeof') = <shift, s617>
action(s24, '~') = <shift, s961>
action(s24, CONSTANT) = <shift, s752>
action(s24, IDENTIFIER) = <shift, s762>
action(s24, STRING_LITERAL) = <shift, s772>
action(s25, '!') = <shift, s956>
action(s25, '&') = <shift, s957>
action(s25, '(') = <shift, s28>
action(s25, '*') = <shift, s958>
action(s25, '+') = <shift, s959>
action(s25, '++') = <shift, s615>
action(s25, '-') = <shift, s960>
action(s25, '--') = <shift, s616>
action(s25, 'char') = <shift, s867>
action(s25, 'const') = <shift, s846>
action(s25, 'double') = <shift, s870>
action(s25, 'enum') = <shift, s459>
action(s25, 'float') = <shift, s873>
action(s25, 'int') = <shift, s876>
action(s25, 'long') = <shift, s879>
action(s25, 'short') = <shift, s882>
action(s25, 'signed') = <shift, s885>
action(s25, 'sizeof') = <shift, s617>
action(s25, 'struct') = <shift, s829>
action(s25, 'union') = <shift, s830>
action(s25, 'unsigned') = <shift, s888>
action(s25, 'void') = <shift, s891>
action(s25, 'volatile') = <shift, s853>
action(s25, '~') = <shift, s961>
action(s25, CONSTANT) = <shift, s752>
action(s25, IDENTIFIER) = <shift, s762>
action(s25, STRING_LITERAL) = <shift, s772>
action(s25, TYPE_NAME) = <shift, s894>
action(s26, '!') = <shift, s956>
action(s26, '&') = <shift, s957>
action(s26, '(') = <shift, s28>
action(s26, '*') = <shift, s958>
action(s26, '+') = <shift, s959>
action(s26, '++') = <shift, s615>
action(s26, '-') = <shift, s960>
action(s26, '--') = <shift, s616>
action(s26, 'char') = <shift, s867>
action(s26, 'const') = <shift, s846>
action(s26, 'double') = <shift, s870>
action(s26, 'enum') = <shift, s459>
action(s26, 'float') = <shift, s873>
action(s26, 'int') = <shift, s876>
action(s26, 'long') = <shift, s879>
action(s26, 'short') = <shift, s882>
action(s26, 'signed') = <shift, s885>
action(s26, 'sizeof') = <shift, s617>
action(s26, 'struct') = <shift, s829>
action(s26, 'union') = <shift, s830>
action(s26, 'unsigned') = <shift, s888>
action(s26, 'void') = <shift, s891>
action(s26, 'volatile') = <shift, s853>
action(s26, '~') = <shift, s961>
action(s26, CONSTANT) = <shift, s752>
action(s26, IDENTIFIER) = <shift, s762>
action(s26, STRING_LITERAL) = <shift, s772>
action(s26, TYPE_NAME) = <shift, s894>
action(s27, '!') = <shift, s956>
action(s27, '&') = <shift, s957>
action(s27, '(') = <shift, s28>
action(s27, '*') = <shift, s958>
action(s27, '+') = <shift, s959>
action(s27, '++') = <shift, s615>
action(s27, '-') = <shift, s960>
action(s27, '--') = <shift, s616>
action(s27, 'char') = <shift, s867>
action(s27, 'const') = <shift, s846>
action(s27, 'double') = <shift, s870>
action(s27, 'enum') = <shift, s459>
action(s27, 'float') = <shift, s873>
action(s27, 'int') = <shift, s876>
action(s27, 'long') = <shift, s879>
action(s27, 'short') = <shift, s882>
action(s27, 'signed') = <shift, s885>
action(s27, 'sizeof') = <shift, s617>
action(s27, 'struct') = <shift, s829>
action(s27, 'union') = <shift, s830>
action(s27, 'unsigned') = <shift, s888>
action(s27, 'void') = <shift, s891>
action(s27, 'volatile') = <shift, s853>
action(s27, '~') = <shift, s961>
action(s27, CONSTANT) = <shift, s752>
action(s27, IDENTIFIER) = <shift, s762>
action(s27, STRING_LITERAL) = <shift, s772>
action(s27, TYPE_NAME) = <shift, s894>
action(s28, '!') = <shift, s956>
action(s28, '&') = <shift, s957>
action(s28, '(') = <shift, s28>
action(s28, '*') = <shift, s958>
action(s28, '+') = <shift, s959>
action(s28, '++') = <shift, s615>
action(s28, '-') = <shift, s960>
action(s28, '--') = <shift, s616>
action(s28, 'char') = <shift, s867>
action(s28, 'const') = <shift, s846>
action(s28, 'double') = <shift, s870>
action(s28, 'enum') = <shift, s459>
action(s28, 'float') = <shift, s873>
action(s28, 'int') = <shift, s876>
action(s28, 'long') = <shift, s879>
action(s28, 'short') = <shift, s882>
action(s28, 'signed') = <shift, s885>
action(s28, 'sizeof') = <shift, s617>
action(s28, 'struct') = <shift, s829>
action(s28, 'union') = <shift, s830>
action(s28, 'unsigned') = <shift, s888>
action(s28, 'void') = <shift, s891>
action(s28, 'volatile') = <shift, s853>
action(s28, '~') = <shift, s961>
action(s28, CONSTANT) = <shift, s752>
action(s28, IDENTIFIER) = <shift, s762>
action(s28, STRING_LITERAL) = <shift, s772>
action(s28, TYPE_NAME) = <shift, s894>
action(s29, '!') = <shift, s956>
action(s29, '&') = <shift, s957>
action(s29, '(') = <shift, s28>
action(s29, '*') = <shift, s958>
action(s29, '+') = <shift, s959>
action(s29, '++') = <shift, s615>
action(s29, '-') = <shift, s960>
action(s29, '--') = <shift, s616>
action(s29, 'char') = <shift, s867>
action(s29, 'const') = <shift, s846>
action(s29, 'double') = <shift, s870>
action(s29, 'enum') = <shift, s459>
action(s29, 'float') = <shift, s873>
action(s29, 'int') = <shift, s876>
action(s29, 'long') = <shift, s879>
action(s29, 'short') = <shift, s882>
action(s29, 'signed') = <shift, s885>
action(s29, 'sizeof') = <shift, s617>
action(s29, 'struct') = <shift, s829>
action(s29, 'union') = <shift, s830>
action(s29, 'unsigned') = <shift, s888>
action(s29, 'void') = <shift, s891>
action(s29, 'volatile') = <shift, s853>
action(s29, '~') = <shift, s961>
action(s29, CONSTANT) = <shift, s752>
action(s29, IDENTIFIER) = <shift, s762>
action(s29, STRING_LITERAL) = <shift, s772>
action(s29, TYPE_NAME) = <shift, s894>
action(s30, '!') = <shift, s956>
action(s30, '&') = <shift, s957>
action(s30, '(') = <shift, s28>
action(s30, '*') = <shift, s958>
action(s30, '+') = <shift, s959>
action(s30, '++') = <shift, s615>
action(s30, '-') = <shift, s960>
action(s30, '--') = <shift, s616>
action(s30, 'char') = <shift, s867>
action(s30, 'const') = <shift, s846>
action(s30, 'double') = <shift, s870>
action(s30, 'enum') = <shift, s459>
action(s30, 'float') = <shift, s873>
action(s30, 'int') = <shift, s876>
action(s30, 'long') = <shift, s879>
action(s30, 'short') = <shift, s882>
action(s30, 'signed') = <shift, s885>
action(s30, 'sizeof') = <shift, s617>
action(s30, 'struct') = <shift, s829>
action(s30, 'union') = <shift, s830>
action(s30, 'unsigned') = <shift, s888>
action(s30, 'void') = <shift, s891>
action(s30, 'volatile') = <shift, s853>
action(s30, '~') = <shift, s961>
action(s30, CONSTANT) = <shift, s752>
action(s30, IDENTIFIER) = <shift, s762>
action(s30, STRING_LITERAL) = <shift, s772>
action(s30, TYPE_NAME) = <shift, s894>
action(s31, '!') = <shift, s956>
action(s31, '&') = <shift, s957>
action(s31, '(') = <shift, s28>
action(s31, '*') = <shift, s958>
action(s31, '+') = <shift, s959>
action(s31, '++') = <shift, s615>
action(s31, '-') = <shift, s960>
action(s31, '--') = <shift, s616>
action(s31, 'char') = <shift, s867>
action(s31, 'const') = <shift, s846>
action(s31, 'double') = <shift, s870>
action(s31, 'enum') = <shift, s459>
action(s31, 'float') = <shift, s873>
action(s31, 'int') = <shift, s876>
action(s31, 'long') = <shift, s879>
action(s31, 'short') = <shift, s882>
action(s31, 'signed') = <shift, s885>
action(s31, 'sizeof') = <shift, s617>
action(s31, 'struct') = <shift, s829>
action(s31, 'union') = <shift, s830>
action(s31, 'unsigned') = <shift, s888>
action(s31, 'void') = <shift, s891>
action(s31, 'volatile') = <shift, s853>
action(s31, '~') = <shift, s961>
action(s31, CONSTANT) = <shift, s752>
action(s31, IDENTIFIER) = <shift, s762>
action(s31, STRING_LITERAL) = <shift, s772>
action(s31, TYPE_NAME) = <shift, s894>
action(s32, '!') = <shift, s956>
action(s32, '&') = <shift, s957>
action(s32, '(') = <shift, s28>
action(s32, '*') = <shift, s958>
action(s32, '+') = <shift, s959>
action(s32, '++') = <shift, s615>
action(s32, '-') = <shift, s960>
action(s32, '--') = <shift, s616>
action(s32, 'char') = <shift, s867>
action(s32, 'const') = <shift, s846>
action(s32, 'double') = <shift, s870>
action(s32, 'enum') = <shift, s459>
action(s32, 'float') = <shift, s873>
action(s32, 'int') = <shift, s876>
action(s32, 'long') = <shift, s879>
action(s32, 'short') = <shift, s882>
action(s32, 'signed') = <shift, s885>
action(s32, 'sizeof') = <shift, s617>
action(s32, 'struct') = <shift, s829>
action(s32, 'union') = <shift, s830>
action(s32, 'unsigned') = <shift, s888>
action(s32, 'void') = <shift, s891>
action(s32, 'volatile') = <shift, s853>
action(s32, '~') = <shift, s961>
action(s32, CONSTANT) = <shift, s752>
action(s32, IDENTIFIER) = <shift, s762>
action(s32, STRING_LITERAL) = <shift, s772>
action(s32, TYPE_NAME) = <shift, s894>
action(s33, '!') = <shift, s956>
action(s33, '&') = <shift, s957>
action(s33, '(') = <shift, s28>
action(s33, '*') = <shift, s958>
action(s33, '+') = <shift, s959>
action(s33, '++') = <shift, s615>
action(s33, '-') = <shift, s960>
action(s33, '--') = <shift, s616>
action(s33, 'char') = <shift, s867>
action(s33, 'const') = <shift, s846>
action(s33, 'double') = <shift, s870>
action(s33, 'enum') = <shift, s459>
action(s33, 'float') = <shift, s873>
action(s33, 'int') = <shift, s876>
action(s33, 'long') = <shift, s879>
action(s33, 'short') = <shift, s882>
action(s33, 'signed') = <shift, s885>
action(s33, 'sizeof') = <shift, s617>
action(s33, 'struct') = <shift, s829>
action(s33, 'union') = <shift, s830>
action(s33, 'unsigned') = <shift, s888>
action(s33, 'void') = <shift, s891>
action(s33, 'volatile') = <shift, s853>
action(s33, '~') = <shift, s961>
action(s33, CONSTANT) = <shift, s752>
action(s33, IDENTIFIER) = <shift, s762>
action(s33, STRING_LITERAL) = <shift, s772>
action(s33, TYPE_NAME) = <shift, s894>
action(s34, '!') = <shift, s956>
action(s34, '&') = <shift, s957>
action(s34, '(') = <shift, s28>
action(s34, '*') = <shift, s958>
action(s34, '+') = <shift, s959>
action(s34, '++') = <shift, s615>
action(s34, '-') = <shift, s960>
action(s34, '--') = <shift, s616>
action(s34, 'char') = <shift, s867>
action(s34, 'const') = <shift, s846>
action(s34, 'double') = <shift, s870>
action(s34, 'enum') = <shift, s459>
action(s34, 'float') = <shift, s873>
action(s34, 'int') = <shift, s876>
action(s34, 'long') = <shift, s879>
action(s34, 'short') = <shift, s882>
action(s34, 'signed') = <shift, s885>
action(s34, 'sizeof') = <shift, s617>
action(s34, 'struct') = <shift, s829>
action(s34, 'union') = <shift, s830>
action(s34, 'unsigned') = <shift, s888>
action(s34, 'void') = <shift, s891>
action(s34, 'volatile') = <shift, s853>
action(s34, '~') = <shift, s961>
action(s34, CONSTANT) = <shift, s752>
action(s34, IDENTIFIER) = <shift, s762>
action(s34, STRING_LITERAL) = <shift, s772>
action(s34, TYPE_NAME) = <shift, s894>
action(s35, '!') = <shift, s956>
action(s35, '&') = <shift, s957>
action(s35, '(') = <shift, s28>
action(s35, '*') = <shift, s958>
action(s35, '+') = <shift, s959>
action(s35, '++') = <shift, s615>
action(s35, '-') = <shift, s960>
action(s35, '--') = <shift, s616>
action(s35, 'char') = <shift, s867>
action(s35, 'const') = <shift, s846>
action(s35, 'double') = <shift, s870>
action(s35, 'enum') = <shift, s459>
action(s35, 'float') = <shift, s873>
action(s35, 'int') = <shift, s876>
action(s35, 'long') = <shift, s879>
action(s35, 'short') = <shift, s882>
action(s35, 'signed') = <shift, s885>
action(s35, 'sizeof') = <shift, s617>
action(s35, 'struct') = <shift, s829>
action(s35, 'union') = <shift, s830>
action(s35, 'unsigned') = <shift, s888>
action(s35, 'void') = <shift, s891>
action(s35, 'volatile') = <shift, s853>
action(s35, '~') = <shift, s961>
action(s35, CONSTANT) = <shift, s752>
action(s35, IDENTIFIER) = <shift, s762>
action(s35, STRING_LITERAL) = <shift, s772>
action(s35, TYPE_NAME) = <shift, s894>
action(s36, '!') = <shift, s956>
action(s36, '&') = <shift, s957>
action(s36, '(') = <shift, s28>
action(s36, '*') = <shift, s958>
action(s36, '+') = <shift, s959>
action(s36, '++') = <shift, s615>
action(s36, '-') = <shift, s960>
action(s36, '--') = <shift, s616>
action(s36, 'char') = <shift, s867>
action(s36, 'const') = <shift, s846>
action(s36, 'double') = <shift, s870>
action(s36, 'enum') = <shift, s459>
action(s36, 'float') = <shift, s873>
action(s36, 'int') = <shift, s876>
action(s36, 'long') = <shift, s879>
action(s36, 'short') = <shift, s882>
action(s36, 'signed') = <shift, s885>
action(s36, 'sizeof') = <shift, s617>
action(s36, 'struct') = <shift, s829>
action(s36, 'union') = <shift, s830>
action(s36, 'unsigned') = <shift, s888>
action(s36, 'void') = <shift, s891>
action(s36, 'volatile') = <shift, s853>
action(s36, '~') = <shift, s961>
action(s36, CONSTANT) = <shift, s752>
action(s36, IDENTIFIER) = <shift, s762>
action(s36, STRING_LITERAL) = <shift, s772>
action(s36, TYPE_NAME) = <shift, s894>
action(s37, '!') = <shift, s956>
action(s37, '&') = <shift, s957>
action(s37, '(') = <shift, s28>
action(s37, '*') = <shift, s958>
action(s37, '+') = <shift, s959>
action(s37, '++') = <shift, s615>
action(s37, '-') = <shift, s960>
action(s37, '--') = <shift, s616>
action(s37, 'char') = <shift, s867>
action(s37, 'const') = <shift, s846>
action(s37, 'double') = <shift, s870>
action(s37, 'enum') = <shift, s459>
action(s37, 'float') = <shift, s873>
action(s37, 'int') = <shift, s876>
action(s37, 'long') = <shift, s879>
action(s37, 'short') = <shift, s882>
action(s37, 'signed') = <shift, s885>
action(s37, 'sizeof') = <shift, s617>
action(s37, 'struct') = <shift, s829>
action(s37, 'union') = <shift, s830>
action(s37, 'unsigned') = <shift, s888>
action(s37, 'void') = <shift, s891>
action(s37, 'volatile') = <shift, s853>
action(s37, '~') = <shift, s961>
action(s37, CONSTANT) = <shift, s752>
action(s37, IDENTIFIER) = <shift, s762>
action(s37, STRING_LITERAL) = <shift, s772>
action(s37, TYPE_NAME) = <shift, s894>
action(s38, '!') = <shift, s956>
action(s38, '&') = <shift, s957>
action(s38, '(') = <shift, s28>
action(s38, '*') = <shift, s958>
action(s38, '+') = <shift, s959>
action(s38, '++') = <shift, s615>
action(s38, '-') = <shift, s960>
action(s38, '--') = <shift, s616>
action(s38, 'char') = <shift, s867>
action(s38, 'const') = <shift, s846>
action(s38, 'double') = <shift, s870>
action(s38, 'enum') = <shift, s459>
action(s38, 'float') = <shift, s873>
action(s38, 'int') = <shift, s876>
action(s38, 'long') = <shift, s879>
action(s38, 'short') = <shift, s882>
action(s38, 'signed') = <shift, s885>
action(s38, 'sizeof') = <shift, s617>
action(s38, 'struct') = <shift, s829>
action(s38, 'union') = <shift, s830>
action(s38, 'unsigned') = <shift, s888>
action(s38, 'void') = <shift, s891>
action(s38, 'volatile') = <shift, s853>
action(s38, '~') = <shift, s961>
action(s38, CONSTANT) = <shift, s752>
action(s38, IDENTIFIER) = <shift, s762>
action(s38, STRING_LITERAL) = <shift, s772>
action(s38, TYPE_NAME) = <shift, s894>
action(s39, '!') = <shift, s956>
action(s39, '&') = <shift, s957>
action(s39, '(') = <shift, s28>
action(s39, '*') = <shift, s958>
action(s39, '+') = <shift, s959>
action(s39, '++') = <shift, s615>
action(s39, '-') = <shift, s960>
action(s39, '--') = <shift, s616>
action(s39, 'char') = <shift, s867>
action(s39, 'const') = <shift, s846>
action(s39, 'double') = <shift, s870>
action(s39, 'enum') = <shift, s459>
action(s39, 'float') = <shift, s873>
action(s39, 'int') = <shift, s876>
action(s39, 'long') = <shift, s879>
action(s39, 'short') = <shift, s882>
action(s39, 'signed') = <shift, s885>
action(s39, 'sizeof') = <shift, s617>
action(s39, 'struct') = <shift, s829>
action(s39, 'union') = <shift, s830>
action(s39, 'unsigned') = <shift, s888>
action(s39, 'void') = <shift, s891>
action(s39, 'volatile') = <shift, s853>
action(s39, '~') = <shift, s961>
action(s39, CONSTANT) = <shift, s752>
action(s39, IDENTIFIER) = <shift, s762>
action(s39, STRING_LITERAL) = <shift, s772>
action(s39, TYPE_NAME) = <shift, s894>
action(s40, '!') = <shift, s956>
action(s40, '&') = <shift, s957>
action(s40, '(') = <shift, s28>
action(s40, '*') = <shift, s958>
action(s40, '+') = <shift, s959>
action(s40, '++') = <shift, s615>
action(s40, '-') = <shift, s960>
action(s40, '--') = <shift, s616>
action(s40, 'char') = <shift, s867>
action(s40, 'const') = <shift, s846>
action(s40, 'double') = <shift, s870>
action(s40, 'enum') = <shift, s459>
action(s40, 'float') = <shift, s873>
action(s40, 'int') = <shift, s876>
action(s40, 'long') = <shift, s879>
action(s40, 'short') = <shift, s882>
action(s40, 'signed') = <shift, s885>
action(s40, 'sizeof') = <shift, s617>
action(s40, 'struct') = <shift, s829>
action(s40, 'union') = <shift, s830>
action(s40, 'unsigned') = <shift, s888>
action(s40, 'void') = <shift, s891>
action(s40, 'volatile') = <shift, s853>
action(s40, '~') = <shift, s961>
action(s40, CONSTANT) = <shift, s752>
action(s40, IDENTIFIER) = <shift, s762>
action(s40, STRING_LITERAL) = <shift, s772>
action(s40, TYPE_NAME) = <shift, s894>
action(s41, '!') = <shift, s956>
action(s41, '&') = <shift, s957>
action(s41, '(') = <shift, s28>
action(s41, '*') = <shift, s958>
action(s41, '+') = <shift, s959>
action(s41, '++') = <shift, s615>
action(s41, '-') = <shift, s960>
action(s41, '--') = <shift, s616>
action(s41, 'char') = <shift, s867>
action(s41, 'const') = <shift, s846>
action(s41, 'double') = <shift, s870>
action(s41, 'enum') = <shift, s459>
action(s41, 'float') = <shift, s873>
action(s41, 'int') = <shift, s876>
action(s41, 'long') = <shift, s879>
action(s41, 'short') = <shift, s882>
action(s41, 'signed') = <shift, s885>
action(s41, 'sizeof') = <shift, s617>
action(s41, 'struct') = <shift, s829>
action(s41, 'union') = <shift, s830>
action(s41, 'unsigned') = <shift, s888>
action(s41, 'void') = <shift, s891>
action(s41, 'volatile') = <shift, s853>
action(s41, '~') = <shift, s961>
action(s41, CONSTANT) = <shift, s752>
action(s41, IDENTIFIER) = <shift, s762>
action(s41, STRING_LITERAL) = <shift, s772>
action(s41, TYPE_NAME) = <shift, s894>
action(s42, '!') = <shift, s956>
action(s42, '&') = <shift, s957>
action(s42, '(') = <shift, s28>
action(s42, '*') = <shift, s958>
action(s42, '+') = <shift, s959>
action(s42, '++') = <shift, s615>
action(s42, '-') = <shift, s960>
action(s42, '--') = <shift, s616>
action(s42, 'char') = <shift, s867>
action(s42, 'const') = <shift, s846>
action(s42, 'double') = <shift, s870>
action(s42, 'enum') = <shift, s459>
action(s42, 'float') = <shift, s873>
action(s42, 'int') = <shift, s876>
action(s42, 'long') = <shift, s879>
action(s42, 'short') = <shift, s882>
action(s42, 'signed') = <shift, s885>
action(s42, 'sizeof') = <shift, s617>
action(s42, 'struct') = <shift, s829>
action(s42, 'union') = <shift, s830>
action(s42, 'unsigned') = <shift, s888>
action(s42, 'void') = <shift, s891>
action(s42, 'volatile') = <shift, s853>
action(s42, '~') = <shift, s961>
action(s42, CONSTANT) = <shift, s752>
action(s42, IDENTIFIER) = <shift, s762>
action(s42, STRING_LITERAL) = <shift, s772>
action(s42, TYPE_NAME) = <shift, s894>
action(s43, '!') = <shift, s956>
action(s43, '&') = <shift, s957>
action(s43, '(') = <shift, s28>
action(s43, '*') = <shift, s958>
action(s43, '+') = <shift, s959>
action(s43, '++') = <shift, s615>
action(s43, '-') = <shift, s960>
action(s43, '--') = <shift, s616>
action(s43, 'char') = <shift, s867>
action(s43, 'const') = <shift, s846>
action(s43, 'double') = <shift, s870>
action(s43, 'enum') = <shift, s459>
action(s43, 'float') = <shift, s873>
action(s43, 'int') = <shift, s876>
action(s43, 'long') = <shift, s879>
action(s43, 'short') = <shift, s882>
action(s43, 'signed') = <shift, s885>
action(s43, 'sizeof') = <shift, s617>
action(s43, 'struct') = <shift, s829>
action(s43, 'union') = <shift, s830>
action(s43, 'unsigned') = <shift, s888>
action(s43, 'void') = <shift, s891>
action(s43, 'volatile') = <shift, s853>
action(s43, '~') = <shift, s961>
action(s43, CONSTANT) = <shift, s752>
action(s43, IDENTIFIER) = <shift, s762>
action(s43, STRING_LITERAL) = <shift, s772>
action(s43, TYPE_NAME) = <shift, s894>
action(s44, '!') = <shift, s956>
action(s44, '&') = <shift, s957>
action(s44, '(') = <shift, s28>
action(s44, '*') = <shift, s958>
action(s44, '+') = <shift, s959>
action(s44, '++') = <shift, s615>
action(s44, '-') = <shift, s960>
action(s44, '--') = <shift, s616>
action(s44, 'char') = <shift, s867>
action(s44, 'const') = <shift, s846>
action(s44, 'double') = <shift, s870>
action(s44, 'enum') = <shift, s459>
action(s44, 'float') = <shift, s873>
action(s44, 'int') = <shift, s876>
action(s44, 'long') = <shift, s879>
action(s44, 'short') = <shift, s882>
action(s44, 'signed') = <shift, s885>
action(s44, 'sizeof') = <shift, s617>
action(s44, 'struct') = <shift, s829>
action(s44, 'union') = <shift, s830>
action(s44, 'unsigned') = <shift, s888>
action(s44, 'void') = <shift, s891>
action(s44, 'volatile') = <shift, s853>
action(s44, '~') = <shift, s961>
action(s44, CONSTANT) = <shift, s752>
action(s44, IDENTIFIER) = <shift, s762>
action(s44, STRING_LITERAL) = <shift, s772>
action(s44, TYPE_NAME) = <shift, s894>
action(s45, '!') = <shift, s956>
action(s45, '&') = <shift, s957>
action(s45, '(') = <shift, s28>
action(s45, '*') = <shift, s958>
action(s45, '+') = <shift, s959>
action(s45, '++') = <shift, s615>
action(s45, '-') = <shift, s960>
action(s45, '--') = <shift, s616>
action(s45, 'char') = <shift, s867>
action(s45, 'const') = <shift, s846>
action(s45, 'double') = <shift, s870>
action(s45, 'enum') = <shift, s459>
action(s45, 'float') = <shift, s873>
action(s45, 'int') = <shift, s876>
action(s45, 'long') = <shift, s879>
action(s45, 'short') = <shift, s882>
action(s45, 'signed') = <shift, s885>
action(s45, 'sizeof') = <shift, s617>
action(s45, 'struct') = <shift, s829>
action(s45, 'union') = <shift, s830>
action(s45, 'unsigned') = <shift, s888>
action(s45, 'void') = <shift, s891>
action(s45, 'volatile') = <shift, s853>
action(s45, '~') = <shift, s961>
action(s45, CONSTANT) = <shift, s752>
action(s45, IDENTIFIER) = <shift, s762>
action(s45, STRING_LITERAL) = <shift, s772>
action(s45, TYPE_NAME) = <shift, s894>
action(s46, '!') = <shift, s956>
action(s46, '&') = <shift, s957>
action(s46, '(') = <shift, s28>
action(s46, '*') = <shift, s958>
action(s46, '+') = <shift, s959>
action(s46, '++') = <shift, s615>
action(s46, '-') = <shift, s960>
action(s46, '--') = <shift, s616>
action(s46, 'sizeof') = <shift, s617>
action(s46, '~') = <shift, s961>
action(s46, CONSTANT) = <shift, s752>
action(s46, IDENTIFIER) = <shift, s762>
action(s46, STRING_LITERAL) = <shift, s772>
action(s47, '!') = <shift, s956>
action(s47, '&') = <shift, s957>
action(s47, '(') = <shift, s28>
action(s47, '*') = <shift, s958>
action(s47, '+') = <shift, s959>
action(s47, '++') = <shift, s615>
action(s47, '-') = <shift, s960>
action(s47, '--') = <shift, s616>
action(s47, 'sizeof') = <shift, s617>
action(s47, '~') = <shift, s961>
action(s47, CONSTANT) = <shift, s752>
action(s47, IDENTIFIER) = <shift, s762>
action(s47, STRING_LITERAL) = <shift, s772>
action(s48, '!') = <shift, s956>
action(s48, '&') = <shift, s957>
action(s48, '(') = <shift, s28>
action(s48, '*') = <shift, s958>
action(s48, '+') = <shift, s959>
action(s48, '++') = <shift, s615>
action(s48, '-') = <shift, s960>
action(s48, '--') = <shift, s616>
action(s48, 'sizeof') = <shift, s617>
action(s48, '~') = <shift, s961>
action(s48, CONSTANT) = <shift, s752>
action(s48, IDENTIFIER) = <shift, s762>
action(s48, STRING_LITERAL) = <shift, s772>
action(s49, '!') = <shift, s956>
action(s49, '&') = <shift, s957>
action(s49, '(') = <shift, s28>
action(s49, '*') = <shift, s958>
action(s49, '+') = <shift, s959>
action(s49, '++') = <shift, s615>
action(s49, '-') = <shift, s960>
action(s49, '--') = <shift, s616>
action(s49, 'sizeof') = <shift, s617>
action(s49, '~') = <shift, s961>
action(s49, CONSTANT) = <shift, s752>
action(s49, IDENTIFIER) = <shift, s762>
action(s49, STRING_LITERAL) = <shift, s772>
action(s50, '!') = <shift, s956>
action(s50, '&') = <shift, s957>
action(s50, '(') = <shift, s28>
action(s50, '*') = <shift, s958>
action(s50, '+') = <shift, s959>
action(s50, '++') = <shift, s615>
action(s50, '-') = <shift, s960>
action(s50, '--') = <shift, s616>
action(s50, 'sizeof') = <shift, s617>
action(s50, '~') = <shift, s961>
action(s50, CONSTANT) = <shift, s752>
action(s50, IDENTIFIER) = <shift, s762>
action(s50, STRING_LITERAL) = <shift, s772>
action(s51, '!') = <shift, s956>
action(s51, '&') = <shift, s957>
action(s51, '(') = <shift, s28>
action(s51, '*') = <shift, s958>
action(s51, '+') = <shift, s959>
action(s51, '++') = <shift, s615>
action(s51, '-') = <shift, s960>
action(s51, '--') = <shift, s616>
action(s51, 'sizeof') = <shift, s617>
action(s51, '~') = <shift, s961>
action(s51, CONSTANT) = <shift, s752>
action(s51, IDENTIFIER) = <shift, s762>
action(s51, STRING_LITERAL) = <shift, s772>
action(s52, '!') = <shift, s956>
action(s52, '&') = <shift, s957>
action(s52, '(') = <shift, s28>
action(s52, '*') = <shift, s958>
action(s52, '+') = <shift, s959>
action(s52, '++') = <shift, s615>
action(s52, '-') = <shift, s960>
action(s52, '--') = <shift, s616>
action(s52, 'sizeof') = <shift, s617>
action(s52, '~') = <shift, s961>
action(s52, CONSTANT) = <shift, s752>
action(s52, IDENTIFIER) = <shift, s762>
action(s52, STRING_LITERAL) = <shift, s772>
action(s53, '!') = <shift, s956>
action(s53, '&') = <shift, s957>
action(s53, '(') = <shift, s28>
action(s53, '*') = <shift, s958>
action(s53, '+') = <shift, s959>
action(s53, '++') = <shift, s615>
action(s53, '-') = <shift, s960>
action(s53, '--') = <shift, s616>
action(s53, 'sizeof') = <shift, s617>
action(s53, '~') = <shift, s961>
action(s53, CONSTANT) = <shift, s752>
action(s53, IDENTIFIER) = <shift, s762>
action(s53, STRING_LITERAL) = <shift, s772>
action(s54, '!') = <shift, s956>
action(s54, '&') = <shift, s957>
action(s54, '(') = <shift, s28>
action(s54, '*') = <shift, s958>
action(s54, '+') = <shift, s959>
action(s54, '++') = <shift, s615>
action(s54, '-') = <shift, s960>
action(s54, '--') = <shift, s616>
action(s54, 'sizeof') = <shift, s617>
action(s54, '~') = <shift, s961>
action(s54, CONSTANT) = <shift, s752>
action(s54, IDENTIFIER) = <shift, s762>
action(s54, STRING_LITERAL) = <shift, s772>
action(s55, '!') = <shift, s956>
action(s55, '&') = <shift, s957>
action(s55, '(') = <shift, s28>
action(s55, '*') = <shift, s958>
action(s55, '+') = <shift, s959>
action(s55, '++') = <shift, s615>
action(s55, '-') = <shift, s960>
action(s55, '--') = <shift, s616>
action(s55, 'sizeof') = <shift, s617>
action(s55, '~') = <shift, s961>
action(s55, CONSTANT) = <shift, s752>
action(s55, IDENTIFIER) = <shift, s762>
action(s55, STRING_LITERAL) = <shift, s772>
action(s56, '!') = <shift, s956>
action(s56, '&') = <shift, s957>
action(s56, '(') = <shift, s28>
action(s56, '*') = <shift, s958>
action(s56, '+') = <shift, s959>
action(s56, '++') = <shift, s615>
action(s56, '-') = <shift, s960>
action(s56, '--') = <shift, s616>
action(s56, 'sizeof') = <shift, s617>
action(s56, '~') = <shift, s961>
action(s56, CONSTANT) = <shift, s752>
action(s56, IDENTIFIER) = <shift, s762>
action(s56, STRING_LITERAL) = <shift, s772>
action(s57, '!') = <shift, s956>
action(s57, '&') = <shift, s957>
action(s57, '(') = <shift, s29>
action(s57, '*') = <shift, s958>
action(s57, '+') = <shift, s959>
action(s57, '++') = <shift, s624>
action(s57, '-') = <shift, s960>
action(s57, '--') = <shift, s625>
action(s57, 'sizeof') = <shift, s626>
action(s57, '~') = <shift, s961>
action(s57, CONSTANT) = <shift, s755>
action(s57, IDENTIFIER) = <shift, s765>
action(s57, STRING_LITERAL) = <shift, s775>
action(s58, '!') = <shift, s956>
action(s58, '&') = <shift, s957>
action(s58, '(') = <shift, s29>
action(s58, '*') = <shift, s958>
action(s58, '+') = <shift, s959>
action(s58, '++') = <shift, s624>
action(s58, '-') = <shift, s960>
action(s58, '--') = <shift, s625>
action(s58, 'sizeof') = <shift, s626>
action(s58, '~') = <shift, s961>
action(s58, CONSTANT) = <shift, s755>
action(s58, IDENTIFIER) = <shift, s765>
action(s58, STRING_LITERAL) = <shift, s775>
action(s59, '!') = <shift, s956>
action(s59, '&') = <shift, s957>
action(s59, '(') = <shift, s29>
action(s59, '*') = <shift, s958>
action(s59, '+') = <shift, s959>
action(s59, '++') = <shift, s624>
action(s59, '-') = <shift, s960>
action(s59, '--') = <shift, s625>
action(s59, 'sizeof') = <shift, s626>
action(s59, '~') = <shift, s961>
action(s59, CONSTANT) = <shift, s755>
action(s59, IDENTIFIER) = <shift, s765>
action(s59, STRING_LITERAL) = <shift, s775>
action(s60, '!') = <shift, s956>
action(s60, '&') = <shift, s957>
action(s60, '(') = <shift, s29>
action(s60, '*') = <shift, s958>
action(s60, '+') = <shift, s959>
action(s60, '++') = <shift, s624>
action(s60, '-') = <shift, s960>
action(s60, '--') = <shift, s625>
action(s60, 'sizeof') = <shift, s626>
action(s60, '~') = <shift, s961>
action(s60, CONSTANT) = <shift, s755>
action(s60, IDENTIFIER) = <shift, s765>
action(s60, STRING_LITERAL) = <shift, s775>
action(s61, '!') = <shift, s956>
action(s61, '&') = <shift, s957>
action(s61, '(') = <shift, s29>
action(s61, '*') = <shift, s958>
action(s61, '+') = <shift, s959>
action(s61, '++') = <shift, s624>
action(s61, '-') = <shift, s960>
action(s61, '--') = <shift, s625>
action(s61, 'sizeof') = <shift, s626>
action(s61, '~') = <shift, s961>
action(s61, CONSTANT) = <shift, s755>
action(s61, IDENTIFIER) = <shift, s765>
action(s61, STRING_LITERAL) = <shift, s775>
action(s62, '!') = <shift, s956>
action(s62, '&') = <shift, s957>
action(s62, '(') = <shift, s29>
action(s62, '*') = <shift, s958>
action(s62, '+') = <shift, s959>
action(s62, '++') = <shift, s624>
action(s62, '-') = <shift, s960>
action(s62, '--') = <shift, s625>
action(s62, 'sizeof') = <shift, s626>
action(s62, '~') = <shift, s961>
action(s62, CONSTANT) = <shift, s755>
action(s62, IDENTIFIER) = <shift, s765>
action(s62, STRING_LITERAL) = <shift, s775>
action(s63, '!') = <shift, s956>
action(s63, '&') = <shift, s957>
action(s63, '(') = <shift, s29>
action(s63, '*') = <shift, s958>
action(s63, '+') = <shift, s959>
action(s63, '++') = <shift, s624>
action(s63, '-') = <shift, s960>
action(s63, '--') = <shift, s625>
action(s63, 'sizeof') = <shift, s626>
action(s63, '~') = <shift, s961>
action(s63, CONSTANT) = <shift, s755>
action(s63, IDENTIFIER) = <shift, s765>
action(s63, STRING_LITERAL) = <shift, s775>
action(s64, '!') = <shift, s956>
action(s64, '&') = <shift, s957>
action(s64, '(') = <shift, s29>
action(s64, '*') = <shift, s958>
action(s64, '+') = <shift, s959>
action(s64, '++') = <shift, s624>
action(s64, '-') = <shift, s960>
action(s64, '--') = <shift, s625>
action(s64, 'sizeof') = <shift, s626>
action(s64, '~') = <shift, s961>
action(s64, CONSTANT) = <shift, s755>
action(s64, IDENTIFIER) = <shift, s765>
action(s64, STRING_LITERAL) = <shift, s775>
action(s65, '!') = <shift, s956>
action(s65, '&') = <shift, s957>
action(s65, '(') = <shift, s29>
action(s65, '*') = <shift, s958>
action(s65, '+') = <shift, s959>
action(s65, '++') = <shift, s624>
action(s65, '-') = <shift, s960>
action(s65, '--') = <shift, s625>
action(s65, 'sizeof') = <shift, s626>
action(s65, '~') = <shift, s961>
action(s65, CONSTANT) = <shift, s755>
action(s65, IDENTIFIER) = <shift, s765>
action(s65, STRING_LITERAL) = <shift, s775>
action(s66, '!') = <shift, s956>
action(s66, '&') = <shift, s957>
action(s66, '(') = <shift, s29>
action(s66, '*') = <shift, s958>
action(s66, '+') = <shift, s959>
action(s66, '++') = <shift, s624>
action(s66, '-') = <shift, s960>
action(s66, '--') = <shift, s625>
action(s66, 'sizeof') = <shift, s626>
action(s66, '~') = <shift, s961>
action(s66, CONSTANT) = <shift, s755>
action(s66, IDENTIFIER) = <shift, s765>
action(s66, STRING_LITERAL) = <shift, s775>
action(s67, '!') = <shift, s956>
action(s67, '&') = <shift, s957>
action(s67, '(') = <shift, s29>
action(s67, '*') = <shift, s958>
action(s67, '+') = <shift, s959>
action(s67, '++') = <shift, s624>
action(s67, '-') = <shift, s960>
action(s67, '--') = <shift, s625>
action(s67, 'sizeof') = <shift, s626>
action(s67, '~') = <shift, s961>
action(s67, CONSTANT) = <shift, s755>
action(s67, IDENTIFIER) = <shift, s765>
action(s67, STRING_LITERAL) = <shift, s775>
action(s68, '!') = <shift, s956>
action(s68, '&') = <shift, s957>
action(s68, '(') = <shift, s29>
action(s68, '*') = <shift, s958>
action(s68, '+') = <shift, s959>
action(s68, '++') = <shift, s624>
action(s68, '-') = <shift, s960>
action(s68, '--') = <shift, s625>
action(s68, 'sizeof') = <shift, s626>
action(s68, '~') = <shift, s961>
action(s68, CONSTANT) = <shift, s755>
action(s68, IDENTIFIER) = <shift, s765>
action(s68, STRING_LITERAL) = <shift, s775>
action(s69, '!') = <shift, s956>
action(s69, '&') = <shift, s957>
action(s69, '(') = <shift, s29>
action(s69, '*') = <shift, s958>
action(s69, '+') = <shift, s959>
action(s69, '++') = <shift, s624>
action(s69, '-') = <shift, s960>
action(s69, '--') = <shift, s625>
action(s69, 'sizeof') = <shift, s626>
action(s69, '~') = <shift, s961>
action(s69, CONSTANT) = <shift, s755>
action(s69, IDENTIFIER) = <shift, s765>
action(s69, STRING_LITERAL) = <shift, s775>
action(s70, '!') = <shift, s956>
action(s70, '&') = <shift, s957>
action(s70, '(') = <shift, s29>
action(s70, '*') = <shift, s958>
action(s70, '+') = <shift, s959>
action(s70, '++') = <shift, s624>
action(s70, '-') = <shift, s960>
action(s70, '--') = <shift, s625>
action(s70, 'sizeof') = <shift, s626>
action(s70, '~') = <shift, s961>
action(s70, CONSTANT) = <shift, s755>
action(s70, IDENTIFIER) = <shift, s765>
action(s70, STRING_LITERAL) = <shift, s775>
action(s71, '!') = <shift, s956>
action(s71, '&') = <shift, s957>
action(s71, '(') = <shift, s30>
action(s71, '*') = <shift, s958>
action(s71, '+') = <shift, s959>
action(s71, '++') = <shift, s618>
action(s71, '-') = <shift, s960>
action(s71, '--') = <shift, s619>
action(s71, 'sizeof') = <shift, s620>
action(s71, '~') = <shift, s961>
action(s71, CONSTANT) = <shift, s753>
action(s71, IDENTIFIER) = <shift, s763>
action(s71, STRING_LITERAL) = <shift, s773>
action(s72, '!') = <shift, s956>
action(s72, '&') = <shift, s957>
action(s72, '(') = <shift, s30>
action(s72, '*') = <shift, s958>
action(s72, '+') = <shift, s959>
action(s72, '++') = <shift, s618>
action(s72, '-') = <shift, s960>
action(s72, '--') = <shift, s619>
action(s72, 'sizeof') = <shift, s620>
action(s72, '~') = <shift, s961>
action(s72, CONSTANT) = <shift, s753>
action(s72, IDENTIFIER) = <shift, s763>
action(s72, STRING_LITERAL) = <shift, s773>
action(s73, '!') = <shift, s956>
action(s73, '&') = <shift, s957>
action(s73, '(') = <shift, s30>
action(s73, '*') = <shift, s958>
action(s73, '+') = <shift, s959>
action(s73, '++') = <shift, s618>
action(s73, '-') = <shift, s960>
action(s73, '--') = <shift, s619>
action(s73, 'sizeof') = <shift, s620>
action(s73, '~') = <shift, s961>
action(s73, CONSTANT) = <shift, s753>
action(s73, IDENTIFIER) = <shift, s763>
action(s73, STRING_LITERAL) = <shift, s773>
action(s74, '!') = <shift, s956>
action(s74, '&') = <shift, s957>
action(s74, '(') = <shift, s30>
action(s74, '*') = <shift, s958>
action(s74, '+') = <shift, s959>
action(s74, '++') = <shift, s618>
action(s74, '-') = <shift, s960>
action(s74, '--') = <shift, s619>
action(s74, 'sizeof') = <shift, s620>
action(s74, '~') = <shift, s961>
action(s74, CONSTANT) = <shift, s753>
action(s74, IDENTIFIER) = <shift, s763>
action(s74, STRING_LITERAL) = <shift, s773>
action(s75, '!') = <shift, s956>
action(s75, '&') = <shift, s957>
action(s75, '(') = <shift, s30>
action(s75, '*') = <shift, s958>
action(s75, '+') = <shift, s959>
action(s75, '++') = <shift, s618>
action(s75, '-') = <shift, s960>
action(s75, '--') = <shift, s619>
action(s75, 'sizeof') = <shift, s620>
action(s75, '~') = <shift, s961>
action(s75, CONSTANT) = <shift, s753>
action(s75, IDENTIFIER) = <shift, s763>
action(s75, STRING_LITERAL) = <shift, s773>
action(s76, '!') = <shift, s956>
action(s76, '&') = <shift, s957>
action(s76, '(') = <shift, s30>
action(s76, '*') = <shift, s958>
action(s76, '+') = <shift, s959>
action(s76, '++') = <shift, s618>
action(s76, '-') = <shift, s960>
action(s76, '--') = <shift, s619>
action(s76, 'sizeof') = <shift, s620>
action(s76, '~') = <shift, s961>
action(s76, CONSTANT) = <shift, s753>
action(s76, IDENTIFIER) = <shift, s763>
action(s76, STRING_LITERAL) = <shift, s773>
action(s77, '!') = <shift, s956>
action(s77, '&') = <shift, s957>
action(s77, '(') = <shift, s30>
action(s77, '*') = <shift, s958>
action(s77, '+') = <shift, s959>
action(s77, '++') = <shift, s618>
action(s77, '-') = <shift, s960>
action(s77, '--') = <shift, s619>
action(s77, 'sizeof') = <shift, s620>
action(s77, '~') = <shift, s961>
action(s77, CONSTANT) = <shift, s753>
action(s77, IDENTIFIER) = <shift, s763>
action(s77, STRING_LITERAL) = <shift, s773>
action(s78, '!') = <shift, s956>
action(s78, '&') = <shift, s957>
action(s78, '(') = <shift, s30>
action(s78, '*') = <shift, s958>
action(s78, '+') = <shift, s959>
action(s78, '++') = <shift, s618>
action(s78, '-') = <shift, s960>
action(s78, '--') = <shift, s619>
action(s78, 'sizeof') = <shift, s620>
action(s78, '~') = <shift, s961>
action(s78, CONSTANT) = <shift, s753>
action(s78, IDENTIFIER) = <shift, s763>
action(s78, STRING_LITERAL) = <shift, s773>
action(s79, '!') = <shift, s956>
action(s79, '&') = <shift, s957>
action(s79, '(') = <shift, s31>
action(s79, '*') = <shift, s958>
action(s79, '+') = <shift, s959>
action(s79, '++') = <shift, s627>
action(s79, '-') = <shift, s960>
action(s79, '--') = <shift, s628>
action(s79, 'sizeof') = <shift, s629>
action(s79, '~') = <shift, s961>
action(s79, CONSTANT) = <shift, s756>
action(s79, IDENTIFIER) = <shift, s766>
action(s79, STRING_LITERAL) = <shift, s776>
action(s80, '!') = <shift, s956>
action(s80, '&') = <shift, s957>
action(s80, '(') = <shift, s31>
action(s80, '*') = <shift, s958>
action(s80, '+') = <shift, s959>
action(s80, '++') = <shift, s627>
action(s80, '-') = <shift, s960>
action(s80, '--') = <shift, s628>
action(s80, 'sizeof') = <shift, s629>
action(s80, '~') = <shift, s961>
action(s80, CONSTANT) = <shift, s756>
action(s80, IDENTIFIER) = <shift, s766>
action(s80, STRING_LITERAL) = <shift, s776>
action(s81, '!') = <shift, s956>
action(s81, '&') = <shift, s957>
action(s81, '(') = <shift, s31>
action(s81, '*') = <shift, s958>
action(s81, '+') = <shift, s959>
action(s81, '++') = <shift, s627>
action(s81, '-') = <shift, s960>
action(s81, '--') = <shift, s628>
action(s81, 'sizeof') = <shift, s629>
action(s81, '~') = <shift, s961>
action(s81, CONSTANT) = <shift, s756>
action(s81, IDENTIFIER) = <shift, s766>
action(s81, STRING_LITERAL) = <shift, s776>
action(s82, '!') = <shift, s956>
action(s82, '&') = <shift, s957>
action(s82, '(') = <shift, s31>
action(s82, '*') = <shift, s958>
action(s82, '+') = <shift, s959>
action(s82, '++') = <shift, s627>
action(s82, '-') = <shift, s960>
action(s82, '--') = <shift, s628>
action(s82, 'sizeof') = <shift, s629>
action(s82, '~') = <shift, s961>
action(s82, CONSTANT) = <shift, s756>
action(s82, IDENTIFIER) = <shift, s766>
action(s82, STRING_LITERAL) = <shift, s776>
action(s83, '!') = <shift, s956>
action(s83, '&') = <shift, s957>
action(s83, '(') = <shift, s31>
action(s83, '*') = <shift, s958>
action(s83, '+') = <shift, s959>
action(s83, '++') = <shift, s627>
action(s83, '-') = <shift, s960>
action(s83, '--') = <shift, s628>
action(s83, 'sizeof') = <shift, s629>
action(s83, '~') = <shift, s961>
action(s83, CONSTANT) = <shift, s756>
action(s83, IDENTIFIER) = <shift, s766>
action(s83, STRING_LITERAL) = <shift, s776>
action(s84, '!') = <shift, s956>
action(s84, '&') = <shift, s957>
action(s84, '(') = <shift, s31>
action(s84, '*') = <shift, s958>
action(s84, '+') = <shift, s959>
action(s84, '++') = <shift, s627>
action(s84, '-') = <shift, s960>
action(s84, '--') = <shift, s628>
action(s84, 'sizeof') = <shift, s629>
action(s84, '~') = <shift, s961>
action(s84, CONSTANT) = <shift, s756>
action(s84, IDENTIFIER) = <shift, s766>
action(s84, STRING_LITERAL) = <shift, s776>
action(s85, '!') = <shift, s956>
action(s85, '&') = <shift, s957>
action(s85, '(') = <shift, s31>
action(s85, '*') = <shift, s958>
action(s85, '+') = <shift, s959>
action(s85, '++') = <shift, s627>
action(s85, '-') = <shift, s960>
action(s85, '--') = <shift, s628>
action(s85, 'sizeof') = <shift, s629>
action(s85, '~') = <shift, s961>
action(s85, CONSTANT) = <shift, s756>
action(s85, IDENTIFIER) = <shift, s766>
action(s85, STRING_LITERAL) = <shift, s776>
action(s86, '!') = <shift, s956>
action(s86, '&') = <shift, s957>
action(s86, '(') = <shift, s31>
action(s86, '*') = <shift, s958>
action(s86, '+') = <shift, s959>
action(s86, '++') = <shift, s627>
action(s86, '-') = <shift, s960>
action(s86, '--') = <shift, s628>
action(s86, 'sizeof') = <shift, s629>
action(s86, '~') = <shift, s961>
action(s86, CONSTANT) = <shift, s756>
action(s86, IDENTIFIER) = <shift, s766>
action(s86, STRING_LITERAL) = <shift, s776>
action(s87, '!') = <shift, s956>
action(s87, '&') = <shift, s957>
action(s87, '(') = <shift, s31>
action(s87, '*') = <shift, s958>
action(s87, '+') = <shift, s959>
action(s87, '++') = <shift, s627>
action(s87, '-') = <shift, s960>
action(s87, '--') = <shift, s628>
action(s87, 'sizeof') = <shift, s629>
action(s87, '~') = <shift, s961>
action(s87, CONSTANT) = <shift, s756>
action(s87, IDENTIFIER) = <shift, s766>
action(s87, STRING_LITERAL) = <shift, s776>
action(s88, '!') = <shift, s956>
action(s88, '&') = <shift, s957>
action(s88, '(') = <shift, s31>
action(s88, '*') = <shift, s958>
action(s88, '+') = <shift, s959>
action(s88, '++') = <shift, s627>
action(s88, '-') = <shift, s960>
action(s88, '--') = <shift, s628>
action(s88, 'sizeof') = <shift, s629>
action(s88, '~') = <shift, s961>
action(s88, CONSTANT) = <shift, s756>
action(s88, IDENTIFIER) = <shift, s766>
action(s88, STRING_LITERAL) = <shift, s776>
action(s89, '!') = <shift, s956>
action(s89, '&') = <shift, s957>
action(s89, '(') = <shift, s31>
action(s89, '*') = <shift, s958>
action(s89, '+') = <shift, s959>
action(s89, '++') = <shift, s627>
action(s89, '-') = <shift, s960>
action(s89, '--') = <shift, s628>
action(s89, 'sizeof') = <shift, s629>
action(s89, '~') = <shift, s961>
action(s89, CONSTANT) = <shift, s756>
action(s89, IDENTIFIER) = <shift, s766>
action(s89, STRING_LITERAL) = <shift, s776>
action(s90, '!') = <shift, s956>
action(s90, '&') = <shift, s957>
action(s90, '(') = <shift, s31>
action(s90, '*') = <shift, s958>
action(s90, '+') = <shift, s959>
action(s90, '++') = <shift, s627>
action(s90, '-') = <shift, s960>
action(s90, '--') = <shift, s628>
action(s90, 'sizeof') = <shift, s629>
action(s90, '~') = <shift, s961>
action(s90, CONSTANT) = <shift, s756>
action(s90, IDENTIFIER) = <shift, s766>
action(s90, STRING_LITERAL) = <shift, s776>
action(s91, '!') = <shift, s956>
action(s91, '&') = <shift, s957>
action(s91, '(') = <shift, s31>
action(s91, '*') = <shift, s958>
action(s91, '+') = <shift, s959>
action(s91, '++') = <shift, s627>
action(s91, '-') = <shift, s960>
action(s91, '--') = <shift, s628>
action(s91, 'sizeof') = <shift, s629>
action(s91, '~') = <shift, s961>
action(s91, CONSTANT) = <shift, s756>
action(s91, IDENTIFIER) = <shift, s766>
action(s91, STRING_LITERAL) = <shift, s776>
action(s92, '!') = <shift, s956>
action(s92, '&') = <shift, s957>
action(s92, '(') = <shift, s31>
action(s92, '*') = <shift, s958>
action(s92, '+') = <shift, s959>
action(s92, '++') = <shift, s627>
action(s92, '-') = <shift, s960>
action(s92, '--') = <shift, s628>
action(s92, 'sizeof') = <shift, s629>
action(s92, '~') = <shift, s961>
action(s92, CONSTANT) = <shift, s756>
action(s92, IDENTIFIER) = <shift, s766>
action(s92, STRING_LITERAL) = <shift, s776>
action(s93, '!') = <shift, s956>
action(s93, '&') = <shift, s957>
action(s93, '(') = <shift, s32>
action(s93, '*') = <shift, s958>
action(s93, '+') = <shift, s959>
action(s93, '++') = <shift, s630>
action(s93, '-') = <shift, s960>
action(s93, '--') = <shift, s631>
action(s93, 'sizeof') = <shift, s632>
action(s93, '~') = <shift, s961>
action(s93, CONSTANT) = <shift, s757>
action(s93, IDENTIFIER) = <shift, s767>
action(s93, STRING_LITERAL) = <shift, s777>
action(s94, '!') = <shift, s956>
action(s94, '&') = <shift, s957>
action(s94, '(') = <shift, s32>
action(s94, '*') = <shift, s958>
action(s94, '+') = <shift, s959>
action(s94, '++') = <shift, s630>
action(s94, '-') = <shift, s960>
action(s94, '--') = <shift, s631>
action(s94, 'sizeof') = <shift, s632>
action(s94, '~') = <shift, s961>
action(s94, CONSTANT) = <shift, s757>
action(s94, IDENTIFIER) = <shift, s767>
action(s94, STRING_LITERAL) = <shift, s777>
action(s95, '!') = <shift, s956>
action(s95, '&') = <shift, s957>
action(s95, '(') = <shift, s32>
action(s95, '*') = <shift, s958>
action(s95, '+') = <shift, s959>
action(s95, '++') = <shift, s630>
action(s95, '-') = <shift, s960>
action(s95, '--') = <shift, s631>
action(s95, 'sizeof') = <shift, s632>
action(s95, '~') = <shift, s961>
action(s95, CONSTANT) = <shift, s757>
action(s95, IDENTIFIER) = <shift, s767>
action(s95, STRING_LITERAL) = <shift, s777>
action(s96, '!') = <shift, s956>
action(s96, '&') = <shift, s957>
action(s96, '(') = <shift, s32>
action(s96, '*') = <shift, s958>
action(s96, '+') = <shift, s959>
action(s96, '++') = <shift, s630>
action(s96, '-') = <shift, s960>
action(s96, '--') = <shift, s631>
action(s96, 'sizeof') = <shift, s632>
action(s96, '~') = <shift, s961>
action(s96, CONSTANT) = <shift, s757>
action(s96, IDENTIFIER) = <shift, s767>
action(s96, STRING_LITERAL) = <shift, s777>
action(s97, '!') = <shift, s956>
action(s97, '&') = <shift, s957>
action(s97, '(') = <shift, s32>
action(s97, '*') = <shift, s958>
action(s97, '+') = <shift, s959>
action(s97, '++') = <shift, s630>
action(s97, '-') = <shift, s960>
action(s97, '--') = <shift, s631>
action(s97, 'sizeof') = <shift, s632>
action(s97, '~') = <shift, s961>
action(s97, CONSTANT) = <shift, s757>
action(s97, IDENTIFIER) = <shift, s767>
action(s97, STRING_LITERAL) = <shift, s777>
action(s98, '!') = <shift, s956>
action(s98, '&') = <shift, s957>
action(s98, '(') = <shift, s32>
action(s98, '*') = <shift, s958>
action(s98, '+') = <shift, s959>
action(s98, '++') = <shift, s630>
action(s98, '-') = <shift, s960>
action(s98, '--') = <shift, s631>
action(s98, 'sizeof') = <shift, s632>
action(s98, '~') = <shift, s961>
action(s98, CONSTANT) = <shift, s757>
action(s98, IDENTIFIER) = <shift, s767>
action(s98, STRING_LITERAL) = <shift, s777>
action(s99, '!') = <shift, s956>
action(s99, '&') = <shift, s957>
action(s99, '(') = <shift, s32>
action(s99, '*') = <shift, s958>
action(s99, '+') = <shift, s959>
action(s99, '++') = <shift, s630>
action(s99, '-') = <shift, s960>
action(s99, '--') = <shift, s631>
action(s99, 'sizeof') = <shift, s632>
action(s99, '~') = <shift, s961>
action(s99, CONSTANT) = <shift, s757>
action(s99, IDENTIFIER) = <shift, s767>
action(s99, STRING_LITERAL) = <shift, s777>
action(s100, '!') = <shift, s956>
action(s100, '&') = <shift, s957>
action(s100, '(') = <shift, s32>
action(s100, '*') = <shift, s958>
action(s100, '+') = <shift, s959>
action(s100, '++') = <shift, s630>
action(s100, '-') = <shift, s960>
action(s100, '--') = <shift, s631>
action(s100, 'sizeof') = <shift, s632>
action(s100, '~') = <shift, s961>
action(s100, CONSTANT) = <shift, s757>
action(s100, IDENTIFIER) = <shift, s767>
action(s100, STRING_LITERAL) = <shift, s777>
action(s101, '!') = <shift, s956>
action(s101, '&') = <shift, s957>
action(s101, '(') = <shift, s32>
action(s101, '*') = <shift, s958>
action(s101, '+') = <shift, s959>
action(s101, '++') = <shift, s630>
action(s101, '-') = <shift, s960>
action(s101, '--') = <shift, s631>
action(s101, 'sizeof') = <shift, s632>
action(s101, '~') = <shift, s961>
action(s101, CONSTANT) = <shift, s757>
action(s101, IDENTIFIER) = <shift, s767>
action(s101, STRING_LITERAL) = <shift, s777>
action(s102, '!') = <shift, s956>
action(s102, '&') = <shift, s957>
action(s102, '(') = <shift, s32>
action(s102, '*') = <shift, s958>
action(s102, '+') = <shift, s959>
action(s102, '++') = <shift, s630>
action(s102, '-') = <shift, s960>
action(s102, '--') = <shift, s631>
action(s102, 'sizeof') = <shift, s632>
action(s102, '~') = <shift, s961>
action(s102, CONSTANT) = <shift, s757>
action(s102, IDENTIFIER) = <shift, s767>
action(s102, STRING_LITERAL) = <shift, s777>
action(s103, '!') = <shift, s956>
action(s103, '&') = <shift, s957>
action(s103, '(') = <shift, s32>
action(s103, '*') = <shift, s958>
action(s103, '+') = <shift, s959>
action(s103, '++') = <shift, s630>
action(s103, '-') = <shift, s960>
action(s103, '--') = <shift, s631>
action(s103, 'sizeof') = <shift, s632>
action(s103, '~') = <shift, s961>
action(s103, CONSTANT) = <shift, s757>
action(s103, IDENTIFIER) = <shift, s767>
action(s103, STRING_LITERAL) = <shift, s777>
action(s104, '!') = <shift, s956>
action(s104, '&') = <shift, s957>
action(s104, '(') = <shift, s32>
action(s104, '*') = <shift, s958>
action(s104, '+') = <shift, s959>
action(s104, '++') = <shift, s630>
action(s104, '-') = <shift, s960>
action(s104, '--') = <shift, s631>
action(s104, 'sizeof') = <shift, s632>
action(s104, '~') = <shift, s961>
action(s104, CONSTANT) = <shift, s757>
action(s104, IDENTIFIER) = <shift, s767>
action(s104, STRING_LITERAL) = <shift, s777>
action(s105, '!') = <shift, s956>
action(s105, '&') = <shift, s957>
action(s105, '(') = <shift, s32>
action(s105, '*') = <shift, s958>
action(s105, '+') = <shift, s959>
action(s105, '++') = <shift, s630>
action(s105, '-') = <shift, s960>
action(s105, '--') = <shift, s631>
action(s105, 'sizeof') = <shift, s632>
action(s105, '~') = <shift, s961>
action(s105, CONSTANT) = <shift, s757>
action(s105, IDENTIFIER) = <shift, s767>
action(s105, STRING_LITERAL) = <shift, s777>
action(s106, '!') = <shift, s956>
action(s106, '&') = <shift, s957>
action(s106, '(') = <shift, s32>
action(s106, '*') = <shift, s958>
action(s106, '+') = <shift, s959>
action(s106, '++') = <shift, s630>
action(s106, '-') = <shift, s960>
action(s106, '--') = <shift, s631>
action(s106, 'sizeof') = <shift, s632>
action(s106, '~') = <shift, s961>
action(s106, CONSTANT) = <shift, s757>
action(s106, IDENTIFIER) = <shift, s767>
action(s106, STRING_LITERAL) = <shift, s777>
action(s107, '!') = <shift, s956>
action(s107, '&') = <shift, s957>
action(s107, '(') = <shift, s32>
action(s107, '*') = <shift, s958>
action(s107, '+') = <shift, s959>
action(s107, '++') = <shift, s630>
action(s107, '-') = <shift, s960>
action(s107, '--') = <shift, s631>
action(s107, 'sizeof') = <shift, s632>
action(s107, '~') = <shift, s961>
action(s107, CONSTANT) = <shift, s757>
action(s107, IDENTIFIER) = <shift, s767>
action(s107, STRING_LITERAL) = <shift, s777>
action(s108, '!') = <shift, s956>
action(s108, '&') = <shift, s957>
action(s108, '(') = <shift, s32>
action(s108, '*') = <shift, s958>
action(s108, '+') = <shift, s959>
action(s108, '++') = <shift, s630>
action(s108, '-') = <shift, s960>
action(s108, '--') = <shift, s631>
action(s108, 'sizeof') = <shift, s632>
action(s108, '~') = <shift, s961>
action(s108, CONSTANT) = <shift, s757>
action(s108, IDENTIFIER) = <shift, s767>
action(s108, STRING_LITERAL) = <shift, s777>
action(s109, '!') = <shift, s956>
action(s109, '&') = <shift, s957>
action(s109, '(') = <shift, s33>
action(s109, '*') = <shift, s958>
action(s109, '+') = <shift, s959>
action(s109, '++') = <shift, s621>
action(s109, '-') = <shift, s960>
action(s109, '--') = <shift, s622>
action(s109, 'sizeof') = <shift, s623>
action(s109, '~') = <shift, s961>
action(s109, CONSTANT) = <shift, s754>
action(s109, IDENTIFIER) = <shift, s764>
action(s109, STRING_LITERAL) = <shift, s774>
action(s110, '!') = <shift, s956>
action(s110, '&') = <shift, s957>
action(s110, '(') = <shift, s33>
action(s110, '*') = <shift, s958>
action(s110, '+') = <shift, s959>
action(s110, '++') = <shift, s621>
action(s110, '-') = <shift, s960>
action(s110, '--') = <shift, s622>
action(s110, 'sizeof') = <shift, s623>
action(s110, '~') = <shift, s961>
action(s110, CONSTANT) = <shift, s754>
action(s110, IDENTIFIER) = <shift, s764>
action(s110, STRING_LITERAL) = <shift, s774>
action(s111, '!') = <shift, s956>
action(s111, '&') = <shift, s957>
action(s111, '(') = <shift, s33>
action(s111, '*') = <shift, s958>
action(s111, '+') = <shift, s959>
action(s111, '++') = <shift, s621>
action(s111, '-') = <shift, s960>
action(s111, '--') = <shift, s622>
action(s111, 'sizeof') = <shift, s623>
action(s111, '~') = <shift, s961>
action(s111, CONSTANT) = <shift, s754>
action(s111, IDENTIFIER) = <shift, s764>
action(s111, STRING_LITERAL) = <shift, s774>
action(s112, '!') = <shift, s956>
action(s112, '&') = <shift, s957>
action(s112, '(') = <shift, s33>
action(s112, '*') = <shift, s958>
action(s112, '+') = <shift, s959>
action(s112, '++') = <shift, s621>
action(s112, '-') = <shift, s960>
action(s112, '--') = <shift, s622>
action(s112, 'sizeof') = <shift, s623>
action(s112, '~') = <shift, s961>
action(s112, CONSTANT) = <shift, s754>
action(s112, IDENTIFIER) = <shift, s764>
action(s112, STRING_LITERAL) = <shift, s774>
action(s113, '!') = <shift, s956>
action(s113, '&') = <shift, s957>
action(s113, '(') = <shift, s33>
action(s113, '*') = <shift, s958>
action(s113, '+') = <shift, s959>
action(s113, '++') = <shift, s621>
action(s113, '-') = <shift, s960>
action(s113, '--') = <shift, s622>
action(s113, 'sizeof') = <shift, s623>
action(s113, '~') = <shift, s961>
action(s113, CONSTANT) = <shift, s754>
action(s113, IDENTIFIER) = <shift, s764>
action(s113, STRING_LITERAL) = <shift, s774>
action(s114, '!') = <shift, s956>
action(s114, '&') = <shift, s957>
action(s114, '(') = <shift, s33>
action(s114, '*') = <shift, s958>
action(s114, '+') = <shift, s959>
action(s114, '++') = <shift, s621>
action(s114, '-') = <shift, s960>
action(s114, '--') = <shift, s622>
action(s114, 'sizeof') = <shift, s623>
action(s114, '~') = <shift, s961>
action(s114, CONSTANT) = <shift, s754>
action(s114, IDENTIFIER) = <shift, s764>
action(s114, STRING_LITERAL) = <shift, s774>
action(s115, '!') = <shift, s956>
action(s115, '&') = <shift, s957>
action(s115, '(') = <shift, s33>
action(s115, '*') = <shift, s958>
action(s115, '+') = <shift, s959>
action(s115, '++') = <shift, s621>
action(s115, '-') = <shift, s960>
action(s115, '--') = <shift, s622>
action(s115, 'sizeof') = <shift, s623>
action(s115, '~') = <shift, s961>
action(s115, CONSTANT) = <shift, s754>
action(s115, IDENTIFIER) = <shift, s764>
action(s115, STRING_LITERAL) = <shift, s774>
action(s116, '!') = <shift, s956>
action(s116, '&') = <shift, s957>
action(s116, '(') = <shift, s33>
action(s116, '*') = <shift, s958>
action(s116, '+') = <shift, s959>
action(s116, '++') = <shift, s621>
action(s116, '-') = <shift, s960>
action(s116, '--') = <shift, s622>
action(s116, 'sizeof') = <shift, s623>
action(s116, '~') = <shift, s961>
action(s116, CONSTANT) = <shift, s754>
action(s116, IDENTIFIER) = <shift, s764>
action(s116, STRING_LITERAL) = <shift, s774>
action(s117, '!') = <shift, s956>
action(s117, '&') = <shift, s957>
action(s117, '(') = <shift, s33>
action(s117, '*') = <shift, s958>
action(s117, '+') = <shift, s959>
action(s117, '++') = <shift, s621>
action(s117, '-') = <shift, s960>
action(s117, '--') = <shift, s622>
action(s117, 'sizeof') = <shift, s623>
action(s117, '~') = <shift, s961>
action(s117, CONSTANT) = <shift, s754>
action(s117, IDENTIFIER) = <shift, s764>
action(s117, STRING_LITERAL) = <shift, s774>
action(s118, '!') = <shift, s956>
action(s118, '&') = <shift, s957>
action(s118, '(') = <shift, s33>
action(s118, '*') = <shift, s958>
action(s118, '+') = <shift, s959>
action(s118, '++') = <shift, s621>
action(s118, '-') = <shift, s960>
action(s118, '--') = <shift, s622>
action(s118, 'sizeof') = <shift, s623>
action(s118, '~') = <shift, s961>
action(s118, CONSTANT) = <shift, s754>
action(s118, IDENTIFIER) = <shift, s764>
action(s118, STRING_LITERAL) = <shift, s774>
action(s119, '!') = <shift, s956>
action(s119, '&') = <shift, s957>
action(s119, '(') = <shift, s33>
action(s119, '*') = <shift, s958>
action(s119, '+') = <shift, s959>
action(s119, '++') = <shift, s621>
action(s119, '-') = <shift, s960>
action(s119, '--') = <shift, s622>
action(s119, 'sizeof') = <shift, s623>
action(s119, '~') = <shift, s961>
action(s119, CONSTANT) = <shift, s754>
action(s119, IDENTIFIER) = <shift, s764>
action(s119, STRING_LITERAL) = <shift, s774>
action(s120, '!') = <shift, s956>
action(s120, '&') = <shift, s957>
action(s120, '(') = <shift, s34>
action(s120, '*') = <shift, s958>
action(s120, '+') = <shift, s959>
action(s120, '++') = <shift, s633>
action(s120, '-') = <shift, s960>
action(s120, '--') = <shift, s634>
action(s120, 'sizeof') = <shift, s635>
action(s120, '~') = <shift, s961>
action(s120, CONSTANT) = <shift, s758>
action(s120, IDENTIFIER) = <shift, s768>
action(s120, STRING_LITERAL) = <shift, s778>
action(s121, '!') = <shift, s956>
action(s121, '&') = <shift, s957>
action(s121, '(') = <shift, s34>
action(s121, '*') = <shift, s958>
action(s121, '+') = <shift, s959>
action(s121, '++') = <shift, s633>
action(s121, '-') = <shift, s960>
action(s121, '--') = <shift, s634>
action(s121, 'sizeof') = <shift, s635>
action(s121, '~') = <shift, s961>
action(s121, CONSTANT) = <shift, s758>
action(s121, IDENTIFIER) = <shift, s768>
action(s121, STRING_LITERAL) = <shift, s778>
action(s122, '!') = <shift, s956>
action(s122, '&') = <shift, s957>
action(s122, '(') = <shift, s34>
action(s122, '*') = <shift, s958>
action(s122, '+') = <shift, s959>
action(s122, '++') = <shift, s633>
action(s122, '-') = <shift, s960>
action(s122, '--') = <shift, s634>
action(s122, 'sizeof') = <shift, s635>
action(s122, '~') = <shift, s961>
action(s122, CONSTANT) = <shift, s758>
action(s122, IDENTIFIER) = <shift, s768>
action(s122, STRING_LITERAL) = <shift, s778>
action(s123, '!') = <shift, s956>
action(s123, '&') = <shift, s957>
action(s123, '(') = <shift, s34>
action(s123, '*') = <shift, s958>
action(s123, '+') = <shift, s959>
action(s123, '++') = <shift, s633>
action(s123, '-') = <shift, s960>
action(s123, '--') = <shift, s634>
action(s123, 'sizeof') = <shift, s635>
action(s123, '~') = <shift, s961>
action(s123, CONSTANT) = <shift, s758>
action(s123, IDENTIFIER) = <shift, s768>
action(s123, STRING_LITERAL) = <shift, s778>
action(s124, '!') = <shift, s956>
action(s124, '&') = <shift, s957>
action(s124, '(') = <shift, s34>
action(s124, '*') = <shift, s958>
action(s124, '+') = <shift, s959>
action(s124, '++') = <shift, s633>
action(s124, '-') = <shift, s960>
action(s124, '--') = <shift, s634>
action(s124, 'sizeof') = <shift, s635>
action(s124, '~') = <shift, s961>
action(s124, CONSTANT) = <shift, s758>
action(s124, IDENTIFIER) = <shift, s768>
action(s124, STRING_LITERAL) = <shift, s778>
action(s125, '!') = <shift, s956>
action(s125, '&') = <shift, s957>
action(s125, '(') = <shift, s34>
action(s125, '*') = <shift, s958>
action(s125, '+') = <shift, s959>
action(s125, '++') = <shift, s633>
action(s125, '-') = <shift, s960>
action(s125, '--') = <shift, s634>
action(s125, 'sizeof') = <shift, s635>
action(s125, '~') = <shift, s961>
action(s125, CONSTANT) = <shift, s758>
action(s125, IDENTIFIER) = <shift, s768>
action(s125, STRING_LITERAL) = <shift, s778>
action(s126, '!') = <shift, s956>
action(s126, '&') = <shift, s957>
action(s126, '(') = <shift, s34>
action(s126, '*') = <shift, s958>
action(s126, '+') = <shift, s959>
action(s126, '++') = <shift, s633>
action(s126, '-') = <shift, s960>
action(s126, '--') = <shift, s634>
action(s126, 'sizeof') = <shift, s635>
action(s126, '~') = <shift, s961>
action(s126, CONSTANT) = <shift, s758>
action(s126, IDENTIFIER) = <shift, s768>
action(s126, STRING_LITERAL) = <shift, s778>
action(s127, '!') = <shift, s956>
action(s127, '&') = <shift, s957>
action(s127, '(') = <shift, s34>
action(s127, '*') = <shift, s958>
action(s127, '+') = <shift, s959>
action(s127, '++') = <shift, s633>
action(s127, '-') = <shift, s960>
action(s127, '--') = <shift, s634>
action(s127, 'sizeof') = <shift, s635>
action(s127, '~') = <shift, s961>
action(s127, CONSTANT) = <shift, s758>
action(s127, IDENTIFIER) = <shift, s768>
action(s127, STRING_LITERAL) = <shift, s778>
action(s128, '!') = <shift, s956>
action(s128, '&') = <shift, s957>
action(s128, '(') = <shift, s34>
action(s128, '*') = <shift, s958>
action(s128, '+') = <shift, s959>
action(s128, '++') = <shift, s633>
action(s128, '-') = <shift, s960>
action(s128, '--') = <shift, s634>
action(s128, 'sizeof') = <shift, s635>
action(s128, '~') = <shift, s961>
action(s128, CONSTANT) = <shift, s758>
action(s128, IDENTIFIER) = <shift, s768>
action(s128, STRING_LITERAL) = <shift, s778>
action(s129, '!') = <shift, s956>
action(s129, '&') = <shift, s957>
action(s129, '(') = <shift, s34>
action(s129, '*') = <shift, s958>
action(s129, '+') = <shift, s959>
action(s129, '++') = <shift, s633>
action(s129, '-') = <shift, s960>
action(s129, '--') = <shift, s634>
action(s129, 'sizeof') = <shift, s635>
action(s129, '~') = <shift, s961>
action(s129, CONSTANT) = <shift, s758>
action(s129, IDENTIFIER) = <shift, s768>
action(s129, STRING_LITERAL) = <shift, s778>
action(s130, '!') = <shift, s956>
action(s130, '&') = <shift, s957>
action(s130, '(') = <shift, s34>
action(s130, '*') = <shift, s958>
action(s130, '+') = <shift, s959>
action(s130, '++') = <shift, s633>
action(s130, '-') = <shift, s960>
action(s130, '--') = <shift, s634>
action(s130, 'sizeof') = <shift, s635>
action(s130, '~') = <shift, s961>
action(s130, CONSTANT) = <shift, s758>
action(s130, IDENTIFIER) = <shift, s768>
action(s130, STRING_LITERAL) = <shift, s778>
action(s131, '!') = <shift, s956>
action(s131, '&') = <shift, s957>
action(s131, '(') = <shift, s34>
action(s131, '*') = <shift, s958>
action(s131, '+') = <shift, s959>
action(s131, '++') = <shift, s633>
action(s131, '-') = <shift, s960>
action(s131, '--') = <shift, s634>
action(s131, 'sizeof') = <shift, s635>
action(s131, '~') = <shift, s961>
action(s131, CONSTANT) = <shift, s758>
action(s131, IDENTIFIER) = <shift, s768>
action(s131, STRING_LITERAL) = <shift, s778>
action(s132, '!') = <shift, s956>
action(s132, '&') = <shift, s957>
action(s132, '(') = <shift, s34>
action(s132, '*') = <shift, s958>
action(s132, '+') = <shift, s959>
action(s132, '++') = <shift, s633>
action(s132, '-') = <shift, s960>
action(s132, '--') = <shift, s634>
action(s132, 'sizeof') = <shift, s635>
action(s132, '~') = <shift, s961>
action(s132, CONSTANT) = <shift, s758>
action(s132, IDENTIFIER) = <shift, s768>
action(s132, STRING_LITERAL) = <shift, s778>
action(s133, '!') = <shift, s956>
action(s133, '&') = <shift, s957>
action(s133, '(') = <shift, s34>
action(s133, '*') = <shift, s958>
action(s133, '+') = <shift, s959>
action(s133, '++') = <shift, s633>
action(s133, '-') = <shift, s960>
action(s133, '--') = <shift, s634>
action(s133, 'sizeof') = <shift, s635>
action(s133, '~') = <shift, s961>
action(s133, CONSTANT) = <shift, s758>
action(s133, IDENTIFIER) = <shift, s768>
action(s133, STRING_LITERAL) = <shift, s778>
action(s134, '!') = <shift, s956>
action(s134, '&') = <shift, s957>
action(s134, '(') = <shift, s35>
action(s134, '*') = <shift, s958>
action(s134, '+') = <shift, s959>
action(s134, '++') = <shift, s636>
action(s134, '-') = <shift, s960>
action(s134, '--') = <shift, s637>
action(s134, 'sizeof') = <shift, s638>
action(s134, '~') = <shift, s961>
action(s134, CONSTANT) = <shift, s759>
action(s134, IDENTIFIER) = <shift, s769>
action(s134, STRING_LITERAL) = <shift, s779>
action(s135, '!') = <shift, s956>
action(s135, '&') = <shift, s957>
action(s135, '(') = <shift, s35>
action(s135, '*') = <shift, s958>
action(s135, '+') = <shift, s959>
action(s135, '++') = <shift, s636>
action(s135, '-') = <shift, s960>
action(s135, '--') = <shift, s637>
action(s135, 'sizeof') = <shift, s638>
action(s135, '~') = <shift, s961>
action(s135, CONSTANT) = <shift, s759>
action(s135, IDENTIFIER) = <shift, s769>
action(s135, STRING_LITERAL) = <shift, s779>
action(s136, '!') = <shift, s956>
action(s136, '&') = <shift, s957>
action(s136, '(') = <shift, s35>
action(s136, '*') = <shift, s958>
action(s136, '+') = <shift, s959>
action(s136, '++') = <shift, s636>
action(s136, '-') = <shift, s960>
action(s136, '--') = <shift, s637>
action(s136, 'sizeof') = <shift, s638>
action(s136, '~') = <shift, s961>
action(s136, CONSTANT) = <shift, s759>
action(s136, IDENTIFIER) = <shift, s769>
action(s136, STRING_LITERAL) = <shift, s779>
action(s137, '!') = <shift, s956>
action(s137, '&') = <shift, s957>
action(s137, '(') = <shift, s35>
action(s137, '*') = <shift, s958>
action(s137, '+') = <shift, s959>
action(s137, '++') = <shift, s636>
action(s137, '-') = <shift, s960>
action(s137, '--') = <shift, s637>
action(s137, 'sizeof') = <shift, s638>
action(s137, '~') = <shift, s961>
action(s137, CONSTANT) = <shift, s759>
action(s137, IDENTIFIER) = <shift, s769>
action(s137, STRING_LITERAL) = <shift, s779>
action(s138, '!') = <shift, s956>
action(s138, '&') = <shift, s957>
action(s138, '(') = <shift, s35>
action(s138, '*') = <shift, s958>
action(s138, '+') = <shift, s959>
action(s138, '++') = <shift, s636>
action(s138, '-') = <shift, s960>
action(s138, '--') = <shift, s637>
action(s138, 'sizeof') = <shift, s638>
action(s138, '~') = <shift, s961>
action(s138, CONSTANT) = <shift, s759>
action(s138, IDENTIFIER) = <shift, s769>
action(s138, STRING_LITERAL) = <shift, s779>
action(s139, '!') = <shift, s956>
action(s139, '&') = <shift, s957>
action(s139, '(') = <shift, s35>
action(s139, '*') = <shift, s958>
action(s139, '+') = <shift, s959>
action(s139, '++') = <shift, s636>
action(s139, '-') = <shift, s960>
action(s139, '--') = <shift, s637>
action(s139, 'sizeof') = <shift, s638>
action(s139, '~') = <shift, s961>
action(s139, CONSTANT) = <shift, s759>
action(s139, IDENTIFIER) = <shift, s769>
action(s139, STRING_LITERAL) = <shift, s779>
action(s140, '!') = <shift, s956>
action(s140, '&') = <shift, s957>
action(s140, '(') = <shift, s35>
action(s140, '*') = <shift, s958>
action(s140, '+') = <shift, s959>
action(s140, '++') = <shift, s636>
action(s140, '-') = <shift, s960>
action(s140, '--') = <shift, s637>
action(s140, 'sizeof') = <shift, s638>
action(s140, '~') = <shift, s961>
action(s140, CONSTANT) = <shift, s759>
action(s140, IDENTIFIER) = <shift, s769>
action(s140, STRING_LITERAL) = <shift, s779>
action(s141, '!') = <shift, s956>
action(s141, '&') = <shift, s957>
action(s141, '(') = <shift, s35>
action(s141, '*') = <shift, s958>
action(s141, '+') = <shift, s959>
action(s141, '++') = <shift, s636>
action(s141, '-') = <shift, s960>
action(s141, '--') = <shift, s637>
action(s141, 'sizeof') = <shift, s638>
action(s141, '~') = <shift, s961>
action(s141, CONSTANT) = <shift, s759>
action(s141, IDENTIFIER) = <shift, s769>
action(s141, STRING_LITERAL) = <shift, s779>
action(s142, '!') = <shift, s956>
action(s142, '&') = <shift, s957>
action(s142, '(') = <shift, s35>
action(s142, '*') = <shift, s958>
action(s142, '+') = <shift, s959>
action(s142, '++') = <shift, s636>
action(s142, '-') = <shift, s960>
action(s142, '--') = <shift, s637>
action(s142, 'sizeof') = <shift, s638>
action(s142, '~') = <shift, s961>
action(s142, CONSTANT) = <shift, s759>
action(s142, IDENTIFIER) = <shift, s769>
action(s142, STRING_LITERAL) = <shift, s779>
action(s143, '!') = <shift, s956>
action(s143, '&') = <shift, s957>
action(s143, '(') = <shift, s35>
action(s143, '*') = <shift, s958>
action(s143, '+') = <shift, s959>
action(s143, '++') = <shift, s636>
action(s143, '-') = <shift, s960>
action(s143, '--') = <shift, s637>
action(s143, 'sizeof') = <shift, s638>
action(s143, '~') = <shift, s961>
action(s143, CONSTANT) = <shift, s759>
action(s143, IDENTIFIER) = <shift, s769>
action(s143, STRING_LITERAL) = <shift, s779>
action(s144, '!') = <shift, s956>
action(s144, '&') = <shift, s957>
action(s144, '(') = <shift, s35>
action(s144, '*') = <shift, s958>
action(s144, '+') = <shift, s959>
action(s144, '++') = <shift, s636>
action(s144, '-') = <shift, s960>
action(s144, '--') = <shift, s637>
action(s144, 'sizeof') = <shift, s638>
action(s144, '~') = <shift, s961>
action(s144, CONSTANT) = <shift, s759>
action(s144, IDENTIFIER) = <shift, s769>
action(s144, STRING_LITERAL) = <shift, s779>
action(s145, '!') = <shift, s956>
action(s145, '&') = <shift, s957>
action(s145, '(') = <shift, s35>
action(s145, '*') = <shift, s958>
action(s145, '+') = <shift, s959>
action(s145, '++') = <shift, s636>
action(s145, '-') = <shift, s960>
action(s145, '--') = <shift, s637>
action(s145, 'sizeof') = <shift, s638>
action(s145, '~') = <shift, s961>
action(s145, CONSTANT) = <shift, s759>
action(s145, IDENTIFIER) = <shift, s769>
action(s145, STRING_LITERAL) = <shift, s779>
action(s146, '!') = <shift, s956>
action(s146, '&') = <shift, s957>
action(s146, '(') = <shift, s35>
action(s146, '*') = <shift, s958>
action(s146, '+') = <shift, s959>
action(s146, '++') = <shift, s636>
action(s146, '-') = <shift, s960>
action(s146, '--') = <shift, s637>
action(s146, 'sizeof') = <shift, s638>
action(s146, '~') = <shift, s961>
action(s146, CONSTANT) = <shift, s759>
action(s146, IDENTIFIER) = <shift, s769>
action(s146, STRING_LITERAL) = <shift, s779>
action(s147, '!') = <shift, s956>
action(s147, '&') = <shift, s957>
action(s147, '(') = <shift, s35>
action(s147, '*') = <shift, s958>
action(s147, '+') = <shift, s959>
action(s147, '++') = <shift, s636>
action(s147, '-') = <shift, s960>
action(s147, '--') = <shift, s637>
action(s147, 'sizeof') = <shift, s638>
action(s147, '~') = <shift, s961>
action(s147, CONSTANT) = <shift, s759>
action(s147, IDENTIFIER) = <shift, s769>
action(s147, STRING_LITERAL) = <shift, s779>
action(s148, '!') = <shift, s956>
action(s148, '&') = <shift, s957>
action(s148, '(') = <shift, s35>
action(s148, '*') = <shift, s958>
action(s148, '+') = <shift, s959>
action(s148, '++') = <shift, s636>
action(s148, '-') = <shift, s960>
action(s148, '--') = <shift, s637>
action(s148, 'sizeof') = <shift, s638>
action(s148, '~') = <shift, s961>
action(s148, CONSTANT) = <shift, s759>
action(s148, IDENTIFIER) = <shift, s769>
action(s148, STRING_LITERAL) = <shift, s779>
action(s149, '!') = <shift, s956>
action(s149, '&') = <shift, s957>
action(s149, '(') = <shift, s36>
action(s149, '*') = <shift, s958>
action(s149, '+') = <shift, s959>
action(s149, '++') = <shift, s639>
action(s149, '-') = <shift, s960>
action(s149, '--') = <shift, s640>
action(s149, 'sizeof') = <shift, s641>
action(s149, '~') = <shift, s961>
action(s149, CONSTANT) = <shift, s760>
action(s149, IDENTIFIER) = <shift, s770>
action(s149, STRING_LITERAL) = <shift, s780>
action(s150, '!') = <shift, s956>
action(s150, '&') = <shift, s957>
action(s150, '(') = <shift, s36>
action(s150, '*') = <shift, s958>
action(s150, '+') = <shift, s959>
action(s150, '++') = <shift, s639>
action(s150, '-') = <shift, s960>
action(s150, '--') = <shift, s640>
action(s150, ']') = <shift, s391>
action(s150, 'sizeof') = <shift, s641>
action(s150, '~') = <shift, s961>
action(s150, CONSTANT) = <shift, s760>
action(s150, IDENTIFIER) = <shift, s770>
action(s150, STRING_LITERAL) = <shift, s780>
action(s151, '!') = <shift, s956>
action(s151, '&') = <shift, s957>
action(s151, '(') = <shift, s36>
action(s151, '*') = <shift, s958>
action(s151, '+') = <shift, s959>
action(s151, '++') = <shift, s639>
action(s151, '-') = <shift, s960>
action(s151, '--') = <shift, s640>
action(s151, ']') = <shift, s392>
action(s151, 'sizeof') = <shift, s641>
action(s151, '~') = <shift, s961>
action(s151, CONSTANT) = <shift, s760>
action(s151, IDENTIFIER) = <shift, s770>
action(s151, STRING_LITERAL) = <shift, s780>
action(s152, '!') = <shift, s956>
action(s152, '&') = <shift, s957>
action(s152, '(') = <shift, s36>
action(s152, '*') = <shift, s958>
action(s152, '+') = <shift, s959>
action(s152, '++') = <shift, s639>
action(s152, '-') = <shift, s960>
action(s152, '--') = <shift, s640>
action(s152, ']') = <shift, s403>
action(s152, 'sizeof') = <shift, s641>
action(s152, '~') = <shift, s961>
action(s152, CONSTANT) = <shift, s760>
action(s152, IDENTIFIER) = <shift, s770>
action(s152, STRING_LITERAL) = <shift, s780>
action(s153, '!') = <shift, s956>
action(s153, '&') = <shift, s957>
action(s153, '(') = <shift, s36>
action(s153, '*') = <shift, s958>
action(s153, '+') = <shift, s959>
action(s153, '++') = <shift, s639>
action(s153, '-') = <shift, s960>
action(s153, '--') = <shift, s640>
action(s153, ']') = <shift, s404>
action(s153, 'sizeof') = <shift, s641>
action(s153, '~') = <shift, s961>
action(s153, CONSTANT) = <shift, s760>
action(s153, IDENTIFIER) = <shift, s770>
action(s153, STRING_LITERAL) = <shift, s780>
action(s154, '!') = <shift, s956>
action(s154, '&') = <shift, s957>
action(s154, '(') = <shift, s36>
action(s154, '*') = <shift, s958>
action(s154, '+') = <shift, s959>
action(s154, '++') = <shift, s639>
action(s154, '-') = <shift, s960>
action(s154, '--') = <shift, s640>
action(s154, ']') = <shift, s433>
action(s154, 'sizeof') = <shift, s641>
action(s154, '~') = <shift, s961>
action(s154, CONSTANT) = <shift, s760>
action(s154, IDENTIFIER) = <shift, s770>
action(s154, STRING_LITERAL) = <shift, s780>
action(s155, '!') = <shift, s956>
action(s155, '&') = <shift, s957>
action(s155, '(') = <shift, s36>
action(s155, '*') = <shift, s958>
action(s155, '+') = <shift, s959>
action(s155, '++') = <shift, s639>
action(s155, '-') = <shift, s960>
action(s155, '--') = <shift, s640>
action(s155, ']') = <shift, s434>
action(s155, 'sizeof') = <shift, s641>
action(s155, '~') = <shift, s961>
action(s155, CONSTANT) = <shift, s760>
action(s155, IDENTIFIER) = <shift, s770>
action(s155, STRING_LITERAL) = <shift, s780>
action(s156, '!') = <shift, s956>
action(s156, '&') = <shift, s957>
action(s156, '(') = <shift, s36>
action(s156, '*') = <shift, s958>
action(s156, '+') = <shift, s959>
action(s156, '++') = <shift, s639>
action(s156, '-') = <shift, s960>
action(s156, '--') = <shift, s640>
action(s156, ']') = <shift, s435>
action(s156, 'sizeof') = <shift, s641>
action(s156, '~') = <shift, s961>
action(s156, CONSTANT) = <shift, s760>
action(s156, IDENTIFIER) = <shift, s770>
action(s156, STRING_LITERAL) = <shift, s780>
action(s157, '!') = <shift, s956>
action(s157, '&') = <shift, s957>
action(s157, '(') = <shift, s36>
action(s157, '*') = <shift, s958>
action(s157, '+') = <shift, s959>
action(s157, '++') = <shift, s639>
action(s157, '-') = <shift, s960>
action(s157, '--') = <shift, s640>
action(s157, 'sizeof') = <shift, s641>
action(s157, '~') = <shift, s961>
action(s157, CONSTANT) = <shift, s760>
action(s157, IDENTIFIER) = <shift, s770>
action(s157, STRING_LITERAL) = <shift, s780>
action(s158, '!') = <shift, s956>
action(s158, '&') = <shift, s957>
action(s158, '(') = <shift, s36>
action(s158, '*') = <shift, s958>
action(s158, '+') = <shift, s959>
action(s158, '++') = <shift, s639>
action(s158, '-') = <shift, s960>
action(s158, '--') = <shift, s640>
action(s158, 'sizeof') = <shift, s641>
action(s158, '~') = <shift, s961>
action(s158, CONSTANT) = <shift, s760>
action(s158, IDENTIFIER) = <shift, s770>
action(s158, STRING_LITERAL) = <shift, s780>
action(s159, '!') = <shift, s956>
action(s159, '&') = <shift, s957>
action(s159, '(') = <shift, s36>
action(s159, '*') = <shift, s958>
action(s159, '+') = <shift, s959>
action(s159, '++') = <shift, s639>
action(s159, '-') = <shift, s960>
action(s159, '--') = <shift, s640>
action(s159, 'sizeof') = <shift, s641>
action(s159, '~') = <shift, s961>
action(s159, CONSTANT) = <shift, s760>
action(s159, IDENTIFIER) = <shift, s770>
action(s159, STRING_LITERAL) = <shift, s780>
action(s160, '!') = <shift, s956>
action(s160, '&') = <shift, s957>
action(s160, '(') = <shift, s36>
action(s160, '*') = <shift, s958>
action(s160, '+') = <shift, s959>
action(s160, '++') = <shift, s639>
action(s160, '-') = <shift, s960>
action(s160, '--') = <shift, s640>
action(s160, 'sizeof') = <shift, s641>
action(s160, '~') = <shift, s961>
action(s160, CONSTANT) = <shift, s760>
action(s160, IDENTIFIER) = <shift, s770>
action(s160, STRING_LITERAL) = <shift, s780>
action(s161, '!') = <shift, s956>
action(s161, '&') = <shift, s957>
action(s161, '(') = <shift, s36>
action(s161, '*') = <shift, s958>
action(s161, '+') = <shift, s959>
action(s161, '++') = <shift, s639>
action(s161, '-') = <shift, s960>
action(s161, '--') = <shift, s640>
action(s161, 'sizeof') = <shift, s641>
action(s161, '~') = <shift, s961>
action(s161, CONSTANT) = <shift, s760>
action(s161, IDENTIFIER) = <shift, s770>
action(s161, STRING_LITERAL) = <shift, s780>
action(s162, '!') = <shift, s956>
action(s162, '&') = <shift, s957>
action(s162, '(') = <shift, s36>
action(s162, '*') = <shift, s958>
action(s162, '+') = <shift, s959>
action(s162, '++') = <shift, s639>
action(s162, '-') = <shift, s960>
action(s162, '--') = <shift, s640>
action(s162, 'sizeof') = <shift, s641>
action(s162, '~') = <shift, s961>
action(s162, CONSTANT) = <shift, s760>
action(s162, IDENTIFIER) = <shift, s770>
action(s162, STRING_LITERAL) = <shift, s780>
action(s163, '!') = <shift, s956>
action(s163, '&') = <shift, s957>
action(s163, '(') = <shift, s36>
action(s163, '*') = <shift, s958>
action(s163, '+') = <shift, s959>
action(s163, '++') = <shift, s639>
action(s163, '-') = <shift, s960>
action(s163, '--') = <shift, s640>
action(s163, 'sizeof') = <shift, s641>
action(s163, '~') = <shift, s961>
action(s163, CONSTANT) = <shift, s760>
action(s163, IDENTIFIER) = <shift, s770>
action(s163, STRING_LITERAL) = <shift, s780>
action(s164, '!') = <shift, s956>
action(s164, '&') = <shift, s957>
action(s164, '(') = <shift, s36>
action(s164, '*') = <shift, s958>
action(s164, '+') = <shift, s959>
action(s164, '++') = <shift, s639>
action(s164, '-') = <shift, s960>
action(s164, '--') = <shift, s640>
action(s164, 'sizeof') = <shift, s641>
action(s164, '~') = <shift, s961>
action(s164, CONSTANT) = <shift, s760>
action(s164, IDENTIFIER) = <shift, s770>
action(s164, STRING_LITERAL) = <shift, s780>
action(s165, '!') = <shift, s956>
action(s165, '&') = <shift, s957>
action(s165, '(') = <shift, s36>
action(s165, '*') = <shift, s958>
action(s165, '+') = <shift, s959>
action(s165, '++') = <shift, s639>
action(s165, '-') = <shift, s960>
action(s165, '--') = <shift, s640>
action(s165, 'sizeof') = <shift, s641>
action(s165, '~') = <shift, s961>
action(s165, CONSTANT) = <shift, s760>
action(s165, IDENTIFIER) = <shift, s770>
action(s165, STRING_LITERAL) = <shift, s780>
action(s166, '!') = <shift, s956>
action(s166, '&') = <shift, s957>
action(s166, '(') = <shift, s36>
action(s166, '*') = <shift, s958>
action(s166, '+') = <shift, s959>
action(s166, '++') = <shift, s639>
action(s166, '-') = <shift, s960>
action(s166, '--') = <shift, s640>
action(s166, 'sizeof') = <shift, s641>
action(s166, '~') = <shift, s961>
action(s166, CONSTANT) = <shift, s760>
action(s166, IDENTIFIER) = <shift, s770>
action(s166, STRING_LITERAL) = <shift, s780>
action(s167, '!') = <shift, s956>
action(s167, '&') = <shift, s957>
action(s167, '(') = <shift, s36>
action(s167, '*') = <shift, s958>
action(s167, '+') = <shift, s959>
action(s167, '++') = <shift, s639>
action(s167, '-') = <shift, s960>
action(s167, '--') = <shift, s640>
action(s167, 'sizeof') = <shift, s641>
action(s167, '~') = <shift, s961>
action(s167, CONSTANT) = <shift, s760>
action(s167, IDENTIFIER) = <shift, s770>
action(s167, STRING_LITERAL) = <shift, s780>
action(s168, '!') = <shift, s956>
action(s168, '&') = <shift, s957>
action(s168, '(') = <shift, s36>
action(s168, '*') = <shift, s958>
action(s168, '+') = <shift, s959>
action(s168, '++') = <shift, s639>
action(s168, '-') = <shift, s960>
action(s168, '--') = <shift, s640>
action(s168, 'sizeof') = <shift, s641>
action(s168, '~') = <shift, s961>
action(s168, CONSTANT) = <shift, s760>
action(s168, IDENTIFIER) = <shift, s770>
action(s168, STRING_LITERAL) = <shift, s780>
action(s169, '!') = <shift, s956>
action(s169, '&') = <shift, s957>
action(s169, '(') = <shift, s36>
action(s169, '*') = <shift, s958>
action(s169, '+') = <shift, s959>
action(s169, '++') = <shift, s639>
action(s169, '-') = <shift, s960>
action(s169, '--') = <shift, s640>
action(s169, 'sizeof') = <shift, s641>
action(s169, '~') = <shift, s961>
action(s169, CONSTANT) = <shift, s760>
action(s169, IDENTIFIER) = <shift, s770>
action(s169, STRING_LITERAL) = <shift, s780>
action(s170, '!=') = <reduce, shift_expression -> additive_expression>
action(s170, '&&') = <reduce, shift_expression -> additive_expression>
action(s170, '&') = <reduce, shift_expression -> additive_expression>
action(s170, ')') = <reduce, shift_expression -> additive_expression>
action(s170, '+') = <shift, s188>
action(s170, ',') = <reduce, shift_expression -> additive_expression>
action(s170, '-') = <shift, s200>
action(s170, '<') = <reduce, shift_expression -> additive_expression>
action(s170, '<<') = <reduce, shift_expression -> additive_expression>
action(s170, '<=') = <reduce, shift_expression -> additive_expression>
action(s170, '==') = <reduce, shift_expression -> additive_expression>
action(s170, '>') = <reduce, shift_expression -> additive_expression>
action(s170, '>=') = <reduce, shift_expression -> additive_expression>
action(s170, '>>') = <reduce, shift_expression -> additive_expression>
action(s170, '?') = <reduce, shift_expression -> additive_expression>
action(s170, '^') = <reduce, shift_expression -> additive_expression>
action(s170, '|') = <reduce, shift_expression -> additive_expression>
action(s170, '||') = <reduce, shift_expression -> additive_expression>
action(s171, '!=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s171, '&&') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s171, '&') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s171, ')') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s171, '+') = <shift, s188>
action(s171, ',') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s171, '-') = <shift, s200>
action(s171, '<') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s171, '<<') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s171, '<=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s171, '==') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s171, '>') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s171, '>=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s171, '>>') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s171, '?') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s171, '^') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s171, '|') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s171, '||') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s172, '!=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s172, '&&') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s172, '&') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s172, ')') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s172, '+') = <shift, s188>
action(s172, ',') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s172, '-') = <shift, s200>
action(s172, '<') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s172, '<<') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s172, '<=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s172, '==') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s172, '>') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s172, '>=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s172, '>>') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s172, '?') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s172, '^') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s172, '|') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s172, '||') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s173, '!=') = <reduce, shift_expression -> additive_expression>
action(s173, '&&') = <reduce, shift_expression -> additive_expression>
action(s173, '&') = <reduce, shift_expression -> additive_expression>
action(s173, '+') = <shift, s189>
action(s173, ',') = <reduce, shift_expression -> additive_expression>
action(s173, '-') = <shift, s201>
action(s173, ':') = <reduce, shift_expression -> additive_expression>
action(s173, '<') = <reduce, shift_expression -> additive_expression>
action(s173, '<<') = <reduce, shift_expression -> additive_expression>
action(s173, '<=') = <reduce, shift_expression -> additive_expression>
action(s173, '==') = <reduce, shift_expression -> additive_expression>
action(s173, '>') = <reduce, shift_expression -> additive_expression>
action(s173, '>=') = <reduce, shift_expression -> additive_expression>
action(s173, '>>') = <reduce, shift_expression -> additive_expression>
action(s173, '?') = <reduce, shift_expression -> additive_expression>
action(s173, '^') = <reduce, shift_expression -> additive_expression>
action(s173, '|') = <reduce, shift_expression -> additive_expression>
action(s173, '||') = <reduce, shift_expression -> additive_expression>
action(s174, '!=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s174, '&&') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s174, '&') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s174, '+') = <shift, s189>
action(s174, ',') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s174, '-') = <shift, s201>
action(s174, ':') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s174, '<') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s174, '<<') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s174, '<=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s174, '==') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s174, '>') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s174, '>=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s174, '>>') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s174, '?') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s174, '^') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s174, '|') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s174, '||') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s175, '!=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s175, '&&') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s175, '&') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s175, '+') = <shift, s189>
action(s175, ',') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s175, '-') = <shift, s201>
action(s175, ':') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s175, '<') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s175, '<<') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s175, '<=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s175, '==') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s175, '>') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s175, '>=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s175, '>>') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s175, '?') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s175, '^') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s175, '|') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s175, '||') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s176, '!=') = <reduce, shift_expression -> additive_expression>
action(s176, '&&') = <reduce, shift_expression -> additive_expression>
action(s176, '&') = <reduce, shift_expression -> additive_expression>
action(s176, '+') = <shift, s190>
action(s176, ',') = <reduce, shift_expression -> additive_expression>
action(s176, '-') = <shift, s202>
action(s176, ';') = <reduce, shift_expression -> additive_expression>
action(s176, '<') = <reduce, shift_expression -> additive_expression>
action(s176, '<<') = <reduce, shift_expression -> additive_expression>
action(s176, '<=') = <reduce, shift_expression -> additive_expression>
action(s176, '==') = <reduce, shift_expression -> additive_expression>
action(s176, '>') = <reduce, shift_expression -> additive_expression>
action(s176, '>=') = <reduce, shift_expression -> additive_expression>
action(s176, '>>') = <reduce, shift_expression -> additive_expression>
action(s176, '?') = <reduce, shift_expression -> additive_expression>
action(s176, '^') = <reduce, shift_expression -> additive_expression>
action(s176, '|') = <reduce, shift_expression -> additive_expression>
action(s176, '||') = <reduce, shift_expression -> additive_expression>
action(s177, '!=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s177, '&&') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s177, '&') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s177, '+') = <shift, s190>
action(s177, ',') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s177, '-') = <shift, s202>
action(s177, ';') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s177, '<') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s177, '<<') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s177, '<=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s177, '==') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s177, '>') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s177, '>=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s177, '>>') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s177, '?') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s177, '^') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s177, '|') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s177, '||') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s178, '!=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s178, '&&') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s178, '&') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s178, '+') = <shift, s190>
action(s178, ',') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s178, '-') = <shift, s202>
action(s178, ';') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s178, '<') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s178, '<<') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s178, '<=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s178, '==') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s178, '>') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s178, '>=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s178, '>>') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s178, '?') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s178, '^') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s178, '|') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s178, '||') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s179, '!=') = <reduce, shift_expression -> additive_expression>
action(s179, '&&') = <reduce, shift_expression -> additive_expression>
action(s179, '&') = <reduce, shift_expression -> additive_expression>
action(s179, '+') = <shift, s191>
action(s179, ',') = <reduce, shift_expression -> additive_expression>
action(s179, '-') = <shift, s203>
action(s179, '<') = <reduce, shift_expression -> additive_expression>
action(s179, '<<') = <reduce, shift_expression -> additive_expression>
action(s179, '<=') = <reduce, shift_expression -> additive_expression>
action(s179, '==') = <reduce, shift_expression -> additive_expression>
action(s179, '>') = <reduce, shift_expression -> additive_expression>
action(s179, '>=') = <reduce, shift_expression -> additive_expression>
action(s179, '>>') = <reduce, shift_expression -> additive_expression>
action(s179, '?') = <reduce, shift_expression -> additive_expression>
action(s179, ']') = <reduce, shift_expression -> additive_expression>
action(s179, '^') = <reduce, shift_expression -> additive_expression>
action(s179, '|') = <reduce, shift_expression -> additive_expression>
action(s179, '||') = <reduce, shift_expression -> additive_expression>
action(s180, '!=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s180, '&&') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s180, '&') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s180, '+') = <shift, s191>
action(s180, ',') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s180, '-') = <shift, s203>
action(s180, '<') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s180, '<<') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s180, '<=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s180, '==') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s180, '>') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s180, '>=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s180, '>>') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s180, '?') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s180, ']') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s180, '^') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s180, '|') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s180, '||') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s181, '!=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s181, '&&') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s181, '&') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s181, '+') = <shift, s191>
action(s181, ',') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s181, '-') = <shift, s203>
action(s181, '<') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s181, '<<') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s181, '<=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s181, '==') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s181, '>') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s181, '>=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s181, '>>') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s181, '?') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s181, ']') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s181, '^') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s181, '|') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s181, '||') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s182, '!=') = <reduce, shift_expression -> additive_expression>
action(s182, '&&') = <reduce, shift_expression -> additive_expression>
action(s182, '&') = <reduce, shift_expression -> additive_expression>
action(s182, '+') = <shift, s192>
action(s182, ',') = <reduce, shift_expression -> additive_expression>
action(s182, '-') = <shift, s204>
action(s182, '<') = <reduce, shift_expression -> additive_expression>
action(s182, '<<') = <reduce, shift_expression -> additive_expression>
action(s182, '<=') = <reduce, shift_expression -> additive_expression>
action(s182, '==') = <reduce, shift_expression -> additive_expression>
action(s182, '>') = <reduce, shift_expression -> additive_expression>
action(s182, '>=') = <reduce, shift_expression -> additive_expression>
action(s182, '>>') = <reduce, shift_expression -> additive_expression>
action(s182, '?') = <reduce, shift_expression -> additive_expression>
action(s182, '^') = <reduce, shift_expression -> additive_expression>
action(s182, '|') = <reduce, shift_expression -> additive_expression>
action(s182, '||') = <reduce, shift_expression -> additive_expression>
action(s182, '}') = <reduce, shift_expression -> additive_expression>
action(s183, '!=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s183, '&&') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s183, '&') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s183, '+') = <shift, s192>
action(s183, ',') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s183, '-') = <shift, s204>
action(s183, '<') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s183, '<<') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s183, '<=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s183, '==') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s183, '>') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s183, '>=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s183, '>>') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s183, '?') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s183, '^') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s183, '|') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s183, '||') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s183, '}') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s184, '!=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s184, '&&') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s184, '&') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s184, '+') = <shift, s192>
action(s184, ',') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s184, '-') = <shift, s204>
action(s184, '<') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s184, '<<') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s184, '<=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s184, '==') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s184, '>') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s184, '>=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s184, '>>') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s184, '?') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s184, '^') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s184, '|') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s184, '||') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s184, '}') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s185, '!=') = <reduce, shift_expression -> additive_expression>
action(s185, '&&') = <reduce, shift_expression -> additive_expression>
action(s185, '&') = <reduce, shift_expression -> additive_expression>
action(s185, '+') = <shift, s193>
action(s185, '-') = <shift, s205>
action(s185, '<') = <reduce, shift_expression -> additive_expression>
action(s185, '<<') = <reduce, shift_expression -> additive_expression>
action(s185, '<=') = <reduce, shift_expression -> additive_expression>
action(s185, '==') = <reduce, shift_expression -> additive_expression>
action(s185, '>') = <reduce, shift_expression -> additive_expression>
action(s185, '>=') = <reduce, shift_expression -> additive_expression>
action(s185, '>>') = <reduce, shift_expression -> additive_expression>
action(s185, '?') = <reduce, shift_expression -> additive_expression>
action(s185, ']') = <reduce, shift_expression -> additive_expression>
action(s185, '^') = <reduce, shift_expression -> additive_expression>
action(s185, '|') = <reduce, shift_expression -> additive_expression>
action(s185, '||') = <reduce, shift_expression -> additive_expression>
action(s186, '!=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s186, '&&') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s186, '&') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s186, '+') = <shift, s193>
action(s186, '-') = <shift, s205>
action(s186, '<') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s186, '<<') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s186, '<=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s186, '==') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s186, '>') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s186, '>=') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s186, '>>') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s186, '?') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s186, ']') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s186, '^') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s186, '|') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s186, '||') = <reduce, shift_expression -> shift_expression '<<' additive_expression>
action(s187, '!=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s187, '&&') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s187, '&') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s187, '+') = <shift, s193>
action(s187, '-') = <shift, s205>
action(s187, '<') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s187, '<<') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s187, '<=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s187, '==') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s187, '>') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s187, '>=') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s187, '>>') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s187, '?') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s187, ']') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s187, '^') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s187, '|') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s187, '||') = <reduce, shift_expression -> shift_expression '>>' additive_expression>
action(s188, '!') = <shift, s956>
action(s188, '&') = <shift, s957>
action(s188, '(') = <shift, s29>
action(s188, '*') = <shift, s958>
action(s188, '+') = <shift, s959>
action(s188, '++') = <shift, s624>
action(s188, '-') = <shift, s960>
action(s188, '--') = <shift, s625>
action(s188, 'sizeof') = <shift, s626>
action(s188, '~') = <shift, s961>
action(s188, CONSTANT) = <shift, s755>
action(s188, IDENTIFIER) = <shift, s765>
action(s188, STRING_LITERAL) = <shift, s775>
action(s189, '!') = <shift, s956>
action(s189, '&') = <shift, s957>
action(s189, '(') = <shift, s31>
action(s189, '*') = <shift, s958>
action(s189, '+') = <shift, s959>
action(s189, '++') = <shift, s627>
action(s189, '-') = <shift, s960>
action(s189, '--') = <shift, s628>
action(s189, 'sizeof') = <shift, s629>
action(s189, '~') = <shift, s961>
action(s189, CONSTANT) = <shift, s756>
action(s189, IDENTIFIER) = <shift, s766>
action(s189, STRING_LITERAL) = <shift, s776>
action(s190, '!') = <shift, s956>
action(s190, '&') = <shift, s957>
action(s190, '(') = <shift, s32>
action(s190, '*') = <shift, s958>
action(s190, '+') = <shift, s959>
action(s190, '++') = <shift, s630>
action(s190, '-') = <shift, s960>
action(s190, '--') = <shift, s631>
action(s190, 'sizeof') = <shift, s632>
action(s190, '~') = <shift, s961>
action(s190, CONSTANT) = <shift, s757>
action(s190, IDENTIFIER) = <shift, s767>
action(s190, STRING_LITERAL) = <shift, s777>
action(s191, '!') = <shift, s956>
action(s191, '&') = <shift, s957>
action(s191, '(') = <shift, s34>
action(s191, '*') = <shift, s958>
action(s191, '+') = <shift, s959>
action(s191, '++') = <shift, s633>
action(s191, '-') = <shift, s960>
action(s191, '--') = <shift, s634>
action(s191, 'sizeof') = <shift, s635>
action(s191, '~') = <shift, s961>
action(s191, CONSTANT) = <shift, s758>
action(s191, IDENTIFIER) = <shift, s768>
action(s191, STRING_LITERAL) = <shift, s778>
action(s192, '!') = <shift, s956>
action(s192, '&') = <shift, s957>
action(s192, '(') = <shift, s35>
action(s192, '*') = <shift, s958>
action(s192, '+') = <shift, s959>
action(s192, '++') = <shift, s636>
action(s192, '-') = <shift, s960>
action(s192, '--') = <shift, s637>
action(s192, 'sizeof') = <shift, s638>
action(s192, '~') = <shift, s961>
action(s192, CONSTANT) = <shift, s759>
action(s192, IDENTIFIER) = <shift, s769>
action(s192, STRING_LITERAL) = <shift, s779>
action(s193, '!') = <shift, s956>
action(s193, '&') = <shift, s957>
action(s193, '(') = <shift, s36>
action(s193, '*') = <shift, s958>
action(s193, '+') = <shift, s959>
action(s193, '++') = <shift, s639>
action(s193, '-') = <shift, s960>
action(s193, '--') = <shift, s640>
action(s193, 'sizeof') = <shift, s641>
action(s193, '~') = <shift, s961>
action(s193, CONSTANT) = <shift, s760>
action(s193, IDENTIFIER) = <shift, s770>
action(s193, STRING_LITERAL) = <shift, s780>
action(s194, '!=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s194, '%') = <shift, s280>
action(s194, '&&') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s194, '&') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s194, ')') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s194, '*') = <shift, s281>
action(s194, '+') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s194, ',') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s194, '-') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s194, '/') = <shift, s282>
action(s194, '<') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s194, '<<') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s194, '<=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s194, '==') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s194, '>') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s194, '>=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s194, '>>') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s194, '?') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s194, '^') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s194, '|') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s194, '||') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s195, '!=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s195, '%') = <shift, s285>
action(s195, '&&') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s195, '&') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s195, '*') = <shift, s286>
action(s195, '+') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s195, ',') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s195, '-') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s195, '/') = <shift, s287>
action(s195, ':') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s195, '<') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s195, '<<') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s195, '<=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s195, '==') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s195, '>') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s195, '>=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s195, '>>') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s195, '?') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s195, '^') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s195, '|') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s195, '||') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s196, '!=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s196, '%') = <shift, s290>
action(s196, '&&') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s196, '&') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s196, '*') = <shift, s291>
action(s196, '+') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s196, ',') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s196, '-') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s196, '/') = <shift, s292>
action(s196, ';') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s196, '<') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s196, '<<') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s196, '<=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s196, '==') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s196, '>') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s196, '>=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s196, '>>') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s196, '?') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s196, '^') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s196, '|') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s196, '||') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s197, '!=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s197, '%') = <shift, s295>
action(s197, '&&') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s197, '&') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s197, '*') = <shift, s296>
action(s197, '+') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s197, ',') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s197, '-') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s197, '/') = <shift, s297>
action(s197, '<') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s197, '<<') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s197, '<=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s197, '==') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s197, '>') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s197, '>=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s197, '>>') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s197, '?') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s197, ']') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s197, '^') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s197, '|') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s197, '||') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s198, '!=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s198, '%') = <shift, s300>
action(s198, '&&') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s198, '&') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s198, '*') = <shift, s301>
action(s198, '+') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s198, ',') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s198, '-') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s198, '/') = <shift, s302>
action(s198, '<') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s198, '<<') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s198, '<=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s198, '==') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s198, '>') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s198, '>=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s198, '>>') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s198, '?') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s198, '^') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s198, '|') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s198, '||') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s198, '}') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s199, '!=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s199, '%') = <shift, s305>
action(s199, '&&') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s199, '&') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s199, '*') = <shift, s306>
action(s199, '+') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s199, '-') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s199, '/') = <shift, s307>
action(s199, '<') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s199, '<<') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s199, '<=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s199, '==') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s199, '>') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s199, '>=') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s199, '>>') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s199, '?') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s199, ']') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s199, '^') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s199, '|') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s199, '||') = <reduce, additive_expression -> additive_expression '+' multiplicative_expression>
action(s200, '!') = <shift, s956>
action(s200, '&') = <shift, s957>
action(s200, '(') = <shift, s29>
action(s200, '*') = <shift, s958>
action(s200, '+') = <shift, s959>
action(s200, '++') = <shift, s624>
action(s200, '-') = <shift, s960>
action(s200, '--') = <shift, s625>
action(s200, 'sizeof') = <shift, s626>
action(s200, '~') = <shift, s961>
action(s200, CONSTANT) = <shift, s755>
action(s200, IDENTIFIER) = <shift, s765>
action(s200, STRING_LITERAL) = <shift, s775>
action(s201, '!') = <shift, s956>
action(s201, '&') = <shift, s957>
action(s201, '(') = <shift, s31>
action(s201, '*') = <shift, s958>
action(s201, '+') = <shift, s959>
action(s201, '++') = <shift, s627>
action(s201, '-') = <shift, s960>
action(s201, '--') = <shift, s628>
action(s201, 'sizeof') = <shift, s629>
action(s201, '~') = <shift, s961>
action(s201, CONSTANT) = <shift, s756>
action(s201, IDENTIFIER) = <shift, s766>
action(s201, STRING_LITERAL) = <shift, s776>
action(s202, '!') = <shift, s956>
action(s202, '&') = <shift, s957>
action(s202, '(') = <shift, s32>
action(s202, '*') = <shift, s958>
action(s202, '+') = <shift, s959>
action(s202, '++') = <shift, s630>
action(s202, '-') = <shift, s960>
action(s202, '--') = <shift, s631>
action(s202, 'sizeof') = <shift, s632>
action(s202, '~') = <shift, s961>
action(s202, CONSTANT) = <shift, s757>
action(s202, IDENTIFIER) = <shift, s767>
action(s202, STRING_LITERAL) = <shift, s777>
action(s203, '!') = <shift, s956>
action(s203, '&') = <shift, s957>
action(s203, '(') = <shift, s34>
action(s203, '*') = <shift, s958>
action(s203, '+') = <shift, s959>
action(s203, '++') = <shift, s633>
action(s203, '-') = <shift, s960>
action(s203, '--') = <shift, s634>
action(s203, 'sizeof') = <shift, s635>
action(s203, '~') = <shift, s961>
action(s203, CONSTANT) = <shift, s758>
action(s203, IDENTIFIER) = <shift, s768>
action(s203, STRING_LITERAL) = <shift, s778>
action(s204, '!') = <shift, s956>
action(s204, '&') = <shift, s957>
action(s204, '(') = <shift, s35>
action(s204, '*') = <shift, s958>
action(s204, '+') = <shift, s959>
action(s204, '++') = <shift, s636>
action(s204, '-') = <shift, s960>
action(s204, '--') = <shift, s637>
action(s204, 'sizeof') = <shift, s638>
action(s204, '~') = <shift, s961>
action(s204, CONSTANT) = <shift, s759>
action(s204, IDENTIFIER) = <shift, s769>
action(s204, STRING_LITERAL) = <shift, s779>
action(s205, '!') = <shift, s956>
action(s205, '&') = <shift, s957>
action(s205, '(') = <shift, s36>
action(s205, '*') = <shift, s958>
action(s205, '+') = <shift, s959>
action(s205, '++') = <shift, s639>
action(s205, '-') = <shift, s960>
action(s205, '--') = <shift, s640>
action(s205, 'sizeof') = <shift, s641>
action(s205, '~') = <shift, s961>
action(s205, CONSTANT) = <shift, s760>
action(s205, IDENTIFIER) = <shift, s770>
action(s205, STRING_LITERAL) = <shift, s780>
action(s206, '!=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s206, '%') = <shift, s280>
action(s206, '&&') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s206, '&') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s206, ')') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s206, '*') = <shift, s281>
action(s206, '+') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s206, ',') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s206, '-') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s206, '/') = <shift, s282>
action(s206, '<') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s206, '<<') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s206, '<=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s206, '==') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s206, '>') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s206, '>=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s206, '>>') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s206, '?') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s206, '^') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s206, '|') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s206, '||') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s207, '!=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s207, '%') = <shift, s285>
action(s207, '&&') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s207, '&') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s207, '*') = <shift, s286>
action(s207, '+') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s207, ',') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s207, '-') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s207, '/') = <shift, s287>
action(s207, ':') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s207, '<') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s207, '<<') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s207, '<=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s207, '==') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s207, '>') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s207, '>=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s207, '>>') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s207, '?') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s207, '^') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s207, '|') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s207, '||') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s208, '!=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s208, '%') = <shift, s290>
action(s208, '&&') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s208, '&') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s208, '*') = <shift, s291>
action(s208, '+') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s208, ',') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s208, '-') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s208, '/') = <shift, s292>
action(s208, ';') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s208, '<') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s208, '<<') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s208, '<=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s208, '==') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s208, '>') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s208, '>=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s208, '>>') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s208, '?') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s208, '^') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s208, '|') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s208, '||') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s209, '!=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s209, '%') = <shift, s295>
action(s209, '&&') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s209, '&') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s209, '*') = <shift, s296>
action(s209, '+') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s209, ',') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s209, '-') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s209, '/') = <shift, s297>
action(s209, '<') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s209, '<<') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s209, '<=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s209, '==') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s209, '>') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s209, '>=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s209, '>>') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s209, '?') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s209, ']') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s209, '^') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s209, '|') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s209, '||') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s210, '!=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s210, '%') = <shift, s300>
action(s210, '&&') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s210, '&') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s210, '*') = <shift, s301>
action(s210, '+') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s210, ',') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s210, '-') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s210, '/') = <shift, s302>
action(s210, '<') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s210, '<<') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s210, '<=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s210, '==') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s210, '>') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s210, '>=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s210, '>>') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s210, '?') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s210, '^') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s210, '|') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s210, '||') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s210, '}') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s211, '!=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s211, '%') = <shift, s305>
action(s211, '&&') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s211, '&') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s211, '*') = <shift, s306>
action(s211, '+') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s211, '-') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s211, '/') = <shift, s307>
action(s211, '<') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s211, '<<') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s211, '<=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s211, '==') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s211, '>') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s211, '>=') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s211, '>>') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s211, '?') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s211, ']') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s211, '^') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s211, '|') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s211, '||') = <reduce, additive_expression -> additive_expression '-' multiplicative_expression>
action(s212, '!=') = <reduce, additive_expression -> multiplicative_expression>
action(s212, '%') = <shift, s280>
action(s212, '&&') = <reduce, additive_expression -> multiplicative_expression>
action(s212, '&') = <reduce, additive_expression -> multiplicative_expression>
action(s212, ')') = <reduce, additive_expression -> multiplicative_expression>
action(s212, '*') = <shift, s281>
action(s212, '+') = <reduce, additive_expression -> multiplicative_expression>
action(s212, ',') = <reduce, additive_expression -> multiplicative_expression>
action(s212, '-') = <reduce, additive_expression -> multiplicative_expression>
action(s212, '/') = <shift, s282>
action(s212, '<') = <reduce, additive_expression -> multiplicative_expression>
action(s212, '<<') = <reduce, additive_expression -> multiplicative_expression>
action(s212, '<=') = <reduce, additive_expression -> multiplicative_expression>
action(s212, '==') = <reduce, additive_expression -> multiplicative_expression>
action(s212, '>') = <reduce, additive_expression -> multiplicative_expression>
action(s212, '>=') = <reduce, additive_expression -> multiplicative_expression>
action(s212, '>>') = <reduce, additive_expression -> multiplicative_expression>
action(s212, '?') = <reduce, additive_expression -> multiplicative_expression>
action(s212, '^') = <reduce, additive_expression -> multiplicative_expression>
action(s212, '|') = <reduce, additive_expression -> multiplicative_expression>
action(s212, '||') = <reduce, additive_expression -> multiplicative_expression>
action(s213, '!=') = <reduce, additive_expression -> multiplicative_expression>
action(s213, '%') = <shift, s285>
action(s213, '&&') = <reduce, additive_expression -> multiplicative_expression>
action(s213, '&') = <reduce, additive_expression -> multiplicative_expression>
action(s213, '*') = <shift, s286>
action(s213, '+') = <reduce, additive_expression -> multiplicative_expression>
action(s213, ',') = <reduce, additive_expression -> multiplicative_expression>
action(s213, '-') = <reduce, additive_expression -> multiplicative_expression>
action(s213, '/') = <shift, s287>
action(s213, ':') = <reduce, additive_expression -> multiplicative_expression>
action(s213, '<') = <reduce, additive_expression -> multiplicative_expression>
action(s213, '<<') = <reduce, additive_expression -> multiplicative_expression>
action(s213, '<=') = <reduce, additive_expression -> multiplicative_expression>
action(s213, '==') = <reduce, additive_expression -> multiplicative_expression>
action(s213, '>') = <reduce, additive_expression -> multiplicative_expression>
action(s213, '>=') = <reduce, additive_expression -> multiplicative_expression>
action(s213, '>>') = <reduce, additive_expression -> multiplicative_expression>
action(s213, '?') = <reduce, additive_expression -> multiplicative_expression>
action(s213, '^') = <reduce, additive_expression -> multiplicative_expression>
action(s213, '|') = <reduce, additive_expression -> multiplicative_expression>
action(s213, '||') = <reduce, additive_expression -> multiplicative_expression>
action(s214, '!=') = <reduce, additive_expression -> multiplicative_expression>
action(s214, '%') = <shift, s290>
action(s214, '&&') = <reduce, additive_expression -> multiplicative_expression>
action(s214, '&') = <reduce, additive_expression -> multiplicative_expression>
action(s214, '*') = <shift, s291>
action(s214, '+') = <reduce, additive_expression -> multiplicative_expression>
action(s214, ',') = <reduce, additive_expression -> multiplicative_expression>
action(s214, '-') = <reduce, additive_expression -> multiplicative_expression>
action(s214, '/') = <shift, s292>
action(s214, ';') = <reduce, additive_expression -> multiplicative_expression>
action(s214, '<') = <reduce, additive_expression -> multiplicative_expression>
action(s214, '<<') = <reduce, additive_expression -> multiplicative_expression>
action(s214, '<=') = <reduce, additive_expression -> multiplicative_expression>
action(s214, '==') = <reduce, additive_expression -> multiplicative_expression>
action(s214, '>') = <reduce, additive_expression -> multiplicative_expression>
action(s214, '>=') = <reduce, additive_expression -> multiplicative_expression>
action(s214, '>>') = <reduce, additive_expression -> multiplicative_expression>
action(s214, '?') = <reduce, additive_expression -> multiplicative_expression>
action(s214, '^') = <reduce, additive_expression -> multiplicative_expression>
action(s214, '|') = <reduce, additive_expression -> multiplicative_expression>
action(s214, '||') = <reduce, additive_expression -> multiplicative_expression>
action(s215, '!=') = <reduce, additive_expression -> multiplicative_expression>
action(s215, '%') = <shift, s295>
action(s215, '&&') = <reduce, additive_expression -> multiplicative_expression>
action(s215, '&') = <reduce, additive_expression -> multiplicative_expression>
action(s215, '*') = <shift, s296>
action(s215, '+') = <reduce, additive_expression -> multiplicative_expression>
action(s215, ',') = <reduce, additive_expression -> multiplicative_expression>
action(s215, '-') = <reduce, additive_expression -> multiplicative_expression>
action(s215, '/') = <shift, s297>
action(s215, '<') = <reduce, additive_expression -> multiplicative_expression>
action(s215, '<<') = <reduce, additive_expression -> multiplicative_expression>
action(s215, '<=') = <reduce, additive_expression -> multiplicative_expression>
action(s215, '==') = <reduce, additive_expression -> multiplicative_expression>
action(s215, '>') = <reduce, additive_expression -> multiplicative_expression>
action(s215, '>=') = <reduce, additive_expression -> multiplicative_expression>
action(s215, '>>') = <reduce, additive_expression -> multiplicative_expression>
action(s215, '?') = <reduce, additive_expression -> multiplicative_expression>
action(s215, ']') = <reduce, additive_expression -> multiplicative_expression>
action(s215, '^') = <reduce, additive_expression -> multiplicative_expression>
action(s215, '|') = <reduce, additive_expression -> multiplicative_expression>
action(s215, '||') = <reduce, additive_expression -> multiplicative_expression>
action(s216, '!=') = <reduce, additive_expression -> multiplicative_expression>
action(s216, '%') = <shift, s300>
action(s216, '&&') = <reduce, additive_expression -> multiplicative_expression>
action(s216, '&') = <reduce, additive_expression -> multiplicative_expression>
action(s216, '*') = <shift, s301>
action(s216, '+') = <reduce, additive_expression -> multiplicative_expression>
action(s216, ',') = <reduce, additive_expression -> multiplicative_expression>
action(s216, '-') = <reduce, additive_expression -> multiplicative_expression>
action(s216, '/') = <shift, s302>
action(s216, '<') = <reduce, additive_expression -> multiplicative_expression>
action(s216, '<<') = <reduce, additive_expression -> multiplicative_expression>
action(s216, '<=') = <reduce, additive_expression -> multiplicative_expression>
action(s216, '==') = <reduce, additive_expression -> multiplicative_expression>
action(s216, '>') = <reduce, additive_expression -> multiplicative_expression>
action(s216, '>=') = <reduce, additive_expression -> multiplicative_expression>
action(s216, '>>') = <reduce, additive_expression -> multiplicative_expression>
action(s216, '?') = <reduce, additive_expression -> multiplicative_expression>
action(s216, '^') = <reduce, additive_expression -> multiplicative_expression>
action(s216, '|') = <reduce, additive_expression -> multiplicative_expression>
action(s216, '||') = <reduce, additive_expression -> multiplicative_expression>
action(s216, '}') = <reduce, additive_expression -> multiplicative_expression>
action(s217, '!=') = <reduce, additive_expression -> multiplicative_expression>
action(s217, '%') = <shift, s305>
action(s217, '&&') = <reduce, additive_expression -> multiplicative_expression>
action(s217, '&') = <reduce, additive_expression -> multiplicative_expression>
action(s217, '*') = <shift, s306>
action(s217, '+') = <reduce, additive_expression -> multiplicative_expression>
action(s217, '-') = <reduce, additive_expression -> multiplicative_expression>
action(s217, '/') = <shift, s307>
action(s217, '<') = <reduce, additive_expression -> multiplicative_expression>
action(s217, '<<') = <reduce, additive_expression -> multiplicative_expression>
action(s217, '<=') = <reduce, additive_expression -> multiplicative_expression>
action(s217, '==') = <reduce, additive_expression -> multiplicative_expression>
action(s217, '>') = <reduce, additive_expression -> multiplicative_expression>
action(s217, '>=') = <reduce, additive_expression -> multiplicative_expression>
action(s217, '>>') = <reduce, additive_expression -> multiplicative_expression>
action(s217, '?') = <reduce, additive_expression -> multiplicative_expression>
action(s217, ']') = <reduce, additive_expression -> multiplicative_expression>
action(s217, '^') = <reduce, additive_expression -> multiplicative_expression>
action(s217, '|') = <reduce, additive_expression -> multiplicative_expression>
action(s217, '||') = <reduce, additive_expression -> multiplicative_expression>
action(s218, '&&') = <reduce, exclusive_or_expression -> and_expression>
action(s218, '&') = <shift, s62>
action(s218, ')') = <reduce, exclusive_or_expression -> and_expression>
action(s218, ',') = <reduce, exclusive_or_expression -> and_expression>
action(s218, '?') = <reduce, exclusive_or_expression -> and_expression>
action(s218, '^') = <reduce, exclusive_or_expression -> and_expression>
action(s218, '|') = <reduce, exclusive_or_expression -> and_expression>
action(s218, '||') = <reduce, exclusive_or_expression -> and_expression>
action(s219, '&&') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s219, '&') = <shift, s62>
action(s219, ')') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s219, ',') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s219, '?') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s219, '^') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s219, '|') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s219, '||') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s220, '&&') = <reduce, exclusive_or_expression -> and_expression>
action(s220, '&') = <shift, s84>
action(s220, ',') = <reduce, exclusive_or_expression -> and_expression>
action(s220, ':') = <reduce, exclusive_or_expression -> and_expression>
action(s220, '?') = <reduce, exclusive_or_expression -> and_expression>
action(s220, '^') = <reduce, exclusive_or_expression -> and_expression>
action(s220, '|') = <reduce, exclusive_or_expression -> and_expression>
action(s220, '||') = <reduce, exclusive_or_expression -> and_expression>
action(s221, '&&') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s221, '&') = <shift, s84>
action(s221, ',') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s221, ':') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s221, '?') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s221, '^') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s221, '|') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s221, '||') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s222, '&&') = <reduce, exclusive_or_expression -> and_expression>
action(s222, '&') = <shift, s100>
action(s222, ',') = <reduce, exclusive_or_expression -> and_expression>
action(s222, ';') = <reduce, exclusive_or_expression -> and_expression>
action(s222, '?') = <reduce, exclusive_or_expression -> and_expression>
action(s222, '^') = <reduce, exclusive_or_expression -> and_expression>
action(s222, '|') = <reduce, exclusive_or_expression -> and_expression>
action(s222, '||') = <reduce, exclusive_or_expression -> and_expression>
action(s223, '&&') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s223, '&') = <shift, s100>
action(s223, ',') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s223, ';') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s223, '?') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s223, '^') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s223, '|') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s223, '||') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s224, '&&') = <reduce, exclusive_or_expression -> and_expression>
action(s224, '&') = <shift, s125>
action(s224, ',') = <reduce, exclusive_or_expression -> and_expression>
action(s224, '?') = <reduce, exclusive_or_expression -> and_expression>
action(s224, ']') = <reduce, exclusive_or_expression -> and_expression>
action(s224, '^') = <reduce, exclusive_or_expression -> and_expression>
action(s224, '|') = <reduce, exclusive_or_expression -> and_expression>
action(s224, '||') = <reduce, exclusive_or_expression -> and_expression>
action(s225, '&&') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s225, '&') = <shift, s125>
action(s225, ',') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s225, '?') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s225, ']') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s225, '^') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s225, '|') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s225, '||') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s226, '&&') = <reduce, exclusive_or_expression -> and_expression>
action(s226, '&') = <shift, s140>
action(s226, ',') = <reduce, exclusive_or_expression -> and_expression>
action(s226, '?') = <reduce, exclusive_or_expression -> and_expression>
action(s226, '^') = <reduce, exclusive_or_expression -> and_expression>
action(s226, '|') = <reduce, exclusive_or_expression -> and_expression>
action(s226, '||') = <reduce, exclusive_or_expression -> and_expression>
action(s226, '}') = <reduce, exclusive_or_expression -> and_expression>
action(s227, '&&') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s227, '&') = <shift, s140>
action(s227, ',') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s227, '?') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s227, '^') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s227, '|') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s227, '||') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s227, '}') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s228, '&&') = <reduce, exclusive_or_expression -> and_expression>
action(s228, '&') = <shift, s161>
action(s228, '?') = <reduce, exclusive_or_expression -> and_expression>
action(s228, ']') = <reduce, exclusive_or_expression -> and_expression>
action(s228, '^') = <reduce, exclusive_or_expression -> and_expression>
action(s228, '|') = <reduce, exclusive_or_expression -> and_expression>
action(s228, '||') = <reduce, exclusive_or_expression -> and_expression>
action(s229, '&&') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s229, '&') = <shift, s161>
action(s229, '?') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s229, ']') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s229, '^') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s229, '|') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s229, '||') = <reduce, exclusive_or_expression -> exclusive_or_expression '^' and_expression>
action(s230, '!=') = <shift, s63>
action(s230, '&&') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s230, '&') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s230, ')') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s230, ',') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s230, '==') = <shift, s64>
action(s230, '?') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s230, '^') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s230, '|') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s230, '||') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s231, '!=') = <shift, s85>
action(s231, '&&') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s231, '&') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s231, ',') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s231, ':') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s231, '==') = <shift, s86>
action(s231, '?') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s231, '^') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s231, '|') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s231, '||') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s232, '!=') = <shift, s101>
action(s232, '&&') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s232, '&') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s232, ',') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s232, ';') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s232, '==') = <shift, s102>
action(s232, '?') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s232, '^') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s232, '|') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s232, '||') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s233, '!=') = <shift, s126>
action(s233, '&&') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s233, '&') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s233, ',') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s233, '==') = <shift, s127>
action(s233, '?') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s233, ']') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s233, '^') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s233, '|') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s233, '||') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s234, '!=') = <shift, s141>
action(s234, '&&') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s234, '&') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s234, ',') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s234, '==') = <shift, s142>
action(s234, '?') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s234, '^') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s234, '|') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s234, '||') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s234, '}') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s235, '!=') = <shift, s162>
action(s235, '&&') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s235, '&') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s235, '==') = <shift, s163>
action(s235, '?') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s235, ']') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s235, '^') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s235, '|') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s235, '||') = <reduce, and_expression -> and_expression '&' equality_expression>
action(s236, '!=') = <shift, s63>
action(s236, '&&') = <reduce, and_expression -> equality_expression>
action(s236, '&') = <reduce, and_expression -> equality_expression>
action(s236, ')') = <reduce, and_expression -> equality_expression>
action(s236, ',') = <reduce, and_expression -> equality_expression>
action(s236, '==') = <shift, s64>
action(s236, '?') = <reduce, and_expression -> equality_expression>
action(s236, '^') = <reduce, and_expression -> equality_expression>
action(s236, '|') = <reduce, and_expression -> equality_expression>
action(s236, '||') = <reduce, and_expression -> equality_expression>
action(s237, '!=') = <shift, s85>
action(s237, '&&') = <reduce, and_expression -> equality_expression>
action(s237, '&') = <reduce, and_expression -> equality_expression>
action(s237, ',') = <reduce, and_expression -> equality_expression>
action(s237, ':') = <reduce, and_expression -> equality_expression>
action(s237, '==') = <shift, s86>
action(s237, '?') = <reduce, and_expression -> equality_expression>
action(s237, '^') = <reduce, and_expression -> equality_expression>
action(s237, '|') = <reduce, and_expression -> equality_expression>
action(s237, '||') = <reduce, and_expression -> equality_expression>
action(s238, '!=') = <shift, s101>
action(s238, '&&') = <reduce, and_expression -> equality_expression>
action(s238, '&') = <reduce, and_expression -> equality_expression>
action(s238, ',') = <reduce, and_expression -> equality_expression>
action(s238, ';') = <reduce, and_expression -> equality_expression>
action(s238, '==') = <shift, s102>
action(s238, '?') = <reduce, and_expression -> equality_expression>
action(s238, '^') = <reduce, and_expression -> equality_expression>
action(s238, '|') = <reduce, and_expression -> equality_expression>
action(s238, '||') = <reduce, and_expression -> equality_expression>
action(s239, '!=') = <shift, s126>
action(s239, '&&') = <reduce, and_expression -> equality_expression>
action(s239, '&') = <reduce, and_expression -> equality_expression>
action(s239, ',') = <reduce, and_expression -> equality_expression>
action(s239, '==') = <shift, s127>
action(s239, '?') = <reduce, and_expression -> equality_expression>
action(s239, ']') = <reduce, and_expression -> equality_expression>
action(s239, '^') = <reduce, and_expression -> equality_expression>
action(s239, '|') = <reduce, and_expression -> equality_expression>
action(s239, '||') = <reduce, and_expression -> equality_expression>
action(s240, '!=') = <shift, s141>
action(s240, '&&') = <reduce, and_expression -> equality_expression>
action(s240, '&') = <reduce, and_expression -> equality_expression>
action(s240, ',') = <reduce, and_expression -> equality_expression>
action(s240, '==') = <shift, s142>
action(s240, '?') = <reduce, and_expression -> equality_expression>
action(s240, '^') = <reduce, and_expression -> equality_expression>
action(s240, '|') = <reduce, and_expression -> equality_expression>
action(s240, '||') = <reduce, and_expression -> equality_expression>
action(s240, '}') = <reduce, and_expression -> equality_expression>
action(s241, '!=') = <shift, s162>
action(s241, '&&') = <reduce, and_expression -> equality_expression>
action(s241, '&') = <reduce, and_expression -> equality_expression>
action(s241, '==') = <shift, s163>
action(s241, '?') = <reduce, and_expression -> equality_expression>
action(s241, ']') = <reduce, and_expression -> equality_expression>
action(s241, '^') = <reduce, and_expression -> equality_expression>
action(s241, '|') = <reduce, and_expression -> equality_expression>
action(s241, '||') = <reduce, and_expression -> equality_expression>
action(s242, ')') = <shift, s660>
action(s242, ',') = <shift, s23>
action(s243, ')') = <shift, s661>
action(s243, ',') = <shift, s23>
action(s244, ')') = <shift, s662>
action(s244, ',') = <shift, s23>
action(s245, ')') = <shift, s663>
action(s245, ',') = <shift, s23>
action(s246, ')') = <shift, s664>
action(s246, ',') = <shift, s23>
action(s247, ')') = <shift, s665>
action(s247, ',') = <shift, s23>
action(s248, ')') = <shift, s666>
action(s248, ',') = <shift, s23>
action(s249, ')') = <shift, s667>
action(s249, ',') = <shift, s23>
action(s250, ')') = <shift, s668>
action(s250, ',') = <shift, s23>
action(s251, ')') = <reduce, argument_expression_list -> argument_expression_list ',' assignment_expression>
action(s251, ',') = <reduce, argument_expression_list -> argument_expression_list ',' assignment_expression>
action(s252, ')') = <reduce, argument_expression_list -> assignment_expression>
action(s252, ',') = <reduce, argument_expression_list -> assignment_expression>
action(s253, ')') = <reduce, assignment_expression -> conditional_expression>
action(s253, ',') = <reduce, assignment_expression -> conditional_expression>
action(s254, ',') = <reduce, assignment_expression -> conditional_expression>
action(s254, ':') = <reduce, assignment_expression -> conditional_expression>
action(s255, ',') = <reduce, assignment_expression -> conditional_expression>
action(s255, ']') = <reduce, assignment_expression -> conditional_expression>
action(s256, '!=') = <reduce, cast_expression -> unary_expression>
action(s256, '%') = <reduce, cast_expression -> unary_expression>
action(s256, '%=') = <shift, s262>
action(s256, '&&') = <reduce, cast_expression -> unary_expression>
action(s256, '&') = <reduce, cast_expression -> unary_expression>
action(s256, '&=') = <shift, s263>
action(s256, ')') = <reduce, cast_expression -> unary_expression>
action(s256, '*') = <reduce, cast_expression -> unary_expression>
action(s256, '*=') = <shift, s264>
action(s256, '+') = <reduce, cast_expression -> unary_expression>
action(s256, '+=') = <shift, s265>
action(s256, ',') = <reduce, cast_expression -> unary_expression>
action(s256, '-') = <reduce, cast_expression -> unary_expression>
action(s256, '-=') = <shift, s266>
action(s256, '/') = <reduce, cast_expression -> unary_expression>
action(s256, '/=') = <shift, s267>
action(s256, '<') = <reduce, cast_expression -> unary_expression>
action(s256, '<<') = <reduce, cast_expression -> unary_expression>
action(s256, '<<=') = <shift, s268>
action(s256, '<=') = <reduce, cast_expression -> unary_expression>
action(s256, '=') = <shift, s269>
action(s256, '==') = <reduce, cast_expression -> unary_expression>
action(s256, '>') = <reduce, cast_expression -> unary_expression>
action(s256, '>=') = <reduce, cast_expression -> unary_expression>
action(s256, '>>') = <reduce, cast_expression -> unary_expression>
action(s256, '>>=') = <shift, s270>
action(s256, '?') = <reduce, cast_expression -> unary_expression>
action(s256, '^') = <reduce, cast_expression -> unary_expression>
action(s256, '^=') = <shift, s271>
action(s256, '|') = <reduce, cast_expression -> unary_expression>
action(s256, '|=') = <shift, s272>
action(s256, '||') = <reduce, cast_expression -> unary_expression>
action(s257, '!=') = <reduce, cast_expression -> unary_expression>
action(s257, '%') = <reduce, cast_expression -> unary_expression>
action(s257, '%=') = <shift, s262>
action(s257, '&&') = <reduce, cast_expression -> unary_expression>
action(s257, '&') = <reduce, cast_expression -> unary_expression>
action(s257, '&=') = <shift, s263>
action(s257, '*') = <reduce, cast_expression -> unary_expression>
action(s257, '*=') = <shift, s264>
action(s257, '+') = <reduce, cast_expression -> unary_expression>
action(s257, '+=') = <shift, s265>
action(s257, ',') = <reduce, cast_expression -> unary_expression>
action(s257, '-') = <reduce, cast_expression -> unary_expression>
action(s257, '-=') = <shift, s266>
action(s257, '/') = <reduce, cast_expression -> unary_expression>
action(s257, '/=') = <shift, s267>
action(s257, ':') = <reduce, cast_expression -> unary_expression>
action(s257, '<') = <reduce, cast_expression -> unary_expression>
action(s257, '<<') = <reduce, cast_expression -> unary_expression>
action(s257, '<<=') = <shift, s268>
action(s257, '<=') = <reduce, cast_expression -> unary_expression>
action(s257, '=') = <shift, s269>
action(s257, '==') = <reduce, cast_expression -> unary_expression>
action(s257, '>') = <reduce, cast_expression -> unary_expression>
action(s257, '>=') = <reduce, cast_expression -> unary_expression>
action(s257, '>>') = <reduce, cast_expression -> unary_expression>
action(s257, '>>=') = <shift, s270>
action(s257, '?') = <reduce, cast_expression -> unary_expression>
action(s257, '^') = <reduce, cast_expression -> unary_expression>
action(s257, '^=') = <shift, s271>
action(s257, '|') = <reduce, cast_expression -> unary_expression>
action(s257, '|=') = <shift, s272>
action(s257, '||') = <reduce, cast_expression -> unary_expression>
action(s258, '!=') = <reduce, cast_expression -> unary_expression>
action(s258, '%') = <reduce, cast_expression -> unary_expression>
action(s258, '%=') = <shift, s262>
action(s258, '&&') = <reduce, cast_expression -> unary_expression>
action(s258, '&') = <reduce, cast_expression -> unary_expression>
action(s258, '&=') = <shift, s263>
action(s258, '*') = <reduce, cast_expression -> unary_expression>
action(s258, '*=') = <shift, s264>
action(s258, '+') = <reduce, cast_expression -> unary_expression>
action(s258, '+=') = <shift, s265>
action(s258, ',') = <reduce, cast_expression -> unary_expression>
action(s258, '-') = <reduce, cast_expression -> unary_expression>
action(s258, '-=') = <shift, s266>
action(s258, '/') = <reduce, cast_expression -> unary_expression>
action(s258, '/=') = <shift, s267>
action(s258, '<') = <reduce, cast_expression -> unary_expression>
action(s258, '<<') = <reduce, cast_expression -> unary_expression>
action(s258, '<<=') = <shift, s268>
action(s258, '<=') = <reduce, cast_expression -> unary_expression>
action(s258, '=') = <shift, s269>
action(s258, '==') = <reduce, cast_expression -> unary_expression>
action(s258, '>') = <reduce, cast_expression -> unary_expression>
action(s258, '>=') = <reduce, cast_expression -> unary_expression>
action(s258, '>>') = <reduce, cast_expression -> unary_expression>
action(s258, '>>=') = <shift, s270>
action(s258, '?') = <reduce, cast_expression -> unary_expression>
action(s258, ']') = <reduce, cast_expression -> unary_expression>
action(s258, '^') = <reduce, cast_expression -> unary_expression>
action(s258, '^=') = <shift, s271>
action(s258, '|') = <reduce, cast_expression -> unary_expression>
action(s258, '|=') = <shift, s272>
action(s258, '||') = <reduce, cast_expression -> unary_expression>
action(s259, ')') = <reduce, assignment_expression -> unary_expression assignment_operator assignment_expression>
action(s259, ',') = <reduce, assignment_expression -> unary_expression assignment_operator assignment_expression>
action(s260, ',') = <reduce, assignment_expression -> unary_expression assignment_operator assignment_expression>
action(s260, ':') = <reduce, assignment_expression -> unary_expression assignment_operator assignment_expression>
action(s261, ',') = <reduce, assignment_expression -> unary_expression assignment_operator assignment_expression>
action(s261, ']') = <reduce, assignment_expression -> unary_expression assignment_operator assignment_expression>
action(s262, '!') = <reduce, assignment_operator -> '%='>
action(s262, '&') = <reduce, assignment_operator -> '%='>
action(s262, '(') = <reduce, assignment_operator -> '%='>
action(s262, '*') = <reduce, assignment_operator -> '%='>
action(s262, '+') = <reduce, assignment_operator -> '%='>
action(s262, '++') = <reduce, assignment_operator -> '%='>
action(s262, '-') = <reduce, assignment_operator -> '%='>
action(s262, '--') = <reduce, assignment_operator -> '%='>
action(s262, 'sizeof') = <reduce, assignment_operator -> '%='>
action(s262, '~') = <reduce, assignment_operator -> '%='>
action(s262, CONSTANT) = <reduce, assignment_operator -> '%='>
action(s262, IDENTIFIER) = <reduce, assignment_operator -> '%='>
action(s262, STRING_LITERAL) = <reduce, assignment_operator -> '%='>
action(s263, '!') = <reduce, assignment_operator -> '&='>
action(s263, '&') = <reduce, assignment_operator -> '&='>
action(s263, '(') = <reduce, assignment_operator -> '&='>
action(s263, '*') = <reduce, assignment_operator -> '&='>
action(s263, '+') = <reduce, assignment_operator -> '&='>
action(s263, '++') = <reduce, assignment_operator -> '&='>
action(s263, '-') = <reduce, assignment_operator -> '&='>
action(s263, '--') = <reduce, assignment_operator -> '&='>
action(s263, 'sizeof') = <reduce, assignment_operator -> '&='>
action(s263, '~') = <reduce, assignment_operator -> '&='>
action(s263, CONSTANT) = <reduce, assignment_operator -> '&='>
action(s263, IDENTIFIER) = <reduce, assignment_operator -> '&='>
action(s263, STRING_LITERAL) = <reduce, assignment_operator -> '&='>
action(s264, '!') = <reduce, assignment_operator -> '*='>
action(s264, '&') = <reduce, assignment_operator -> '*='>
action(s264, '(') = <reduce, assignment_operator -> '*='>
action(s264, '*') = <reduce, assignment_operator -> '*='>
action(s264, '+') = <reduce, assignment_operator -> '*='>
action(s264, '++') = <reduce, assignment_operator -> '*='>
action(s264, '-') = <reduce, assignment_operator -> '*='>
action(s264, '--') = <reduce, assignment_operator -> '*='>
action(s264, 'sizeof') = <reduce, assignment_operator -> '*='>
action(s264, '~') = <reduce, assignment_operator -> '*='>
action(s264, CONSTANT) = <reduce, assignment_operator -> '*='>
action(s264, IDENTIFIER) = <reduce, assignment_operator -> '*='>
action(s264, STRING_LITERAL) = <reduce, assignment_operator -> '*='>
action(s265, '!') = <reduce, assignment_operator -> '+='>
action(s265, '&') = <reduce, assignment_operator -> '+='>
action(s265, '(') = <reduce, assignment_operator -> '+='>
action(s265, '*') = <reduce, assignment_operator -> '+='>
action(s265, '+') = <reduce, assignment_operator -> '+='>
action(s265, '++') = <reduce, assignment_operator -> '+='>
action(s265, '-') = <reduce, assignment_operator -> '+='>
action(s265, '--') = <reduce, assignment_operator -> '+='>
action(s265, 'sizeof') = <reduce, assignment_operator -> '+='>
action(s265, '~') = <reduce, assignment_operator -> '+='>
action(s265, CONSTANT) = <reduce, assignment_operator -> '+='>
action(s265, IDENTIFIER) = <reduce, assignment_operator -> '+='>
action(s265, STRING_LITERAL) = <reduce, assignment_operator -> '+='>
action(s266, '!') = <reduce, assignment_operator -> '-='>
action(s266, '&') = <reduce, assignment_operator -> '-='>
action(s266, '(') = <reduce, assignment_operator -> '-='>
action(s266, '*') = <reduce, assignment_operator -> '-='>
action(s266, '+') = <reduce, assignment_operator -> '-='>
action(s266, '++') = <reduce, assignment_operator -> '-='>
action(s266, '-') = <reduce, assignment_operator -> '-='>
action(s266, '--') = <reduce, assignment_operator -> '-='>
action(s266, 'sizeof') = <reduce, assignment_operator -> '-='>
action(s266, '~') = <reduce, assignment_operator -> '-='>
action(s266, CONSTANT) = <reduce, assignment_operator -> '-='>
action(s266, IDENTIFIER) = <reduce, assignment_operator -> '-='>
action(s266, STRING_LITERAL) = <reduce, assignment_operator -> '-='>
action(s267, '!') = <reduce, assignment_operator -> '/='>
action(s267, '&') = <reduce, assignment_operator -> '/='>
action(s267, '(') = <reduce, assignment_operator -> '/='>
action(s267, '*') = <reduce, assignment_operator -> '/='>
action(s267, '+') = <reduce, assignment_operator -> '/='>
action(s267, '++') = <reduce, assignment_operator -> '/='>
action(s267, '-') = <reduce, assignment_operator -> '/='>
action(s267, '--') = <reduce, assignment_operator -> '/='>
action(s267, 'sizeof') = <reduce, assignment_operator -> '/='>
action(s267, '~') = <reduce, assignment_operator -> '/='>
action(s267, CONSTANT) = <reduce, assignment_operator -> '/='>
action(s267, IDENTIFIER) = <reduce, assignment_operator -> '/='>
action(s267, STRING_LITERAL) = <reduce, assignment_operator -> '/='>
action(s268, '!') = <reduce, assignment_operator -> '<<='>
action(s268, '&') = <reduce, assignment_operator -> '<<='>
action(s268, '(') = <reduce, assignment_operator -> '<<='>
action(s268, '*') = <reduce, assignment_operator -> '<<='>
action(s268, '+') = <reduce, assignment_operator -> '<<='>
action(s268, '++') = <reduce, assignment_operator -> '<<='>
action(s268, '-') = <reduce, assignment_operator -> '<<='>
action(s268, '--') = <reduce, assignment_operator -> '<<='>
action(s268, 'sizeof') = <reduce, assignment_operator -> '<<='>
action(s268, '~') = <reduce, assignment_operator -> '<<='>
action(s268, CONSTANT) = <reduce, assignment_operator -> '<<='>
action(s268, IDENTIFIER) = <reduce, assignment_operator -> '<<='>
action(s268, STRING_LITERAL) = <reduce, assignment_operator -> '<<='>
action(s269, '!') = <reduce, assignment_operator -> '='>
action(s269, '&') = <reduce, assignment_operator -> '='>
action(s269, '(') = <reduce, assignment_operator -> '='>
action(s269, '*') = <reduce, assignment_operator -> '='>
action(s269, '+') = <reduce, assignment_operator -> '='>
action(s269, '++') = <reduce, assignment_operator -> '='>
action(s269, '-') = <reduce, assignment_operator -> '='>
action(s269, '--') = <reduce, assignment_operator -> '='>
action(s269, 'sizeof') = <reduce, assignment_operator -> '='>
action(s269, '~') = <reduce, assignment_operator -> '='>
action(s269, CONSTANT) = <reduce, assignment_operator -> '='>
action(s269, IDENTIFIER) = <reduce, assignment_operator -> '='>
action(s269, STRING_LITERAL) = <reduce, assignment_operator -> '='>
action(s270, '!') = <reduce, assignment_operator -> '>>='>
action(s270, '&') = <reduce, assignment_operator -> '>>='>
action(s270, '(') = <reduce, assignment_operator -> '>>='>
action(s270, '*') = <reduce, assignment_operator -> '>>='>
action(s270, '+') = <reduce, assignment_operator -> '>>='>
action(s270, '++') = <reduce, assignment_operator -> '>>='>
action(s270, '-') = <reduce, assignment_operator -> '>>='>
action(s270, '--') = <reduce, assignment_operator -> '>>='>
action(s270, 'sizeof') = <reduce, assignment_operator -> '>>='>
action(s270, '~') = <reduce, assignment_operator -> '>>='>
action(s270, CONSTANT) = <reduce, assignment_operator -> '>>='>
action(s270, IDENTIFIER) = <reduce, assignment_operator -> '>>='>
action(s270, STRING_LITERAL) = <reduce, assignment_operator -> '>>='>
action(s271, '!') = <reduce, assignment_operator -> '^='>
action(s271, '&') = <reduce, assignment_operator -> '^='>
action(s271, '(') = <reduce, assignment_operator -> '^='>
action(s271, '*') = <reduce, assignment_operator -> '^='>
action(s271, '+') = <reduce, assignment_operator -> '^='>
action(s271, '++') = <reduce, assignment_operator -> '^='>
action(s271, '-') = <reduce, assignment_operator -> '^='>
action(s271, '--') = <reduce, assignment_operator -> '^='>
action(s271, 'sizeof') = <reduce, assignment_operator -> '^='>
action(s271, '~') = <reduce, assignment_operator -> '^='>
action(s271, CONSTANT) = <reduce, assignment_operator -> '^='>
action(s271, IDENTIFIER) = <reduce, assignment_operator -> '^='>
action(s271, STRING_LITERAL) = <reduce, assignment_operator -> '^='>
action(s272, '!') = <reduce, assignment_operator -> '|='>
action(s272, '&') = <reduce, assignment_operator -> '|='>
action(s272, '(') = <reduce, assignment_operator -> '|='>
action(s272, '*') = <reduce, assignment_operator -> '|='>
action(s272, '+') = <reduce, assignment_operator -> '|='>
action(s272, '++') = <reduce, assignment_operator -> '|='>
action(s272, '-') = <reduce, assignment_operator -> '|='>
action(s272, '--') = <reduce, assignment_operator -> '|='>
action(s272, 'sizeof') = <reduce, assignment_operator -> '|='>
action(s272, '~') = <reduce, assignment_operator -> '|='>
action(s272, CONSTANT) = <reduce, assignment_operator -> '|='>
action(s272, IDENTIFIER) = <reduce, assignment_operator -> '|='>
action(s272, STRING_LITERAL) = <reduce, assignment_operator -> '|='>
action(s273, '!') = <shift, s956>
action(s273, '&') = <shift, s957>
action(s273, '(') = <shift, s25>
action(s273, '*') = <shift, s958>
action(s273, '+') = <shift, s959>
action(s273, '++') = <shift, s615>
action(s273, '-') = <shift, s960>
action(s273, '--') = <shift, s616>
action(s273, 'sizeof') = <shift, s617>
action(s273, '~') = <shift, s961>
action(s273, CONSTANT) = <shift, s752>
action(s273, IDENTIFIER) = <shift, s762>
action(s273, STRING_LITERAL) = <shift, s772>
action(s274, '!') = <shift, s956>
action(s274, '&') = <shift, s957>
action(s274, '(') = <shift, s25>
action(s274, '*') = <shift, s958>
action(s274, '+') = <shift, s959>
action(s274, '++') = <shift, s615>
action(s274, '-') = <shift, s960>
action(s274, '--') = <shift, s616>
action(s274, 'sizeof') = <shift, s617>
action(s274, '~') = <shift, s961>
action(s274, CONSTANT) = <shift, s752>
action(s274, IDENTIFIER) = <shift, s762>
action(s274, STRING_LITERAL) = <shift, s772>
action(s275, '!') = <shift, s956>
action(s275, '&') = <shift, s957>
action(s275, '(') = <shift, s26>
action(s275, '*') = <shift, s958>
action(s275, '+') = <shift, s959>
action(s275, '++') = <shift, s618>
action(s275, '-') = <shift, s960>
action(s275, '--') = <shift, s619>
action(s275, 'sizeof') = <shift, s620>
action(s275, '~') = <shift, s961>
action(s275, CONSTANT) = <shift, s753>
action(s275, IDENTIFIER) = <shift, s763>
action(s275, STRING_LITERAL) = <shift, s773>
action(s276, '!') = <shift, s956>
action(s276, '&') = <shift, s957>
action(s276, '(') = <shift, s26>
action(s276, '*') = <shift, s958>
action(s276, '+') = <shift, s959>
action(s276, '++') = <shift, s618>
action(s276, '-') = <shift, s960>
action(s276, '--') = <shift, s619>
action(s276, 'sizeof') = <shift, s620>
action(s276, '~') = <shift, s961>
action(s276, CONSTANT) = <shift, s753>
action(s276, IDENTIFIER) = <shift, s763>
action(s276, STRING_LITERAL) = <shift, s773>
action(s277, '!') = <shift, s956>
action(s277, '&') = <shift, s957>
action(s277, '(') = <shift, s27>
action(s277, '*') = <shift, s958>
action(s277, '+') = <shift, s959>
action(s277, '++') = <shift, s621>
action(s277, '-') = <shift, s960>
action(s277, '--') = <shift, s622>
action(s277, 'sizeof') = <shift, s623>
action(s277, '~') = <shift, s961>
action(s277, CONSTANT) = <shift, s754>
action(s277, IDENTIFIER) = <shift, s764>
action(s277, STRING_LITERAL) = <shift, s774>
action(s278, '!') = <shift, s956>
action(s278, '&') = <shift, s957>
action(s278, '(') = <shift, s27>
action(s278, '*') = <shift, s958>
action(s278, '+') = <shift, s959>
action(s278, '++') = <shift, s621>
action(s278, '-') = <shift, s960>
action(s278, '--') = <shift, s622>
action(s278, 'sizeof') = <shift, s623>
action(s278, '~') = <shift, s961>
action(s278, CONSTANT) = <shift, s754>
action(s278, IDENTIFIER) = <shift, s764>
action(s278, STRING_LITERAL) = <shift, s774>
action(s279, '!') = <shift, s956>
action(s279, '&') = <shift, s957>
action(s279, '(') = <shift, s29>
action(s279, '*') = <shift, s958>
action(s279, '+') = <shift, s959>
action(s279, '++') = <shift, s624>
action(s279, '-') = <shift, s960>
action(s279, '--') = <shift, s625>
action(s279, 'sizeof') = <shift, s626>
action(s279, '~') = <shift, s961>
action(s279, CONSTANT) = <shift, s755>
action(s279, IDENTIFIER) = <shift, s765>
action(s279, STRING_LITERAL) = <shift, s775>
action(s280, '!') = <shift, s956>
action(s280, '&') = <shift, s957>
action(s280, '(') = <shift, s29>
action(s280, '*') = <shift, s958>
action(s280, '+') = <shift, s959>
action(s280, '++') = <shift, s624>
action(s280, '-') = <shift, s960>
action(s280, '--') = <shift, s625>
action(s280, 'sizeof') = <shift, s626>
action(s280, '~') = <shift, s961>
action(s280, CONSTANT) = <shift, s755>
action(s280, IDENTIFIER) = <shift, s765>
action(s280, STRING_LITERAL) = <shift, s775>
action(s281, '!') = <shift, s956>
action(s281, '&') = <shift, s957>
action(s281, '(') = <shift, s29>
action(s281, '*') = <shift, s958>
action(s281, '+') = <shift, s959>
action(s281, '++') = <shift, s624>
action(s281, '-') = <shift, s960>
action(s281, '--') = <shift, s625>
action(s281, 'sizeof') = <shift, s626>
action(s281, '~') = <shift, s961>
action(s281, CONSTANT) = <shift, s755>
action(s281, IDENTIFIER) = <shift, s765>
action(s281, STRING_LITERAL) = <shift, s775>
action(s282, '!') = <shift, s956>
action(s282, '&') = <shift, s957>
action(s282, '(') = <shift, s29>
action(s282, '*') = <shift, s958>
action(s282, '+') = <shift, s959>
action(s282, '++') = <shift, s624>
action(s282, '-') = <shift, s960>
action(s282, '--') = <shift, s625>
action(s282, 'sizeof') = <shift, s626>
action(s282, '~') = <shift, s961>
action(s282, CONSTANT) = <shift, s755>
action(s282, IDENTIFIER) = <shift, s765>
action(s282, STRING_LITERAL) = <shift, s775>
action(s283, '!') = <shift, s956>
action(s283, '&') = <shift, s957>
action(s283, '(') = <shift, s29>
action(s283, '*') = <shift, s958>
action(s283, '+') = <shift, s959>
action(s283, '++') = <shift, s624>
action(s283, '-') = <shift, s960>
action(s283, '--') = <shift, s625>
action(s283, 'sizeof') = <shift, s626>
action(s283, '~') = <shift, s961>
action(s283, CONSTANT) = <shift, s755>
action(s283, IDENTIFIER) = <shift, s765>
action(s283, STRING_LITERAL) = <shift, s775>
action(s284, '!') = <shift, s956>
action(s284, '&') = <shift, s957>
action(s284, '(') = <shift, s31>
action(s284, '*') = <shift, s958>
action(s284, '+') = <shift, s959>
action(s284, '++') = <shift, s627>
action(s284, '-') = <shift, s960>
action(s284, '--') = <shift, s628>
action(s284, 'sizeof') = <shift, s629>
action(s284, '~') = <shift, s961>
action(s284, CONSTANT) = <shift, s756>
action(s284, IDENTIFIER) = <shift, s766>
action(s284, STRING_LITERAL) = <shift, s776>
action(s285, '!') = <shift, s956>
action(s285, '&') = <shift, s957>
action(s285, '(') = <shift, s31>
action(s285, '*') = <shift, s958>
action(s285, '+') = <shift, s959>
action(s285, '++') = <shift, s627>
action(s285, '-') = <shift, s960>
action(s285, '--') = <shift, s628>
action(s285, 'sizeof') = <shift, s629>
action(s285, '~') = <shift, s961>
action(s285, CONSTANT) = <shift, s756>
action(s285, IDENTIFIER) = <shift, s766>
action(s285, STRING_LITERAL) = <shift, s776>
action(s286, '!') = <shift, s956>
action(s286, '&') = <shift, s957>
action(s286, '(') = <shift, s31>
action(s286, '*') = <shift, s958>
action(s286, '+') = <shift, s959>
action(s286, '++') = <shift, s627>
action(s286, '-') = <shift, s960>
action(s286, '--') = <shift, s628>
action(s286, 'sizeof') = <shift, s629>
action(s286, '~') = <shift, s961>
action(s286, CONSTANT) = <shift, s756>
action(s286, IDENTIFIER) = <shift, s766>
action(s286, STRING_LITERAL) = <shift, s776>
action(s287, '!') = <shift, s956>
action(s287, '&') = <shift, s957>
action(s287, '(') = <shift, s31>
action(s287, '*') = <shift, s958>
action(s287, '+') = <shift, s959>
action(s287, '++') = <shift, s627>
action(s287, '-') = <shift, s960>
action(s287, '--') = <shift, s628>
action(s287, 'sizeof') = <shift, s629>
action(s287, '~') = <shift, s961>
action(s287, CONSTANT) = <shift, s756>
action(s287, IDENTIFIER) = <shift, s766>
action(s287, STRING_LITERAL) = <shift, s776>
action(s288, '!') = <shift, s956>
action(s288, '&') = <shift, s957>
action(s288, '(') = <shift, s31>
action(s288, '*') = <shift, s958>
action(s288, '+') = <shift, s959>
action(s288, '++') = <shift, s627>
action(s288, '-') = <shift, s960>
action(s288, '--') = <shift, s628>
action(s288, 'sizeof') = <shift, s629>
action(s288, '~') = <shift, s961>
action(s288, CONSTANT) = <shift, s756>
action(s288, IDENTIFIER) = <shift, s766>
action(s288, STRING_LITERAL) = <shift, s776>
action(s289, '!') = <shift, s956>
action(s289, '&') = <shift, s957>
action(s289, '(') = <shift, s32>
action(s289, '*') = <shift, s958>
action(s289, '+') = <shift, s959>
action(s289, '++') = <shift, s630>
action(s289, '-') = <shift, s960>
action(s289, '--') = <shift, s631>
action(s289, 'sizeof') = <shift, s632>
action(s289, '~') = <shift, s961>
action(s289, CONSTANT) = <shift, s757>
action(s289, IDENTIFIER) = <shift, s767>
action(s289, STRING_LITERAL) = <shift, s777>
action(s290, '!') = <shift, s956>
action(s290, '&') = <shift, s957>
action(s290, '(') = <shift, s32>
action(s290, '*') = <shift, s958>
action(s290, '+') = <shift, s959>
action(s290, '++') = <shift, s630>
action(s290, '-') = <shift, s960>
action(s290, '--') = <shift, s631>
action(s290, 'sizeof') = <shift, s632>
action(s290, '~') = <shift, s961>
action(s290, CONSTANT) = <shift, s757>
action(s290, IDENTIFIER) = <shift, s767>
action(s290, STRING_LITERAL) = <shift, s777>
action(s291, '!') = <shift, s956>
action(s291, '&') = <shift, s957>
action(s291, '(') = <shift, s32>
action(s291, '*') = <shift, s958>
action(s291, '+') = <shift, s959>
action(s291, '++') = <shift, s630>
action(s291, '-') = <shift, s960>
action(s291, '--') = <shift, s631>
action(s291, 'sizeof') = <shift, s632>
action(s291, '~') = <shift, s961>
action(s291, CONSTANT) = <shift, s757>
action(s291, IDENTIFIER) = <shift, s767>
action(s291, STRING_LITERAL) = <shift, s777>
action(s292, '!') = <shift, s956>
action(s292, '&') = <shift, s957>
action(s292, '(') = <shift, s32>
action(s292, '*') = <shift, s958>
action(s292, '+') = <shift, s959>
action(s292, '++') = <shift, s630>
action(s292, '-') = <shift, s960>
action(s292, '--') = <shift, s631>
action(s292, 'sizeof') = <shift, s632>
action(s292, '~') = <shift, s961>
action(s292, CONSTANT) = <shift, s757>
action(s292, IDENTIFIER) = <shift, s767>
action(s292, STRING_LITERAL) = <shift, s777>
action(s293, '!') = <shift, s956>
action(s293, '&') = <shift, s957>
action(s293, '(') = <shift, s32>
action(s293, '*') = <shift, s958>
action(s293, '+') = <shift, s959>
action(s293, '++') = <shift, s630>
action(s293, '-') = <shift, s960>
action(s293, '--') = <shift, s631>
action(s293, 'sizeof') = <shift, s632>
action(s293, '~') = <shift, s961>
action(s293, CONSTANT) = <shift, s757>
action(s293, IDENTIFIER) = <shift, s767>
action(s293, STRING_LITERAL) = <shift, s777>
action(s294, '!') = <shift, s956>
action(s294, '&') = <shift, s957>
action(s294, '(') = <shift, s34>
action(s294, '*') = <shift, s958>
action(s294, '+') = <shift, s959>
action(s294, '++') = <shift, s633>
action(s294, '-') = <shift, s960>
action(s294, '--') = <shift, s634>
action(s294, 'sizeof') = <shift, s635>
action(s294, '~') = <shift, s961>
action(s294, CONSTANT) = <shift, s758>
action(s294, IDENTIFIER) = <shift, s768>
action(s294, STRING_LITERAL) = <shift, s778>
action(s295, '!') = <shift, s956>
action(s295, '&') = <shift, s957>
action(s295, '(') = <shift, s34>
action(s295, '*') = <shift, s958>
action(s295, '+') = <shift, s959>
action(s295, '++') = <shift, s633>
action(s295, '-') = <shift, s960>
action(s295, '--') = <shift, s634>
action(s295, 'sizeof') = <shift, s635>
action(s295, '~') = <shift, s961>
action(s295, CONSTANT) = <shift, s758>
action(s295, IDENTIFIER) = <shift, s768>
action(s295, STRING_LITERAL) = <shift, s778>
action(s296, '!') = <shift, s956>
action(s296, '&') = <shift, s957>
action(s296, '(') = <shift, s34>
action(s296, '*') = <shift, s958>
action(s296, '+') = <shift, s959>
action(s296, '++') = <shift, s633>
action(s296, '-') = <shift, s960>
action(s296, '--') = <shift, s634>
action(s296, 'sizeof') = <shift, s635>
action(s296, '~') = <shift, s961>
action(s296, CONSTANT) = <shift, s758>
action(s296, IDENTIFIER) = <shift, s768>
action(s296, STRING_LITERAL) = <shift, s778>
action(s297, '!') = <shift, s956>
action(s297, '&') = <shift, s957>
action(s297, '(') = <shift, s34>
action(s297, '*') = <shift, s958>
action(s297, '+') = <shift, s959>
action(s297, '++') = <shift, s633>
action(s297, '-') = <shift, s960>
action(s297, '--') = <shift, s634>
action(s297, 'sizeof') = <shift, s635>
action(s297, '~') = <shift, s961>
action(s297, CONSTANT) = <shift, s758>
action(s297, IDENTIFIER) = <shift, s768>
action(s297, STRING_LITERAL) = <shift, s778>
action(s298, '!') = <shift, s956>
action(s298, '&') = <shift, s957>
action(s298, '(') = <shift, s34>
action(s298, '*') = <shift, s958>
action(s298, '+') = <shift, s959>
action(s298, '++') = <shift, s633>
action(s298, '-') = <shift, s960>
action(s298, '--') = <shift, s634>
action(s298, 'sizeof') = <shift, s635>
action(s298, '~') = <shift, s961>
action(s298, CONSTANT) = <shift, s758>
action(s298, IDENTIFIER) = <shift, s768>
action(s298, STRING_LITERAL) = <shift, s778>
action(s299, '!') = <shift, s956>
action(s299, '&') = <shift, s957>
action(s299, '(') = <shift, s35>
action(s299, '*') = <shift, s958>
action(s299, '+') = <shift, s959>
action(s299, '++') = <shift, s636>
action(s299, '-') = <shift, s960>
action(s299, '--') = <shift, s637>
action(s299, 'sizeof') = <shift, s638>
action(s299, '~') = <shift, s961>
action(s299, CONSTANT) = <shift, s759>
action(s299, IDENTIFIER) = <shift, s769>
action(s299, STRING_LITERAL) = <shift, s779>
action(s300, '!') = <shift, s956>
action(s300, '&') = <shift, s957>
action(s300, '(') = <shift, s35>
action(s300, '*') = <shift, s958>
action(s300, '+') = <shift, s959>
action(s300, '++') = <shift, s636>
action(s300, '-') = <shift, s960>
action(s300, '--') = <shift, s637>
action(s300, 'sizeof') = <shift, s638>
action(s300, '~') = <shift, s961>
action(s300, CONSTANT) = <shift, s759>
action(s300, IDENTIFIER) = <shift, s769>
action(s300, STRING_LITERAL) = <shift, s779>
action(s301, '!') = <shift, s956>
action(s301, '&') = <shift, s957>
action(s301, '(') = <shift, s35>
action(s301, '*') = <shift, s958>
action(s301, '+') = <shift, s959>
action(s301, '++') = <shift, s636>
action(s301, '-') = <shift, s960>
action(s301, '--') = <shift, s637>
action(s301, 'sizeof') = <shift, s638>
action(s301, '~') = <shift, s961>
action(s301, CONSTANT) = <shift, s759>
action(s301, IDENTIFIER) = <shift, s769>
action(s301, STRING_LITERAL) = <shift, s779>
action(s302, '!') = <shift, s956>
action(s302, '&') = <shift, s957>
action(s302, '(') = <shift, s35>
action(s302, '*') = <shift, s958>
action(s302, '+') = <shift, s959>
action(s302, '++') = <shift, s636>
action(s302, '-') = <shift, s960>
action(s302, '--') = <shift, s637>
action(s302, 'sizeof') = <shift, s638>
action(s302, '~') = <shift, s961>
action(s302, CONSTANT) = <shift, s759>
action(s302, IDENTIFIER) = <shift, s769>
action(s302, STRING_LITERAL) = <shift, s779>
action(s303, '!') = <shift, s956>
action(s303, '&') = <shift, s957>
action(s303, '(') = <shift, s35>
action(s303, '*') = <shift, s958>
action(s303, '+') = <shift, s959>
action(s303, '++') = <shift, s636>
action(s303, '-') = <shift, s960>
action(s303, '--') = <shift, s637>
action(s303, 'sizeof') = <shift, s638>
action(s303, '~') = <shift, s961>
action(s303, CONSTANT) = <shift, s759>
action(s303, IDENTIFIER) = <shift, s769>
action(s303, STRING_LITERAL) = <shift, s779>
action(s304, '!') = <shift, s956>
action(s304, '&') = <shift, s957>
action(s304, '(') = <shift, s36>
action(s304, '*') = <shift, s958>
action(s304, '+') = <shift, s959>
action(s304, '++') = <shift, s639>
action(s304, '-') = <shift, s960>
action(s304, '--') = <shift, s640>
action(s304, 'sizeof') = <shift, s641>
action(s304, '~') = <shift, s961>
action(s304, CONSTANT) = <shift, s760>
action(s304, IDENTIFIER) = <shift, s770>
action(s304, STRING_LITERAL) = <shift, s780>
action(s305, '!') = <shift, s956>
action(s305, '&') = <shift, s957>
action(s305, '(') = <shift, s36>
action(s305, '*') = <shift, s958>
action(s305, '+') = <shift, s959>
action(s305, '++') = <shift, s639>
action(s305, '-') = <shift, s960>
action(s305, '--') = <shift, s640>
action(s305, 'sizeof') = <shift, s641>
action(s305, '~') = <shift, s961>
action(s305, CONSTANT) = <shift, s760>
action(s305, IDENTIFIER) = <shift, s770>
action(s305, STRING_LITERAL) = <shift, s780>
action(s306, '!') = <shift, s956>
action(s306, '&') = <shift, s957>
action(s306, '(') = <shift, s36>
action(s306, '*') = <shift, s958>
action(s306, '+') = <shift, s959>
action(s306, '++') = <shift, s639>
action(s306, '-') = <shift, s960>
action(s306, '--') = <shift, s640>
action(s306, 'sizeof') = <shift, s641>
action(s306, '~') = <shift, s961>
action(s306, CONSTANT) = <shift, s760>
action(s306, IDENTIFIER) = <shift, s770>
action(s306, STRING_LITERAL) = <shift, s780>
action(s307, '!') = <shift, s956>
action(s307, '&') = <shift, s957>
action(s307, '(') = <shift, s36>
action(s307, '*') = <shift, s958>
action(s307, '+') = <shift, s959>
action(s307, '++') = <shift, s639>
action(s307, '-') = <shift, s960>
action(s307, '--') = <shift, s640>
action(s307, 'sizeof') = <shift, s641>
action(s307, '~') = <shift, s961>
action(s307, CONSTANT) = <shift, s760>
action(s307, IDENTIFIER) = <shift, s770>
action(s307, STRING_LITERAL) = <shift, s780>
action(s308, '!') = <shift, s956>
action(s308, '&') = <shift, s957>
action(s308, '(') = <shift, s36>
action(s308, '*') = <shift, s958>
action(s308, '+') = <shift, s959>
action(s308, '++') = <shift, s639>
action(s308, '-') = <shift, s960>
action(s308, '--') = <shift, s640>
action(s308, 'sizeof') = <shift, s641>
action(s308, '~') = <shift, s961>
action(s308, CONSTANT) = <shift, s760>
action(s308, IDENTIFIER) = <shift, s770>
action(s308, STRING_LITERAL) = <shift, s780>
action(s309, ')') = <shift, s273>
action(s310, ')') = <shift, s275>
action(s311, ')') = <shift, s277>
action(s312, ')') = <shift, s279>
action(s313, ')') = <shift, s284>
action(s314, ')') = <shift, s289>
action(s315, ')') = <shift, s294>
action(s316, ')') = <shift, s299>
action(s317, ')') = <shift, s304>
action(s318, '!=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '%') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '%=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '&&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '&=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, ')') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '*') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '*=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '+') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '+=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, ',') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '-') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '-=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '/') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '/=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '<<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '<<=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '<=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '==') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '>=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '>>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '>>=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '?') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '^') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '^=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '|') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '|=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s318, '||') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '!=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '%') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '%=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '&&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '&=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '*') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '*=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '+') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '+=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, ',') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '-') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '-=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '/') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '/=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, ':') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '<<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '<<=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '<=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '==') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '>=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '>>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '>>=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '?') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '^') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '^=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '|') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '|=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s319, '||') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '!=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '%') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '%=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '&&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '&=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '*') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '*=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '+') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '+=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, ',') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '-') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '-=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '/') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '/=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '<<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '<<=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '<=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '==') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '>=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '>>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '>>=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '?') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, ']') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '^') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '^=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '|') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '|=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s320, '||') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '!=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '%') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '&&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, ')') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '*') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '+') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, ',') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '-') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '/') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '<<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '<=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '==') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '>=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '>>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '?') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '^') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '|') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s321, '||') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '!=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '%') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '&&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '*') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '+') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, ',') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '-') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '/') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, ':') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '<<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '<=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '==') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '>=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '>>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '?') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '^') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '|') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s322, '||') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '!=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '%') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '&&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '*') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '+') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, ',') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '-') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '/') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, ';') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '<<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '<=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '==') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '>=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '>>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '?') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '^') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '|') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s323, '||') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '!=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '%') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '&&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '*') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '+') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, ',') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '-') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '/') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '<<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '<=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '==') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '>=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '>>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '?') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, ']') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '^') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '|') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s324, '||') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '!=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '%') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '&&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '*') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '+') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, ',') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '-') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '/') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '<<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '<=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '==') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '>=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '>>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '?') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '^') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '|') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '||') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s325, '}') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '!=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '%') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '&&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '&') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '*') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '+') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '-') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '/') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '<<') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '<=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '==') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '>=') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '>>') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '?') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, ']') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '^') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '|') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s326, '||') = <reduce, cast_expression -> '(' type_name ')' cast_expression>
action(s327, '!=') = <reduce, cast_expression -> unary_expression>
action(s327, '%') = <reduce, cast_expression -> unary_expression>
action(s327, '%=') = <reduce, cast_expression -> unary_expression>
action(s327, '&&') = <reduce, cast_expression -> unary_expression>
action(s327, '&') = <reduce, cast_expression -> unary_expression>
action(s327, '&=') = <reduce, cast_expression -> unary_expression>
action(s327, ')') = <reduce, cast_expression -> unary_expression>
action(s327, '*') = <reduce, cast_expression -> unary_expression>
action(s327, '*=') = <reduce, cast_expression -> unary_expression>
action(s327, '+') = <reduce, cast_expression -> unary_expression>
action(s327, '+=') = <reduce, cast_expression -> unary_expression>
action(s327, ',') = <reduce, cast_expression -> unary_expression>
action(s327, '-') = <reduce, cast_expression -> unary_expression>
action(s327, '-=') = <reduce, cast_expression -> unary_expression>
action(s327, '/') = <reduce, cast_expression -> unary_expression>
action(s327, '/=') = <reduce, cast_expression -> unary_expression>
action(s327, '<') = <reduce, cast_expression -> unary_expression>
action(s327, '<<') = <reduce, cast_expression -> unary_expression>
action(s327, '<<=') = <reduce, cast_expression -> unary_expression>
action(s327, '<=') = <reduce, cast_expression -> unary_expression>
action(s327, '=') = <reduce, cast_expression -> unary_expression>
action(s327, '==') = <reduce, cast_expression -> unary_expression>
action(s327, '>') = <reduce, cast_expression -> unary_expression>
action(s327, '>=') = <reduce, cast_expression -> unary_expression>
action(s327, '>>') = <reduce, cast_expression -> unary_expression>
action(s327, '>>=') = <reduce, cast_expression -> unary_expression>
action(s327, '?') = <reduce, cast_expression -> unary_expression>
action(s327, '^') = <reduce, cast_expression -> unary_expression>
action(s327, '^=') = <reduce, cast_expression -> unary_expression>
action(s327, '|') = <reduce, cast_expression -> unary_expression>
action(s327, '|=') = <reduce, cast_expression -> unary_expression>
action(s327, '||') = <reduce, cast_expression -> unary_expression>
action(s328, '!=') = <reduce, cast_expression -> unary_expression>
action(s328, '%') = <reduce, cast_expression -> unary_expression>
action(s328, '%=') = <reduce, cast_expression -> unary_expression>
action(s328, '&&') = <reduce, cast_expression -> unary_expression>
action(s328, '&') = <reduce, cast_expression -> unary_expression>
action(s328, '&=') = <reduce, cast_expression -> unary_expression>
action(s328, '*') = <reduce, cast_expression -> unary_expression>
action(s328, '*=') = <reduce, cast_expression -> unary_expression>
action(s328, '+') = <reduce, cast_expression -> unary_expression>
action(s328, '+=') = <reduce, cast_expression -> unary_expression>
action(s328, ',') = <reduce, cast_expression -> unary_expression>
action(s328, '-') = <reduce, cast_expression -> unary_expression>
action(s328, '-=') = <reduce, cast_expression -> unary_expression>
action(s328, '/') = <reduce, cast_expression -> unary_expression>
action(s328, '/=') = <reduce, cast_expression -> unary_expression>
action(s328, ':') = <reduce, cast_expression -> unary_expression>
action(s328, '<') = <reduce, cast_expression -> unary_expression>
action(s328, '<<') = <reduce, cast_expression -> unary_expression>
action(s328, '<<=') = <reduce, cast_expression -> unary_expression>
action(s328, '<=') = <reduce, cast_expression -> unary_expression>
action(s328, '=') = <reduce, cast_expression -> unary_expression>
action(s328, '==') = <reduce, cast_expression -> unary_expression>
action(s328, '>') = <reduce, cast_expression -> unary_expression>
action(s328, '>=') = <reduce, cast_expression -> unary_expression>
action(s328, '>>') = <reduce, cast_expression -> unary_expression>
action(s328, '>>=') = <reduce, cast_expression -> unary_expression>
action(s328, '?') = <reduce, cast_expression -> unary_expression>
action(s328, '^') = <reduce, cast_expression -> unary_expression>
action(s328, '^=') = <reduce, cast_expression -> unary_expression>
action(s328, '|') = <reduce, cast_expression -> unary_expression>
action(s328, '|=') = <reduce, cast_expression -> unary_expression>
action(s328, '||') = <reduce, cast_expression -> unary_expression>
action(s329, '!=') = <reduce, cast_expression -> unary_expression>
action(s329, '%') = <reduce, cast_expression -> unary_expression>
action(s329, '%=') = <reduce, cast_expression -> unary_expression>
action(s329, '&&') = <reduce, cast_expression -> unary_expression>
action(s329, '&') = <reduce, cast_expression -> unary_expression>
action(s329, '&=') = <reduce, cast_expression -> unary_expression>
action(s329, '*') = <reduce, cast_expression -> unary_expression>
action(s329, '*=') = <reduce, cast_expression -> unary_expression>
action(s329, '+') = <reduce, cast_expression -> unary_expression>
action(s329, '+=') = <reduce, cast_expression -> unary_expression>
action(s329, ',') = <reduce, cast_expression -> unary_expression>
action(s329, '-') = <reduce, cast_expression -> unary_expression>
action(s329, '-=') = <reduce, cast_expression -> unary_expression>
action(s329, '/') = <reduce, cast_expression -> unary_expression>
action(s329, '/=') = <reduce, cast_expression -> unary_expression>
action(s329, '<') = <reduce, cast_expression -> unary_expression>
action(s329, '<<') = <reduce, cast_expression -> unary_expression>
action(s329, '<<=') = <reduce, cast_expression -> unary_expression>
action(s329, '<=') = <reduce, cast_expression -> unary_expression>
action(s329, '=') = <reduce, cast_expression -> unary_expression>
action(s329, '==') = <reduce, cast_expression -> unary_expression>
action(s329, '>') = <reduce, cast_expression -> unary_expression>
action(s329, '>=') = <reduce, cast_expression -> unary_expression>
action(s329, '>>') = <reduce, cast_expression -> unary_expression>
action(s329, '>>=') = <reduce, cast_expression -> unary_expression>
action(s329, '?') = <reduce, cast_expression -> unary_expression>
action(s329, ']') = <reduce, cast_expression -> unary_expression>
action(s329, '^') = <reduce, cast_expression -> unary_expression>
action(s329, '^=') = <reduce, cast_expression -> unary_expression>
action(s329, '|') = <reduce, cast_expression -> unary_expression>
action(s329, '|=') = <reduce, cast_expression -> unary_expression>
action(s329, '||') = <reduce, cast_expression -> unary_expression>
action(s330, '!=') = <reduce, cast_expression -> unary_expression>
action(s330, '%') = <reduce, cast_expression -> unary_expression>
action(s330, '&&') = <reduce, cast_expression -> unary_expression>
action(s330, '&') = <reduce, cast_expression -> unary_expression>
action(s330, ')') = <reduce, cast_expression -> unary_expression>
action(s330, '*') = <reduce, cast_expression -> unary_expression>
action(s330, '+') = <reduce, cast_expression -> unary_expression>
action(s330, ',') = <reduce, cast_expression -> unary_expression>
action(s330, '-') = <reduce, cast_expression -> unary_expression>
action(s330, '/') = <reduce, cast_expression -> unary_expression>
action(s330, '<') = <reduce, cast_expression -> unary_expression>
action(s330, '<<') = <reduce, cast_expression -> unary_expression>
action(s330, '<=') = <reduce, cast_expression -> unary_expression>
action(s330, '==') = <reduce, cast_expression -> unary_expression>
action(s330, '>') = <reduce, cast_expression -> unary_expression>
action(s330, '>=') = <reduce, cast_expression -> unary_expression>
action(s330, '>>') = <reduce, cast_expression -> unary_expression>
action(s330, '?') = <reduce, cast_expression -> unary_expression>
action(s330, '^') = <reduce, cast_expression -> unary_expression>
action(s330, '|') = <reduce, cast_expression -> unary_expression>
action(s330, '||') = <reduce, cast_expression -> unary_expression>
action(s331, '!=') = <reduce, cast_expression -> unary_expression>
action(s331, '%') = <reduce, cast_expression -> unary_expression>
action(s331, '&&') = <reduce, cast_expression -> unary_expression>
action(s331, '&') = <reduce, cast_expression -> unary_expression>
action(s331, '*') = <reduce, cast_expression -> unary_expression>
action(s331, '+') = <reduce, cast_expression -> unary_expression>
action(s331, ',') = <reduce, cast_expression -> unary_expression>
action(s331, '-') = <reduce, cast_expression -> unary_expression>
action(s331, '/') = <reduce, cast_expression -> unary_expression>
action(s331, ':') = <reduce, cast_expression -> unary_expression>
action(s331, '<') = <reduce, cast_expression -> unary_expression>
action(s331, '<<') = <reduce, cast_expression -> unary_expression>
action(s331, '<=') = <reduce, cast_expression -> unary_expression>
action(s331, '==') = <reduce, cast_expression -> unary_expression>
action(s331, '>') = <reduce, cast_expression -> unary_expression>
action(s331, '>=') = <reduce, cast_expression -> unary_expression>
action(s331, '>>') = <reduce, cast_expression -> unary_expression>
action(s331, '?') = <reduce, cast_expression -> unary_expression>
action(s331, '^') = <reduce, cast_expression -> unary_expression>
action(s331, '|') = <reduce, cast_expression -> unary_expression>
action(s331, '||') = <reduce, cast_expression -> unary_expression>
action(s332, '!=') = <reduce, cast_expression -> unary_expression>
action(s332, '%') = <reduce, cast_expression -> unary_expression>
action(s332, '&&') = <reduce, cast_expression -> unary_expression>
action(s332, '&') = <reduce, cast_expression -> unary_expression>
action(s332, '*') = <reduce, cast_expression -> unary_expression>
action(s332, '+') = <reduce, cast_expression -> unary_expression>
action(s332, ',') = <reduce, cast_expression -> unary_expression>
action(s332, '-') = <reduce, cast_expression -> unary_expression>
action(s332, '/') = <reduce, cast_expression -> unary_expression>
action(s332, ';') = <reduce, cast_expression -> unary_expression>
action(s332, '<') = <reduce, cast_expression -> unary_expression>
action(s332, '<<') = <reduce, cast_expression -> unary_expression>
action(s332, '<=') = <reduce, cast_expression -> unary_expression>
action(s332, '==') = <reduce, cast_expression -> unary_expression>
action(s332, '>') = <reduce, cast_expression -> unary_expression>
action(s332, '>=') = <reduce, cast_expression -> unary_expression>
action(s332, '>>') = <reduce, cast_expression -> unary_expression>
action(s332, '?') = <reduce, cast_expression -> unary_expression>
action(s332, '^') = <reduce, cast_expression -> unary_expression>
action(s332, '|') = <reduce, cast_expression -> unary_expression>
action(s332, '||') = <reduce, cast_expression -> unary_expression>
action(s333, '!=') = <reduce, cast_expression -> unary_expression>
action(s333, '%') = <reduce, cast_expression -> unary_expression>
action(s333, '&&') = <reduce, cast_expression -> unary_expression>
action(s333, '&') = <reduce, cast_expression -> unary_expression>
action(s333, '*') = <reduce, cast_expression -> unary_expression>
action(s333, '+') = <reduce, cast_expression -> unary_expression>
action(s333, ',') = <reduce, cast_expression -> unary_expression>
action(s333, '-') = <reduce, cast_expression -> unary_expression>
action(s333, '/') = <reduce, cast_expression -> unary_expression>
action(s333, '<') = <reduce, cast_expression -> unary_expression>
action(s333, '<<') = <reduce, cast_expression -> unary_expression>
action(s333, '<=') = <reduce, cast_expression -> unary_expression>
action(s333, '==') = <reduce, cast_expression -> unary_expression>
action(s333, '>') = <reduce, cast_expression -> unary_expression>
action(s333, '>=') = <reduce, cast_expression -> unary_expression>
action(s333, '>>') = <reduce, cast_expression -> unary_expression>
action(s333, '?') = <reduce, cast_expression -> unary_expression>
action(s333, ']') = <reduce, cast_expression -> unary_expression>
action(s333, '^') = <reduce, cast_expression -> unary_expression>
action(s333, '|') = <reduce, cast_expression -> unary_expression>
action(s333, '||') = <reduce, cast_expression -> unary_expression>
action(s334, '!=') = <reduce, cast_expression -> unary_expression>
action(s334, '%') = <reduce, cast_expression -> unary_expression>
action(s334, '&&') = <reduce, cast_expression -> unary_expression>
action(s334, '&') = <reduce, cast_expression -> unary_expression>
action(s334, '*') = <reduce, cast_expression -> unary_expression>
action(s334, '+') = <reduce, cast_expression -> unary_expression>
action(s334, ',') = <reduce, cast_expression -> unary_expression>
action(s334, '-') = <reduce, cast_expression -> unary_expression>
action(s334, '/') = <reduce, cast_expression -> unary_expression>
action(s334, '<') = <reduce, cast_expression -> unary_expression>
action(s334, '<<') = <reduce, cast_expression -> unary_expression>
action(s334, '<=') = <reduce, cast_expression -> unary_expression>
action(s334, '==') = <reduce, cast_expression -> unary_expression>
action(s334, '>') = <reduce, cast_expression -> unary_expression>
action(s334, '>=') = <reduce, cast_expression -> unary_expression>
action(s334, '>>') = <reduce, cast_expression -> unary_expression>
action(s334, '?') = <reduce, cast_expression -> unary_expression>
action(s334, '^') = <reduce, cast_expression -> unary_expression>
action(s334, '|') = <reduce, cast_expression -> unary_expression>
action(s334, '||') = <reduce, cast_expression -> unary_expression>
action(s334, '}') = <reduce, cast_expression -> unary_expression>
action(s335, '!=') = <reduce, cast_expression -> unary_expression>
action(s335, '%') = <reduce, cast_expression -> unary_expression>
action(s335, '&&') = <reduce, cast_expression -> unary_expression>
action(s335, '&') = <reduce, cast_expression -> unary_expression>
action(s335, '*') = <reduce, cast_expression -> unary_expression>
action(s335, '+') = <reduce, cast_expression -> unary_expression>
action(s335, '-') = <reduce, cast_expression -> unary_expression>
action(s335, '/') = <reduce, cast_expression -> unary_expression>
action(s335, '<') = <reduce, cast_expression -> unary_expression>
action(s335, '<<') = <reduce, cast_expression -> unary_expression>
action(s335, '<=') = <reduce, cast_expression -> unary_expression>
action(s335, '==') = <reduce, cast_expression -> unary_expression>
action(s335, '>') = <reduce, cast_expression -> unary_expression>
action(s335, '>=') = <reduce, cast_expression -> unary_expression>
action(s335, '>>') = <reduce, cast_expression -> unary_expression>
action(s335, '?') = <reduce, cast_expression -> unary_expression>
action(s335, ']') = <reduce, cast_expression -> unary_expression>
action(s335, '^') = <reduce, cast_expression -> unary_expression>
action(s335, '|') = <reduce, cast_expression -> unary_expression>
action(s335, '||') = <reduce, cast_expression -> unary_expression>
action(s336, ')') = <reduce, conditional_expression -> logical_or_expression>
action(s336, ',') = <reduce, conditional_expression -> logical_or_expression>
action(s336, '?') = <shift, s72>
action(s336, '||') = <shift, s58>
action(s337, ',') = <reduce, conditional_expression -> logical_or_expression>
action(s337, ':') = <reduce, conditional_expression -> logical_or_expression>
action(s337, '?') = <shift, s73>
action(s337, '||') = <shift, s80>
action(s338, ',') = <reduce, conditional_expression -> logical_or_expression>
action(s338, ';') = <reduce, conditional_expression -> logical_or_expression>
action(s338, '?') = <shift, s74>
action(s338, '||') = <shift, s96>
action(s339, ',') = <reduce, conditional_expression -> logical_or_expression>
action(s339, '?') = <shift, s75>
action(s339, ']') = <reduce, conditional_expression -> logical_or_expression>
action(s339, '||') = <shift, s121>
action(s340, ',') = <reduce, conditional_expression -> logical_or_expression>
action(s340, '?') = <shift, s76>
action(s340, '||') = <shift, s136>
action(s340, '}') = <reduce, conditional_expression -> logical_or_expression>
action(s341, '?') = <shift, s77>
action(s341, ']') = <reduce, conditional_expression -> logical_or_expression>
action(s341, '||') = <shift, s157>
action(s342, ',') = <shift, s78>
action(s342, ':') = <shift, s57>
action(s343, ',') = <shift, s78>
action(s343, ':') = <shift, s79>
action(s344, ',') = <shift, s78>
action(s344, ':') = <shift, s93>
action(s345, ',') = <shift, s78>
action(s345, ':') = <shift, s120>
action(s346, ',') = <shift, s78>
action(s346, ':') = <shift, s134>
action(s347, ',') = <shift, s78>
action(s347, ':') = <shift, s149>
action(s348, ')') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s348, ',') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s349, ',') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s349, ':') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s350, ',') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s350, ';') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s351, ',') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s351, ']') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s352, ',') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s352, '}') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s353, ']') = <reduce, conditional_expression -> logical_or_expression '?' expression ':' conditional_expression>
action(s354, ',') = <reduce, constant_expression -> conditional_expression>
action(s354, ';') = <reduce, constant_expression -> conditional_expression>
action(s355, ',') = <reduce, constant_expression -> conditional_expression>
action(s355, '}') = <reduce, constant_expression -> conditional_expression>
action(s356, ']') = <reduce, constant_expression -> conditional_expression>
action(s357, '(') = <reduce, declaration_specifiers -> storage_class_specifier>
action(s357, ')') = <reduce, declaration_specifiers -> storage_class_specifier>
action(s357, '*') = <reduce, declaration_specifiers -> storage_class_specifier>
action(s357, ',') = <reduce, declaration_specifiers -> storage_class_specifier>
action(s357, '[') = <reduce, declaration_specifiers -> storage_class_specifier>
action(s357, 'auto') = <shift, s815>
action(s357, 'char') = <shift, s866>
action(s357, 'const') = <shift, s844>
action(s357, 'double') = <shift, s869>
action(s357, 'enum') = <shift, s458>
action(s357, 'extern') = <shift, s816>
action(s357, 'float') = <shift, s872>
action(s357, 'int') = <shift, s875>
action(s357, 'long') = <shift, s878>
action(s357, 'register') = <shift, s817>
action(s357, 'short') = <shift, s881>
action(s357, 'signed') = <shift, s884>
action(s357, 'static') = <shift, s818>
action(s357, 'struct') = <shift, s829>
action(s357, 'typedef') = <shift, s819>
action(s357, 'union') = <shift, s830>
action(s357, 'unsigned') = <shift, s887>
action(s357, 'void') = <shift, s890>
action(s357, 'volatile') = <shift, s851>
action(s357, IDENTIFIER) = <reduce, declaration_specifiers -> storage_class_specifier>
action(s357, TYPE_NAME) = <shift, s893>
action(s358, '(') = <reduce, declaration_specifiers -> type_qualifier>
action(s358, ')') = <reduce, declaration_specifiers -> type_qualifier>
action(s358, '*') = <reduce, declaration_specifiers -> type_qualifier>
action(s358, ',') = <reduce, declaration_specifiers -> type_qualifier>
action(s358, '[') = <reduce, declaration_specifiers -> type_qualifier>
action(s358, 'auto') = <shift, s815>
action(s358, 'char') = <shift, s866>
action(s358, 'const') = <shift, s844>
action(s358, 'double') = <shift, s869>
action(s358, 'enum') = <shift, s458>
action(s358, 'extern') = <shift, s816>
action(s358, 'float') = <shift, s872>
action(s358, 'int') = <shift, s875>
action(s358, 'long') = <shift, s878>
action(s358, 'register') = <shift, s817>
action(s358, 'short') = <shift, s881>
action(s358, 'signed') = <shift, s884>
action(s358, 'static') = <shift, s818>
action(s358, 'struct') = <shift, s829>
action(s358, 'typedef') = <shift, s819>
action(s358, 'union') = <shift, s830>
action(s358, 'unsigned') = <shift, s887>
action(s358, 'void') = <shift, s890>
action(s358, 'volatile') = <shift, s851>
action(s358, IDENTIFIER) = <reduce, declaration_specifiers -> type_qualifier>
action(s358, TYPE_NAME) = <shift, s893>
action(s359, '(') = <reduce, declaration_specifiers -> type_specifier>
action(s359, ')') = <reduce, declaration_specifiers -> type_specifier>
action(s359, '*') = <reduce, declaration_specifiers -> type_specifier>
action(s359, ',') = <reduce, declaration_specifiers -> type_specifier>
action(s359, '[') = <reduce, declaration_specifiers -> type_specifier>
action(s359, 'auto') = <shift, s815>
action(s359, 'char') = <shift, s866>
action(s359, 'const') = <shift, s844>
action(s359, 'double') = <shift, s869>
action(s359, 'enum') = <shift, s458>
action(s359, 'extern') = <shift, s816>
action(s359, 'float') = <shift, s872>
action(s359, 'int') = <shift, s875>
action(s359, 'long') = <shift, s878>
action(s359, 'register') = <shift, s817>
action(s359, 'short') = <shift, s881>
action(s359, 'signed') = <shift, s884>
action(s359, 'static') = <shift, s818>
action(s359, 'struct') = <shift, s829>
action(s359, 'typedef') = <shift, s819>
action(s359, 'union') = <shift, s830>
action(s359, 'unsigned') = <shift, s887>
action(s359, 'void') = <shift, s890>
action(s359, 'volatile') = <shift, s851>
action(s359, IDENTIFIER) = <reduce, declaration_specifiers -> type_specifier>
action(s359, TYPE_NAME) = <shift, s893>
action(s360, ')') = <shift, s397>
action(s360, 'auto') = <shift, s815>
action(s360, 'char') = <shift, s866>
action(s360, 'const') = <shift, s844>
action(s360, 'double') = <shift, s869>
action(s360, 'enum') = <shift, s458>
action(s360, 'extern') = <shift, s816>
action(s360, 'float') = <shift, s872>
action(s360, 'int') = <shift, s875>
action(s360, 'long') = <shift, s878>
action(s360, 'register') = <shift, s817>
action(s360, 'short') = <shift, s881>
action(s360, 'signed') = <shift, s884>
action(s360, 'static') = <shift, s818>
action(s360, 'struct') = <shift, s829>
action(s360, 'typedef') = <shift, s819>
action(s360, 'union') = <shift, s830>
action(s360, 'unsigned') = <shift, s887>
action(s360, 'void') = <shift, s890>
action(s360, 'volatile') = <shift, s851>
action(s360, TYPE_NAME) = <shift, s893>
action(s361, ')') = <shift, s398>
action(s361, 'auto') = <shift, s815>
action(s361, 'char') = <shift, s866>
action(s361, 'const') = <shift, s844>
action(s361, 'double') = <shift, s869>
action(s361, 'enum') = <shift, s458>
action(s361, 'extern') = <shift, s816>
action(s361, 'float') = <shift, s872>
action(s361, 'int') = <shift, s875>
action(s361, 'long') = <shift, s878>
action(s361, 'register') = <shift, s817>
action(s361, 'short') = <shift, s881>
action(s361, 'signed') = <shift, s884>
action(s361, 'static') = <shift, s818>
action(s361, 'struct') = <shift, s829>
action(s361, 'typedef') = <shift, s819>
action(s361, 'union') = <shift, s830>
action(s361, 'unsigned') = <shift, s887>
action(s361, 'void') = <shift, s890>
action(s361, 'volatile') = <shift, s851>
action(s361, TYPE_NAME) = <shift, s893>
action(s362, ')') = <shift, s418>
action(s362, 'auto') = <shift, s815>
action(s362, 'char') = <shift, s866>
action(s362, 'const') = <shift, s844>
action(s362, 'double') = <shift, s869>
action(s362, 'enum') = <shift, s458>
action(s362, 'extern') = <shift, s816>
action(s362, 'float') = <shift, s872>
action(s362, 'int') = <shift, s875>
action(s362, 'long') = <shift, s878>
action(s362, 'register') = <shift, s817>
action(s362, 'short') = <shift, s881>
action(s362, 'signed') = <shift, s884>
action(s362, 'static') = <shift, s818>
action(s362, 'struct') = <shift, s829>
action(s362, 'typedef') = <shift, s819>
action(s362, 'union') = <shift, s830>
action(s362, 'unsigned') = <shift, s887>
action(s362, 'void') = <shift, s890>
action(s362, 'volatile') = <shift, s851>
action(s362, IDENTIFIER) = <shift, s542>
action(s362, TYPE_NAME) = <shift, s893>
action(s363, ')') = <shift, s419>
action(s363, 'auto') = <shift, s815>
action(s363, 'char') = <shift, s866>
action(s363, 'const') = <shift, s844>
action(s363, 'double') = <shift, s869>
action(s363, 'enum') = <shift, s458>
action(s363, 'extern') = <shift, s816>
action(s363, 'float') = <shift, s872>
action(s363, 'int') = <shift, s875>
action(s363, 'long') = <shift, s878>
action(s363, 'register') = <shift, s817>
action(s363, 'short') = <shift, s881>
action(s363, 'signed') = <shift, s884>
action(s363, 'static') = <shift, s818>
action(s363, 'struct') = <shift, s829>
action(s363, 'typedef') = <shift, s819>
action(s363, 'union') = <shift, s830>
action(s363, 'unsigned') = <shift, s887>
action(s363, 'void') = <shift, s890>
action(s363, 'volatile') = <shift, s851>
action(s363, IDENTIFIER) = <shift, s542>
action(s363, TYPE_NAME) = <shift, s893>
action(s364, ')') = <shift, s420>
action(s364, 'auto') = <shift, s815>
action(s364, 'char') = <shift, s866>
action(s364, 'const') = <shift, s844>
action(s364, 'double') = <shift, s869>
action(s364, 'enum') = <shift, s458>
action(s364, 'extern') = <shift, s816>
action(s364, 'float') = <shift, s872>
action(s364, 'int') = <shift, s875>
action(s364, 'long') = <shift, s878>
action(s364, 'register') = <shift, s817>
action(s364, 'short') = <shift, s881>
action(s364, 'signed') = <shift, s884>
action(s364, 'static') = <shift, s818>
action(s364, 'struct') = <shift, s829>
action(s364, 'typedef') = <shift, s819>
action(s364, 'union') = <shift, s830>
action(s364, 'unsigned') = <shift, s887>
action(s364, 'void') = <shift, s890>
action(s364, 'volatile') = <shift, s851>
action(s364, IDENTIFIER) = <shift, s542>
action(s364, TYPE_NAME) = <shift, s893>
action(s365, '...') = <shift, s598>
action(s365, 'auto') = <shift, s815>
action(s365, 'char') = <shift, s866>
action(s365, 'const') = <shift, s844>
action(s365, 'double') = <shift, s869>
action(s365, 'enum') = <shift, s458>
action(s365, 'extern') = <shift, s816>
action(s365, 'float') = <shift, s872>
action(s365, 'int') = <shift, s875>
action(s365, 'long') = <shift, s878>
action(s365, 'register') = <shift, s817>
action(s365, 'short') = <shift, s881>
action(s365, 'signed') = <shift, s884>
action(s365, 'static') = <shift, s818>
action(s365, 'struct') = <shift, s829>
action(s365, 'typedef') = <shift, s819>
action(s365, 'union') = <shift, s830>
action(s365, 'unsigned') = <shift, s887>
action(s365, 'void') = <shift, s890>
action(s365, 'volatile') = <shift, s851>
action(s365, TYPE_NAME) = <shift, s893>
action(s366, '(') = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s366, ')') = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s366, '*') = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s366, ',') = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s366, '[') = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s366, IDENTIFIER) = <reduce, declaration_specifiers -> storage_class_specifier declaration_specifiers>
action(s367, '(') = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s367, ')') = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s367, '*') = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s367, ',') = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s367, '[') = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s367, IDENTIFIER) = <reduce, declaration_specifiers -> type_qualifier declaration_specifiers>
action(s368, '(') = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s368, ')') = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s368, '*') = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s368, ',') = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s368, '[') = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s368, IDENTIFIER) = <reduce, declaration_specifiers -> type_specifier declaration_specifiers>
action(s369, '(') = <shift, s369>
action(s369, '*') = <shift, s605>
action(s369, IDENTIFIER) = <shift, s416>
action(s370, '(') = <shift, s369>
action(s370, '*') = <shift, s605>
action(s370, IDENTIFIER) = <shift, s416>
action(s371, '(') = <shift, s370>
action(s371, '*') = <shift, s605>
action(s371, ':') = <shift, s94>
action(s371, IDENTIFIER) = <shift, s417>
action(s372, '(') = <shift, s370>
action(s372, '*') = <shift, s605>
action(s372, ':') = <shift, s94>
action(s372, IDENTIFIER) = <shift, s417>
action(s373, '(') = <shift, s363>
action(s373, ')') = <reduce, declarator -> direct_declarator>
action(s373, '[') = <shift, s155>
action(s374, '(') = <shift, s362>
action(s374, ')') = <reduce, declarator -> direct_declarator>
action(s374, ',') = <reduce, declarator -> direct_declarator>
action(s374, '[') = <shift, s154>
action(s375, '(') = <shift, s364>
action(s375, ',') = <reduce, declarator -> direct_declarator>
action(s375, ':') = <reduce, declarator -> direct_declarator>
action(s375, ';') = <reduce, declarator -> direct_declarator>
action(s375, '[') = <shift, s156>
action(s376, '(') = <shift, s369>
action(s376, IDENTIFIER) = <shift, s416>
action(s377, '(') = <shift, s370>
action(s377, IDENTIFIER) = <shift, s417>
action(s378, '(') = <shift, s363>
action(s378, ')') = <reduce, declarator -> pointer direct_declarator>
action(s378, '[') = <shift, s155>
action(s379, '(') = <shift, s362>
action(s379, ')') = <reduce, declarator -> pointer direct_declarator>
action(s379, ',') = <reduce, declarator -> pointer direct_declarator>
action(s379, '[') = <shift, s154>
action(s380, '(') = <shift, s364>
action(s380, ',') = <reduce, declarator -> pointer direct_declarator>
action(s380, ':') = <reduce, declarator -> pointer direct_declarator>
action(s380, ';') = <reduce, declarator -> pointer direct_declarator>
action(s380, '[') = <shift, s156>
action(s381, '(') = <reduce, direct_abstract_declarator -> '(' ')'>
action(s381, ')') = <reduce, direct_abstract_declarator -> '(' ')'>
action(s381, ',') = <reduce, direct_abstract_declarator -> '(' ')'>
action(s381, '[') = <reduce, direct_abstract_declarator -> '(' ')'>
action(s382, '(') = <reduce, direct_abstract_declarator -> '(' ')'>
action(s382, ')') = <reduce, direct_abstract_declarator -> '(' ')'>
action(s382, '[') = <reduce, direct_abstract_declarator -> '(' ')'>
action(s383, ')') = <shift, s385>
action(s384, ')') = <shift, s386>
action(s385, '(') = <reduce, direct_abstract_declarator -> '(' abstract_declarator ')'>
action(s385, ')') = <reduce, direct_abstract_declarator -> '(' abstract_declarator ')'>
action(s385, ',') = <reduce, direct_abstract_declarator -> '(' abstract_declarator ')'>
action(s385, '[') = <reduce, direct_abstract_declarator -> '(' abstract_declarator ')'>
action(s386, '(') = <reduce, direct_abstract_declarator -> '(' abstract_declarator ')'>
action(s386, ')') = <reduce, direct_abstract_declarator -> '(' abstract_declarator ')'>
action(s386, '[') = <reduce, direct_abstract_declarator -> '(' abstract_declarator ')'>
action(s387, ')') = <shift, s389>
action(s388, ')') = <shift, s390>
action(s389, '(') = <reduce, direct_abstract_declarator -> '(' parameter_type_list ')'>
action(s389, ')') = <reduce, direct_abstract_declarator -> '(' parameter_type_list ')'>
action(s389, ',') = <reduce, direct_abstract_declarator -> '(' parameter_type_list ')'>
action(s389, '[') = <reduce, direct_abstract_declarator -> '(' parameter_type_list ')'>
action(s390, '(') = <reduce, direct_abstract_declarator -> '(' parameter_type_list ')'>
action(s390, ')') = <reduce, direct_abstract_declarator -> '(' parameter_type_list ')'>
action(s390, '[') = <reduce, direct_abstract_declarator -> '(' parameter_type_list ')'>
action(s391, '(') = <reduce, direct_abstract_declarator -> '[' ']'>
action(s391, ')') = <reduce, direct_abstract_declarator -> '[' ']'>
action(s391, ',') = <reduce, direct_abstract_declarator -> '[' ']'>
action(s391, '[') = <reduce, direct_abstract_declarator -> '[' ']'>
action(s392, '(') = <reduce, direct_abstract_declarator -> '[' ']'>
action(s392, ')') = <reduce, direct_abstract_declarator -> '[' ']'>
action(s392, '[') = <reduce, direct_abstract_declarator -> '[' ']'>
action(s393, ']') = <shift, s395>
action(s394, ']') = <shift, s396>
action(s395, '(') = <reduce, direct_abstract_declarator -> '[' constant_expression ']'>
action(s395, ')') = <reduce, direct_abstract_declarator -> '[' constant_expression ']'>
action(s395, ',') = <reduce, direct_abstract_declarator -> '[' constant_expression ']'>
action(s395, '[') = <reduce, direct_abstract_declarator -> '[' constant_expression ']'>
action(s396, '(') = <reduce, direct_abstract_declarator -> '[' constant_expression ']'>
action(s396, ')') = <reduce, direct_abstract_declarator -> '[' constant_expression ']'>
action(s396, '[') = <reduce, direct_abstract_declarator -> '[' constant_expression ']'>
action(s397, '(') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' ')'>
action(s397, ')') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' ')'>
action(s397, ',') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' ')'>
action(s397, '[') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' ')'>
action(s398, '(') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' ')'>
action(s398, ')') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' ')'>
action(s398, '[') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' ')'>
action(s399, ')') = <shift, s401>
action(s400, ')') = <shift, s402>
action(s401, '(') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'>
action(s401, ')') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'>
action(s401, ',') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'>
action(s401, '[') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'>
action(s402, '(') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'>
action(s402, ')') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'>
action(s402, '[') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '(' parameter_type_list ')'>
action(s403, '(') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' ']'>
action(s403, ')') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' ']'>
action(s403, ',') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' ']'>
action(s403, '[') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' ']'>
action(s404, '(') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' ']'>
action(s404, ')') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' ']'>
action(s404, '[') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' ']'>
action(s405, ']') = <shift, s407>
action(s406, ']') = <shift, s408>
action(s407, '(') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']'>
action(s407, ')') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']'>
action(s407, ',') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']'>
action(s407, '[') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']'>
action(s408, '(') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']'>
action(s408, ')') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']'>
action(s408, '[') = <reduce, direct_abstract_declarator -> direct_abstract_declarator '[' constant_expression ']'>
action(s409, ')') = <shift, s412>
action(s410, ')') = <shift, s413>
action(s411, ')') = <shift, s414>
action(s412, '(') = <reduce, direct_declarator -> '(' declarator ')'>
action(s412, ')') = <reduce, direct_declarator -> '(' declarator ')'>
action(s412, ',') = <reduce, direct_declarator -> '(' declarator ')'>
action(s412, '[') = <reduce, direct_declarator -> '(' declarator ')'>
action(s413, '(') = <reduce, direct_declarator -> '(' declarator ')'>
action(s413, ')') = <reduce, direct_declarator -> '(' declarator ')'>
action(s413, '[') = <reduce, direct_declarator -> '(' declarator ')'>
action(s414, '(') = <reduce, direct_declarator -> '(' declarator ')'>
action(s414, ',') = <reduce, direct_declarator -> '(' declarator ')'>
action(s414, ':') = <reduce, direct_declarator -> '(' declarator ')'>
action(s414, ';') = <reduce, direct_declarator -> '(' declarator ')'>
action(s414, '[') = <reduce, direct_declarator -> '(' declarator ')'>
action(s415, '(') = <reduce, direct_declarator -> IDENTIFIER>
action(s415, ')') = <reduce, direct_declarator -> IDENTIFIER>
action(s415, ',') = <reduce, direct_declarator -> IDENTIFIER>
action(s415, '[') = <reduce, direct_declarator -> IDENTIFIER>
action(s416, '(') = <reduce, direct_declarator -> IDENTIFIER>
action(s416, ')') = <reduce, direct_declarator -> IDENTIFIER>
action(s416, '[') = <reduce, direct_declarator -> IDENTIFIER>
action(s417, '(') = <reduce, direct_declarator -> IDENTIFIER>
action(s417, ',') = <reduce, direct_declarator -> IDENTIFIER>
action(s417, ':') = <reduce, direct_declarator -> IDENTIFIER>
action(s417, ';') = <reduce, direct_declarator -> IDENTIFIER>
action(s417, '[') = <reduce, direct_declarator -> IDENTIFIER>
action(s418, '(') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s418, ')') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s418, ',') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s418, '[') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s419, '(') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s419, ')') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s419, '[') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s420, '(') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s420, ',') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s420, ':') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s420, ';') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s420, '[') = <reduce, direct_declarator -> direct_declarator '(' ')'>
action(s421, ')') = <shift, s424>
action(s421, ',') = <shift, s543>
action(s422, ')') = <shift, s425>
action(s422, ',') = <shift, s543>
action(s423, ')') = <shift, s426>
action(s423, ',') = <shift, s543>
action(s424, '(') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s424, ')') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s424, ',') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s424, '[') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s425, '(') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s425, ')') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s425, '[') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s426, '(') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s426, ',') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s426, ':') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s426, ';') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s426, '[') = <reduce, direct_declarator -> direct_declarator '(' identifier_list ')'>
action(s427, ')') = <shift, s430>
action(s428, ')') = <shift, s431>
action(s429, ')') = <shift, s432>
action(s430, '(') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s430, ')') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s430, ',') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s430, '[') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s431, '(') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s431, ')') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s431, '[') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s432, '(') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s432, ',') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s432, ':') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s432, ';') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s432, '[') = <reduce, direct_declarator -> direct_declarator '(' parameter_type_list ')'>
action(s433, '(') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s433, ')') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s433, ',') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s433, '[') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s434, '(') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s434, ')') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s434, '[') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s435, '(') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s435, ',') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s435, ':') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s435, ';') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s435, '[') = <reduce, direct_declarator -> direct_declarator '[' ']'>
action(s436, ']') = <shift, s439>
action(s437, ']') = <shift, s440>
action(s438, ']') = <shift, s441>
action(s439, '(') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s439, ')') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s439, ',') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s439, '[') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s440, '(') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s440, ')') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s440, '[') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s441, '(') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s441, ',') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s441, ':') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s441, ';') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s441, '[') = <reduce, direct_declarator -> direct_declarator '[' constant_expression ']'>
action(s442, '(') = <reduce, specifier_qualifier_list -> type_qualifier>
action(s442, ')') = <reduce, specifier_qualifier_list -> type_qualifier>
action(s442, '*') = <reduce, specifier_qualifier_list -> type_qualifier>
action(s442, '[') = <reduce, specifier_qualifier_list -> type_qualifier>
action(s442, 'char') = <shift, s867>
action(s442, 'const') = <shift, s846>
action(s442, 'double') = <shift, s870>
action(s442, 'enum') = <shift, s459>
action(s442, 'float') = <shift, s873>
action(s442, 'int') = <shift, s876>
action(s442, 'long') = <shift, s879>
action(s442, 'short') = <shift, s882>
action(s442, 'signed') = <shift, s885>
action(s442, 'struct') = <shift, s829>
action(s442, 'union') = <shift, s830>
action(s442, 'unsigned') = <shift, s888>
action(s442, 'void') = <shift, s891>
action(s442, 'volatile') = <shift, s853>
action(s442, TYPE_NAME) = <shift, s894>
action(s443, '(') = <reduce, specifier_qualifier_list -> type_specifier>
action(s443, ')') = <reduce, specifier_qualifier_list -> type_specifier>
action(s443, '*') = <reduce, specifier_qualifier_list -> type_specifier>
action(s443, '[') = <reduce, specifier_qualifier_list -> type_specifier>
action(s443, 'char') = <shift, s867>
action(s443, 'const') = <shift, s846>
action(s443, 'double') = <shift, s870>
action(s443, 'enum') = <shift, s459>
action(s443, 'float') = <shift, s873>
action(s443, 'int') = <shift, s876>
action(s443, 'long') = <shift, s879>
action(s443, 'short') = <shift, s882>
action(s443, 'signed') = <shift, s885>
action(s443, 'struct') = <shift, s829>
action(s443, 'union') = <shift, s830>
action(s443, 'unsigned') = <shift, s888>
action(s443, 'void') = <shift, s891>
action(s443, 'volatile') = <shift, s853>
action(s443, TYPE_NAME) = <shift, s894>
action(s444, '(') = <reduce, specifier_qualifier_list -> type_qualifier>
action(s444, '*') = <reduce, specifier_qualifier_list -> type_qualifier>
action(s444, ':') = <reduce, specifier_qualifier_list -> type_qualifier>
action(s444, 'char') = <shift, s868>
action(s444, 'const') = <shift, s849>
action(s444, 'double') = <shift, s871>
action(s444, 'enum') = <shift, s460>
action(s444, 'float') = <shift, s874>
action(s444, 'int') = <shift, s877>
action(s444, 'long') = <shift, s880>
action(s444, 'short') = <shift, s883>
action(s444, 'signed') = <shift, s886>
action(s444, 'struct') = <shift, s829>
action(s444, 'union') = <shift, s830>
action(s444, 'unsigned') = <shift, s889>
action(s444, 'void') = <shift, s892>
action(s444, 'volatile') = <shift, s856>
action(s444, IDENTIFIER) = <reduce, specifier_qualifier_list -> type_qualifier>
action(s444, TYPE_NAME) = <shift, s895>
action(s445, '(') = <reduce, specifier_qualifier_list -> type_specifier>
action(s445, '*') = <reduce, specifier_qualifier_list -> type_specifier>
action(s445, ':') = <reduce, specifier_qualifier_list -> type_specifier>
action(s445, 'char') = <shift, s868>
action(s445, 'const') = <shift, s849>
action(s445, 'double') = <shift, s871>
action(s445, 'enum') = <shift, s460>
action(s445, 'float') = <shift, s874>
action(s445, 'int') = <shift, s877>
action(s445, 'long') = <shift, s880>
action(s445, 'short') = <shift, s883>
action(s445, 'signed') = <shift, s886>
action(s445, 'struct') = <shift, s829>
action(s445, 'union') = <shift, s830>
action(s445, 'unsigned') = <shift, s889>
action(s445, 'void') = <shift, s892>
action(s445, 'volatile') = <shift, s856>
action(s445, IDENTIFIER) = <reduce, specifier_qualifier_list -> type_specifier>
action(s445, TYPE_NAME) = <shift, s895>
action(s446, 'char') = <shift, s868>
action(s446, 'const') = <shift, s849>
action(s446, 'double') = <shift, s871>
action(s446, 'enum') = <shift, s460>
action(s446, 'float') = <shift, s874>
action(s446, 'int') = <shift, s877>
action(s446, 'long') = <shift, s880>
action(s446, 'short') = <shift, s883>
action(s446, 'signed') = <shift, s886>
action(s446, 'struct') = <shift, s829>
action(s446, 'union') = <shift, s830>
action(s446, 'unsigned') = <shift, s889>
action(s446, 'void') = <shift, s892>
action(s446, 'volatile') = <shift, s856>
action(s446, TYPE_NAME) = <shift, s895>
action(s447, 'char') = <shift, s868>
action(s447, 'const') = <shift, s849>
action(s447, 'double') = <shift, s871>
action(s447, 'enum') = <shift, s460>
action(s447, 'float') = <shift, s874>
action(s447, 'int') = <shift, s877>
action(s447, 'long') = <shift, s880>
action(s447, 'short') = <shift, s883>
action(s447, 'signed') = <shift, s886>
action(s447, 'struct') = <shift, s829>
action(s447, 'union') = <shift, s830>
action(s447, 'unsigned') = <shift, s889>
action(s447, 'void') = <shift, s892>
action(s447, 'volatile') = <shift, s856>
action(s447, TYPE_NAME) = <shift, s895>
action(s448, 'char') = <shift, s868>
action(s448, 'const') = <shift, s849>
action(s448, 'double') = <shift, s871>
action(s448, 'enum') = <shift, s460>
action(s448, 'float') = <shift, s874>
action(s448, 'int') = <shift, s877>
action(s448, 'long') = <shift, s880>
action(s448, 'short') = <shift, s883>
action(s448, 'signed') = <shift, s886>
action(s448, 'struct') = <shift, s829>
action(s448, 'union') = <shift, s830>
action(s448, 'unsigned') = <shift, s889>
action(s448, 'void') = <shift, s892>
action(s448, 'volatile') = <shift, s856>
action(s448, TYPE_NAME) = <shift, s895>
action(s449, 'char') = <shift, s868>
action(s449, 'const') = <shift, s849>
action(s449, 'double') = <shift, s871>
action(s449, 'enum') = <shift, s460>
action(s449, 'float') = <shift, s874>
action(s449, 'int') = <shift, s877>
action(s449, 'long') = <shift, s880>
action(s449, 'short') = <shift, s883>
action(s449, 'signed') = <shift, s886>
action(s449, 'struct') = <shift, s829>
action(s449, 'union') = <shift, s830>
action(s449, 'unsigned') = <shift, s889>
action(s449, 'void') = <shift, s892>
action(s449, 'volatile') = <shift, s856>
action(s449, TYPE_NAME) = <shift, s895>
action(s450, 'char') = <shift, s868>
action(s450, 'const') = <shift, s849>
action(s450, 'double') = <shift, s871>
action(s450, 'enum') = <shift, s460>
action(s450, 'float') = <shift, s874>
action(s450, 'int') = <shift, s877>
action(s450, 'long') = <shift, s880>
action(s450, 'short') = <shift, s883>
action(s450, 'signed') = <shift, s886>
action(s450, 'struct') = <shift, s829>
action(s450, 'union') = <shift, s830>
action(s450, 'unsigned') = <shift, s889>
action(s450, 'void') = <shift, s892>
action(s450, 'volatile') = <shift, s856>
action(s450, TYPE_NAME) = <shift, s895>
action(s451, 'char') = <shift, s868>
action(s451, 'const') = <shift, s849>
action(s451, 'double') = <shift, s871>
action(s451, 'enum') = <shift, s460>
action(s451, 'float') = <shift, s874>
action(s451, 'int') = <shift, s877>
action(s451, 'long') = <shift, s880>
action(s451, 'short') = <shift, s883>
action(s451, 'signed') = <shift, s886>
action(s451, 'struct') = <shift, s829>
action(s451, 'union') = <shift, s830>
action(s451, 'unsigned') = <shift, s889>
action(s451, 'void') = <shift, s892>
action(s451, 'volatile') = <shift, s856>
action(s451, TYPE_NAME) = <shift, s895>
action(s452, 'char') = <shift, s868>
action(s452, 'const') = <shift, s849>
action(s452, 'double') = <shift, s871>
action(s452, 'enum') = <shift, s460>
action(s452, 'float') = <shift, s874>
action(s452, 'int') = <shift, s877>
action(s452, 'long') = <shift, s880>
action(s452, 'short') = <shift, s883>
action(s452, 'signed') = <shift, s886>
action(s452, 'struct') = <shift, s829>
action(s452, 'union') = <shift, s830>
action(s452, 'unsigned') = <shift, s889>
action(s452, 'void') = <shift, s892>
action(s452, 'volatile') = <shift, s856>
action(s452, '}') = <shift, s834>
action(s452, TYPE_NAME) = <shift, s895>
action(s453, 'char') = <shift, s868>
action(s453, 'const') = <shift, s849>
action(s453, 'double') = <shift, s871>
action(s453, 'enum') = <shift, s460>
action(s453, 'float') = <shift, s874>
action(s453, 'int') = <shift, s877>
action(s453, 'long') = <shift, s880>
action(s453, 'short') = <shift, s883>
action(s453, 'signed') = <shift, s886>
action(s453, 'struct') = <shift, s829>
action(s453, 'union') = <shift, s830>
action(s453, 'unsigned') = <shift, s889>
action(s453, 'void') = <shift, s892>
action(s453, 'volatile') = <shift, s856>
action(s453, '}') = <shift, s835>
action(s453, TYPE_NAME) = <shift, s895>
action(s454, 'char') = <shift, s868>
action(s454, 'const') = <shift, s849>
action(s454, 'double') = <shift, s871>
action(s454, 'enum') = <shift, s460>
action(s454, 'float') = <shift, s874>
action(s454, 'int') = <shift, s877>
action(s454, 'long') = <shift, s880>
action(s454, 'short') = <shift, s883>
action(s454, 'signed') = <shift, s886>
action(s454, 'struct') = <shift, s829>
action(s454, 'union') = <shift, s830>
action(s454, 'unsigned') = <shift, s889>
action(s454, 'void') = <shift, s892>
action(s454, 'volatile') = <shift, s856>
action(s454, '}') = <shift, s836>
action(s454, TYPE_NAME) = <shift, s895>
action(s455, 'char') = <shift, s868>
action(s455, 'const') = <shift, s849>
action(s455, 'double') = <shift, s871>
action(s455, 'enum') = <shift, s460>
action(s455, 'float') = <shift, s874>
action(s455, 'int') = <shift, s877>
action(s455, 'long') = <shift, s880>
action(s455, 'short') = <shift, s883>
action(s455, 'signed') = <shift, s886>
action(s455, 'struct') = <shift, s829>
action(s455, 'union') = <shift, s830>
action(s455, 'unsigned') = <shift, s889>
action(s455, 'void') = <shift, s892>
action(s455, 'volatile') = <shift, s856>
action(s455, '}') = <shift, s840>
action(s455, TYPE_NAME) = <shift, s895>
action(s456, 'char') = <shift, s868>
action(s456, 'const') = <shift, s849>
action(s456, 'double') = <shift, s871>
action(s456, 'enum') = <shift, s460>
action(s456, 'float') = <shift, s874>
action(s456, 'int') = <shift, s877>
action(s456, 'long') = <shift, s880>
action(s456, 'short') = <shift, s883>
action(s456, 'signed') = <shift, s886>
action(s456, 'struct') = <shift, s829>
action(s456, 'union') = <shift, s830>
action(s456, 'unsigned') = <shift, s889>
action(s456, 'void') = <shift, s892>
action(s456, 'volatile') = <shift, s856>
action(s456, '}') = <shift, s841>
action(s456, TYPE_NAME) = <shift, s895>
action(s457, 'char') = <shift, s868>
action(s457, 'const') = <shift, s849>
action(s457, 'double') = <shift, s871>
action(s457, 'enum') = <shift, s460>
action(s457, 'float') = <shift, s874>
action(s457, 'int') = <shift, s877>
action(s457, 'long') = <shift, s880>
action(s457, 'short') = <shift, s883>
action(s457, 'signed') = <shift, s886>
action(s457, 'struct') = <shift, s829>
action(s457, 'union') = <shift, s830>
action(s457, 'unsigned') = <shift, s889>
action(s457, 'void') = <shift, s892>
action(s457, 'volatile') = <shift, s856>
action(s457, '}') = <shift, s842>
action(s457, TYPE_NAME) = <shift, s895>
action(s458, '{') = <shift, s461>
action(s458, IDENTIFIER) = <shift, s470>
action(s459, '{') = <shift, s462>
action(s459, IDENTIFIER) = <shift, s471>
action(s460, '{') = <shift, s463>
action(s460, IDENTIFIER) = <shift, s472>
action(s461, IDENTIFIER) = <shift, s483>
action(s462, IDENTIFIER) = <shift, s483>
action(s463, IDENTIFIER) = <shift, s483>
action(s464, ',') = <shift, s482>
action(s464, '}') = <shift, s467>
action(s465, ',') = <shift, s482>
action(s465, '}') = <shift, s468>
action(s466, ',') = <shift, s482>
action(s466, '}') = <shift, s469>
action(s467, '(') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, ')') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, '*') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, ',') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, '[') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'auto') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'char') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'const') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'double') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'enum') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'extern') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'float') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'int') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'long') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'register') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'short') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'signed') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'static') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'struct') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'typedef') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'union') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'unsigned') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'void') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, 'volatile') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, IDENTIFIER) = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s467, TYPE_NAME) = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, '(') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, ')') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, '*') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, '[') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, 'char') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, 'const') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, 'double') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, 'enum') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, 'float') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, 'int') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, 'long') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, 'short') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, 'signed') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, 'struct') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, 'union') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, 'unsigned') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, 'void') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, 'volatile') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s468, TYPE_NAME) = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, '(') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, '*') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, ':') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, 'char') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, 'const') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, 'double') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, 'enum') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, 'float') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, 'int') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, 'long') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, 'short') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, 'signed') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, 'struct') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, 'union') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, 'unsigned') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, 'void') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, 'volatile') = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, IDENTIFIER) = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s469, TYPE_NAME) = <reduce, enum_specifier -> 'enum' '{' enumerator_list '}'>
action(s470, '(') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, ')') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, '*') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, ',') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, '[') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'auto') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'char') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'const') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'double') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'enum') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'extern') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'float') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'int') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'long') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'register') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'short') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'signed') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'static') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'struct') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'typedef') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'union') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'unsigned') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'void') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, 'volatile') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, '{') = <shift, s473>
action(s470, IDENTIFIER) = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s470, TYPE_NAME) = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, '(') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, ')') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, '*') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, '[') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, 'char') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, 'const') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, 'double') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, 'enum') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, 'float') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, 'int') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, 'long') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, 'short') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, 'signed') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, 'struct') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, 'union') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, 'unsigned') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, 'void') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, 'volatile') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s471, '{') = <shift, s474>
action(s471, TYPE_NAME) = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, '(') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, '*') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, ':') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, 'char') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, 'const') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, 'double') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, 'enum') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, 'float') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, 'int') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, 'long') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, 'short') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, 'signed') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, 'struct') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, 'union') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, 'unsigned') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, 'void') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, 'volatile') = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, '{') = <shift, s475>
action(s472, IDENTIFIER) = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s472, TYPE_NAME) = <reduce, enum_specifier -> 'enum' IDENTIFIER>
action(s473, IDENTIFIER) = <shift, s483>
action(s474, IDENTIFIER) = <shift, s483>
action(s475, IDENTIFIER) = <shift, s483>
action(s476, ',') = <shift, s482>
action(s476, '}') = <shift, s479>
action(s477, ',') = <shift, s482>
action(s477, '}') = <shift, s480>
action(s478, ',') = <shift, s482>
action(s478, '}') = <shift, s481>
action(s479, '(') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, ')') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, '*') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, ',') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, '[') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'auto') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'char') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'const') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'double') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'enum') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'extern') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'float') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'int') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'long') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'register') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'short') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'signed') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'static') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'struct') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'typedef') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'union') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'unsigned') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'void') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, 'volatile') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, IDENTIFIER) = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s479, TYPE_NAME) = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, '(') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, ')') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, '*') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, '[') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, 'char') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, 'const') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, 'double') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, 'enum') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, 'float') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, 'int') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, 'long') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, 'short') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, 'signed') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, 'struct') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, 'union') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, 'unsigned') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, 'void') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, 'volatile') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s480, TYPE_NAME) = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, '(') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, '*') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, ':') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, 'char') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, 'const') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, 'double') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, 'enum') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, 'float') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, 'int') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, 'long') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, 'short') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, 'signed') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, 'struct') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, 'union') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, 'unsigned') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, 'void') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, 'volatile') = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, IDENTIFIER) = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s481, TYPE_NAME) = <reduce, enum_specifier -> 'enum' IDENTIFIER '{' enumerator_list '}'>
action(s482, IDENTIFIER) = <shift, s483>
action(s483, ',') = <reduce, enumerator -> IDENTIFIER>
action(s483, '=') = <shift, s135>
action(s483, '}') = <reduce, enumerator -> IDENTIFIER>
action(s484, ',') = <reduce, enumerator -> IDENTIFIER '=' constant_expression>
action(s484, '}') = <reduce, enumerator -> IDENTIFIER '=' constant_expression>
action(s485, ',') = <reduce, enumerator_list -> enumerator>
action(s485, '}') = <reduce, enumerator_list -> enumerator>
action(s486, ',') = <reduce, enumerator_list -> enumerator_list ',' enumerator>
action(s486, '}') = <reduce, enumerator_list -> enumerator_list ',' enumerator>
action(s487, '!=') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s487, '&&') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s487, '&') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s487, ')') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s487, ',') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s487, '<') = <shift, s65>
action(s487, '<=') = <shift, s66>
action(s487, '==') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s487, '>') = <shift, s67>
action(s487, '>=') = <shift, s68>
action(s487, '?') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s487, '^') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s487, '|') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s487, '||') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s488, '!=') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s488, '&&') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s488, '&') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s488, ',') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s488, ':') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s488, '<') = <shift, s87>
action(s488, '<=') = <shift, s88>
action(s488, '==') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s488, '>') = <shift, s89>
action(s488, '>=') = <shift, s90>
action(s488, '?') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s488, '^') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s488, '|') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s488, '||') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s489, '!=') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s489, '&&') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s489, '&') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s489, ',') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s489, ';') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s489, '<') = <shift, s103>
action(s489, '<=') = <shift, s104>
action(s489, '==') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s489, '>') = <shift, s105>
action(s489, '>=') = <shift, s106>
action(s489, '?') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s489, '^') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s489, '|') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s489, '||') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s490, '!=') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s490, '&&') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s490, '&') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s490, ',') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s490, '<') = <shift, s128>
action(s490, '<=') = <shift, s129>
action(s490, '==') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s490, '>') = <shift, s130>
action(s490, '>=') = <shift, s131>
action(s490, '?') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s490, ']') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s490, '^') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s490, '|') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s490, '||') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s491, '!=') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s491, '&&') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s491, '&') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s491, ',') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s491, '<') = <shift, s143>
action(s491, '<=') = <shift, s144>
action(s491, '==') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s491, '>') = <shift, s145>
action(s491, '>=') = <shift, s146>
action(s491, '?') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s491, '^') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s491, '|') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s491, '||') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s491, '}') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s492, '!=') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s492, '&&') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s492, '&') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s492, '<') = <shift, s164>
action(s492, '<=') = <shift, s165>
action(s492, '==') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s492, '>') = <shift, s166>
action(s492, '>=') = <shift, s167>
action(s492, '?') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s492, ']') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s492, '^') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s492, '|') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s492, '||') = <reduce, equality_expression -> equality_expression '!=' relational_expression>
action(s493, '!=') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s493, '&&') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s493, '&') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s493, ')') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s493, ',') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s493, '<') = <shift, s65>
action(s493, '<=') = <shift, s66>
action(s493, '==') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s493, '>') = <shift, s67>
action(s493, '>=') = <shift, s68>
action(s493, '?') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s493, '^') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s493, '|') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s493, '||') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s494, '!=') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s494, '&&') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s494, '&') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s494, ',') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s494, ':') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s494, '<') = <shift, s87>
action(s494, '<=') = <shift, s88>
action(s494, '==') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s494, '>') = <shift, s89>
action(s494, '>=') = <shift, s90>
action(s494, '?') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s494, '^') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s494, '|') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s494, '||') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s495, '!=') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s495, '&&') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s495, '&') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s495, ',') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s495, ';') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s495, '<') = <shift, s103>
action(s495, '<=') = <shift, s104>
action(s495, '==') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s495, '>') = <shift, s105>
action(s495, '>=') = <shift, s106>
action(s495, '?') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s495, '^') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s495, '|') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s495, '||') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s496, '!=') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s496, '&&') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s496, '&') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s496, ',') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s496, '<') = <shift, s128>
action(s496, '<=') = <shift, s129>
action(s496, '==') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s496, '>') = <shift, s130>
action(s496, '>=') = <shift, s131>
action(s496, '?') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s496, ']') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s496, '^') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s496, '|') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s496, '||') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s497, '!=') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s497, '&&') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s497, '&') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s497, ',') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s497, '<') = <shift, s143>
action(s497, '<=') = <shift, s144>
action(s497, '==') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s497, '>') = <shift, s145>
action(s497, '>=') = <shift, s146>
action(s497, '?') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s497, '^') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s497, '|') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s497, '||') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s497, '}') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s498, '!=') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s498, '&&') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s498, '&') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s498, '<') = <shift, s164>
action(s498, '<=') = <shift, s165>
action(s498, '==') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s498, '>') = <shift, s166>
action(s498, '>=') = <shift, s167>
action(s498, '?') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s498, ']') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s498, '^') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s498, '|') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s498, '||') = <reduce, equality_expression -> equality_expression '==' relational_expression>
action(s499, '!=') = <reduce, equality_expression -> relational_expression>
action(s499, '&&') = <reduce, equality_expression -> relational_expression>
action(s499, '&') = <reduce, equality_expression -> relational_expression>
action(s499, ')') = <reduce, equality_expression -> relational_expression>
action(s499, ',') = <reduce, equality_expression -> relational_expression>
action(s499, '<') = <shift, s65>
action(s499, '<=') = <shift, s66>
action(s499, '==') = <reduce, equality_expression -> relational_expression>
action(s499, '>') = <shift, s67>
action(s499, '>=') = <shift, s68>
action(s499, '?') = <reduce, equality_expression -> relational_expression>
action(s499, '^') = <reduce, equality_expression -> relational_expression>
action(s499, '|') = <reduce, equality_expression -> relational_expression>
action(s499, '||') = <reduce, equality_expression -> relational_expression>
action(s500, '!=') = <reduce, equality_expression -> relational_expression>
action(s500, '&&') = <reduce, equality_expression -> relational_expression>
action(s500, '&') = <reduce, equality_expression -> relational_expression>
action(s500, ',') = <reduce, equality_expression -> relational_expression>
action(s500, ':') = <reduce, equality_expression -> relational_expression>
action(s500, '<') = <shift, s87>
action(s500, '<=') = <shift, s88>
action(s500, '==') = <reduce, equality_expression -> relational_expression>
action(s500, '>') = <shift, s89>
action(s500, '>=') = <shift, s90>
action(s500, '?') = <reduce, equality_expression -> relational_expression>
action(s500, '^') = <reduce, equality_expression -> relational_expression>
action(s500, '|') = <reduce, equality_expression -> relational_expression>
action(s500, '||') = <reduce, equality_expression -> relational_expression>
action(s501, '!=') = <reduce, equality_expression -> relational_expression>
action(s501, '&&') = <reduce, equality_expression -> relational_expression>
action(s501, '&') = <reduce, equality_expression -> relational_expression>
action(s501, ',') = <reduce, equality_expression -> relational_expression>
action(s501, ';') = <reduce, equality_expression -> relational_expression>
action(s501, '<') = <shift, s103>
action(s501, '<=') = <shift, s104>
action(s501, '==') = <reduce, equality_expression -> relational_expression>
action(s501, '>') = <shift, s105>
action(s501, '>=') = <shift, s106>
action(s501, '?') = <reduce, equality_expression -> relational_expression>
action(s501, '^') = <reduce, equality_expression -> relational_expression>
action(s501, '|') = <reduce, equality_expression -> relational_expression>
action(s501, '||') = <reduce, equality_expression -> relational_expression>
action(s502, '!=') = <reduce, equality_expression -> relational_expression>
action(s502, '&&') = <reduce, equality_expression -> relational_expression>
action(s502, '&') = <reduce, equality_expression -> relational_expression>
action(s502, ',') = <reduce, equality_expression -> relational_expression>
action(s502, '<') = <shift, s128>
action(s502, '<=') = <shift, s129>
action(s502, '==') = <reduce, equality_expression -> relational_expression>
action(s502, '>') = <shift, s130>
action(s502, '>=') = <shift, s131>
action(s502, '?') = <reduce, equality_expression -> relational_expression>
action(s502, ']') = <reduce, equality_expression -> relational_expression>
action(s502, '^') = <reduce, equality_expression -> relational_expression>
action(s502, '|') = <reduce, equality_expression -> relational_expression>
action(s502, '||') = <reduce, equality_expression -> relational_expression>
action(s503, '!=') = <reduce, equality_expression -> relational_expression>
action(s503, '&&') = <reduce, equality_expression -> relational_expression>
action(s503, '&') = <reduce, equality_expression -> relational_expression>
action(s503, ',') = <reduce, equality_expression -> relational_expression>
action(s503, '<') = <shift, s143>
action(s503, '<=') = <shift, s144>
action(s503, '==') = <reduce, equality_expression -> relational_expression>
action(s503, '>') = <shift, s145>
action(s503, '>=') = <shift, s146>
action(s503, '?') = <reduce, equality_expression -> relational_expression>
action(s503, '^') = <reduce, equality_expression -> relational_expression>
action(s503, '|') = <reduce, equality_expression -> relational_expression>
action(s503, '||') = <reduce, equality_expression -> relational_expression>
action(s503, '}') = <reduce, equality_expression -> relational_expression>
action(s504, '!=') = <reduce, equality_expression -> relational_expression>
action(s504, '&&') = <reduce, equality_expression -> relational_expression>
action(s504, '&') = <reduce, equality_expression -> relational_expression>
action(s504, '<') = <shift, s164>
action(s504, '<=') = <shift, s165>
action(s504, '==') = <reduce, equality_expression -> relational_expression>
action(s504, '>') = <shift, s166>
action(s504, '>=') = <shift, s167>
action(s504, '?') = <reduce, equality_expression -> relational_expression>
action(s504, ']') = <reduce, equality_expression -> relational_expression>
action(s504, '^') = <reduce, equality_expression -> relational_expression>
action(s504, '|') = <reduce, equality_expression -> relational_expression>
action(s504, '||') = <reduce, equality_expression -> relational_expression>
action(s505, '&&') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s505, ')') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s505, ',') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s505, '?') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s505, '^') = <shift, s61>
action(s505, '|') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s505, '||') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s506, '&&') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s506, ')') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s506, ',') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s506, '?') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s506, '^') = <shift, s61>
action(s506, '|') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s506, '||') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s507, '&&') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s507, ',') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s507, ':') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s507, '?') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s507, '^') = <shift, s83>
action(s507, '|') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s507, '||') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s508, '&&') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s508, ',') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s508, ':') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s508, '?') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s508, '^') = <shift, s83>
action(s508, '|') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s508, '||') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s509, '&&') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s509, ',') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s509, ';') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s509, '?') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s509, '^') = <shift, s99>
action(s509, '|') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s509, '||') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s510, '&&') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s510, ',') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s510, ';') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s510, '?') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s510, '^') = <shift, s99>
action(s510, '|') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s510, '||') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s511, '&&') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s511, ',') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s511, '?') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s511, ']') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s511, '^') = <shift, s124>
action(s511, '|') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s511, '||') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s512, '&&') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s512, ',') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s512, '?') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s512, ']') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s512, '^') = <shift, s124>
action(s512, '|') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s512, '||') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s513, '&&') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s513, ',') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s513, '?') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s513, '^') = <shift, s139>
action(s513, '|') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s513, '||') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s513, '}') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s514, '&&') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s514, ',') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s514, '?') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s514, '^') = <shift, s139>
action(s514, '|') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s514, '||') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s514, '}') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s515, '&&') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s515, '?') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s515, ']') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s515, '^') = <shift, s160>
action(s515, '|') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s515, '||') = <reduce, inclusive_or_expression -> exclusive_or_expression>
action(s516, '&&') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s516, '?') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s516, ']') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s516, '^') = <shift, s160>
action(s516, '|') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s516, '||') = <reduce, inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression>
action(s517, ')') = <reduce, expression -> assignment_expression>
action(s517, ',') = <reduce, expression -> assignment_expression>
action(s518, ',') = <reduce, expression -> assignment_expression>
action(s518, ':') = <reduce, expression -> assignment_expression>
action(s519, ',') = <reduce, expression -> assignment_expression>
action(s519, ']') = <reduce, expression -> assignment_expression>
action(s520, ')') = <shift, s741>
action(s520, ',') = <shift, s56>
action(s521, ')') = <shift, s742>
action(s521, ',') = <shift, s56>
action(s522, ')') = <shift, s743>
action(s522, ',') = <shift, s56>
action(s523, ')') = <shift, s744>
action(s523, ',') = <shift, s56>
action(s524, ')') = <shift, s745>
action(s524, ',') = <shift, s56>
action(s525, ')') = <shift, s746>
action(s525, ',') = <shift, s56>
action(s526, ')') = <shift, s747>
action(s526, ',') = <shift, s56>
action(s527, ')') = <shift, s748>
action(s527, ',') = <shift, s56>
action(s528, ')') = <shift, s749>
action(s528, ',') = <shift, s56>
action(s529, ')') = <shift, s750>
action(s529, ',') = <shift, s56>
action(s530, ',') = <shift, s119>
action(s530, ']') = <shift, s723>
action(s531, ',') = <shift, s119>
action(s531, ']') = <shift, s724>
action(s532, ',') = <shift, s119>
action(s532, ']') = <shift, s725>
action(s533, ',') = <shift, s119>
action(s533, ']') = <shift, s726>
action(s534, ',') = <shift, s119>
action(s534, ']') = <shift, s727>
action(s535, ',') = <shift, s119>
action(s535, ']') = <shift, s728>
action(s536, ',') = <shift, s119>
action(s536, ']') = <shift, s729>
action(s537, ',') = <shift, s119>
action(s537, ']') = <shift, s730>
action(s538, ',') = <shift, s119>
action(s538, ']') = <shift, s731>
action(s539, ')') = <reduce, expression -> expression ',' assignment_expression>
action(s539, ',') = <reduce, expression -> expression ',' assignment_expression>
action(s540, ',') = <reduce, expression -> expression ',' assignment_expression>
action(s540, ':') = <reduce, expression -> expression ',' assignment_expression>
action(s541, ',') = <reduce, expression -> expression ',' assignment_expression>
action(s541, ']') = <reduce, expression -> expression ',' assignment_expression>
action(s542, ')') = <reduce, identifier_list -> IDENTIFIER>
action(s542, ',') = <reduce, identifier_list -> IDENTIFIER>
action(s543, IDENTIFIER) = <shift, s544>
action(s544, ')') = <reduce, identifier_list -> identifier_list ',' IDENTIFIER>
action(s544, ',') = <reduce, identifier_list -> identifier_list ',' IDENTIFIER>
action(s545, '&&') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s545, ')') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s545, ',') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s545, '?') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s545, '|') = <shift, s60>
action(s545, '||') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s546, '&&') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s546, ')') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s546, ',') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s546, '?') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s546, '|') = <shift, s60>
action(s546, '||') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s547, '&&') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s547, ',') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s547, ':') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s547, '?') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s547, '|') = <shift, s82>
action(s547, '||') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s548, '&&') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s548, ',') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s548, ':') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s548, '?') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s548, '|') = <shift, s82>
action(s548, '||') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s549, '&&') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s549, ',') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s549, ';') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s549, '?') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s549, '|') = <shift, s98>
action(s549, '||') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s550, '&&') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s550, ',') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s550, ';') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s550, '?') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s550, '|') = <shift, s98>
action(s550, '||') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s551, '&&') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s551, ',') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s551, '?') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s551, ']') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s551, '|') = <shift, s123>
action(s551, '||') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s552, '&&') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s552, ',') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s552, '?') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s552, ']') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s552, '|') = <shift, s123>
action(s552, '||') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s553, '&&') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s553, ',') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s553, '?') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s553, '|') = <shift, s138>
action(s553, '||') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s553, '}') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s554, '&&') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s554, ',') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s554, '?') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s554, '|') = <shift, s138>
action(s554, '||') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s554, '}') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s555, '&&') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s555, '?') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s555, ']') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s555, '|') = <shift, s159>
action(s555, '||') = <reduce, logical_and_expression -> inclusive_or_expression>
action(s556, '&&') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s556, '?') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s556, ']') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s556, '|') = <shift, s159>
action(s556, '||') = <reduce, logical_and_expression -> logical_and_expression '&&' inclusive_or_expression>
action(s557, '&&') = <shift, s59>
action(s557, ')') = <reduce, logical_or_expression -> logical_and_expression>
action(s557, ',') = <reduce, logical_or_expression -> logical_and_expression>
action(s557, '?') = <reduce, logical_or_expression -> logical_and_expression>
action(s557, '||') = <reduce, logical_or_expression -> logical_and_expression>
action(s558, '&&') = <shift, s59>
action(s558, ')') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s558, ',') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s558, '?') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s558, '||') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s559, '&&') = <shift, s81>
action(s559, ',') = <reduce, logical_or_expression -> logical_and_expression>
action(s559, ':') = <reduce, logical_or_expression -> logical_and_expression>
action(s559, '?') = <reduce, logical_or_expression -> logical_and_expression>
action(s559, '||') = <reduce, logical_or_expression -> logical_and_expression>
action(s560, '&&') = <shift, s81>
action(s560, ',') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s560, ':') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s560, '?') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s560, '||') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s561, '&&') = <shift, s97>
action(s561, ',') = <reduce, logical_or_expression -> logical_and_expression>
action(s561, ';') = <reduce, logical_or_expression -> logical_and_expression>
action(s561, '?') = <reduce, logical_or_expression -> logical_and_expression>
action(s561, '||') = <reduce, logical_or_expression -> logical_and_expression>
action(s562, '&&') = <shift, s97>
action(s562, ',') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s562, ';') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s562, '?') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s562, '||') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s563, '&&') = <shift, s122>
action(s563, ',') = <reduce, logical_or_expression -> logical_and_expression>
action(s563, '?') = <reduce, logical_or_expression -> logical_and_expression>
action(s563, ']') = <reduce, logical_or_expression -> logical_and_expression>
action(s563, '||') = <reduce, logical_or_expression -> logical_and_expression>
action(s564, '&&') = <shift, s122>
action(s564, ',') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s564, '?') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s564, ']') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s564, '||') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s565, '&&') = <shift, s137>
action(s565, ',') = <reduce, logical_or_expression -> logical_and_expression>
action(s565, '?') = <reduce, logical_or_expression -> logical_and_expression>
action(s565, '||') = <reduce, logical_or_expression -> logical_and_expression>
action(s565, '}') = <reduce, logical_or_expression -> logical_and_expression>
action(s566, '&&') = <shift, s137>
action(s566, ',') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s566, '?') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s566, '||') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s566, '}') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s567, '&&') = <shift, s158>
action(s567, '?') = <reduce, logical_or_expression -> logical_and_expression>
action(s567, ']') = <reduce, logical_or_expression -> logical_and_expression>
action(s567, '||') = <reduce, logical_or_expression -> logical_and_expression>
action(s568, '&&') = <shift, s158>
action(s568, '?') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s568, ']') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s568, '||') = <reduce, logical_or_expression -> logical_or_expression '||' logical_and_expression>
action(s569, '!=') = <reduce, multiplicative_expression -> cast_expression>
action(s569, '%') = <reduce, multiplicative_expression -> cast_expression>
action(s569, '&&') = <reduce, multiplicative_expression -> cast_expression>
action(s569, '&') = <reduce, multiplicative_expression -> cast_expression>
action(s569, ')') = <reduce, multiplicative_expression -> cast_expression>
action(s569, '*') = <reduce, multiplicative_expression -> cast_expression>
action(s569, '+') = <reduce, multiplicative_expression -> cast_expression>
action(s569, ',') = <reduce, multiplicative_expression -> cast_expression>
action(s569, '-') = <reduce, multiplicative_expression -> cast_expression>
action(s569, '/') = <reduce, multiplicative_expression -> cast_expression>
action(s569, '<') = <reduce, multiplicative_expression -> cast_expression>
action(s569, '<<') = <reduce, multiplicative_expression -> cast_expression>
action(s569, '<=') = <reduce, multiplicative_expression -> cast_expression>
action(s569, '==') = <reduce, multiplicative_expression -> cast_expression>
action(s569, '>') = <reduce, multiplicative_expression -> cast_expression>
action(s569, '>=') = <reduce, multiplicative_expression -> cast_expression>
action(s569, '>>') = <reduce, multiplicative_expression -> cast_expression>
action(s569, '?') = <reduce, multiplicative_expression -> cast_expression>
action(s569, '^') = <reduce, multiplicative_expression -> cast_expression>
action(s569, '|') = <reduce, multiplicative_expression -> cast_expression>
action(s569, '||') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '!=') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '%') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '&&') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '&') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '*') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '+') = <reduce, multiplicative_expression -> cast_expression>
action(s570, ',') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '-') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '/') = <reduce, multiplicative_expression -> cast_expression>
action(s570, ':') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '<') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '<<') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '<=') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '==') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '>') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '>=') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '>>') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '?') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '^') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '|') = <reduce, multiplicative_expression -> cast_expression>
action(s570, '||') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '!=') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '%') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '&&') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '&') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '*') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '+') = <reduce, multiplicative_expression -> cast_expression>
action(s571, ',') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '-') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '/') = <reduce, multiplicative_expression -> cast_expression>
action(s571, ';') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '<') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '<<') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '<=') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '==') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '>') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '>=') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '>>') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '?') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '^') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '|') = <reduce, multiplicative_expression -> cast_expression>
action(s571, '||') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '!=') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '%') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '&&') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '&') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '*') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '+') = <reduce, multiplicative_expression -> cast_expression>
action(s572, ',') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '-') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '/') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '<') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '<<') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '<=') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '==') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '>') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '>=') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '>>') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '?') = <reduce, multiplicative_expression -> cast_expression>
action(s572, ']') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '^') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '|') = <reduce, multiplicative_expression -> cast_expression>
action(s572, '||') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '!=') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '%') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '&&') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '&') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '*') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '+') = <reduce, multiplicative_expression -> cast_expression>
action(s573, ',') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '-') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '/') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '<') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '<<') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '<=') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '==') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '>') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '>=') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '>>') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '?') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '^') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '|') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '||') = <reduce, multiplicative_expression -> cast_expression>
action(s573, '}') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '!=') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '%') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '&&') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '&') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '*') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '+') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '-') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '/') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '<') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '<<') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '<=') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '==') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '>') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '>=') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '>>') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '?') = <reduce, multiplicative_expression -> cast_expression>
action(s574, ']') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '^') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '|') = <reduce, multiplicative_expression -> cast_expression>
action(s574, '||') = <reduce, multiplicative_expression -> cast_expression>
action(s575, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, '%') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, '&') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, ')') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, '*') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, '+') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, ',') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, '-') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, '/') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, '<') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, '==') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, '>') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, '?') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, '^') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, '|') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s575, '||') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '%') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '&') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '*') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '+') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, ',') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '-') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '/') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, ':') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '<') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '==') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '>') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '?') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '^') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '|') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s576, '||') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '%') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '&') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '*') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '+') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, ',') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '-') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '/') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, ';') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '<') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '==') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '>') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '?') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '^') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '|') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s577, '||') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '%') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '&') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '*') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '+') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, ',') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '-') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '/') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '<') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '==') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '>') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '?') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, ']') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '^') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '|') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s578, '||') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '%') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '&') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '*') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '+') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, ',') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '-') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '/') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '<') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '==') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '>') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '?') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '^') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '|') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '||') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s579, '}') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '%') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '&') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '*') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '+') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '-') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '/') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '<') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '==') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '>') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '?') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, ']') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '^') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '|') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s580, '||') = <reduce, multiplicative_expression -> multiplicative_expression '%' cast_expression>
action(s581, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, '%') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, '&') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, ')') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, '*') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, '+') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, ',') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, '-') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, '/') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, '<') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, '==') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, '>') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, '?') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, '^') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, '|') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s581, '||') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '%') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '&') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '*') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '+') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, ',') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '-') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '/') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, ':') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '<') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '==') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '>') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '?') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '^') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '|') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s582, '||') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '%') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '&') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '*') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '+') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, ',') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '-') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '/') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, ';') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '<') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '==') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '>') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '?') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '^') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '|') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s583, '||') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '%') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '&') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '*') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '+') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, ',') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '-') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '/') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '<') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '==') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '>') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '?') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, ']') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '^') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '|') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s584, '||') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '%') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '&') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '*') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '+') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, ',') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '-') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '/') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '<') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '==') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '>') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '?') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '^') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '|') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '||') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s585, '}') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '%') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '&') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '*') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '+') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '-') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '/') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '<') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '==') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '>') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '?') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, ']') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '^') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '|') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s586, '||') = <reduce, multiplicative_expression -> multiplicative_expression '*' cast_expression>
action(s587, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, '%') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, '&') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, ')') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, '*') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, '+') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, ',') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, '-') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, '/') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, '<') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, '==') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, '>') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, '?') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, '^') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, '|') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s587, '||') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '%') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '&') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '*') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '+') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, ',') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '-') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '/') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, ':') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '<') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '==') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '>') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '?') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '^') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '|') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s588, '||') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '%') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '&') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '*') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '+') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, ',') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '-') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '/') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, ';') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '<') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '==') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '>') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '?') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '^') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '|') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s589, '||') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '%') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '&') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '*') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '+') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, ',') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '-') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '/') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '<') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '==') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '>') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '?') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, ']') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '^') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '|') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s590, '||') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '%') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '&') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '*') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '+') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, ',') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '-') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '/') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '<') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '==') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '>') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '?') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '^') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '|') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '||') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s591, '}') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '!=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '%') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '&&') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '&') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '*') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '+') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '-') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '/') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '<') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '<<') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '<=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '==') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '>') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '>=') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '>>') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '?') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, ']') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '^') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '|') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s592, '||') = <reduce, multiplicative_expression -> multiplicative_expression '/' cast_expression>
action(s593, ')') = <reduce, parameter_declaration -> declaration_specifiers abstract_declarator>
action(s593, ',') = <reduce, parameter_declaration -> declaration_specifiers abstract_declarator>
action(s594, ')') = <reduce, parameter_declaration -> declaration_specifiers declarator>
action(s594, ',') = <reduce, parameter_declaration -> declaration_specifiers declarator>
action(s595, ')') = <reduce, parameter_list -> parameter_declaration>
action(s595, ',') = <reduce, parameter_list -> parameter_declaration>
action(s596, ')') = <reduce, parameter_type_list -> parameter_list>
action(s596, ',') = <shift, s365>
action(s597, ')') = <reduce, parameter_list -> parameter_list ',' parameter_declaration>
action(s597, ',') = <reduce, parameter_list -> parameter_list ',' parameter_declaration>
action(s598, ')') = <reduce, parameter_type_list -> parameter_list ',' '...'>
action(s599, '(') = <reduce, pointer -> '*'>
action(s599, ')') = <reduce, pointer -> '*'>
action(s599, '*') = <shift, s599>
action(s599, ',') = <reduce, pointer -> '*'>
action(s599, '[') = <reduce, pointer -> '*'>
action(s599, 'const') = <shift, s845>
action(s599, 'volatile') = <shift, s852>
action(s599, IDENTIFIER) = <reduce, pointer -> '*'>
action(s600, '(') = <reduce, pointer -> '*' type_qualifier_list>
action(s600, ')') = <reduce, pointer -> '*' type_qualifier_list>
action(s600, '*') = <shift, s599>
action(s600, ',') = <reduce, pointer -> '*' type_qualifier_list>
action(s600, '[') = <reduce, pointer -> '*' type_qualifier_list>
action(s600, 'const') = <shift, s845>
action(s600, 'volatile') = <shift, s852>
action(s600, IDENTIFIER) = <reduce, pointer -> '*' type_qualifier_list>
action(s601, '(') = <reduce, pointer -> '*'>
action(s601, ')') = <reduce, pointer -> '*'>
action(s601, '*') = <shift, s601>
action(s601, '[') = <reduce, pointer -> '*'>
action(s601, 'const') = <shift, s847>
action(s601, 'volatile') = <shift, s854>
action(s602, '(') = <reduce, pointer -> '*' type_qualifier_list>
action(s602, ')') = <reduce, pointer -> '*' type_qualifier_list>
action(s602, '*') = <shift, s601>
action(s602, '[') = <reduce, pointer -> '*' type_qualifier_list>
action(s602, 'const') = <shift, s847>
action(s602, 'volatile') = <shift, s854>
action(s603, '(') = <reduce, pointer -> '*'>
action(s603, ')') = <reduce, pointer -> '*'>
action(s603, '*') = <shift, s603>
action(s603, '[') = <reduce, pointer -> '*'>
action(s603, 'const') = <shift, s848>
action(s603, 'volatile') = <shift, s855>
action(s603, IDENTIFIER) = <reduce, pointer -> '*'>
action(s604, '(') = <reduce, pointer -> '*' type_qualifier_list>
action(s604, ')') = <reduce, pointer -> '*' type_qualifier_list>
action(s604, '*') = <shift, s603>
action(s604, '[') = <reduce, pointer -> '*' type_qualifier_list>
action(s604, 'const') = <shift, s848>
action(s604, 'volatile') = <shift, s855>
action(s604, IDENTIFIER) = <reduce, pointer -> '*' type_qualifier_list>
action(s605, '(') = <reduce, pointer -> '*'>
action(s605, '*') = <shift, s605>
action(s605, 'const') = <shift, s850>
action(s605, 'volatile') = <shift, s857>
action(s605, IDENTIFIER) = <reduce, pointer -> '*'>
action(s606, '(') = <reduce, pointer -> '*' type_qualifier_list>
action(s606, '*') = <shift, s605>
action(s606, 'const') = <shift, s850>
action(s606, 'volatile') = <shift, s857>
action(s606, IDENTIFIER) = <reduce, pointer -> '*' type_qualifier_list>
action(s607, '(') = <reduce, pointer -> '*' pointer>
action(s607, ')') = <reduce, pointer -> '*' pointer>
action(s607, ',') = <reduce, pointer -> '*' pointer>
action(s607, '[') = <reduce, pointer -> '*' pointer>
action(s607, IDENTIFIER) = <reduce, pointer -> '*' pointer>
action(s608, '(') = <reduce, pointer -> '*' pointer>
action(s608, ')') = <reduce, pointer -> '*' pointer>
action(s608, '[') = <reduce, pointer -> '*' pointer>
action(s609, '(') = <reduce, pointer -> '*' pointer>
action(s609, ')') = <reduce, pointer -> '*' pointer>
action(s609, '[') = <reduce, pointer -> '*' pointer>
action(s609, IDENTIFIER) = <reduce, pointer -> '*' pointer>
action(s610, '(') = <reduce, pointer -> '*' pointer>
action(s610, IDENTIFIER) = <reduce, pointer -> '*' pointer>
action(s611, '(') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s611, ')') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s611, ',') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s611, '[') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s611, IDENTIFIER) = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s612, '(') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s612, ')') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s612, '[') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s613, '(') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s613, ')') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s613, '[') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s613, IDENTIFIER) = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s614, '(') = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s614, IDENTIFIER) = <reduce, pointer -> '*' type_qualifier_list pointer>
action(s615, '!') = <shift, s956>
action(s615, '&') = <shift, s957>
action(s615, '(') = <shift, s47>
action(s615, '*') = <shift, s958>
action(s615, '+') = <shift, s959>
action(s615, '++') = <shift, s615>
action(s615, '-') = <shift, s960>
action(s615, '--') = <shift, s616>
action(s615, 'sizeof') = <shift, s617>
action(s615, '~') = <shift, s961>
action(s615, CONSTANT) = <shift, s752>
action(s615, IDENTIFIER) = <shift, s762>
action(s615, STRING_LITERAL) = <shift, s772>
action(s616, '!') = <shift, s956>
action(s616, '&') = <shift, s957>
action(s616, '(') = <shift, s47>
action(s616, '*') = <shift, s958>
action(s616, '+') = <shift, s959>
action(s616, '++') = <shift, s615>
action(s616, '-') = <shift, s960>
action(s616, '--') = <shift, s616>
action(s616, 'sizeof') = <shift, s617>
action(s616, '~') = <shift, s961>
action(s616, CONSTANT) = <shift, s752>
action(s616, IDENTIFIER) = <shift, s762>
action(s616, STRING_LITERAL) = <shift, s772>
action(s617, '!') = <shift, s956>
action(s617, '&') = <shift, s957>
action(s617, '(') = <shift, s37>
action(s617, '*') = <shift, s958>
action(s617, '+') = <shift, s959>
action(s617, '++') = <shift, s615>
action(s617, '-') = <shift, s960>
action(s617, '--') = <shift, s616>
action(s617, 'sizeof') = <shift, s617>
action(s617, '~') = <shift, s961>
action(s617, CONSTANT) = <shift, s752>
action(s617, IDENTIFIER) = <shift, s762>
action(s617, STRING_LITERAL) = <shift, s772>
action(s618, '!') = <shift, s956>
action(s618, '&') = <shift, s957>
action(s618, '(') = <shift, s48>
action(s618, '*') = <shift, s958>
action(s618, '+') = <shift, s959>
action(s618, '++') = <shift, s618>
action(s618, '-') = <shift, s960>
action(s618, '--') = <shift, s619>
action(s618, 'sizeof') = <shift, s620>
action(s618, '~') = <shift, s961>
action(s618, CONSTANT) = <shift, s753>
action(s618, IDENTIFIER) = <shift, s763>
action(s618, STRING_LITERAL) = <shift, s773>
action(s619, '!') = <shift, s956>
action(s619, '&') = <shift, s957>
action(s619, '(') = <shift, s48>
action(s619, '*') = <shift, s958>
action(s619, '+') = <shift, s959>
action(s619, '++') = <shift, s618>
action(s619, '-') = <shift, s960>
action(s619, '--') = <shift, s619>
action(s619, 'sizeof') = <shift, s620>
action(s619, '~') = <shift, s961>
action(s619, CONSTANT) = <shift, s753>
action(s619, IDENTIFIER) = <shift, s763>
action(s619, STRING_LITERAL) = <shift, s773>
action(s620, '!') = <shift, s956>
action(s620, '&') = <shift, s957>
action(s620, '(') = <shift, s38>
action(s620, '*') = <shift, s958>
action(s620, '+') = <shift, s959>
action(s620, '++') = <shift, s618>
action(s620, '-') = <shift, s960>
action(s620, '--') = <shift, s619>
action(s620, 'sizeof') = <shift, s620>
action(s620, '~') = <shift, s961>
action(s620, CONSTANT) = <shift, s753>
action(s620, IDENTIFIER) = <shift, s763>
action(s620, STRING_LITERAL) = <shift, s773>
action(s621, '!') = <shift, s956>
action(s621, '&') = <shift, s957>
action(s621, '(') = <shift, s49>
action(s621, '*') = <shift, s958>
action(s621, '+') = <shift, s959>
action(s621, '++') = <shift, s621>
action(s621, '-') = <shift, s960>
action(s621, '--') = <shift, s622>
action(s621, 'sizeof') = <shift, s623>
action(s621, '~') = <shift, s961>
action(s621, CONSTANT) = <shift, s754>
action(s621, IDENTIFIER) = <shift, s764>
action(s621, STRING_LITERAL) = <shift, s774>
action(s622, '!') = <shift, s956>
action(s622, '&') = <shift, s957>
action(s622, '(') = <shift, s49>
action(s622, '*') = <shift, s958>
action(s622, '+') = <shift, s959>
action(s622, '++') = <shift, s621>
action(s622, '-') = <shift, s960>
action(s622, '--') = <shift, s622>
action(s622, 'sizeof') = <shift, s623>
action(s622, '~') = <shift, s961>
action(s622, CONSTANT) = <shift, s754>
action(s622, IDENTIFIER) = <shift, s764>
action(s622, STRING_LITERAL) = <shift, s774>
action(s623, '!') = <shift, s956>
action(s623, '&') = <shift, s957>
action(s623, '(') = <shift, s39>
action(s623, '*') = <shift, s958>
action(s623, '+') = <shift, s959>
action(s623, '++') = <shift, s621>
action(s623, '-') = <shift, s960>
action(s623, '--') = <shift, s622>
action(s623, 'sizeof') = <shift, s623>
action(s623, '~') = <shift, s961>
action(s623, CONSTANT) = <shift, s754>
action(s623, IDENTIFIER) = <shift, s764>
action(s623, STRING_LITERAL) = <shift, s774>
action(s624, '!') = <shift, s956>
action(s624, '&') = <shift, s957>
action(s624, '(') = <shift, s50>
action(s624, '*') = <shift, s958>
action(s624, '+') = <shift, s959>
action(s624, '++') = <shift, s624>
action(s624, '-') = <shift, s960>
action(s624, '--') = <shift, s625>
action(s624, 'sizeof') = <shift, s626>
action(s624, '~') = <shift, s961>
action(s624, CONSTANT) = <shift, s755>
action(s624, IDENTIFIER) = <shift, s765>
action(s624, STRING_LITERAL) = <shift, s775>
action(s625, '!') = <shift, s956>
action(s625, '&') = <shift, s957>
action(s625, '(') = <shift, s50>
action(s625, '*') = <shift, s958>
action(s625, '+') = <shift, s959>
action(s625, '++') = <shift, s624>
action(s625, '-') = <shift, s960>
action(s625, '--') = <shift, s625>
action(s625, 'sizeof') = <shift, s626>
action(s625, '~') = <shift, s961>
action(s625, CONSTANT) = <shift, s755>
action(s625, IDENTIFIER) = <shift, s765>
action(s625, STRING_LITERAL) = <shift, s775>
action(s626, '!') = <shift, s956>
action(s626, '&') = <shift, s957>
action(s626, '(') = <shift, s40>
action(s626, '*') = <shift, s958>
action(s626, '+') = <shift, s959>
action(s626, '++') = <shift, s624>
action(s626, '-') = <shift, s960>
action(s626, '--') = <shift, s625>
action(s626, 'sizeof') = <shift, s626>
action(s626, '~') = <shift, s961>
action(s626, CONSTANT) = <shift, s755>
action(s626, IDENTIFIER) = <shift, s765>
action(s626, STRING_LITERAL) = <shift, s775>
action(s627, '!') = <shift, s956>
action(s627, '&') = <shift, s957>
action(s627, '(') = <shift, s51>
action(s627, '*') = <shift, s958>
action(s627, '+') = <shift, s959>
action(s627, '++') = <shift, s627>
action(s627, '-') = <shift, s960>
action(s627, '--') = <shift, s628>
action(s627, 'sizeof') = <shift, s629>
action(s627, '~') = <shift, s961>
action(s627, CONSTANT) = <shift, s756>
action(s627, IDENTIFIER) = <shift, s766>
action(s627, STRING_LITERAL) = <shift, s776>
action(s628, '!') = <shift, s956>
action(s628, '&') = <shift, s957>
action(s628, '(') = <shift, s51>
action(s628, '*') = <shift, s958>
action(s628, '+') = <shift, s959>
action(s628, '++') = <shift, s627>
action(s628, '-') = <shift, s960>
action(s628, '--') = <shift, s628>
action(s628, 'sizeof') = <shift, s629>
action(s628, '~') = <shift, s961>
action(s628, CONSTANT) = <shift, s756>
action(s628, IDENTIFIER) = <shift, s766>
action(s628, STRING_LITERAL) = <shift, s776>
action(s629, '!') = <shift, s956>
action(s629, '&') = <shift, s957>
action(s629, '(') = <shift, s41>
action(s629, '*') = <shift, s958>
action(s629, '+') = <shift, s959>
action(s629, '++') = <shift, s627>
action(s629, '-') = <shift, s960>
action(s629, '--') = <shift, s628>
action(s629, 'sizeof') = <shift, s629>
action(s629, '~') = <shift, s961>
action(s629, CONSTANT) = <shift, s756>
action(s629, IDENTIFIER) = <shift, s766>
action(s629, STRING_LITERAL) = <shift, s776>
action(s630, '!') = <shift, s956>
action(s630, '&') = <shift, s957>
action(s630, '(') = <shift, s52>
action(s630, '*') = <shift, s958>
action(s630, '+') = <shift, s959>
action(s630, '++') = <shift, s630>
action(s630, '-') = <shift, s960>
action(s630, '--') = <shift, s631>
action(s630, 'sizeof') = <shift, s632>
action(s630, '~') = <shift, s961>
action(s630, CONSTANT) = <shift, s757>
action(s630, IDENTIFIER) = <shift, s767>
action(s630, STRING_LITERAL) = <shift, s777>
action(s631, '!') = <shift, s956>
action(s631, '&') = <shift, s957>
action(s631, '(') = <shift, s52>
action(s631, '*') = <shift, s958>
action(s631, '+') = <shift, s959>
action(s631, '++') = <shift, s630>
action(s631, '-') = <shift, s960>
action(s631, '--') = <shift, s631>
action(s631, 'sizeof') = <shift, s632>
action(s631, '~') = <shift, s961>
action(s631, CONSTANT) = <shift, s757>
action(s631, IDENTIFIER) = <shift, s767>
action(s631, STRING_LITERAL) = <shift, s777>
action(s632, '!') = <shift, s956>
action(s632, '&') = <shift, s957>
action(s632, '(') = <shift, s42>
action(s632, '*') = <shift, s958>
action(s632, '+') = <shift, s959>
action(s632, '++') = <shift, s630>
action(s632, '-') = <shift, s960>
action(s632, '--') = <shift, s631>
action(s632, 'sizeof') = <shift, s632>
action(s632, '~') = <shift, s961>
action(s632, CONSTANT) = <shift, s757>
action(s632, IDENTIFIER) = <shift, s767>
action(s632, STRING_LITERAL) = <shift, s777>
action(s633, '!') = <shift, s956>
action(s633, '&') = <shift, s957>
action(s633, '(') = <shift, s53>
action(s633, '*') = <shift, s958>
action(s633, '+') = <shift, s959>
action(s633, '++') = <shift, s633>
action(s633, '-') = <shift, s960>
action(s633, '--') = <shift, s634>
action(s633, 'sizeof') = <shift, s635>
action(s633, '~') = <shift, s961>
action(s633, CONSTANT) = <shift, s758>
action(s633, IDENTIFIER) = <shift, s768>
action(s633, STRING_LITERAL) = <shift, s778>
action(s634, '!') = <shift, s956>
action(s634, '&') = <shift, s957>
action(s634, '(') = <shift, s53>
action(s634, '*') = <shift, s958>
action(s634, '+') = <shift, s959>
action(s634, '++') = <shift, s633>
action(s634, '-') = <shift, s960>
action(s634, '--') = <shift, s634>
action(s634, 'sizeof') = <shift, s635>
action(s634, '~') = <shift, s961>
action(s634, CONSTANT) = <shift, s758>
action(s634, IDENTIFIER) = <shift, s768>
action(s634, STRING_LITERAL) = <shift, s778>
action(s635, '!') = <shift, s956>
action(s635, '&') = <shift, s957>
action(s635, '(') = <shift, s43>
action(s635, '*') = <shift, s958>
action(s635, '+') = <shift, s959>
action(s635, '++') = <shift, s633>
action(s635, '-') = <shift, s960>
action(s635, '--') = <shift, s634>
action(s635, 'sizeof') = <shift, s635>
action(s635, '~') = <shift, s961>
action(s635, CONSTANT) = <shift, s758>
action(s635, IDENTIFIER) = <shift, s768>
action(s635, STRING_LITERAL) = <shift, s778>
action(s636, '!') = <shift, s956>
action(s636, '&') = <shift, s957>
action(s636, '(') = <shift, s54>
action(s636, '*') = <shift, s958>
action(s636, '+') = <shift, s959>
action(s636, '++') = <shift, s636>
action(s636, '-') = <shift, s960>
action(s636, '--') = <shift, s637>
action(s636, 'sizeof') = <shift, s638>
action(s636, '~') = <shift, s961>
action(s636, CONSTANT) = <shift, s759>
action(s636, IDENTIFIER) = <shift, s769>
action(s636, STRING_LITERAL) = <shift, s779>
action(s637, '!') = <shift, s956>
action(s637, '&') = <shift, s957>
action(s637, '(') = <shift, s54>
action(s637, '*') = <shift, s958>
action(s637, '+') = <shift, s959>
action(s637, '++') = <shift, s636>
action(s637, '-') = <shift, s960>
action(s637, '--') = <shift, s637>
action(s637, 'sizeof') = <shift, s638>
action(s637, '~') = <shift, s961>
action(s637, CONSTANT) = <shift, s759>
action(s637, IDENTIFIER) = <shift, s769>
action(s637, STRING_LITERAL) = <shift, s779>
action(s638, '!') = <shift, s956>
action(s638, '&') = <shift, s957>
action(s638, '(') = <shift, s44>
action(s638, '*') = <shift, s958>
action(s638, '+') = <shift, s959>
action(s638, '++') = <shift, s636>
action(s638, '-') = <shift, s960>
action(s638, '--') = <shift, s637>
action(s638, 'sizeof') = <shift, s638>
action(s638, '~') = <shift, s961>
action(s638, CONSTANT) = <shift, s759>
action(s638, IDENTIFIER) = <shift, s769>
action(s638, STRING_LITERAL) = <shift, s779>
action(s639, '!') = <shift, s956>
action(s639, '&') = <shift, s957>
action(s639, '(') = <shift, s55>
action(s639, '*') = <shift, s958>
action(s639, '+') = <shift, s959>
action(s639, '++') = <shift, s639>
action(s639, '-') = <shift, s960>
action(s639, '--') = <shift, s640>
action(s639, 'sizeof') = <shift, s641>
action(s639, '~') = <shift, s961>
action(s639, CONSTANT) = <shift, s760>
action(s639, IDENTIFIER) = <shift, s770>
action(s639, STRING_LITERAL) = <shift, s780>
action(s640, '!') = <shift, s956>
action(s640, '&') = <shift, s957>
action(s640, '(') = <shift, s55>
action(s640, '*') = <shift, s958>
action(s640, '+') = <shift, s959>
action(s640, '++') = <shift, s639>
action(s640, '-') = <shift, s960>
action(s640, '--') = <shift, s640>
action(s640, 'sizeof') = <shift, s641>
action(s640, '~') = <shift, s961>
action(s640, CONSTANT) = <shift, s760>
action(s640, IDENTIFIER) = <shift, s770>
action(s640, STRING_LITERAL) = <shift, s780>
action(s641, '!') = <shift, s956>
action(s641, '&') = <shift, s957>
action(s641, '(') = <shift, s45>
action(s641, '*') = <shift, s958>
action(s641, '+') = <shift, s959>
action(s641, '++') = <shift, s639>
action(s641, '-') = <shift, s960>
action(s641, '--') = <shift, s640>
action(s641, 'sizeof') = <shift, s641>
action(s641, '~') = <shift, s961>
action(s641, CONSTANT) = <shift, s760>
action(s641, IDENTIFIER) = <shift, s770>
action(s641, STRING_LITERAL) = <shift, s780>
action(s642, '!=') = <reduce, unary_expression -> postfix_expression>
action(s642, '%') = <reduce, unary_expression -> postfix_expression>
action(s642, '%=') = <reduce, unary_expression -> postfix_expression>
action(s642, '&&') = <reduce, unary_expression -> postfix_expression>
action(s642, '&') = <reduce, unary_expression -> postfix_expression>
action(s642, '&=') = <reduce, unary_expression -> postfix_expression>
action(s642, '(') = <shift, s14>
action(s642, ')') = <reduce, unary_expression -> postfix_expression>
action(s642, '*') = <reduce, unary_expression -> postfix_expression>
action(s642, '*=') = <reduce, unary_expression -> postfix_expression>
action(s642, '+') = <reduce, unary_expression -> postfix_expression>
action(s642, '++') = <shift, s669>
action(s642, '+=') = <reduce, unary_expression -> postfix_expression>
action(s642, ',') = <reduce, unary_expression -> postfix_expression>
action(s642, '-') = <reduce, unary_expression -> postfix_expression>
action(s642, '--') = <shift, s678>
action(s642, '-=') = <reduce, unary_expression -> postfix_expression>
action(s642, '->') = <shift, s687>
action(s642, '.') = <shift, s705>
action(s642, '/') = <reduce, unary_expression -> postfix_expression>
action(s642, '/=') = <reduce, unary_expression -> postfix_expression>
action(s642, '<') = <reduce, unary_expression -> postfix_expression>
action(s642, '<<') = <reduce, unary_expression -> postfix_expression>
action(s642, '<<=') = <reduce, unary_expression -> postfix_expression>
action(s642, '<=') = <reduce, unary_expression -> postfix_expression>
action(s642, '=') = <reduce, unary_expression -> postfix_expression>
action(s642, '==') = <reduce, unary_expression -> postfix_expression>
action(s642, '>') = <reduce, unary_expression -> postfix_expression>
action(s642, '>=') = <reduce, unary_expression -> postfix_expression>
action(s642, '>>') = <reduce, unary_expression -> postfix_expression>
action(s642, '>>=') = <reduce, unary_expression -> postfix_expression>
action(s642, '?') = <reduce, unary_expression -> postfix_expression>
action(s642, '[') = <shift, s110>
action(s642, '^') = <reduce, unary_expression -> postfix_expression>
action(s642, '^=') = <reduce, unary_expression -> postfix_expression>
action(s642, '|') = <reduce, unary_expression -> postfix_expression>
action(s642, '|=') = <reduce, unary_expression -> postfix_expression>
action(s642, '||') = <reduce, unary_expression -> postfix_expression>
action(s643, '!=') = <reduce, unary_expression -> postfix_expression>
action(s643, '%') = <reduce, unary_expression -> postfix_expression>
action(s643, '%=') = <reduce, unary_expression -> postfix_expression>
action(s643, '&&') = <reduce, unary_expression -> postfix_expression>
action(s643, '&') = <reduce, unary_expression -> postfix_expression>
action(s643, '&=') = <reduce, unary_expression -> postfix_expression>
action(s643, '(') = <shift, s15>
action(s643, '*') = <reduce, unary_expression -> postfix_expression>
action(s643, '*=') = <reduce, unary_expression -> postfix_expression>
action(s643, '+') = <reduce, unary_expression -> postfix_expression>
action(s643, '++') = <shift, s670>
action(s643, '+=') = <reduce, unary_expression -> postfix_expression>
action(s643, ',') = <reduce, unary_expression -> postfix_expression>
action(s643, '-') = <reduce, unary_expression -> postfix_expression>
action(s643, '--') = <shift, s679>
action(s643, '-=') = <reduce, unary_expression -> postfix_expression>
action(s643, '->') = <shift, s688>
action(s643, '.') = <shift, s706>
action(s643, '/') = <reduce, unary_expression -> postfix_expression>
action(s643, '/=') = <reduce, unary_expression -> postfix_expression>
action(s643, ':') = <reduce, unary_expression -> postfix_expression>
action(s643, '<') = <reduce, unary_expression -> postfix_expression>
action(s643, '<<') = <reduce, unary_expression -> postfix_expression>
action(s643, '<<=') = <reduce, unary_expression -> postfix_expression>
action(s643, '<=') = <reduce, unary_expression -> postfix_expression>
action(s643, '=') = <reduce, unary_expression -> postfix_expression>
action(s643, '==') = <reduce, unary_expression -> postfix_expression>
action(s643, '>') = <reduce, unary_expression -> postfix_expression>
action(s643, '>=') = <reduce, unary_expression -> postfix_expression>
action(s643, '>>') = <reduce, unary_expression -> postfix_expression>
action(s643, '>>=') = <reduce, unary_expression -> postfix_expression>
action(s643, '?') = <reduce, unary_expression -> postfix_expression>
action(s643, '[') = <shift, s111>
action(s643, '^') = <reduce, unary_expression -> postfix_expression>
action(s643, '^=') = <reduce, unary_expression -> postfix_expression>
action(s643, '|') = <reduce, unary_expression -> postfix_expression>
action(s643, '|=') = <reduce, unary_expression -> postfix_expression>
action(s643, '||') = <reduce, unary_expression -> postfix_expression>
action(s644, '!=') = <reduce, unary_expression -> postfix_expression>
action(s644, '%') = <reduce, unary_expression -> postfix_expression>
action(s644, '%=') = <reduce, unary_expression -> postfix_expression>
action(s644, '&&') = <reduce, unary_expression -> postfix_expression>
action(s644, '&') = <reduce, unary_expression -> postfix_expression>
action(s644, '&=') = <reduce, unary_expression -> postfix_expression>
action(s644, '(') = <shift, s16>
action(s644, '*') = <reduce, unary_expression -> postfix_expression>
action(s644, '*=') = <reduce, unary_expression -> postfix_expression>
action(s644, '+') = <reduce, unary_expression -> postfix_expression>
action(s644, '++') = <shift, s671>
action(s644, '+=') = <reduce, unary_expression -> postfix_expression>
action(s644, ',') = <reduce, unary_expression -> postfix_expression>
action(s644, '-') = <reduce, unary_expression -> postfix_expression>
action(s644, '--') = <shift, s680>
action(s644, '-=') = <reduce, unary_expression -> postfix_expression>
action(s644, '->') = <shift, s689>
action(s644, '.') = <shift, s707>
action(s644, '/') = <reduce, unary_expression -> postfix_expression>
action(s644, '/=') = <reduce, unary_expression -> postfix_expression>
action(s644, '<') = <reduce, unary_expression -> postfix_expression>
action(s644, '<<') = <reduce, unary_expression -> postfix_expression>
action(s644, '<<=') = <reduce, unary_expression -> postfix_expression>
action(s644, '<=') = <reduce, unary_expression -> postfix_expression>
action(s644, '=') = <reduce, unary_expression -> postfix_expression>
action(s644, '==') = <reduce, unary_expression -> postfix_expression>
action(s644, '>') = <reduce, unary_expression -> postfix_expression>
action(s644, '>=') = <reduce, unary_expression -> postfix_expression>
action(s644, '>>') = <reduce, unary_expression -> postfix_expression>
action(s644, '>>=') = <reduce, unary_expression -> postfix_expression>
action(s644, '?') = <reduce, unary_expression -> postfix_expression>
action(s644, '[') = <shift, s112>
action(s644, ']') = <reduce, unary_expression -> postfix_expression>
action(s644, '^') = <reduce, unary_expression -> postfix_expression>
action(s644, '^=') = <reduce, unary_expression -> postfix_expression>
action(s644, '|') = <reduce, unary_expression -> postfix_expression>
action(s644, '|=') = <reduce, unary_expression -> postfix_expression>
action(s644, '||') = <reduce, unary_expression -> postfix_expression>
action(s645, '!=') = <reduce, unary_expression -> postfix_expression>
action(s645, '%') = <reduce, unary_expression -> postfix_expression>
action(s645, '&&') = <reduce, unary_expression -> postfix_expression>
action(s645, '&') = <reduce, unary_expression -> postfix_expression>
action(s645, '(') = <shift, s17>
action(s645, ')') = <reduce, unary_expression -> postfix_expression>
action(s645, '*') = <reduce, unary_expression -> postfix_expression>
action(s645, '+') = <reduce, unary_expression -> postfix_expression>
action(s645, '++') = <shift, s672>
action(s645, ',') = <reduce, unary_expression -> postfix_expression>
action(s645, '-') = <reduce, unary_expression -> postfix_expression>
action(s645, '--') = <shift, s681>
action(s645, '->') = <shift, s690>
action(s645, '.') = <shift, s708>
action(s645, '/') = <reduce, unary_expression -> postfix_expression>
action(s645, '<') = <reduce, unary_expression -> postfix_expression>
action(s645, '<<') = <reduce, unary_expression -> postfix_expression>
action(s645, '<=') = <reduce, unary_expression -> postfix_expression>
action(s645, '==') = <reduce, unary_expression -> postfix_expression>
action(s645, '>') = <reduce, unary_expression -> postfix_expression>
action(s645, '>=') = <reduce, unary_expression -> postfix_expression>
action(s645, '>>') = <reduce, unary_expression -> postfix_expression>
action(s645, '?') = <reduce, unary_expression -> postfix_expression>
action(s645, '[') = <shift, s113>
action(s645, '^') = <reduce, unary_expression -> postfix_expression>
action(s645, '|') = <reduce, unary_expression -> postfix_expression>
action(s645, '||') = <reduce, unary_expression -> postfix_expression>
action(s646, '!=') = <reduce, unary_expression -> postfix_expression>
action(s646, '%') = <reduce, unary_expression -> postfix_expression>
action(s646, '&&') = <reduce, unary_expression -> postfix_expression>
action(s646, '&') = <reduce, unary_expression -> postfix_expression>
action(s646, '(') = <shift, s18>
action(s646, '*') = <reduce, unary_expression -> postfix_expression>
action(s646, '+') = <reduce, unary_expression -> postfix_expression>
action(s646, '++') = <shift, s673>
action(s646, ',') = <reduce, unary_expression -> postfix_expression>
action(s646, '-') = <reduce, unary_expression -> postfix_expression>
action(s646, '--') = <shift, s682>
action(s646, '->') = <shift, s691>
action(s646, '.') = <shift, s709>
action(s646, '/') = <reduce, unary_expression -> postfix_expression>
action(s646, ':') = <reduce, unary_expression -> postfix_expression>
action(s646, '<') = <reduce, unary_expression -> postfix_expression>
action(s646, '<<') = <reduce, unary_expression -> postfix_expression>
action(s646, '<=') = <reduce, unary_expression -> postfix_expression>
action(s646, '==') = <reduce, unary_expression -> postfix_expression>
action(s646, '>') = <reduce, unary_expression -> postfix_expression>
action(s646, '>=') = <reduce, unary_expression -> postfix_expression>
action(s646, '>>') = <reduce, unary_expression -> postfix_expression>
action(s646, '?') = <reduce, unary_expression -> postfix_expression>
action(s646, '[') = <shift, s114>
action(s646, '^') = <reduce, unary_expression -> postfix_expression>
action(s646, '|') = <reduce, unary_expression -> postfix_expression>
action(s646, '||') = <reduce, unary_expression -> postfix_expression>
action(s647, '!=') = <reduce, unary_expression -> postfix_expression>
action(s647, '%') = <reduce, unary_expression -> postfix_expression>
action(s647, '&&') = <reduce, unary_expression -> postfix_expression>
action(s647, '&') = <reduce, unary_expression -> postfix_expression>
action(s647, '(') = <shift, s19>
action(s647, '*') = <reduce, unary_expression -> postfix_expression>
action(s647, '+') = <reduce, unary_expression -> postfix_expression>
action(s647, '++') = <shift, s674>
action(s647, ',') = <reduce, unary_expression -> postfix_expression>
action(s647, '-') = <reduce, unary_expression -> postfix_expression>
action(s647, '--') = <shift, s683>
action(s647, '->') = <shift, s692>
action(s647, '.') = <shift, s710>
action(s647, '/') = <reduce, unary_expression -> postfix_expression>
action(s647, ';') = <reduce, unary_expression -> postfix_expression>
action(s647, '<') = <reduce, unary_expression -> postfix_expression>
action(s647, '<<') = <reduce, unary_expression -> postfix_expression>
action(s647, '<=') = <reduce, unary_expression -> postfix_expression>
action(s647, '==') = <reduce, unary_expression -> postfix_expression>
action(s647, '>') = <reduce, unary_expression -> postfix_expression>
action(s647, '>=') = <reduce, unary_expression -> postfix_expression>
action(s647, '>>') = <reduce, unary_expression -> postfix_expression>
action(s647, '?') = <reduce, unary_expression -> postfix_expression>
action(s647, '[') = <shift, s115>
action(s647, '^') = <reduce, unary_expression -> postfix_expression>
action(s647, '|') = <reduce, unary_expression -> postfix_expression>
action(s647, '||') = <reduce, unary_expression -> postfix_expression>
action(s648, '!=') = <reduce, unary_expression -> postfix_expression>
action(s648, '%') = <reduce, unary_expression -> postfix_expression>
action(s648, '&&') = <reduce, unary_expression -> postfix_expression>
action(s648, '&') = <reduce, unary_expression -> postfix_expression>
action(s648, '(') = <shift, s20>
action(s648, '*') = <reduce, unary_expression -> postfix_expression>
action(s648, '+') = <reduce, unary_expression -> postfix_expression>
action(s648, '++') = <shift, s675>
action(s648, ',') = <reduce, unary_expression -> postfix_expression>
action(s648, '-') = <reduce, unary_expression -> postfix_expression>
action(s648, '--') = <shift, s684>
action(s648, '->') = <shift, s693>
action(s648, '.') = <shift, s711>
action(s648, '/') = <reduce, unary_expression -> postfix_expression>
action(s648, '<') = <reduce, unary_expression -> postfix_expression>
action(s648, '<<') = <reduce, unary_expression -> postfix_expression>
action(s648, '<=') = <reduce, unary_expression -> postfix_expression>
action(s648, '==') = <reduce, unary_expression -> postfix_expression>
action(s648, '>') = <reduce, unary_expression -> postfix_expression>
action(s648, '>=') = <reduce, unary_expression -> postfix_expression>
action(s648, '>>') = <reduce, unary_expression -> postfix_expression>
action(s648, '?') = <reduce, unary_expression -> postfix_expression>
action(s648, '[') = <shift, s116>
action(s648, ']') = <reduce, unary_expression -> postfix_expression>
action(s648, '^') = <reduce, unary_expression -> postfix_expression>
action(s648, '|') = <reduce, unary_expression -> postfix_expression>
action(s648, '||') = <reduce, unary_expression -> postfix_expression>
action(s649, '!=') = <reduce, unary_expression -> postfix_expression>
action(s649, '%') = <reduce, unary_expression -> postfix_expression>
action(s649, '&&') = <reduce, unary_expression -> postfix_expression>
action(s649, '&') = <reduce, unary_expression -> postfix_expression>
action(s649, '(') = <shift, s21>
action(s649, '*') = <reduce, unary_expression -> postfix_expression>
action(s649, '+') = <reduce, unary_expression -> postfix_expression>
action(s649, '++') = <shift, s676>
action(s649, ',') = <reduce, unary_expression -> postfix_expression>
action(s649, '-') = <reduce, unary_expression -> postfix_expression>
action(s649, '--') = <shift, s685>
action(s649, '->') = <shift, s694>
action(s649, '.') = <shift, s712>
action(s649, '/') = <reduce, unary_expression -> postfix_expression>
action(s649, '<') = <reduce, unary_expression -> postfix_expression>
action(s649, '<<') = <reduce, unary_expression -> postfix_expression>
action(s649, '<=') = <reduce, unary_expression -> postfix_expression>
action(s649, '==') = <reduce, unary_expression -> postfix_expression>
action(s649, '>') = <reduce, unary_expression -> postfix_expression>
action(s649, '>=') = <reduce, unary_expression -> postfix_expression>
action(s649, '>>') = <reduce, unary_expression -> postfix_expression>
action(s649, '?') = <reduce, unary_expression -> postfix_expression>
action(s649, '[') = <shift, s117>
action(s649, '^') = <reduce, unary_expression -> postfix_expression>
action(s649, '|') = <reduce, unary_expression -> postfix_expression>
action(s649, '||') = <reduce, unary_expression -> postfix_expression>
action(s649, '}') = <reduce, unary_expression -> postfix_expression>
action(s650, '!=') = <reduce, unary_expression -> postfix_expression>
action(s650, '%') = <reduce, unary_expression -> postfix_expression>
action(s650, '&&') = <reduce, unary_expression -> postfix_expression>
action(s650, '&') = <reduce, unary_expression -> postfix_expression>
action(s650, '(') = <shift, s22>
action(s650, '*') = <reduce, unary_expression -> postfix_expression>
action(s650, '+') = <reduce, unary_expression -> postfix_expression>
action(s650, '++') = <shift, s677>
action(s650, '-') = <reduce, unary_expression -> postfix_expression>
action(s650, '--') = <shift, s686>
action(s650, '->') = <shift, s695>
action(s650, '.') = <shift, s713>
action(s650, '/') = <reduce, unary_expression -> postfix_expression>
action(s650, '<') = <reduce, unary_expression -> postfix_expression>
action(s650, '<<') = <reduce, unary_expression -> postfix_expression>
action(s650, '<=') = <reduce, unary_expression -> postfix_expression>
action(s650, '==') = <reduce, unary_expression -> postfix_expression>
action(s650, '>') = <reduce, unary_expression -> postfix_expression>
action(s650, '>=') = <reduce, unary_expression -> postfix_expression>
action(s650, '>>') = <reduce, unary_expression -> postfix_expression>
action(s650, '?') = <reduce, unary_expression -> postfix_expression>
action(s650, '[') = <shift, s118>
action(s650, ']') = <reduce, unary_expression -> postfix_expression>
action(s650, '^') = <reduce, unary_expression -> postfix_expression>
action(s650, '|') = <reduce, unary_expression -> postfix_expression>
action(s650, '||') = <reduce, unary_expression -> postfix_expression>
action(s651, '!=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '%') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '%=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '&&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '&=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '(') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, ')') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '*') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '*=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '+') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '++') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '+=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, ',') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '-') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '--') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '-=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '->') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '.') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '/') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '/=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '<<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '<<=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '<=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '==') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '>=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '>>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '>>=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '?') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '[') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '^') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '^=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '|') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '|=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s651, '||') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '!=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '%') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '%=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '&&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '&=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '(') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '*') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '*=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '+') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '++') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '+=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, ',') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '-') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '--') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '-=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '->') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '.') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '/') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '/=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, ':') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '<<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '<<=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '<=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '==') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '>=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '>>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '>>=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '?') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '[') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '^') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '^=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '|') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '|=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s652, '||') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '!=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '%') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '%=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '&&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '&=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '(') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '*') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '*=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '+') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '++') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '+=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, ',') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '-') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '--') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '-=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '->') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '.') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '/') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '/=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '<<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '<<=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '<=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '==') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '>=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '>>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '>>=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '?') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '[') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, ']') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '^') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '^=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '|') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '|=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s653, '||') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '!=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '%') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '&&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '(') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, ')') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '*') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '+') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '++') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, ',') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '-') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '--') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '->') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '.') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '/') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '<<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '<=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '==') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '>=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '>>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '?') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '[') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '^') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '|') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s654, '||') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '!=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '%') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '&&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '(') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '*') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '+') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '++') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, ',') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '-') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '--') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '->') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '.') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '/') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, ':') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '<<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '<=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '==') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '>=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '>>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '?') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '[') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '^') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '|') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s655, '||') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '!=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '%') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '&&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '(') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '*') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '+') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '++') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, ',') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '-') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '--') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '->') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '.') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '/') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, ';') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '<<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '<=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '==') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '>=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '>>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '?') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '[') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '^') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '|') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s656, '||') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '!=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '%') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '&&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '(') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '*') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '+') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '++') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, ',') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '-') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '--') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '->') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '.') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '/') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '<<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '<=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '==') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '>=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '>>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '?') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '[') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, ']') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '^') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '|') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s657, '||') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '!=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '%') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '&&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '(') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '*') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '+') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '++') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, ',') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '-') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '--') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '->') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '.') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '/') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '<<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '<=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '==') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '>=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '>>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '?') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '[') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '^') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '|') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '||') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s658, '}') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '!=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '%') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '&&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '&') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '(') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '*') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '+') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '++') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '-') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '--') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '->') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '.') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '/') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '<<') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '<=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '==') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '>=') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '>>') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '?') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '[') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, ']') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '^') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '|') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s659, '||') = <reduce, postfix_expression -> postfix_expression '(' ')'>
action(s660, '!=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '%') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '%=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '&&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '&=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '(') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, ')') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '*') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '*=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '+') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '++') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '+=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, ',') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '-') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '--') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '-=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '->') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '.') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '/') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '/=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '<<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '<<=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '<=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '==') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '>=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '>>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '>>=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '?') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '[') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '^') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '^=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '|') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '|=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s660, '||') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '!=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '%') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '%=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '&&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '&=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '(') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '*') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '*=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '+') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '++') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '+=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, ',') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '-') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '--') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '-=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '->') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '.') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '/') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '/=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, ':') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '<<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '<<=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '<=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '==') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '>=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '>>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '>>=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '?') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '[') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '^') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '^=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '|') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '|=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s661, '||') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '!=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '%') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '%=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '&&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '&=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '(') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '*') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '*=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '+') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '++') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '+=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, ',') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '-') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '--') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '-=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '->') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '.') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '/') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '/=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '<<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '<<=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '<=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '==') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '>=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '>>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '>>=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '?') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '[') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, ']') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '^') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '^=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '|') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '|=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s662, '||') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '!=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '%') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '&&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '(') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, ')') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '*') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '+') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '++') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, ',') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '-') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '--') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '->') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '.') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '/') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '<<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '<=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '==') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '>=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '>>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '?') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '[') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '^') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '|') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s663, '||') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '!=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '%') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '&&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '(') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '*') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '+') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '++') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, ',') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '-') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '--') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '->') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '.') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '/') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, ':') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '<<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '<=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '==') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '>=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '>>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '?') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '[') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '^') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '|') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s664, '||') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '!=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '%') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '&&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '(') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '*') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '+') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '++') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, ',') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '-') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '--') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '->') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '.') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '/') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, ';') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '<<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '<=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '==') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '>=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '>>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '?') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '[') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '^') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '|') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s665, '||') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '!=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '%') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '&&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '(') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '*') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '+') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '++') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, ',') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '-') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '--') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '->') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '.') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '/') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '<<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '<=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '==') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '>=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '>>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '?') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '[') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, ']') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '^') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '|') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s666, '||') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '!=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '%') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '&&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '(') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '*') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '+') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '++') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, ',') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '-') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '--') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '->') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '.') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '/') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '<<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '<=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '==') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '>=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '>>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '?') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '[') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '^') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '|') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '||') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s667, '}') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '!=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '%') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '&&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '&') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '(') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '*') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '+') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '++') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '-') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '--') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '->') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '.') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '/') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '<<') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '<=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '==') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '>=') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '>>') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '?') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '[') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, ']') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '^') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '|') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s668, '||') = <reduce, postfix_expression -> postfix_expression '(' argument_expression_list ')'>
action(s669, '!=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '%') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '%=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '&&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '&=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '(') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, ')') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '*') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '*=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '+') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '++') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '+=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, ',') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '-') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '--') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '-=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '->') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '.') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '/') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '/=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '<<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '<<=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '<=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '==') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '>=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '>>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '>>=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '?') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '[') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '^') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '^=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '|') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '|=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s669, '||') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '!=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '%') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '%=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '&&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '&=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '(') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '*') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '*=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '+') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '++') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '+=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, ',') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '-') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '--') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '-=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '->') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '.') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '/') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '/=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, ':') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '<<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '<<=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '<=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '==') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '>=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '>>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '>>=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '?') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '[') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '^') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '^=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '|') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '|=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s670, '||') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '!=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '%') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '%=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '&&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '&=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '(') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '*') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '*=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '+') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '++') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '+=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, ',') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '-') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '--') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '-=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '->') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '.') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '/') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '/=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '<<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '<<=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '<=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '==') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '>=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '>>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '>>=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '?') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '[') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, ']') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '^') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '^=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '|') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '|=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s671, '||') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '!=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '%') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '&&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '(') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, ')') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '*') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '+') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '++') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, ',') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '-') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '--') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '->') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '.') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '/') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '<<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '<=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '==') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '>=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '>>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '?') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '[') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '^') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '|') = <reduce, postfix_expression -> postfix_expression '++'>
action(s672, '||') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '!=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '%') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '&&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '(') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '*') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '+') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '++') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, ',') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '-') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '--') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '->') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '.') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '/') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, ':') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '<<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '<=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '==') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '>=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '>>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '?') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '[') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '^') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '|') = <reduce, postfix_expression -> postfix_expression '++'>
action(s673, '||') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '!=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '%') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '&&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '(') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '*') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '+') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '++') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, ',') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '-') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '--') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '->') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '.') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '/') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, ';') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '<<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '<=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '==') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '>=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '>>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '?') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '[') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '^') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '|') = <reduce, postfix_expression -> postfix_expression '++'>
action(s674, '||') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '!=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '%') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '&&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '(') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '*') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '+') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '++') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, ',') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '-') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '--') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '->') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '.') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '/') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '<<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '<=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '==') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '>=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '>>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '?') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '[') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, ']') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '^') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '|') = <reduce, postfix_expression -> postfix_expression '++'>
action(s675, '||') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '!=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '%') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '&&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '(') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '*') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '+') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '++') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, ',') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '-') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '--') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '->') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '.') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '/') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '<<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '<=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '==') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '>=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '>>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '?') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '[') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '^') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '|') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '||') = <reduce, postfix_expression -> postfix_expression '++'>
action(s676, '}') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '!=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '%') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '&&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '&') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '(') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '*') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '+') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '++') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '-') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '--') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '->') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '.') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '/') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '<<') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '<=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '==') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '>=') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '>>') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '?') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '[') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, ']') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '^') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '|') = <reduce, postfix_expression -> postfix_expression '++'>
action(s677, '||') = <reduce, postfix_expression -> postfix_expression '++'>
action(s678, '!=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '%') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '%=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '&&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '&=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '(') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, ')') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '*') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '*=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '+') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '++') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '+=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, ',') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '-') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '--') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '-=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '->') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '.') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '/') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '/=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '<<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '<<=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '<=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '==') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '>=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '>>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '>>=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '?') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '[') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '^') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '^=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '|') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '|=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s678, '||') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '!=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '%') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '%=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '&&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '&=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '(') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '*') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '*=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '+') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '++') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '+=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, ',') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '-') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '--') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '-=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '->') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '.') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '/') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '/=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, ':') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '<<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '<<=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '<=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '==') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '>=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '>>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '>>=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '?') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '[') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '^') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '^=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '|') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '|=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s679, '||') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '!=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '%') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '%=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '&&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '&=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '(') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '*') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '*=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '+') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '++') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '+=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, ',') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '-') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '--') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '-=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '->') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '.') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '/') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '/=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '<<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '<<=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '<=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '==') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '>=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '>>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '>>=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '?') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '[') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, ']') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '^') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '^=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '|') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '|=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s680, '||') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '!=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '%') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '&&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '(') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, ')') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '*') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '+') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '++') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, ',') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '-') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '--') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '->') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '.') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '/') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '<<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '<=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '==') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '>=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '>>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '?') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '[') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '^') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '|') = <reduce, postfix_expression -> postfix_expression '--'>
action(s681, '||') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '!=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '%') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '&&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '(') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '*') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '+') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '++') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, ',') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '-') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '--') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '->') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '.') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '/') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, ':') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '<<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '<=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '==') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '>=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '>>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '?') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '[') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '^') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '|') = <reduce, postfix_expression -> postfix_expression '--'>
action(s682, '||') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '!=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '%') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '&&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '(') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '*') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '+') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '++') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, ',') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '-') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '--') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '->') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '.') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '/') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, ';') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '<<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '<=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '==') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '>=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '>>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '?') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '[') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '^') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '|') = <reduce, postfix_expression -> postfix_expression '--'>
action(s683, '||') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '!=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '%') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '&&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '(') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '*') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '+') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '++') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, ',') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '-') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '--') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '->') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '.') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '/') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '<<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '<=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '==') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '>=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '>>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '?') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '[') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, ']') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '^') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '|') = <reduce, postfix_expression -> postfix_expression '--'>
action(s684, '||') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '!=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '%') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '&&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '(') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '*') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '+') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '++') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, ',') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '-') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '--') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '->') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '.') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '/') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '<<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '<=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '==') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '>=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '>>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '?') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '[') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '^') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '|') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '||') = <reduce, postfix_expression -> postfix_expression '--'>
action(s685, '}') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '!=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '%') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '&&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '&') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '(') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '*') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '+') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '++') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '-') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '--') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '->') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '.') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '/') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '<<') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '<=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '==') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '>=') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '>>') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '?') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '[') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, ']') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '^') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '|') = <reduce, postfix_expression -> postfix_expression '--'>
action(s686, '||') = <reduce, postfix_expression -> postfix_expression '--'>
action(s687, IDENTIFIER) = <shift, s696>
action(s688, IDENTIFIER) = <shift, s697>
action(s689, IDENTIFIER) = <shift, s698>
action(s690, IDENTIFIER) = <shift, s699>
action(s691, IDENTIFIER) = <shift, s700>
action(s692, IDENTIFIER) = <shift, s701>
action(s693, IDENTIFIER) = <shift, s702>
action(s694, IDENTIFIER) = <shift, s703>
action(s695, IDENTIFIER) = <shift, s704>
action(s696, '!=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '%') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '%=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '&&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '&=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '(') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, ')') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '*') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '*=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '+') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '++') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '+=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, ',') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '-') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '--') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '-=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '->') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '.') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '/') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '/=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '<<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '<<=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '<=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '==') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '>=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '>>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '>>=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '?') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '[') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '^') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '^=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '|') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '|=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s696, '||') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '!=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '%') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '%=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '&&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '&=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '(') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '*') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '*=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '+') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '++') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '+=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, ',') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '-') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '--') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '-=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '->') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '.') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '/') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '/=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, ':') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '<<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '<<=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '<=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '==') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '>=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '>>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '>>=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '?') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '[') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '^') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '^=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '|') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '|=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s697, '||') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '!=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '%') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '%=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '&&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '&=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '(') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '*') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '*=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '+') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '++') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '+=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, ',') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '-') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '--') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '-=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '->') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '.') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '/') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '/=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '<<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '<<=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '<=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '==') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '>=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '>>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '>>=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '?') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '[') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, ']') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '^') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '^=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '|') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '|=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s698, '||') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '!=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '%') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '&&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '(') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, ')') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '*') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '+') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '++') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, ',') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '-') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '--') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '->') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '.') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '/') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '<<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '<=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '==') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '>=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '>>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '?') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '[') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '^') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '|') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s699, '||') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '!=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '%') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '&&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '(') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '*') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '+') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '++') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, ',') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '-') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '--') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '->') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '.') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '/') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, ':') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '<<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '<=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '==') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '>=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '>>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '?') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '[') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '^') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '|') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s700, '||') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '!=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '%') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '&&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '(') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '*') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '+') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '++') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, ',') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '-') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '--') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '->') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '.') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '/') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, ';') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '<<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '<=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '==') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '>=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '>>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '?') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '[') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '^') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '|') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s701, '||') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '!=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '%') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '&&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '(') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '*') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '+') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '++') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, ',') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '-') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '--') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '->') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '.') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '/') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '<<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '<=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '==') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '>=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '>>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '?') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '[') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, ']') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '^') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '|') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s702, '||') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '!=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '%') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '&&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '(') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '*') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '+') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '++') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, ',') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '-') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '--') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '->') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '.') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '/') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '<<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '<=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '==') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '>=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '>>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '?') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '[') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '^') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '|') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '||') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s703, '}') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '!=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '%') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '&&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '&') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '(') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '*') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '+') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '++') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '-') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '--') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '->') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '.') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '/') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '<<') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '<=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '==') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '>=') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '>>') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '?') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '[') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, ']') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '^') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '|') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s704, '||') = <reduce, postfix_expression -> postfix_expression '->' IDENTIFIER>
action(s705, IDENTIFIER) = <shift, s714>
action(s706, IDENTIFIER) = <shift, s715>
action(s707, IDENTIFIER) = <shift, s716>
action(s708, IDENTIFIER) = <shift, s717>
action(s709, IDENTIFIER) = <shift, s718>
action(s710, IDENTIFIER) = <shift, s719>
action(s711, IDENTIFIER) = <shift, s720>
action(s712, IDENTIFIER) = <shift, s721>
action(s713, IDENTIFIER) = <shift, s722>
action(s714, '!=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '%') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '%=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '&&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '&=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '(') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, ')') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '*') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '*=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '+') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '++') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '+=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, ',') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '-') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '--') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '-=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '->') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '.') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '/') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '/=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '<<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '<<=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '<=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '==') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '>=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '>>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '>>=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '?') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '[') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '^') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '^=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '|') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '|=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s714, '||') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '!=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '%') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '%=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '&&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '&=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '(') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '*') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '*=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '+') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '++') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '+=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, ',') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '-') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '--') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '-=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '->') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '.') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '/') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '/=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, ':') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '<<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '<<=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '<=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '==') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '>=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '>>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '>>=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '?') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '[') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '^') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '^=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '|') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '|=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s715, '||') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '!=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '%') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '%=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '&&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '&=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '(') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '*') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '*=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '+') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '++') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '+=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, ',') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '-') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '--') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '-=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '->') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '.') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '/') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '/=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '<<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '<<=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '<=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '==') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '>=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '>>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '>>=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '?') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '[') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, ']') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '^') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '^=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '|') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '|=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s716, '||') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '!=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '%') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '&&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '(') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, ')') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '*') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '+') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '++') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, ',') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '-') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '--') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '->') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '.') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '/') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '<<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '<=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '==') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '>=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '>>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '?') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '[') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '^') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '|') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s717, '||') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '!=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '%') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '&&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '(') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '*') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '+') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '++') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, ',') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '-') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '--') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '->') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '.') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '/') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, ':') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '<<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '<=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '==') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '>=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '>>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '?') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '[') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '^') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '|') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s718, '||') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '!=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '%') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '&&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '(') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '*') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '+') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '++') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, ',') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '-') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '--') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '->') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '.') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '/') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, ';') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '<<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '<=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '==') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '>=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '>>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '?') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '[') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '^') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '|') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s719, '||') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '!=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '%') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '&&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '(') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '*') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '+') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '++') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, ',') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '-') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '--') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '->') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '.') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '/') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '<<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '<=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '==') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '>=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '>>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '?') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '[') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, ']') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '^') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '|') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s720, '||') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '!=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '%') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '&&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '(') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '*') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '+') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '++') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, ',') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '-') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '--') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '->') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '.') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '/') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '<<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '<=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '==') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '>=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '>>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '?') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '[') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '^') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '|') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '||') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s721, '}') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '!=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '%') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '&&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '&') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '(') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '*') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '+') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '++') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '-') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '--') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '->') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '.') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '/') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '<<') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '<=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '==') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '>=') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '>>') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '?') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '[') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, ']') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '^') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '|') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s722, '||') = <reduce, postfix_expression -> postfix_expression '.' IDENTIFIER>
action(s723, '!=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '%') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '%=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '&&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '&=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '(') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, ')') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '*') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '*=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '+') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '++') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '+=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, ',') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '-') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '--') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '-=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '->') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '.') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '/') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '/=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '<<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '<<=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '<=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '==') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '>=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '>>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '>>=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '?') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '[') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '^') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '^=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '|') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '|=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s723, '||') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '!=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '%') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '%=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '&&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '&=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '(') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '*') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '*=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '+') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '++') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '+=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, ',') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '-') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '--') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '-=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '->') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '.') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '/') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '/=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, ':') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '<<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '<<=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '<=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '==') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '>=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '>>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '>>=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '?') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '[') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '^') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '^=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '|') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '|=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s724, '||') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '!=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '%') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '%=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '&&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '&=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '(') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '*') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '*=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '+') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '++') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '+=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, ',') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '-') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '--') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '-=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '->') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '.') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '/') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '/=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '<<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '<<=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '<=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '==') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '>=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '>>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '>>=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '?') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '[') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, ']') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '^') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '^=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '|') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '|=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s725, '||') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '!=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '%') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '&&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '(') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, ')') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '*') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '+') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '++') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, ',') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '-') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '--') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '->') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '.') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '/') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '<<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '<=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '==') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '>=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '>>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '?') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '[') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '^') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '|') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s726, '||') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '!=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '%') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '&&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '(') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '*') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '+') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '++') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, ',') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '-') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '--') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '->') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '.') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '/') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, ':') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '<<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '<=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '==') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '>=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '>>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '?') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '[') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '^') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '|') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s727, '||') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '!=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '%') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '&&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '(') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '*') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '+') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '++') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, ',') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '-') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '--') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '->') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '.') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '/') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, ';') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '<<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '<=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '==') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '>=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '>>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '?') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '[') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '^') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '|') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s728, '||') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '!=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '%') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '&&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '(') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '*') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '+') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '++') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, ',') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '-') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '--') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '->') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '.') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '/') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '<<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '<=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '==') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '>=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '>>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '?') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '[') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, ']') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '^') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '|') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s729, '||') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '!=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '%') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '&&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '(') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '*') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '+') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '++') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, ',') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '-') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '--') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '->') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '.') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '/') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '<<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '<=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '==') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '>=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '>>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '?') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '[') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '^') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '|') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '||') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s730, '}') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '!=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '%') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '&&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '&') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '(') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '*') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '+') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '++') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '-') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '--') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '->') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '.') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '/') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '<<') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '<=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '==') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '>=') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '>>') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '?') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '[') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, ']') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '^') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '|') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s731, '||') = <reduce, postfix_expression -> postfix_expression '[' expression ']'>
action(s732, '!=') = <reduce, postfix_expression -> primary_expression>
action(s732, '%') = <reduce, postfix_expression -> primary_expression>
action(s732, '%=') = <reduce, postfix_expression -> primary_expression>
action(s732, '&&') = <reduce, postfix_expression -> primary_expression>
action(s732, '&') = <reduce, postfix_expression -> primary_expression>
action(s732, '&=') = <reduce, postfix_expression -> primary_expression>
action(s732, '(') = <reduce, postfix_expression -> primary_expression>
action(s732, ')') = <reduce, postfix_expression -> primary_expression>
action(s732, '*') = <reduce, postfix_expression -> primary_expression>
action(s732, '*=') = <reduce, postfix_expression -> primary_expression>
action(s732, '+') = <reduce, postfix_expression -> primary_expression>
action(s732, '++') = <reduce, postfix_expression -> primary_expression>
action(s732, '+=') = <reduce, postfix_expression -> primary_expression>
action(s732, ',') = <reduce, postfix_expression -> primary_expression>
action(s732, '-') = <reduce, postfix_expression -> primary_expression>
action(s732, '--') = <reduce, postfix_expression -> primary_expression>
action(s732, '-=') = <reduce, postfix_expression -> primary_expression>
action(s732, '->') = <reduce, postfix_expression -> primary_expression>
action(s732, '.') = <reduce, postfix_expression -> primary_expression>
action(s732, '/') = <reduce, postfix_expression -> primary_expression>
action(s732, '/=') = <reduce, postfix_expression -> primary_expression>
action(s732, '<') = <reduce, postfix_expression -> primary_expression>
action(s732, '<<') = <reduce, postfix_expression -> primary_expression>
action(s732, '<<=') = <reduce, postfix_expression -> primary_expression>
action(s732, '<=') = <reduce, postfix_expression -> primary_expression>
action(s732, '=') = <reduce, postfix_expression -> primary_expression>
action(s732, '==') = <reduce, postfix_expression -> primary_expression>
action(s732, '>') = <reduce, postfix_expression -> primary_expression>
action(s732, '>=') = <reduce, postfix_expression -> primary_expression>
action(s732, '>>') = <reduce, postfix_expression -> primary_expression>
action(s732, '>>=') = <reduce, postfix_expression -> primary_expression>
action(s732, '?') = <reduce, postfix_expression -> primary_expression>
action(s732, '[') = <reduce, postfix_expression -> primary_expression>
action(s732, '^') = <reduce, postfix_expression -> primary_expression>
action(s732, '^=') = <reduce, postfix_expression -> primary_expression>
action(s732, '|') = <reduce, postfix_expression -> primary_expression>
action(s732, '|=') = <reduce, postfix_expression -> primary_expression>
action(s732, '||') = <reduce, postfix_expression -> primary_expression>
action(s733, '!=') = <reduce, postfix_expression -> primary_expression>
action(s733, '%') = <reduce, postfix_expression -> primary_expression>
action(s733, '%=') = <reduce, postfix_expression -> primary_expression>
action(s733, '&&') = <reduce, postfix_expression -> primary_expression>
action(s733, '&') = <reduce, postfix_expression -> primary_expression>
action(s733, '&=') = <reduce, postfix_expression -> primary_expression>
action(s733, '(') = <reduce, postfix_expression -> primary_expression>
action(s733, '*') = <reduce, postfix_expression -> primary_expression>
action(s733, '*=') = <reduce, postfix_expression -> primary_expression>
action(s733, '+') = <reduce, postfix_expression -> primary_expression>
action(s733, '++') = <reduce, postfix_expression -> primary_expression>
action(s733, '+=') = <reduce, postfix_expression -> primary_expression>
action(s733, ',') = <reduce, postfix_expression -> primary_expression>
action(s733, '-') = <reduce, postfix_expression -> primary_expression>
action(s733, '--') = <reduce, postfix_expression -> primary_expression>
action(s733, '-=') = <reduce, postfix_expression -> primary_expression>
action(s733, '->') = <reduce, postfix_expression -> primary_expression>
action(s733, '.') = <reduce, postfix_expression -> primary_expression>
action(s733, '/') = <reduce, postfix_expression -> primary_expression>
action(s733, '/=') = <reduce, postfix_expression -> primary_expression>
action(s733, ':') = <reduce, postfix_expression -> primary_expression>
action(s733, '<') = <reduce, postfix_expression -> primary_expression>
action(s733, '<<') = <reduce, postfix_expression -> primary_expression>
action(s733, '<<=') = <reduce, postfix_expression -> primary_expression>
action(s733, '<=') = <reduce, postfix_expression -> primary_expression>
action(s733, '=') = <reduce, postfix_expression -> primary_expression>
action(s733, '==') = <reduce, postfix_expression -> primary_expression>
action(s733, '>') = <reduce, postfix_expression -> primary_expression>
action(s733, '>=') = <reduce, postfix_expression -> primary_expression>
action(s733, '>>') = <reduce, postfix_expression -> primary_expression>
action(s733, '>>=') = <reduce, postfix_expression -> primary_expression>
action(s733, '?') = <reduce, postfix_expression -> primary_expression>
action(s733, '[') = <reduce, postfix_expression -> primary_expression>
action(s733, '^') = <reduce, postfix_expression -> primary_expression>
action(s733, '^=') = <reduce, postfix_expression -> primary_expression>
action(s733, '|') = <reduce, postfix_expression -> primary_expression>
action(s733, '|=') = <reduce, postfix_expression -> primary_expression>
action(s733, '||') = <reduce, postfix_expression -> primary_expression>
action(s734, '!=') = <reduce, postfix_expression -> primary_expression>
action(s734, '%') = <reduce, postfix_expression -> primary_expression>
action(s734, '%=') = <reduce, postfix_expression -> primary_expression>
action(s734, '&&') = <reduce, postfix_expression -> primary_expression>
action(s734, '&') = <reduce, postfix_expression -> primary_expression>
action(s734, '&=') = <reduce, postfix_expression -> primary_expression>
action(s734, '(') = <reduce, postfix_expression -> primary_expression>
action(s734, '*') = <reduce, postfix_expression -> primary_expression>
action(s734, '*=') = <reduce, postfix_expression -> primary_expression>
action(s734, '+') = <reduce, postfix_expression -> primary_expression>
action(s734, '++') = <reduce, postfix_expression -> primary_expression>
action(s734, '+=') = <reduce, postfix_expression -> primary_expression>
action(s734, ',') = <reduce, postfix_expression -> primary_expression>
action(s734, '-') = <reduce, postfix_expression -> primary_expression>
action(s734, '--') = <reduce, postfix_expression -> primary_expression>
action(s734, '-=') = <reduce, postfix_expression -> primary_expression>
action(s734, '->') = <reduce, postfix_expression -> primary_expression>
action(s734, '.') = <reduce, postfix_expression -> primary_expression>
action(s734, '/') = <reduce, postfix_expression -> primary_expression>
action(s734, '/=') = <reduce, postfix_expression -> primary_expression>
action(s734, '<') = <reduce, postfix_expression -> primary_expression>
action(s734, '<<') = <reduce, postfix_expression -> primary_expression>
action(s734, '<<=') = <reduce, postfix_expression -> primary_expression>
action(s734, '<=') = <reduce, postfix_expression -> primary_expression>
action(s734, '=') = <reduce, postfix_expression -> primary_expression>
action(s734, '==') = <reduce, postfix_expression -> primary_expression>
action(s734, '>') = <reduce, postfix_expression -> primary_expression>
action(s734, '>=') = <reduce, postfix_expression -> primary_expression>
action(s734, '>>') = <reduce, postfix_expression -> primary_expression>
action(s734, '>>=') = <reduce, postfix_expression -> primary_expression>
action(s734, '?') = <reduce, postfix_expression -> primary_expression>
action(s734, '[') = <reduce, postfix_expression -> primary_expression>
action(s734, ']') = <reduce, postfix_expression -> primary_expression>
action(s734, '^') = <reduce, postfix_expression -> primary_expression>
action(s734, '^=') = <reduce, postfix_expression -> primary_expression>
action(s734, '|') = <reduce, postfix_expression -> primary_expression>
action(s734, '|=') = <reduce, postfix_expression -> primary_expression>
action(s734, '||') = <reduce, postfix_expression -> primary_expression>
action(s735, '!=') = <reduce, postfix_expression -> primary_expression>
action(s735, '%') = <reduce, postfix_expression -> primary_expression>
action(s735, '&&') = <reduce, postfix_expression -> primary_expression>
action(s735, '&') = <reduce, postfix_expression -> primary_expression>
action(s735, '(') = <reduce, postfix_expression -> primary_expression>
action(s735, ')') = <reduce, postfix_expression -> primary_expression>
action(s735, '*') = <reduce, postfix_expression -> primary_expression>
action(s735, '+') = <reduce, postfix_expression -> primary_expression>
action(s735, '++') = <reduce, postfix_expression -> primary_expression>
action(s735, ',') = <reduce, postfix_expression -> primary_expression>
action(s735, '-') = <reduce, postfix_expression -> primary_expression>
action(s735, '--') = <reduce, postfix_expression -> primary_expression>
action(s735, '->') = <reduce, postfix_expression -> primary_expression>
action(s735, '.') = <reduce, postfix_expression -> primary_expression>
action(s735, '/') = <reduce, postfix_expression -> primary_expression>
action(s735, '<') = <reduce, postfix_expression -> primary_expression>
action(s735, '<<') = <reduce, postfix_expression -> primary_expression>
action(s735, '<=') = <reduce, postfix_expression -> primary_expression>
action(s735, '==') = <reduce, postfix_expression -> primary_expression>
action(s735, '>') = <reduce, postfix_expression -> primary_expression>
action(s735, '>=') = <reduce, postfix_expression -> primary_expression>
action(s735, '>>') = <reduce, postfix_expression -> primary_expression>
action(s735, '?') = <reduce, postfix_expression -> primary_expression>
action(s735, '[') = <reduce, postfix_expression -> primary_expression>
action(s735, '^') = <reduce, postfix_expression -> primary_expression>
action(s735, '|') = <reduce, postfix_expression -> primary_expression>
action(s735, '||') = <reduce, postfix_expression -> primary_expression>
action(s736, '!=') = <reduce, postfix_expression -> primary_expression>
action(s736, '%') = <reduce, postfix_expression -> primary_expression>
action(s736, '&&') = <reduce, postfix_expression -> primary_expression>
action(s736, '&') = <reduce, postfix_expression -> primary_expression>
action(s736, '(') = <reduce, postfix_expression -> primary_expression>
action(s736, '*') = <reduce, postfix_expression -> primary_expression>
action(s736, '+') = <reduce, postfix_expression -> primary_expression>
action(s736, '++') = <reduce, postfix_expression -> primary_expression>
action(s736, ',') = <reduce, postfix_expression -> primary_expression>
action(s736, '-') = <reduce, postfix_expression -> primary_expression>
action(s736, '--') = <reduce, postfix_expression -> primary_expression>
action(s736, '->') = <reduce, postfix_expression -> primary_expression>
action(s736, '.') = <reduce, postfix_expression -> primary_expression>
action(s736, '/') = <reduce, postfix_expression -> primary_expression>
action(s736, ':') = <reduce, postfix_expression -> primary_expression>
action(s736, '<') = <reduce, postfix_expression -> primary_expression>
action(s736, '<<') = <reduce, postfix_expression -> primary_expression>
action(s736, '<=') = <reduce, postfix_expression -> primary_expression>
action(s736, '==') = <reduce, postfix_expression -> primary_expression>
action(s736, '>') = <reduce, postfix_expression -> primary_expression>
action(s736, '>=') = <reduce, postfix_expression -> primary_expression>
action(s736, '>>') = <reduce, postfix_expression -> primary_expression>
action(s736, '?') = <reduce, postfix_expression -> primary_expression>
action(s736, '[') = <reduce, postfix_expression -> primary_expression>
action(s736, '^') = <reduce, postfix_expression -> primary_expression>
action(s736, '|') = <reduce, postfix_expression -> primary_expression>
action(s736, '||') = <reduce, postfix_expression -> primary_expression>
action(s737, '!=') = <reduce, postfix_expression -> primary_expression>
action(s737, '%') = <reduce, postfix_expression -> primary_expression>
action(s737, '&&') = <reduce, postfix_expression -> primary_expression>
action(s737, '&') = <reduce, postfix_expression -> primary_expression>
action(s737, '(') = <reduce, postfix_expression -> primary_expression>
action(s737, '*') = <reduce, postfix_expression -> primary_expression>
action(s737, '+') = <reduce, postfix_expression -> primary_expression>
action(s737, '++') = <reduce, postfix_expression -> primary_expression>
action(s737, ',') = <reduce, postfix_expression -> primary_expression>
action(s737, '-') = <reduce, postfix_expression -> primary_expression>
action(s737, '--') = <reduce, postfix_expression -> primary_expression>
action(s737, '->') = <reduce, postfix_expression -> primary_expression>
action(s737, '.') = <reduce, postfix_expression -> primary_expression>
action(s737, '/') = <reduce, postfix_expression -> primary_expression>
action(s737, ';') = <reduce, postfix_expression -> primary_expression>
action(s737, '<') = <reduce, postfix_expression -> primary_expression>
action(s737, '<<') = <reduce, postfix_expression -> primary_expression>
action(s737, '<=') = <reduce, postfix_expression -> primary_expression>
action(s737, '==') = <reduce, postfix_expression -> primary_expression>
action(s737, '>') = <reduce, postfix_expression -> primary_expression>
action(s737, '>=') = <reduce, postfix_expression -> primary_expression>
action(s737, '>>') = <reduce, postfix_expression -> primary_expression>
action(s737, '?') = <reduce, postfix_expression -> primary_expression>
action(s737, '[') = <reduce, postfix_expression -> primary_expression>
action(s737, '^') = <reduce, postfix_expression -> primary_expression>
action(s737, '|') = <reduce, postfix_expression -> primary_expression>
action(s737, '||') = <reduce, postfix_expression -> primary_expression>
action(s738, '!=') = <reduce, postfix_expression -> primary_expression>
action(s738, '%') = <reduce, postfix_expression -> primary_expression>
action(s738, '&&') = <reduce, postfix_expression -> primary_expression>
action(s738, '&') = <reduce, postfix_expression -> primary_expression>
action(s738, '(') = <reduce, postfix_expression -> primary_expression>
action(s738, '*') = <reduce, postfix_expression -> primary_expression>
action(s738, '+') = <reduce, postfix_expression -> primary_expression>
action(s738, '++') = <reduce, postfix_expression -> primary_expression>
action(s738, ',') = <reduce, postfix_expression -> primary_expression>
action(s738, '-') = <reduce, postfix_expression -> primary_expression>
action(s738, '--') = <reduce, postfix_expression -> primary_expression>
action(s738, '->') = <reduce, postfix_expression -> primary_expression>
action(s738, '.') = <reduce, postfix_expression -> primary_expression>
action(s738, '/') = <reduce, postfix_expression -> primary_expression>
action(s738, '<') = <reduce, postfix_expression -> primary_expression>
action(s738, '<<') = <reduce, postfix_expression -> primary_expression>
action(s738, '<=') = <reduce, postfix_expression -> primary_expression>
action(s738, '==') = <reduce, postfix_expression -> primary_expression>
action(s738, '>') = <reduce, postfix_expression -> primary_expression>
action(s738, '>=') = <reduce, postfix_expression -> primary_expression>
action(s738, '>>') = <reduce, postfix_expression -> primary_expression>
action(s738, '?') = <reduce, postfix_expression -> primary_expression>
action(s738, '[') = <reduce, postfix_expression -> primary_expression>
action(s738, ']') = <reduce, postfix_expression -> primary_expression>
action(s738, '^') = <reduce, postfix_expression -> primary_expression>
action(s738, '|') = <reduce, postfix_expression -> primary_expression>
action(s738, '||') = <reduce, postfix_expression -> primary_expression>
action(s739, '!=') = <reduce, postfix_expression -> primary_expression>
action(s739, '%') = <reduce, postfix_expression -> primary_expression>
action(s739, '&&') = <reduce, postfix_expression -> primary_expression>
action(s739, '&') = <reduce, postfix_expression -> primary_expression>
action(s739, '(') = <reduce, postfix_expression -> primary_expression>
action(s739, '*') = <reduce, postfix_expression -> primary_expression>
action(s739, '+') = <reduce, postfix_expression -> primary_expression>
action(s739, '++') = <reduce, postfix_expression -> primary_expression>
action(s739, ',') = <reduce, postfix_expression -> primary_expression>
action(s739, '-') = <reduce, postfix_expression -> primary_expression>
action(s739, '--') = <reduce, postfix_expression -> primary_expression>
action(s739, '->') = <reduce, postfix_expression -> primary_expression>
action(s739, '.') = <reduce, postfix_expression -> primary_expression>
action(s739, '/') = <reduce, postfix_expression -> primary_expression>
action(s739, '<') = <reduce, postfix_expression -> primary_expression>
action(s739, '<<') = <reduce, postfix_expression -> primary_expression>
action(s739, '<=') = <reduce, postfix_expression -> primary_expression>
action(s739, '==') = <reduce, postfix_expression -> primary_expression>
action(s739, '>') = <reduce, postfix_expression -> primary_expression>
action(s739, '>=') = <reduce, postfix_expression -> primary_expression>
action(s739, '>>') = <reduce, postfix_expression -> primary_expression>
action(s739, '?') = <reduce, postfix_expression -> primary_expression>
action(s739, '[') = <reduce, postfix_expression -> primary_expression>
action(s739, '^') = <reduce, postfix_expression -> primary_expression>
action(s739, '|') = <reduce, postfix_expression -> primary_expression>
action(s739, '||') = <reduce, postfix_expression -> primary_expression>
action(s739, '}') = <reduce, postfix_expression -> primary_expression>
action(s740, '!=') = <reduce, postfix_expression -> primary_expression>
action(s740, '%') = <reduce, postfix_expression -> primary_expression>
action(s740, '&&') = <reduce, postfix_expression -> primary_expression>
action(s740, '&') = <reduce, postfix_expression -> primary_expression>
action(s740, '(') = <reduce, postfix_expression -> primary_expression>
action(s740, '*') = <reduce, postfix_expression -> primary_expression>
action(s740, '+') = <reduce, postfix_expression -> primary_expression>
action(s740, '++') = <reduce, postfix_expression -> primary_expression>
action(s740, '-') = <reduce, postfix_expression -> primary_expression>
action(s740, '--') = <reduce, postfix_expression -> primary_expression>
action(s740, '->') = <reduce, postfix_expression -> primary_expression>
action(s740, '.') = <reduce, postfix_expression -> primary_expression>
action(s740, '/') = <reduce, postfix_expression -> primary_expression>
action(s740, '<') = <reduce, postfix_expression -> primary_expression>
action(s740, '<<') = <reduce, postfix_expression -> primary_expression>
action(s740, '<=') = <reduce, postfix_expression -> primary_expression>
action(s740, '==') = <reduce, postfix_expression -> primary_expression>
action(s740, '>') = <reduce, postfix_expression -> primary_expression>
action(s740, '>=') = <reduce, postfix_expression -> primary_expression>
action(s740, '>>') = <reduce, postfix_expression -> primary_expression>
action(s740, '?') = <reduce, postfix_expression -> primary_expression>
action(s740, '[') = <reduce, postfix_expression -> primary_expression>
action(s740, ']') = <reduce, postfix_expression -> primary_expression>
action(s740, '^') = <reduce, postfix_expression -> primary_expression>
action(s740, '|') = <reduce, postfix_expression -> primary_expression>
action(s740, '||') = <reduce, postfix_expression -> primary_expression>
action(s741, $) = <reduce, primary_expression -> '(' expression ')'>
action(s742, '!=') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '%') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '%=') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '&&') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '&') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '&=') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '(') = <reduce, primary_expression -> '(' expression ')'>
action(s742, ')') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '*') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '*=') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '+') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '++') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '+=') = <reduce, primary_expression -> '(' expression ')'>
action(s742, ',') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '-') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '--') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '-=') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '->') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '.') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '/') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '/=') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '<') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '<<') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '<<=') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '<=') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '=') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '==') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '>') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '>=') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '>>') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '>>=') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '?') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '[') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '^') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '^=') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '|') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '|=') = <reduce, primary_expression -> '(' expression ')'>
action(s742, '||') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '!=') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '%') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '%=') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '&&') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '&') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '&=') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '(') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '*') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '*=') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '+') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '++') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '+=') = <reduce, primary_expression -> '(' expression ')'>
action(s743, ',') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '-') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '--') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '-=') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '->') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '.') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '/') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '/=') = <reduce, primary_expression -> '(' expression ')'>
action(s743, ':') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '<') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '<<') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '<<=') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '<=') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '=') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '==') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '>') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '>=') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '>>') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '>>=') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '?') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '[') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '^') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '^=') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '|') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '|=') = <reduce, primary_expression -> '(' expression ')'>
action(s743, '||') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '!=') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '%') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '%=') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '&&') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '&') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '&=') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '(') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '*') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '*=') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '+') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '++') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '+=') = <reduce, primary_expression -> '(' expression ')'>
action(s744, ',') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '-') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '--') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '-=') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '->') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '.') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '/') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '/=') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '<') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '<<') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '<<=') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '<=') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '=') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '==') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '>') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '>=') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '>>') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '>>=') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '?') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '[') = <reduce, primary_expression -> '(' expression ')'>
action(s744, ']') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '^') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '^=') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '|') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '|=') = <reduce, primary_expression -> '(' expression ')'>
action(s744, '||') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '!=') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '%') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '&&') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '&') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '(') = <reduce, primary_expression -> '(' expression ')'>
action(s745, ')') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '*') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '+') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '++') = <reduce, primary_expression -> '(' expression ')'>
action(s745, ',') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '-') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '--') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '->') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '.') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '/') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '<') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '<<') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '<=') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '==') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '>') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '>=') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '>>') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '?') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '[') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '^') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '|') = <reduce, primary_expression -> '(' expression ')'>
action(s745, '||') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '!=') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '%') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '&&') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '&') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '(') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '*') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '+') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '++') = <reduce, primary_expression -> '(' expression ')'>
action(s746, ',') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '-') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '--') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '->') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '.') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '/') = <reduce, primary_expression -> '(' expression ')'>
action(s746, ':') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '<') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '<<') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '<=') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '==') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '>') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '>=') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '>>') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '?') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '[') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '^') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '|') = <reduce, primary_expression -> '(' expression ')'>
action(s746, '||') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '!=') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '%') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '&&') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '&') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '(') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '*') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '+') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '++') = <reduce, primary_expression -> '(' expression ')'>
action(s747, ',') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '-') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '--') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '->') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '.') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '/') = <reduce, primary_expression -> '(' expression ')'>
action(s747, ';') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '<') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '<<') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '<=') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '==') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '>') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '>=') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '>>') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '?') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '[') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '^') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '|') = <reduce, primary_expression -> '(' expression ')'>
action(s747, '||') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '!=') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '%') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '&&') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '&') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '(') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '*') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '+') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '++') = <reduce, primary_expression -> '(' expression ')'>
action(s748, ',') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '-') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '--') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '->') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '.') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '/') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '<') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '<<') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '<=') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '==') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '>') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '>=') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '>>') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '?') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '[') = <reduce, primary_expression -> '(' expression ')'>
action(s748, ']') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '^') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '|') = <reduce, primary_expression -> '(' expression ')'>
action(s748, '||') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '!=') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '%') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '&&') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '&') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '(') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '*') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '+') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '++') = <reduce, primary_expression -> '(' expression ')'>
action(s749, ',') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '-') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '--') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '->') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '.') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '/') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '<') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '<<') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '<=') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '==') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '>') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '>=') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '>>') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '?') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '[') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '^') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '|') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '||') = <reduce, primary_expression -> '(' expression ')'>
action(s749, '}') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '!=') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '%') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '&&') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '&') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '(') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '*') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '+') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '++') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '-') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '--') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '->') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '.') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '/') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '<') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '<<') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '<=') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '==') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '>') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '>=') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '>>') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '?') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '[') = <reduce, primary_expression -> '(' expression ')'>
action(s750, ']') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '^') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '|') = <reduce, primary_expression -> '(' expression ')'>
action(s750, '||') = <reduce, primary_expression -> '(' expression ')'>
action(s751, $) = <reduce, primary_expression -> CONSTANT>
action(s752, '!=') = <reduce, primary_expression -> CONSTANT>
action(s752, '%') = <reduce, primary_expression -> CONSTANT>
action(s752, '%=') = <reduce, primary_expression -> CONSTANT>
action(s752, '&&') = <reduce, primary_expression -> CONSTANT>
action(s752, '&') = <reduce, primary_expression -> CONSTANT>
action(s752, '&=') = <reduce, primary_expression -> CONSTANT>
action(s752, '(') = <reduce, primary_expression -> CONSTANT>
action(s752, ')') = <reduce, primary_expression -> CONSTANT>
action(s752, '*') = <reduce, primary_expression -> CONSTANT>
action(s752, '*=') = <reduce, primary_expression -> CONSTANT>
action(s752, '+') = <reduce, primary_expression -> CONSTANT>
action(s752, '++') = <reduce, primary_expression -> CONSTANT>
action(s752, '+=') = <reduce, primary_expression -> CONSTANT>
action(s752, ',') = <reduce, primary_expression -> CONSTANT>
action(s752, '-') = <reduce, primary_expression -> CONSTANT>
action(s752, '--') = <reduce, primary_expression -> CONSTANT>
action(s752, '-=') = <reduce, primary_expression -> CONSTANT>
action(s752, '->') = <reduce, primary_expression -> CONSTANT>
action(s752, '.') = <reduce, primary_expression -> CONSTANT>
action(s752, '/') = <reduce, primary_expression -> CONSTANT>
action(s752, '/=') = <reduce, primary_expression -> CONSTANT>
action(s752, '<') = <reduce, primary_expression -> CONSTANT>
action(s752, '<<') = <reduce, primary_expression -> CONSTANT>
action(s752, '<<=') = <reduce, primary_expression -> CONSTANT>
action(s752, '<=') = <reduce, primary_expression -> CONSTANT>
action(s752, '=') = <reduce, primary_expression -> CONSTANT>
action(s752, '==') = <reduce, primary_expression -> CONSTANT>
action(s752, '>') = <reduce, primary_expression -> CONSTANT>
action(s752, '>=') = <reduce, primary_expression -> CONSTANT>
action(s752, '>>') = <reduce, primary_expression -> CONSTANT>
action(s752, '>>=') = <reduce, primary_expression -> CONSTANT>
action(s752, '?') = <reduce, primary_expression -> CONSTANT>
action(s752, '[') = <reduce, primary_expression -> CONSTANT>
action(s752, '^') = <reduce, primary_expression -> CONSTANT>
action(s752, '^=') = <reduce, primary_expression -> CONSTANT>
action(s752, '|') = <reduce, primary_expression -> CONSTANT>
action(s752, '|=') = <reduce, primary_expression -> CONSTANT>
action(s752, '||') = <reduce, primary_expression -> CONSTANT>
action(s753, '!=') = <reduce, primary_expression -> CONSTANT>
action(s753, '%') = <reduce, primary_expression -> CONSTANT>
action(s753, '%=') = <reduce, primary_expression -> CONSTANT>
action(s753, '&&') = <reduce, primary_expression -> CONSTANT>
action(s753, '&') = <reduce, primary_expression -> CONSTANT>
action(s753, '&=') = <reduce, primary_expression -> CONSTANT>
action(s753, '(') = <reduce, primary_expression -> CONSTANT>
action(s753, '*') = <reduce, primary_expression -> CONSTANT>
action(s753, '*=') = <reduce, primary_expression -> CONSTANT>
action(s753, '+') = <reduce, primary_expression -> CONSTANT>
action(s753, '++') = <reduce, primary_expression -> CONSTANT>
action(s753, '+=') = <reduce, primary_expression -> CONSTANT>
action(s753, ',') = <reduce, primary_expression -> CONSTANT>
action(s753, '-') = <reduce, primary_expression -> CONSTANT>
action(s753, '--') = <reduce, primary_expression -> CONSTANT>
action(s753, '-=') = <reduce, primary_expression -> CONSTANT>
action(s753, '->') = <reduce, primary_expression -> CONSTANT>
action(s753, '.') = <reduce, primary_expression -> CONSTANT>
action(s753, '/') = <reduce, primary_expression -> CONSTANT>
action(s753, '/=') = <reduce, primary_expression -> CONSTANT>
action(s753, ':') = <reduce, primary_expression -> CONSTANT>
action(s753, '<') = <reduce, primary_expression -> CONSTANT>
action(s753, '<<') = <reduce, primary_expression -> CONSTANT>
action(s753, '<<=') = <reduce, primary_expression -> CONSTANT>
action(s753, '<=') = <reduce, primary_expression -> CONSTANT>
action(s753, '=') = <reduce, primary_expression -> CONSTANT>
action(s753, '==') = <reduce, primary_expression -> CONSTANT>
action(s753, '>') = <reduce, primary_expression -> CONSTANT>
action(s753, '>=') = <reduce, primary_expression -> CONSTANT>
action(s753, '>>') = <reduce, primary_expression -> CONSTANT>
action(s753, '>>=') = <reduce, primary_expression -> CONSTANT>
action(s753, '?') = <reduce, primary_expression -> CONSTANT>
action(s753, '[') = <reduce, primary_expression -> CONSTANT>
action(s753, '^') = <reduce, primary_expression -> CONSTANT>
action(s753, '^=') = <reduce, primary_expression -> CONSTANT>
action(s753, '|') = <reduce, primary_expression -> CONSTANT>
action(s753, '|=') = <reduce, primary_expression -> CONSTANT>
action(s753, '||') = <reduce, primary_expression -> CONSTANT>
action(s754, '!=') = <reduce, primary_expression -> CONSTANT>
action(s754, '%') = <reduce, primary_expression -> CONSTANT>
action(s754, '%=') = <reduce, primary_expression -> CONSTANT>
action(s754, '&&') = <reduce, primary_expression -> CONSTANT>
action(s754, '&') = <reduce, primary_expression -> CONSTANT>
action(s754, '&=') = <reduce, primary_expression -> CONSTANT>
action(s754, '(') = <reduce, primary_expression -> CONSTANT>
action(s754, '*') = <reduce, primary_expression -> CONSTANT>
action(s754, '*=') = <reduce, primary_expression -> CONSTANT>
action(s754, '+') = <reduce, primary_expression -> CONSTANT>
action(s754, '++') = <reduce, primary_expression -> CONSTANT>
action(s754, '+=') = <reduce, primary_expression -> CONSTANT>
action(s754, ',') = <reduce, primary_expression -> CONSTANT>
action(s754, '-') = <reduce, primary_expression -> CONSTANT>
action(s754, '--') = <reduce, primary_expression -> CONSTANT>
action(s754, '-=') = <reduce, primary_expression -> CONSTANT>
action(s754, '->') = <reduce, primary_expression -> CONSTANT>
action(s754, '.') = <reduce, primary_expression -> CONSTANT>
action(s754, '/') = <reduce, primary_expression -> CONSTANT>
action(s754, '/=') = <reduce, primary_expression -> CONSTANT>
action(s754, '<') = <reduce, primary_expression -> CONSTANT>
action(s754, '<<') = <reduce, primary_expression -> CONSTANT>
action(s754, '<<=') = <reduce, primary_expression -> CONSTANT>
action(s754, '<=') = <reduce, primary_expression -> CONSTANT>
action(s754, '=') = <reduce, primary_expression -> CONSTANT>
action(s754, '==') = <reduce, primary_expression -> CONSTANT>
action(s754, '>') = <reduce, primary_expression -> CONSTANT>
action(s754, '>=') = <reduce, primary_expression -> CONSTANT>
action(s754, '>>') = <reduce, primary_expression -> CONSTANT>
action(s754, '>>=') = <reduce, primary_expression -> CONSTANT>
action(s754, '?') = <reduce, primary_expression -> CONSTANT>
action(s754, '[') = <reduce, primary_expression -> CONSTANT>
action(s754, ']') = <reduce, primary_expression -> CONSTANT>
action(s754, '^') = <reduce, primary_expression -> CONSTANT>
action(s754, '^=') = <reduce, primary_expression -> CONSTANT>
action(s754, '|') = <reduce, primary_expression -> CONSTANT>
action(s754, '|=') = <reduce, primary_expression -> CONSTANT>
action(s754, '||') = <reduce, primary_expression -> CONSTANT>
action(s755, '!=') = <reduce, primary_expression -> CONSTANT>
action(s755, '%') = <reduce, primary_expression -> CONSTANT>
action(s755, '&&') = <reduce, primary_expression -> CONSTANT>
action(s755, '&') = <reduce, primary_expression -> CONSTANT>
action(s755, '(') = <reduce, primary_expression -> CONSTANT>
action(s755, ')') = <reduce, primary_expression -> CONSTANT>
action(s755, '*') = <reduce, primary_expression -> CONSTANT>
action(s755, '+') = <reduce, primary_expression -> CONSTANT>
action(s755, '++') = <reduce, primary_expression -> CONSTANT>
action(s755, ',') = <reduce, primary_expression -> CONSTANT>
action(s755, '-') = <reduce, primary_expression -> CONSTANT>
action(s755, '--') = <reduce, primary_expression -> CONSTANT>
action(s755, '->') = <reduce, primary_expression -> CONSTANT>
action(s755, '.') = <reduce, primary_expression -> CONSTANT>
action(s755, '/') = <reduce, primary_expression -> CONSTANT>
action(s755, '<') = <reduce, primary_expression -> CONSTANT>
action(s755, '<<') = <reduce, primary_expression -> CONSTANT>
action(s755, '<=') = <reduce, primary_expression -> CONSTANT>
action(s755, '==') = <reduce, primary_expression -> CONSTANT>
action(s755, '>') = <reduce, primary_expression -> CONSTANT>
action(s755, '>=') = <reduce, primary_expression -> CONSTANT>
action(s755, '>>') = <reduce, primary_expression -> CONSTANT>
action(s755, '?') = <reduce, primary_expression -> CONSTANT>
action(s755, '[') = <reduce, primary_expression -> CONSTANT>
action(s755, '^') = <reduce, primary_expression -> CONSTANT>
action(s755, '|') = <reduce, primary_expression -> CONSTANT>
action(s755, '||') = <reduce, primary_expression -> CONSTANT>
action(s756, '!=') = <reduce, primary_expression -> CONSTANT>
action(s756, '%') = <reduce, primary_expression -> CONSTANT>
action(s756, '&&') = <reduce, primary_expression -> CONSTANT>
action(s756, '&') = <reduce, primary_expression -> CONSTANT>
action(s756, '(') = <reduce, primary_expression -> CONSTANT>
action(s756, '*') = <reduce, primary_expression -> CONSTANT>
action(s756, '+') = <reduce, primary_expression -> CONSTANT>
action(s756, '++') = <reduce, primary_expression -> CONSTANT>
action(s756, ',') = <reduce, primary_expression -> CONSTANT>
action(s756, '-') = <reduce, primary_expression -> CONSTANT>
action(s756, '--') = <reduce, primary_expression -> CONSTANT>
action(s756, '->') = <reduce, primary_expression -> CONSTANT>
action(s756, '.') = <reduce, primary_expression -> CONSTANT>
action(s756, '/') = <reduce, primary_expression -> CONSTANT>
action(s756, ':') = <reduce, primary_expression -> CONSTANT>
action(s756, '<') = <reduce, primary_expression -> CONSTANT>
action(s756, '<<') = <reduce, primary_expression -> CONSTANT>
action(s756, '<=') = <reduce, primary_expression -> CONSTANT>
action(s756, '==') = <reduce, primary_expression -> CONSTANT>
action(s756, '>') = <reduce, primary_expression -> CONSTANT>
action(s756, '>=') = <reduce, primary_expression -> CONSTANT>
action(s756, '>>') = <reduce, primary_expression -> CONSTANT>
action(s756, '?') = <reduce, primary_expression -> CONSTANT>
action(s756, '[') = <reduce, primary_expression -> CONSTANT>
action(s756, '^') = <reduce, primary_expression -> CONSTANT>
action(s756, '|') = <reduce, primary_expression -> CONSTANT>
action(s756, '||') = <reduce, primary_expression -> CONSTANT>
action(s757, '!=') = <reduce, primary_expression -> CONSTANT>
action(s757, '%') = <reduce, primary_expression -> CONSTANT>
action(s757, '&&') = <reduce, primary_expression -> CONSTANT>
action(s757, '&') = <reduce, primary_expression -> CONSTANT>
action(s757, '(') = <reduce, primary_expression -> CONSTANT>
action(s757, '*') = <reduce, primary_expression -> CONSTANT>
action(s757, '+') = <reduce, primary_expression -> CONSTANT>
action(s757, '++') = <reduce, primary_expression -> CONSTANT>
action(s757, ',') = <reduce, primary_expression -> CONSTANT>
action(s757, '-') = <reduce, primary_expression -> CONSTANT>
action(s757, '--') = <reduce, primary_expression -> CONSTANT>
action(s757, '->') = <reduce, primary_expression -> CONSTANT>
action(s757, '.') = <reduce, primary_expression -> CONSTANT>
action(s757, '/') = <reduce, primary_expression -> CONSTANT>
action(s757, ';') = <reduce, primary_expression -> CONSTANT>
action(s757, '<') = <reduce, primary_expression -> CONSTANT>
action(s757, '<<') = <reduce, primary_expression -> CONSTANT>
action(s757, '<=') = <reduce, primary_expression -> CONSTANT>
action(s757, '==') = <reduce, primary_expression -> CONSTANT>
action(s757, '>') = <reduce, primary_expression -> CONSTANT>
action(s757, '>=') = <reduce, primary_expression -> CONSTANT>
action(s757, '>>') = <reduce, primary_expression -> CONSTANT>
action(s757, '?') = <reduce, primary_expression -> CONSTANT>
action(s757, '[') = <reduce, primary_expression -> CONSTANT>
action(s757, '^') = <reduce, primary_expression -> CONSTANT>
action(s757, '|') = <reduce, primary_expression -> CONSTANT>
action(s757, '||') = <reduce, primary_expression -> CONSTANT>
action(s758, '!=') = <reduce, primary_expression -> CONSTANT>
action(s758, '%') = <reduce, primary_expression -> CONSTANT>
action(s758, '&&') = <reduce, primary_expression -> CONSTANT>
action(s758, '&') = <reduce, primary_expression -> CONSTANT>
action(s758, '(') = <reduce, primary_expression -> CONSTANT>
action(s758, '*') = <reduce, primary_expression -> CONSTANT>
action(s758, '+') = <reduce, primary_expression -> CONSTANT>
action(s758, '++') = <reduce, primary_expression -> CONSTANT>
action(s758, ',') = <reduce, primary_expression -> CONSTANT>
action(s758, '-') = <reduce, primary_expression -> CONSTANT>
action(s758, '--') = <reduce, primary_expression -> CONSTANT>
action(s758, '->') = <reduce, primary_expression -> CONSTANT>
action(s758, '.') = <reduce, primary_expression -> CONSTANT>
action(s758, '/') = <reduce, primary_expression -> CONSTANT>
action(s758, '<') = <reduce, primary_expression -> CONSTANT>
action(s758, '<<') = <reduce, primary_expression -> CONSTANT>
action(s758, '<=') = <reduce, primary_expression -> CONSTANT>
action(s758, '==') = <reduce, primary_expression -> CONSTANT>
action(s758, '>') = <reduce, primary_expression -> CONSTANT>
action(s758, '>=') = <reduce, primary_expression -> CONSTANT>
action(s758, '>>') = <reduce, primary_expression -> CONSTANT>
action(s758, '?') = <reduce, primary_expression -> CONSTANT>
action(s758, '[') = <reduce, primary_expression -> CONSTANT>
action(s758, ']') = <reduce, primary_expression -> CONSTANT>
action(s758, '^') = <reduce, primary_expression -> CONSTANT>
action(s758, '|') = <reduce, primary_expression -> CONSTANT>
action(s758, '||') = <reduce, primary_expression -> CONSTANT>
action(s759, '!=') = <reduce, primary_expression -> CONSTANT>
action(s759, '%') = <reduce, primary_expression -> CONSTANT>
action(s759, '&&') = <reduce, primary_expression -> CONSTANT>
action(s759, '&') = <reduce, primary_expression -> CONSTANT>
action(s759, '(') = <reduce, primary_expression -> CONSTANT>
action(s759, '*') = <reduce, primary_expression -> CONSTANT>
action(s759, '+') = <reduce, primary_expression -> CONSTANT>
action(s759, '++') = <reduce, primary_expression -> CONSTANT>
action(s759, ',') = <reduce, primary_expression -> CONSTANT>
action(s759, '-') = <reduce, primary_expression -> CONSTANT>
action(s759, '--') = <reduce, primary_expression -> CONSTANT>
action(s759, '->') = <reduce, primary_expression -> CONSTANT>
action(s759, '.') = <reduce, primary_expression -> CONSTANT>
action(s759, '/') = <reduce, primary_expression -> CONSTANT>
action(s759, '<') = <reduce, primary_expression -> CONSTANT>
action(s759, '<<') = <reduce, primary_expression -> CONSTANT>
action(s759, '<=') = <reduce, primary_expression -> CONSTANT>
action(s759, '==') = <reduce, primary_expression -> CONSTANT>
action(s759, '>') = <reduce, primary_expression -> CONSTANT>
action(s759, '>=') = <reduce, primary_expression -> CONSTANT>
action(s759, '>>') = <reduce, primary_expression -> CONSTANT>
action(s759, '?') = <reduce, primary_expression -> CONSTANT>
action(s759, '[') = <reduce, primary_expression -> CONSTANT>
action(s759, '^') = <reduce, primary_expression -> CONSTANT>
action(s759, '|') = <reduce, primary_expression -> CONSTANT>
action(s759, '||') = <reduce, primary_expression -> CONSTANT>
action(s759, '}') = <reduce, primary_expression -> CONSTANT>
action(s760, '!=') = <reduce, primary_expression -> CONSTANT>
action(s760, '%') = <reduce, primary_expression -> CONSTANT>
action(s760, '&&') = <reduce, primary_expression -> CONSTANT>
action(s760, '&') = <reduce, primary_expression -> CONSTANT>
action(s760, '(') = <reduce, primary_expression -> CONSTANT>
action(s760, '*') = <reduce, primary_expression -> CONSTANT>
action(s760, '+') = <reduce, primary_expression -> CONSTANT>
action(s760, '++') = <reduce, primary_expression -> CONSTANT>
action(s760, '-') = <reduce, primary_expression -> CONSTANT>
action(s760, '--') = <reduce, primary_expression -> CONSTANT>
action(s760, '->') = <reduce, primary_expression -> CONSTANT>
action(s760, '.') = <reduce, primary_expression -> CONSTANT>
action(s760, '/') = <reduce, primary_expression -> CONSTANT>
action(s760, '<') = <reduce, primary_expression -> CONSTANT>
action(s760, '<<') = <reduce, primary_expression -> CONSTANT>
action(s760, '<=') = <reduce, primary_expression -> CONSTANT>
action(s760, '==') = <reduce, primary_expression -> CONSTANT>
action(s760, '>') = <reduce, primary_expression -> CONSTANT>
action(s760, '>=') = <reduce, primary_expression -> CONSTANT>
action(s760, '>>') = <reduce, primary_expression -> CONSTANT>
action(s760, '?') = <reduce, primary_expression -> CONSTANT>
action(s760, '[') = <reduce, primary_expression -> CONSTANT>
action(s760, ']') = <reduce, primary_expression -> CONSTANT>
action(s760, '^') = <reduce, primary_expression -> CONSTANT>
action(s760, '|') = <reduce, primary_expression -> CONSTANT>
action(s760, '||') = <reduce, primary_expression -> CONSTANT>
action(s761, $) = <reduce, primary_expression -> IDENTIFIER>
action(s762, '!=') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '%') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '%=') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '&&') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '&') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '&=') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '(') = <reduce, primary_expression -> IDENTIFIER>
action(s762, ')') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '*') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '*=') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '+') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '++') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '+=') = <reduce, primary_expression -> IDENTIFIER>
action(s762, ',') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '-') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '--') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '-=') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '->') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '.') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '/') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '/=') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '<') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '<<') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '<<=') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '<=') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '=') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '==') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '>') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '>=') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '>>') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '>>=') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '?') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '[') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '^') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '^=') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '|') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '|=') = <reduce, primary_expression -> IDENTIFIER>
action(s762, '||') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '!=') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '%') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '%=') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '&&') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '&') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '&=') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '(') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '*') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '*=') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '+') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '++') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '+=') = <reduce, primary_expression -> IDENTIFIER>
action(s763, ',') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '-') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '--') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '-=') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '->') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '.') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '/') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '/=') = <reduce, primary_expression -> IDENTIFIER>
action(s763, ':') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '<') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '<<') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '<<=') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '<=') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '=') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '==') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '>') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '>=') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '>>') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '>>=') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '?') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '[') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '^') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '^=') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '|') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '|=') = <reduce, primary_expression -> IDENTIFIER>
action(s763, '||') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '!=') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '%') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '%=') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '&&') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '&') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '&=') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '(') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '*') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '*=') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '+') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '++') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '+=') = <reduce, primary_expression -> IDENTIFIER>
action(s764, ',') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '-') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '--') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '-=') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '->') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '.') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '/') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '/=') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '<') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '<<') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '<<=') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '<=') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '=') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '==') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '>') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '>=') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '>>') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '>>=') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '?') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '[') = <reduce, primary_expression -> IDENTIFIER>
action(s764, ']') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '^') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '^=') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '|') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '|=') = <reduce, primary_expression -> IDENTIFIER>
action(s764, '||') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '!=') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '%') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '&&') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '&') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '(') = <reduce, primary_expression -> IDENTIFIER>
action(s765, ')') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '*') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '+') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '++') = <reduce, primary_expression -> IDENTIFIER>
action(s765, ',') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '-') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '--') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '->') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '.') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '/') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '<') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '<<') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '<=') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '==') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '>') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '>=') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '>>') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '?') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '[') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '^') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '|') = <reduce, primary_expression -> IDENTIFIER>
action(s765, '||') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '!=') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '%') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '&&') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '&') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '(') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '*') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '+') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '++') = <reduce, primary_expression -> IDENTIFIER>
action(s766, ',') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '-') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '--') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '->') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '.') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '/') = <reduce, primary_expression -> IDENTIFIER>
action(s766, ':') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '<') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '<<') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '<=') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '==') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '>') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '>=') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '>>') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '?') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '[') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '^') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '|') = <reduce, primary_expression -> IDENTIFIER>
action(s766, '||') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '!=') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '%') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '&&') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '&') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '(') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '*') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '+') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '++') = <reduce, primary_expression -> IDENTIFIER>
action(s767, ',') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '-') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '--') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '->') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '.') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '/') = <reduce, primary_expression -> IDENTIFIER>
action(s767, ';') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '<') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '<<') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '<=') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '==') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '>') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '>=') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '>>') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '?') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '[') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '^') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '|') = <reduce, primary_expression -> IDENTIFIER>
action(s767, '||') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '!=') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '%') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '&&') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '&') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '(') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '*') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '+') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '++') = <reduce, primary_expression -> IDENTIFIER>
action(s768, ',') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '-') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '--') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '->') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '.') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '/') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '<') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '<<') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '<=') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '==') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '>') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '>=') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '>>') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '?') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '[') = <reduce, primary_expression -> IDENTIFIER>
action(s768, ']') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '^') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '|') = <reduce, primary_expression -> IDENTIFIER>
action(s768, '||') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '!=') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '%') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '&&') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '&') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '(') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '*') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '+') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '++') = <reduce, primary_expression -> IDENTIFIER>
action(s769, ',') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '-') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '--') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '->') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '.') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '/') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '<') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '<<') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '<=') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '==') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '>') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '>=') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '>>') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '?') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '[') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '^') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '|') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '||') = <reduce, primary_expression -> IDENTIFIER>
action(s769, '}') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '!=') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '%') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '&&') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '&') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '(') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '*') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '+') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '++') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '-') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '--') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '->') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '.') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '/') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '<') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '<<') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '<=') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '==') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '>') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '>=') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '>>') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '?') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '[') = <reduce, primary_expression -> IDENTIFIER>
action(s770, ']') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '^') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '|') = <reduce, primary_expression -> IDENTIFIER>
action(s770, '||') = <reduce, primary_expression -> IDENTIFIER>
action(s771, $) = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '!=') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '%') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '%=') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '&&') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '&') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '&=') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '(') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, ')') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '*') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '*=') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '+') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '++') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '+=') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, ',') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '-') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '--') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '-=') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '->') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '.') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '/') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '/=') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '<') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '<<') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '<<=') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '<=') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '=') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '==') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '>') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '>=') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '>>') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '>>=') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '?') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '[') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '^') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '^=') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '|') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '|=') = <reduce, primary_expression -> STRING_LITERAL>
action(s772, '||') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '!=') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '%') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '%=') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '&&') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '&') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '&=') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '(') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '*') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '*=') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '+') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '++') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '+=') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, ',') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '-') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '--') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '-=') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '->') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '.') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '/') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '/=') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, ':') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '<') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '<<') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '<<=') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '<=') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '=') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '==') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '>') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '>=') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '>>') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '>>=') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '?') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '[') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '^') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '^=') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '|') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '|=') = <reduce, primary_expression -> STRING_LITERAL>
action(s773, '||') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '!=') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '%') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '%=') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '&&') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '&') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '&=') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '(') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '*') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '*=') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '+') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '++') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '+=') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, ',') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '-') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '--') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '-=') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '->') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '.') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '/') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '/=') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '<') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '<<') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '<<=') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '<=') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '=') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '==') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '>') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '>=') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '>>') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '>>=') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '?') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '[') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, ']') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '^') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '^=') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '|') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '|=') = <reduce, primary_expression -> STRING_LITERAL>
action(s774, '||') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '!=') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '%') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '&&') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '&') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '(') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, ')') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '*') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '+') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '++') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, ',') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '-') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '--') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '->') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '.') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '/') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '<') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '<<') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '<=') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '==') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '>') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '>=') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '>>') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '?') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '[') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '^') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '|') = <reduce, primary_expression -> STRING_LITERAL>
action(s775, '||') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '!=') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '%') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '&&') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '&') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '(') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '*') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '+') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '++') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, ',') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '-') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '--') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '->') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '.') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '/') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, ':') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '<') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '<<') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '<=') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '==') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '>') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '>=') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '>>') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '?') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '[') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '^') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '|') = <reduce, primary_expression -> STRING_LITERAL>
action(s776, '||') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '!=') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '%') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '&&') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '&') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '(') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '*') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '+') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '++') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, ',') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '-') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '--') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '->') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '.') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '/') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, ';') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '<') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '<<') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '<=') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '==') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '>') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '>=') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '>>') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '?') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '[') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '^') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '|') = <reduce, primary_expression -> STRING_LITERAL>
action(s777, '||') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '!=') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '%') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '&&') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '&') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '(') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '*') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '+') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '++') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, ',') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '-') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '--') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '->') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '.') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '/') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '<') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '<<') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '<=') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '==') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '>') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '>=') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '>>') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '?') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '[') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, ']') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '^') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '|') = <reduce, primary_expression -> STRING_LITERAL>
action(s778, '||') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '!=') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '%') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '&&') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '&') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '(') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '*') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '+') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '++') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, ',') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '-') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '--') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '->') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '.') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '/') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '<') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '<<') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '<=') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '==') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '>') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '>=') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '>>') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '?') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '[') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '^') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '|') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '||') = <reduce, primary_expression -> STRING_LITERAL>
action(s779, '}') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '!=') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '%') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '&&') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '&') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '(') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '*') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '+') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '++') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '-') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '--') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '->') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '.') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '/') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '<') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '<<') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '<=') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '==') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '>') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '>=') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '>>') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '?') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '[') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, ']') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '^') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '|') = <reduce, primary_expression -> STRING_LITERAL>
action(s780, '||') = <reduce, primary_expression -> STRING_LITERAL>
action(s781, '!=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s781, '&&') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s781, '&') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s781, ')') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s781, ',') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s781, '<') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s781, '<<') = <shift, s69>
action(s781, '<=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s781, '==') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s781, '>') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s781, '>=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s781, '>>') = <shift, s70>
action(s781, '?') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s781, '^') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s781, '|') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s781, '||') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s782, '!=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s782, '&&') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s782, '&') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s782, ',') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s782, ':') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s782, '<') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s782, '<<') = <shift, s91>
action(s782, '<=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s782, '==') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s782, '>') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s782, '>=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s782, '>>') = <shift, s92>
action(s782, '?') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s782, '^') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s782, '|') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s782, '||') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s783, '!=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s783, '&&') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s783, '&') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s783, ',') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s783, ';') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s783, '<') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s783, '<<') = <shift, s107>
action(s783, '<=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s783, '==') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s783, '>') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s783, '>=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s783, '>>') = <shift, s108>
action(s783, '?') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s783, '^') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s783, '|') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s783, '||') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s784, '!=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s784, '&&') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s784, '&') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s784, ',') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s784, '<') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s784, '<<') = <shift, s132>
action(s784, '<=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s784, '==') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s784, '>') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s784, '>=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s784, '>>') = <shift, s133>
action(s784, '?') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s784, ']') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s784, '^') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s784, '|') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s784, '||') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s785, '!=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s785, '&&') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s785, '&') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s785, ',') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s785, '<') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s785, '<<') = <shift, s147>
action(s785, '<=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s785, '==') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s785, '>') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s785, '>=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s785, '>>') = <shift, s148>
action(s785, '?') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s785, '^') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s785, '|') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s785, '||') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s785, '}') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s786, '!=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s786, '&&') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s786, '&') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s786, '<') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s786, '<<') = <shift, s168>
action(s786, '<=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s786, '==') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s786, '>') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s786, '>=') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s786, '>>') = <shift, s169>
action(s786, '?') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s786, ']') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s786, '^') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s786, '|') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s786, '||') = <reduce, relational_expression -> relational_expression '<' shift_expression>
action(s787, '!=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s787, '&&') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s787, '&') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s787, ')') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s787, ',') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s787, '<') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s787, '<<') = <shift, s69>
action(s787, '<=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s787, '==') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s787, '>') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s787, '>=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s787, '>>') = <shift, s70>
action(s787, '?') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s787, '^') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s787, '|') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s787, '||') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s788, '!=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s788, '&&') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s788, '&') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s788, ',') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s788, ':') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s788, '<') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s788, '<<') = <shift, s91>
action(s788, '<=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s788, '==') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s788, '>') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s788, '>=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s788, '>>') = <shift, s92>
action(s788, '?') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s788, '^') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s788, '|') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s788, '||') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s789, '!=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s789, '&&') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s789, '&') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s789, ',') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s789, ';') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s789, '<') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s789, '<<') = <shift, s107>
action(s789, '<=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s789, '==') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s789, '>') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s789, '>=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s789, '>>') = <shift, s108>
action(s789, '?') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s789, '^') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s789, '|') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s789, '||') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s790, '!=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s790, '&&') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s790, '&') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s790, ',') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s790, '<') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s790, '<<') = <shift, s132>
action(s790, '<=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s790, '==') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s790, '>') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s790, '>=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s790, '>>') = <shift, s133>
action(s790, '?') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s790, ']') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s790, '^') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s790, '|') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s790, '||') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s791, '!=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s791, '&&') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s791, '&') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s791, ',') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s791, '<') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s791, '<<') = <shift, s147>
action(s791, '<=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s791, '==') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s791, '>') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s791, '>=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s791, '>>') = <shift, s148>
action(s791, '?') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s791, '^') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s791, '|') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s791, '||') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s791, '}') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s792, '!=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s792, '&&') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s792, '&') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s792, '<') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s792, '<<') = <shift, s168>
action(s792, '<=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s792, '==') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s792, '>') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s792, '>=') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s792, '>>') = <shift, s169>
action(s792, '?') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s792, ']') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s792, '^') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s792, '|') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s792, '||') = <reduce, relational_expression -> relational_expression '<=' shift_expression>
action(s793, '!=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s793, '&&') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s793, '&') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s793, ')') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s793, ',') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s793, '<') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s793, '<<') = <shift, s69>
action(s793, '<=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s793, '==') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s793, '>') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s793, '>=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s793, '>>') = <shift, s70>
action(s793, '?') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s793, '^') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s793, '|') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s793, '||') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s794, '!=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s794, '&&') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s794, '&') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s794, ',') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s794, ':') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s794, '<') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s794, '<<') = <shift, s91>
action(s794, '<=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s794, '==') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s794, '>') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s794, '>=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s794, '>>') = <shift, s92>
action(s794, '?') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s794, '^') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s794, '|') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s794, '||') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s795, '!=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s795, '&&') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s795, '&') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s795, ',') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s795, ';') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s795, '<') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s795, '<<') = <shift, s107>
action(s795, '<=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s795, '==') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s795, '>') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s795, '>=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s795, '>>') = <shift, s108>
action(s795, '?') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s795, '^') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s795, '|') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s795, '||') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s796, '!=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s796, '&&') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s796, '&') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s796, ',') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s796, '<') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s796, '<<') = <shift, s132>
action(s796, '<=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s796, '==') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s796, '>') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s796, '>=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s796, '>>') = <shift, s133>
action(s796, '?') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s796, ']') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s796, '^') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s796, '|') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s796, '||') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s797, '!=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s797, '&&') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s797, '&') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s797, ',') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s797, '<') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s797, '<<') = <shift, s147>
action(s797, '<=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s797, '==') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s797, '>') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s797, '>=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s797, '>>') = <shift, s148>
action(s797, '?') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s797, '^') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s797, '|') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s797, '||') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s797, '}') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s798, '!=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s798, '&&') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s798, '&') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s798, '<') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s798, '<<') = <shift, s168>
action(s798, '<=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s798, '==') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s798, '>') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s798, '>=') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s798, '>>') = <shift, s169>
action(s798, '?') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s798, ']') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s798, '^') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s798, '|') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s798, '||') = <reduce, relational_expression -> relational_expression '>' shift_expression>
action(s799, '!=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s799, '&&') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s799, '&') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s799, ')') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s799, ',') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s799, '<') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s799, '<<') = <shift, s69>
action(s799, '<=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s799, '==') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s799, '>') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s799, '>=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s799, '>>') = <shift, s70>
action(s799, '?') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s799, '^') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s799, '|') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s799, '||') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s800, '!=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s800, '&&') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s800, '&') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s800, ',') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s800, ':') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s800, '<') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s800, '<<') = <shift, s91>
action(s800, '<=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s800, '==') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s800, '>') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s800, '>=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s800, '>>') = <shift, s92>
action(s800, '?') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s800, '^') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s800, '|') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s800, '||') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s801, '!=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s801, '&&') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s801, '&') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s801, ',') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s801, ';') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s801, '<') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s801, '<<') = <shift, s107>
action(s801, '<=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s801, '==') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s801, '>') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s801, '>=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s801, '>>') = <shift, s108>
action(s801, '?') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s801, '^') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s801, '|') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s801, '||') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s802, '!=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s802, '&&') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s802, '&') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s802, ',') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s802, '<') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s802, '<<') = <shift, s132>
action(s802, '<=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s802, '==') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s802, '>') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s802, '>=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s802, '>>') = <shift, s133>
action(s802, '?') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s802, ']') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s802, '^') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s802, '|') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s802, '||') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s803, '!=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s803, '&&') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s803, '&') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s803, ',') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s803, '<') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s803, '<<') = <shift, s147>
action(s803, '<=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s803, '==') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s803, '>') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s803, '>=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s803, '>>') = <shift, s148>
action(s803, '?') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s803, '^') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s803, '|') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s803, '||') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s803, '}') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s804, '!=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s804, '&&') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s804, '&') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s804, '<') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s804, '<<') = <shift, s168>
action(s804, '<=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s804, '==') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s804, '>') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s804, '>=') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s804, '>>') = <shift, s169>
action(s804, '?') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s804, ']') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s804, '^') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s804, '|') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s804, '||') = <reduce, relational_expression -> relational_expression '>=' shift_expression>
action(s805, '!=') = <reduce, relational_expression -> shift_expression>
action(s805, '&&') = <reduce, relational_expression -> shift_expression>
action(s805, '&') = <reduce, relational_expression -> shift_expression>
action(s805, ')') = <reduce, relational_expression -> shift_expression>
action(s805, ',') = <reduce, relational_expression -> shift_expression>
action(s805, '<') = <reduce, relational_expression -> shift_expression>
action(s805, '<<') = <shift, s69>
action(s805, '<=') = <reduce, relational_expression -> shift_expression>
action(s805, '==') = <reduce, relational_expression -> shift_expression>
action(s805, '>') = <reduce, relational_expression -> shift_expression>
action(s805, '>=') = <reduce, relational_expression -> shift_expression>
action(s805, '>>') = <shift, s70>
action(s805, '?') = <reduce, relational_expression -> shift_expression>
action(s805, '^') = <reduce, relational_expression -> shift_expression>
action(s805, '|') = <reduce, relational_expression -> shift_expression>
action(s805, '||') = <reduce, relational_expression -> shift_expression>
action(s806, '!=') = <reduce, relational_expression -> shift_expression>
action(s806, '&&') = <reduce, relational_expression -> shift_expression>
action(s806, '&') = <reduce, relational_expression -> shift_expression>
action(s806, ',') = <reduce, relational_expression -> shift_expression>
action(s806, ':') = <reduce, relational_expression -> shift_expression>
action(s806, '<') = <reduce, relational_expression -> shift_expression>
action(s806, '<<') = <shift, s91>
action(s806, '<=') = <reduce, relational_expression -> shift_expression>
action(s806, '==') = <reduce, relational_expression -> shift_expression>
action(s806, '>') = <reduce, relational_expression -> shift_expression>
action(s806, '>=') = <reduce, relational_expression -> shift_expression>
action(s806, '>>') = <shift, s92>
action(s806, '?') = <reduce, relational_expression -> shift_expression>
action(s806, '^') = <reduce, relational_expression -> shift_expression>
action(s806, '|') = <reduce, relational_expression -> shift_expression>
action(s806, '||') = <reduce, relational_expression -> shift_expression>
action(s807, '!=') = <reduce, relational_expression -> shift_expression>
action(s807, '&&') = <reduce, relational_expression -> shift_expression>
action(s807, '&') = <reduce, relational_expression -> shift_expression>
action(s807, ',') = <reduce, relational_expression -> shift_expression>
action(s807, ';') = <reduce, relational_expression -> shift_expression>
action(s807, '<') = <reduce, relational_expression -> shift_expression>
action(s807, '<<') = <shift, s107>
action(s807, '<=') = <reduce, relational_expression -> shift_expression>
action(s807, '==') = <reduce, relational_expression -> shift_expression>
action(s807, '>') = <reduce, relational_expression -> shift_expression>
action(s807, '>=') = <reduce, relational_expression -> shift_expression>
action(s807, '>>') = <shift, s108>
action(s807, '?') = <reduce, relational_expression -> shift_expression>
action(s807, '^') = <reduce, relational_expression -> shift_expression>
action(s807, '|') = <reduce, relational_expression -> shift_expression>
action(s807, '||') = <reduce, relational_expression -> shift_expression>
action(s808, '!=') = <reduce, relational_expression -> shift_expression>
action(s808, '&&') = <reduce, relational_expression -> shift_expression>
action(s808, '&') = <reduce, relational_expression -> shift_expression>
action(s808, ',') = <reduce, relational_expression -> shift_expression>
action(s808, '<') = <reduce, relational_expression -> shift_expression>
action(s808, '<<') = <shift, s132>
action(s808, '<=') = <reduce, relational_expression -> shift_expression>
action(s808, '==') = <reduce, relational_expression -> shift_expression>
action(s808, '>') = <reduce, relational_expression -> shift_expression>
action(s808, '>=') = <reduce, relational_expression -> shift_expression>
action(s808, '>>') = <shift, s133>
action(s808, '?') = <reduce, relational_expression -> shift_expression>
action(s808, ']') = <reduce, relational_expression -> shift_expression>
action(s808, '^') = <reduce, relational_expression -> shift_expression>
action(s808, '|') = <reduce, relational_expression -> shift_expression>
action(s808, '||') = <reduce, relational_expression -> shift_expression>
action(s809, '!=') = <reduce, relational_expression -> shift_expression>
action(s809, '&&') = <reduce, relational_expression -> shift_expression>
action(s809, '&') = <reduce, relational_expression -> shift_expression>
action(s809, ',') = <reduce, relational_expression -> shift_expression>
action(s809, '<') = <reduce, relational_expression -> shift_expression>
action(s809, '<<') = <shift, s147>
action(s809, '<=') = <reduce, relational_expression -> shift_expression>
action(s809, '==') = <reduce, relational_expression -> shift_expression>
action(s809, '>') = <reduce, relational_expression -> shift_expression>
action(s809, '>=') = <reduce, relational_expression -> shift_expression>
action(s809, '>>') = <shift, s148>
action(s809, '?') = <reduce, relational_expression -> shift_expression>
action(s809, '^') = <reduce, relational_expression -> shift_expression>
action(s809, '|') = <reduce, relational_expression -> shift_expression>
action(s809, '||') = <reduce, relational_expression -> shift_expression>
action(s809, '}') = <reduce, relational_expression -> shift_expression>
action(s810, '!=') = <reduce, relational_expression -> shift_expression>
action(s810, '&&') = <reduce, relational_expression -> shift_expression>
action(s810, '&') = <reduce, relational_expression -> shift_expression>
action(s810, '<') = <reduce, relational_expression -> shift_expression>
action(s810, '<<') = <shift, s168>
action(s810, '<=') = <reduce, relational_expression -> shift_expression>
action(s810, '==') = <reduce, relational_expression -> shift_expression>
action(s810, '>') = <reduce, relational_expression -> shift_expression>
action(s810, '>=') = <reduce, relational_expression -> shift_expression>
action(s810, '>>') = <shift, s169>
action(s810, '?') = <reduce, relational_expression -> shift_expression>
action(s810, ']') = <reduce, relational_expression -> shift_expression>
action(s810, '^') = <reduce, relational_expression -> shift_expression>
action(s810, '|') = <reduce, relational_expression -> shift_expression>
action(s810, '||') = <reduce, relational_expression -> shift_expression>
action(s811, '(') = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s811, ')') = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s811, '*') = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s811, '[') = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s812, '(') = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s812, '*') = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s812, ':') = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s812, IDENTIFIER) = <reduce, specifier_qualifier_list -> type_qualifier specifier_qualifier_list>
action(s813, '(') = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s813, ')') = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s813, '*') = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s813, '[') = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s814, '(') = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s814, '*') = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s814, ':') = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s814, IDENTIFIER) = <reduce, specifier_qualifier_list -> type_specifier specifier_qualifier_list>
action(s815, '(') = <reduce, storage_class_specifier -> 'auto'>
action(s815, ')') = <reduce, storage_class_specifier -> 'auto'>
action(s815, '*') = <reduce, storage_class_specifier -> 'auto'>
action(s815, ',') = <reduce, storage_class_specifier -> 'auto'>
action(s815, '[') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'auto') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'char') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'const') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'double') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'enum') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'extern') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'float') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'int') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'long') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'register') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'short') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'signed') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'static') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'struct') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'typedef') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'union') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'unsigned') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'void') = <reduce, storage_class_specifier -> 'auto'>
action(s815, 'volatile') = <reduce, storage_class_specifier -> 'auto'>
action(s815, IDENTIFIER) = <reduce, storage_class_specifier -> 'auto'>
action(s815, TYPE_NAME) = <reduce, storage_class_specifier -> 'auto'>
action(s816, '(') = <reduce, storage_class_specifier -> 'extern'>
action(s816, ')') = <reduce, storage_class_specifier -> 'extern'>
action(s816, '*') = <reduce, storage_class_specifier -> 'extern'>
action(s816, ',') = <reduce, storage_class_specifier -> 'extern'>
action(s816, '[') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'auto') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'char') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'const') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'double') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'enum') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'extern') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'float') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'int') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'long') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'register') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'short') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'signed') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'static') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'struct') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'typedef') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'union') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'unsigned') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'void') = <reduce, storage_class_specifier -> 'extern'>
action(s816, 'volatile') = <reduce, storage_class_specifier -> 'extern'>
action(s816, IDENTIFIER) = <reduce, storage_class_specifier -> 'extern'>
action(s816, TYPE_NAME) = <reduce, storage_class_specifier -> 'extern'>
action(s817, '(') = <reduce, storage_class_specifier -> 'register'>
action(s817, ')') = <reduce, storage_class_specifier -> 'register'>
action(s817, '*') = <reduce, storage_class_specifier -> 'register'>
action(s817, ',') = <reduce, storage_class_specifier -> 'register'>
action(s817, '[') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'auto') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'char') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'const') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'double') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'enum') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'extern') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'float') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'int') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'long') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'register') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'short') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'signed') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'static') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'struct') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'typedef') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'union') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'unsigned') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'void') = <reduce, storage_class_specifier -> 'register'>
action(s817, 'volatile') = <reduce, storage_class_specifier -> 'register'>
action(s817, IDENTIFIER) = <reduce, storage_class_specifier -> 'register'>
action(s817, TYPE_NAME) = <reduce, storage_class_specifier -> 'register'>
action(s818, '(') = <reduce, storage_class_specifier -> 'static'>
action(s818, ')') = <reduce, storage_class_specifier -> 'static'>
action(s818, '*') = <reduce, storage_class_specifier -> 'static'>
action(s818, ',') = <reduce, storage_class_specifier -> 'static'>
action(s818, '[') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'auto') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'char') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'const') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'double') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'enum') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'extern') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'float') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'int') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'long') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'register') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'short') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'signed') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'static') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'struct') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'typedef') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'union') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'unsigned') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'void') = <reduce, storage_class_specifier -> 'static'>
action(s818, 'volatile') = <reduce, storage_class_specifier -> 'static'>
action(s818, IDENTIFIER) = <reduce, storage_class_specifier -> 'static'>
action(s818, TYPE_NAME) = <reduce, storage_class_specifier -> 'static'>
action(s819, '(') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, ')') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, '*') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, ',') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, '[') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'auto') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'char') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'const') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'double') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'enum') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'extern') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'float') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'int') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'long') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'register') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'short') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'signed') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'static') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'struct') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'typedef') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'union') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'unsigned') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'void') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, 'volatile') = <reduce, storage_class_specifier -> 'typedef'>
action(s819, IDENTIFIER) = <reduce, storage_class_specifier -> 'typedef'>
action(s819, TYPE_NAME) = <reduce, storage_class_specifier -> 'typedef'>
action(s820, ',') = <shift, s372>
action(s820, ';') = <shift, s821>
action(s821, 'char') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s821, 'const') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s821, 'double') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s821, 'enum') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s821, 'float') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s821, 'int') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s821, 'long') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s821, 'short') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s821, 'signed') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s821, 'struct') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s821, 'union') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s821, 'unsigned') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s821, 'void') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s821, 'volatile') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s821, '}') = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s821, TYPE_NAME) = <reduce, struct_declaration -> specifier_qualifier_list struct_declarator_list ';'>
action(s822, 'char') = <reduce, struct_declaration_list -> struct_declaration>
action(s822, 'const') = <reduce, struct_declaration_list -> struct_declaration>
action(s822, 'double') = <reduce, struct_declaration_list -> struct_declaration>
action(s822, 'enum') = <reduce, struct_declaration_list -> struct_declaration>
action(s822, 'float') = <reduce, struct_declaration_list -> struct_declaration>
action(s822, 'int') = <reduce, struct_declaration_list -> struct_declaration>
action(s822, 'long') = <reduce, struct_declaration_list -> struct_declaration>
action(s822, 'short') = <reduce, struct_declaration_list -> struct_declaration>
action(s822, 'signed') = <reduce, struct_declaration_list -> struct_declaration>
action(s822, 'struct') = <reduce, struct_declaration_list -> struct_declaration>
action(s822, 'union') = <reduce, struct_declaration_list -> struct_declaration>
action(s822, 'unsigned') = <reduce, struct_declaration_list -> struct_declaration>
action(s822, 'void') = <reduce, struct_declaration_list -> struct_declaration>
action(s822, 'volatile') = <reduce, struct_declaration_list -> struct_declaration>
action(s822, '}') = <reduce, struct_declaration_list -> struct_declaration>
action(s822, TYPE_NAME) = <reduce, struct_declaration_list -> struct_declaration>
action(s823, 'char') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s823, 'const') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s823, 'double') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s823, 'enum') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s823, 'float') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s823, 'int') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s823, 'long') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s823, 'short') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s823, 'signed') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s823, 'struct') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s823, 'union') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s823, 'unsigned') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s823, 'void') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s823, 'volatile') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s823, '}') = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s823, TYPE_NAME) = <reduce, struct_declaration_list -> struct_declaration_list struct_declaration>
action(s824, ',') = <reduce, struct_declarator -> ':' constant_expression>
action(s824, ';') = <reduce, struct_declarator -> ':' constant_expression>
action(s825, ',') = <reduce, struct_declarator -> declarator>
action(s825, ':') = <shift, s95>
action(s825, ';') = <reduce, struct_declarator -> declarator>
action(s826, ',') = <reduce, struct_declarator -> declarator ':' constant_expression>
action(s826, ';') = <reduce, struct_declarator -> declarator ':' constant_expression>
action(s827, ',') = <reduce, struct_declarator_list -> struct_declarator>
action(s827, ';') = <reduce, struct_declarator_list -> struct_declarator>
action(s828, ',') = <reduce, struct_declarator_list -> struct_declarator_list ',' struct_declarator>
action(s828, ';') = <reduce, struct_declarator_list -> struct_declarator_list ',' struct_declarator>
action(s829, '{') = <reduce, struct_or_union -> 'struct'>
action(s829, IDENTIFIER) = <reduce, struct_or_union -> 'struct'>
action(s830, '{') = <reduce, struct_or_union -> 'union'>
action(s830, IDENTIFIER) = <reduce, struct_or_union -> 'union'>
action(s831, '{') = <shift, s446>
action(s831, IDENTIFIER) = <shift, s837>
action(s832, '{') = <shift, s447>
action(s832, IDENTIFIER) = <shift, s838>
action(s833, '{') = <shift, s448>
action(s833, IDENTIFIER) = <shift, s839>
action(s834, '(') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, ')') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, '*') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, ',') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, '[') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'auto') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'char') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'const') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'double') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'enum') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'extern') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'float') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'int') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'long') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'register') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'short') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'signed') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'static') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'struct') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'typedef') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'union') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'unsigned') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'void') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, 'volatile') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, IDENTIFIER) = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s834, TYPE_NAME) = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, '(') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, ')') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, '*') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, '[') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, 'char') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, 'const') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, 'double') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, 'enum') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, 'float') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, 'int') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, 'long') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, 'short') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, 'signed') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, 'struct') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, 'union') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, 'unsigned') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, 'void') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, 'volatile') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s835, TYPE_NAME) = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, '(') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, '*') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, ':') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, 'char') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, 'const') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, 'double') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, 'enum') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, 'float') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, 'int') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, 'long') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, 'short') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, 'signed') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, 'struct') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, 'union') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, 'unsigned') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, 'void') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, 'volatile') = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, IDENTIFIER) = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s836, TYPE_NAME) = <reduce, struct_or_union_specifier -> struct_or_union '{' struct_declaration_list '}'>
action(s837, '(') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, ')') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, '*') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, ',') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, '[') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'auto') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'char') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'const') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'double') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'enum') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'extern') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'float') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'int') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'long') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'register') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'short') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'signed') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'static') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'struct') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'typedef') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'union') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'unsigned') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'void') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, 'volatile') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, '{') = <shift, s449>
action(s837, IDENTIFIER) = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s837, TYPE_NAME) = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, '(') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, ')') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, '*') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, '[') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, 'char') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, 'const') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, 'double') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, 'enum') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, 'float') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, 'int') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, 'long') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, 'short') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, 'signed') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, 'struct') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, 'union') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, 'unsigned') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, 'void') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, 'volatile') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s838, '{') = <shift, s450>
action(s838, TYPE_NAME) = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, '(') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, '*') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, ':') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, 'char') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, 'const') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, 'double') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, 'enum') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, 'float') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, 'int') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, 'long') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, 'short') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, 'signed') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, 'struct') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, 'union') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, 'unsigned') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, 'void') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, 'volatile') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, '{') = <shift, s451>
action(s839, IDENTIFIER) = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s839, TYPE_NAME) = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER>
action(s840, '(') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, ')') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, '*') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, ',') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, '[') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'auto') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'char') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'const') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'double') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'enum') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'extern') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'float') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'int') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'long') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'register') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'short') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'signed') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'static') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'struct') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'typedef') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'union') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'unsigned') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'void') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, 'volatile') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, IDENTIFIER) = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s840, TYPE_NAME) = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, '(') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, ')') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, '*') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, '[') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, 'char') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, 'const') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, 'double') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, 'enum') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, 'float') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, 'int') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, 'long') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, 'short') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, 'signed') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, 'struct') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, 'union') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, 'unsigned') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, 'void') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, 'volatile') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s841, TYPE_NAME) = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, '(') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, '*') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, ':') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, 'char') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, 'const') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, 'double') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, 'enum') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, 'float') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, 'int') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, 'long') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, 'short') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, 'signed') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, 'struct') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, 'union') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, 'unsigned') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, 'void') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, 'volatile') = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, IDENTIFIER) = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s842, TYPE_NAME) = <reduce, struct_or_union_specifier -> struct_or_union IDENTIFIER '{' struct_declaration_list '}'>
action(s843, ')') = <reduce, type_name -> specifier_qualifier_list abstract_declarator>
action(s844, '(') = <reduce, type_qualifier -> 'const'>
action(s844, ')') = <reduce, type_qualifier -> 'const'>
action(s844, '*') = <reduce, type_qualifier -> 'const'>
action(s844, ',') = <reduce, type_qualifier -> 'const'>
action(s844, '[') = <reduce, type_qualifier -> 'const'>
action(s844, 'auto') = <reduce, type_qualifier -> 'const'>
action(s844, 'char') = <reduce, type_qualifier -> 'const'>
action(s844, 'const') = <reduce, type_qualifier -> 'const'>
action(s844, 'double') = <reduce, type_qualifier -> 'const'>
action(s844, 'enum') = <reduce, type_qualifier -> 'const'>
action(s844, 'extern') = <reduce, type_qualifier -> 'const'>
action(s844, 'float') = <reduce, type_qualifier -> 'const'>
action(s844, 'int') = <reduce, type_qualifier -> 'const'>
action(s844, 'long') = <reduce, type_qualifier -> 'const'>
action(s844, 'register') = <reduce, type_qualifier -> 'const'>
action(s844, 'short') = <reduce, type_qualifier -> 'const'>
action(s844, 'signed') = <reduce, type_qualifier -> 'const'>
action(s844, 'static') = <reduce, type_qualifier -> 'const'>
action(s844, 'struct') = <reduce, type_qualifier -> 'const'>
action(s844, 'typedef') = <reduce, type_qualifier -> 'const'>
action(s844, 'union') = <reduce, type_qualifier -> 'const'>
action(s844, 'unsigned') = <reduce, type_qualifier -> 'const'>
action(s844, 'void') = <reduce, type_qualifier -> 'const'>
action(s844, 'volatile') = <reduce, type_qualifier -> 'const'>
action(s844, IDENTIFIER) = <reduce, type_qualifier -> 'const'>
action(s844, TYPE_NAME) = <reduce, type_qualifier -> 'const'>
action(s845, '(') = <reduce, type_qualifier -> 'const'>
action(s845, ')') = <reduce, type_qualifier -> 'const'>
action(s845, '*') = <reduce, type_qualifier -> 'const'>
action(s845, ',') = <reduce, type_qualifier -> 'const'>
action(s845, '[') = <reduce, type_qualifier -> 'const'>
action(s845, 'const') = <reduce, type_qualifier -> 'const'>
action(s845, 'volatile') = <reduce, type_qualifier -> 'const'>
action(s845, IDENTIFIER) = <reduce, type_qualifier -> 'const'>
action(s846, '(') = <reduce, type_qualifier -> 'const'>
action(s846, ')') = <reduce, type_qualifier -> 'const'>
action(s846, '*') = <reduce, type_qualifier -> 'const'>
action(s846, '[') = <reduce, type_qualifier -> 'const'>
action(s846, 'char') = <reduce, type_qualifier -> 'const'>
action(s846, 'const') = <reduce, type_qualifier -> 'const'>
action(s846, 'double') = <reduce, type_qualifier -> 'const'>
action(s846, 'enum') = <reduce, type_qualifier -> 'const'>
action(s846, 'float') = <reduce, type_qualifier -> 'const'>
action(s846, 'int') = <reduce, type_qualifier -> 'const'>
action(s846, 'long') = <reduce, type_qualifier -> 'const'>
action(s846, 'short') = <reduce, type_qualifier -> 'const'>
action(s846, 'signed') = <reduce, type_qualifier -> 'const'>
action(s846, 'struct') = <reduce, type_qualifier -> 'const'>
action(s846, 'union') = <reduce, type_qualifier -> 'const'>
action(s846, 'unsigned') = <reduce, type_qualifier -> 'const'>
action(s846, 'void') = <reduce, type_qualifier -> 'const'>
action(s846, 'volatile') = <reduce, type_qualifier -> 'const'>
action(s846, TYPE_NAME) = <reduce, type_qualifier -> 'const'>
action(s847, '(') = <reduce, type_qualifier -> 'const'>
action(s847, ')') = <reduce, type_qualifier -> 'const'>
action(s847, '*') = <reduce, type_qualifier -> 'const'>
action(s847, '[') = <reduce, type_qualifier -> 'const'>
action(s847, 'const') = <reduce, type_qualifier -> 'const'>
action(s847, 'volatile') = <reduce, type_qualifier -> 'const'>
action(s848, '(') = <reduce, type_qualifier -> 'const'>
action(s848, ')') = <reduce, type_qualifier -> 'const'>
action(s848, '*') = <reduce, type_qualifier -> 'const'>
action(s848, '[') = <reduce, type_qualifier -> 'const'>
action(s848, 'const') = <reduce, type_qualifier -> 'const'>
action(s848, 'volatile') = <reduce, type_qualifier -> 'const'>
action(s848, IDENTIFIER) = <reduce, type_qualifier -> 'const'>
action(s849, '(') = <reduce, type_qualifier -> 'const'>
action(s849, '*') = <reduce, type_qualifier -> 'const'>
action(s849, ':') = <reduce, type_qualifier -> 'const'>
action(s849, 'char') = <reduce, type_qualifier -> 'const'>
action(s849, 'const') = <reduce, type_qualifier -> 'const'>
action(s849, 'double') = <reduce, type_qualifier -> 'const'>
action(s849, 'enum') = <reduce, type_qualifier -> 'const'>
action(s849, 'float') = <reduce, type_qualifier -> 'const'>
action(s849, 'int') = <reduce, type_qualifier -> 'const'>
action(s849, 'long') = <reduce, type_qualifier -> 'const'>
action(s849, 'short') = <reduce, type_qualifier -> 'const'>
action(s849, 'signed') = <reduce, type_qualifier -> 'const'>
action(s849, 'struct') = <reduce, type_qualifier -> 'const'>
action(s849, 'union') = <reduce, type_qualifier -> 'const'>
action(s849, 'unsigned') = <reduce, type_qualifier -> 'const'>
action(s849, 'void') = <reduce, type_qualifier -> 'const'>
action(s849, 'volatile') = <reduce, type_qualifier -> 'const'>
action(s849, IDENTIFIER) = <reduce, type_qualifier -> 'const'>
action(s849, TYPE_NAME) = <reduce, type_qualifier -> 'const'>
action(s850, '(') = <reduce, type_qualifier -> 'const'>
action(s850, '*') = <reduce, type_qualifier -> 'const'>
action(s850, 'const') = <reduce, type_qualifier -> 'const'>
action(s850, 'volatile') = <reduce, type_qualifier -> 'const'>
action(s850, IDENTIFIER) = <reduce, type_qualifier -> 'const'>
action(s851, '(') = <reduce, type_qualifier -> 'volatile'>
action(s851, ')') = <reduce, type_qualifier -> 'volatile'>
action(s851, '*') = <reduce, type_qualifier -> 'volatile'>
action(s851, ',') = <reduce, type_qualifier -> 'volatile'>
action(s851, '[') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'auto') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'char') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'const') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'double') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'enum') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'extern') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'float') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'int') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'long') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'register') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'short') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'signed') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'static') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'struct') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'typedef') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'union') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'unsigned') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'void') = <reduce, type_qualifier -> 'volatile'>
action(s851, 'volatile') = <reduce, type_qualifier -> 'volatile'>
action(s851, IDENTIFIER) = <reduce, type_qualifier -> 'volatile'>
action(s851, TYPE_NAME) = <reduce, type_qualifier -> 'volatile'>
action(s852, '(') = <reduce, type_qualifier -> 'volatile'>
action(s852, ')') = <reduce, type_qualifier -> 'volatile'>
action(s852, '*') = <reduce, type_qualifier -> 'volatile'>
action(s852, ',') = <reduce, type_qualifier -> 'volatile'>
action(s852, '[') = <reduce, type_qualifier -> 'volatile'>
action(s852, 'const') = <reduce, type_qualifier -> 'volatile'>
action(s852, 'volatile') = <reduce, type_qualifier -> 'volatile'>
action(s852, IDENTIFIER) = <reduce, type_qualifier -> 'volatile'>
action(s853, '(') = <reduce, type_qualifier -> 'volatile'>
action(s853, ')') = <reduce, type_qualifier -> 'volatile'>
action(s853, '*') = <reduce, type_qualifier -> 'volatile'>
action(s853, '[') = <reduce, type_qualifier -> 'volatile'>
action(s853, 'char') = <reduce, type_qualifier -> 'volatile'>
action(s853, 'const') = <reduce, type_qualifier -> 'volatile'>
action(s853, 'double') = <reduce, type_qualifier -> 'volatile'>
action(s853, 'enum') = <reduce, type_qualifier -> 'volatile'>
action(s853, 'float') = <reduce, type_qualifier -> 'volatile'>
action(s853, 'int') = <reduce, type_qualifier -> 'volatile'>
action(s853, 'long') = <reduce, type_qualifier -> 'volatile'>
action(s853, 'short') = <reduce, type_qualifier -> 'volatile'>
action(s853, 'signed') = <reduce, type_qualifier -> 'volatile'>
action(s853, 'struct') = <reduce, type_qualifier -> 'volatile'>
action(s853, 'union') = <reduce, type_qualifier -> 'volatile'>
action(s853, 'unsigned') = <reduce, type_qualifier -> 'volatile'>
action(s853, 'void') = <reduce, type_qualifier -> 'volatile'>
action(s853, 'volatile') = <reduce, type_qualifier -> 'volatile'>
action(s853, TYPE_NAME) = <reduce, type_qualifier -> 'volatile'>
action(s854, '(') = <reduce, type_qualifier -> 'volatile'>
action(s854, ')') = <reduce, type_qualifier -> 'volatile'>
action(s854, '*') = <reduce, type_qualifier -> 'volatile'>
action(s854, '[') = <reduce, type_qualifier -> 'volatile'>
action(s854, 'const') = <reduce, type_qualifier -> 'volatile'>
action(s854, 'volatile') = <reduce, type_qualifier -> 'volatile'>
action(s855, '(') = <reduce, type_qualifier -> 'volatile'>
action(s855, ')') = <reduce, type_qualifier -> 'volatile'>
action(s855, '*') = <reduce, type_qualifier -> 'volatile'>
action(s855, '[') = <reduce, type_qualifier -> 'volatile'>
action(s855, 'const') = <reduce, type_qualifier -> 'volatile'>
action(s855, 'volatile') = <reduce, type_qualifier -> 'volatile'>
action(s855, IDENTIFIER) = <reduce, type_qualifier -> 'volatile'>
action(s856, '(') = <reduce, type_qualifier -> 'volatile'>
action(s856, '*') = <reduce, type_qualifier -> 'volatile'>
action(s856, ':') = <reduce, type_qualifier -> 'volatile'>
action(s856, 'char') = <reduce, type_qualifier -> 'volatile'>
action(s856, 'const') = <reduce, type_qualifier -> 'volatile'>
action(s856, 'double') = <reduce, type_qualifier -> 'volatile'>
action(s856, 'enum') = <reduce, type_qualifier -> 'volatile'>
action(s856, 'float') = <reduce, type_qualifier -> 'volatile'>
action(s856, 'int') = <reduce, type_qualifier -> 'volatile'>
action(s856, 'long') = <reduce, type_qualifier -> 'volatile'>
action(s856, 'short') = <reduce, type_qualifier -> 'volatile'>
action(s856, 'signed') = <reduce, type_qualifier -> 'volatile'>
action(s856, 'struct') = <reduce, type_qualifier -> 'volatile'>
action(s856, 'union') = <reduce, type_qualifier -> 'volatile'>
action(s856, 'unsigned') = <reduce, type_qualifier -> 'volatile'>
action(s856, 'void') = <reduce, type_qualifier -> 'volatile'>
action(s856, 'volatile') = <reduce, type_qualifier -> 'volatile'>
action(s856, IDENTIFIER) = <reduce, type_qualifier -> 'volatile'>
action(s856, TYPE_NAME) = <reduce, type_qualifier -> 'volatile'>
action(s857, '(') = <reduce, type_qualifier -> 'volatile'>
action(s857, '*') = <reduce, type_qualifier -> 'volatile'>
action(s857, 'const') = <reduce, type_qualifier -> 'volatile'>
action(s857, 'volatile') = <reduce, type_qualifier -> 'volatile'>
action(s857, IDENTIFIER) = <reduce, type_qualifier -> 'volatile'>
action(s858, '(') = <reduce, type_qualifier_list -> type_qualifier>
action(s858, ')') = <reduce, type_qualifier_list -> type_qualifier>
action(s858, '*') = <reduce, type_qualifier_list -> type_qualifier>
action(s858, ',') = <reduce, type_qualifier_list -> type_qualifier>
action(s858, '[') = <reduce, type_qualifier_list -> type_qualifier>
action(s858, 'const') = <reduce, type_qualifier_list -> type_qualifier>
action(s858, 'volatile') = <reduce, type_qualifier_list -> type_qualifier>
action(s858, IDENTIFIER) = <reduce, type_qualifier_list -> type_qualifier>
action(s859, '(') = <reduce, type_qualifier_list -> type_qualifier>
action(s859, ')') = <reduce, type_qualifier_list -> type_qualifier>
action(s859, '*') = <reduce, type_qualifier_list -> type_qualifier>
action(s859, '[') = <reduce, type_qualifier_list -> type_qualifier>
action(s859, 'const') = <reduce, type_qualifier_list -> type_qualifier>
action(s859, 'volatile') = <reduce, type_qualifier_list -> type_qualifier>
action(s860, '(') = <reduce, type_qualifier_list -> type_qualifier>
action(s860, ')') = <reduce, type_qualifier_list -> type_qualifier>
action(s860, '*') = <reduce, type_qualifier_list -> type_qualifier>
action(s860, '[') = <reduce, type_qualifier_list -> type_qualifier>
action(s860, 'const') = <reduce, type_qualifier_list -> type_qualifier>
action(s860, 'volatile') = <reduce, type_qualifier_list -> type_qualifier>
action(s860, IDENTIFIER) = <reduce, type_qualifier_list -> type_qualifier>
action(s861, '(') = <reduce, type_qualifier_list -> type_qualifier>
action(s861, '*') = <reduce, type_qualifier_list -> type_qualifier>
action(s861, 'const') = <reduce, type_qualifier_list -> type_qualifier>
action(s861, 'volatile') = <reduce, type_qualifier_list -> type_qualifier>
action(s861, IDENTIFIER) = <reduce, type_qualifier_list -> type_qualifier>
action(s862, '(') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s862, ')') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s862, '*') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s862, ',') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s862, '[') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s862, 'const') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s862, 'volatile') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s862, IDENTIFIER) = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s863, '(') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s863, ')') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s863, '*') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s863, '[') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s863, 'const') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s863, 'volatile') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s864, '(') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s864, ')') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s864, '*') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s864, '[') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s864, 'const') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s864, 'volatile') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s864, IDENTIFIER) = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s865, '(') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s865, '*') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s865, 'const') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s865, 'volatile') = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s865, IDENTIFIER) = <reduce, type_qualifier_list -> type_qualifier_list type_qualifier>
action(s866, '(') = <reduce, type_specifier -> 'char'>
action(s866, ')') = <reduce, type_specifier -> 'char'>
action(s866, '*') = <reduce, type_specifier -> 'char'>
action(s866, ',') = <reduce, type_specifier -> 'char'>
action(s866, '[') = <reduce, type_specifier -> 'char'>
action(s866, 'auto') = <reduce, type_specifier -> 'char'>
action(s866, 'char') = <reduce, type_specifier -> 'char'>
action(s866, 'const') = <reduce, type_specifier -> 'char'>
action(s866, 'double') = <reduce, type_specifier -> 'char'>
action(s866, 'enum') = <reduce, type_specifier -> 'char'>
action(s866, 'extern') = <reduce, type_specifier -> 'char'>
action(s866, 'float') = <reduce, type_specifier -> 'char'>
action(s866, 'int') = <reduce, type_specifier -> 'char'>
action(s866, 'long') = <reduce, type_specifier -> 'char'>
action(s866, 'register') = <reduce, type_specifier -> 'char'>
action(s866, 'short') = <reduce, type_specifier -> 'char'>
action(s866, 'signed') = <reduce, type_specifier -> 'char'>
action(s866, 'static') = <reduce, type_specifier -> 'char'>
action(s866, 'struct') = <reduce, type_specifier -> 'char'>
action(s866, 'typedef') = <reduce, type_specifier -> 'char'>
action(s866, 'union') = <reduce, type_specifier -> 'char'>
action(s866, 'unsigned') = <reduce, type_specifier -> 'char'>
action(s866, 'void') = <reduce, type_specifier -> 'char'>
action(s866, 'volatile') = <reduce, type_specifier -> 'char'>
action(s866, IDENTIFIER) = <reduce, type_specifier -> 'char'>
action(s866, TYPE_NAME) = <reduce, type_specifier -> 'char'>
action(s867, '(') = <reduce, type_specifier -> 'char'>
action(s867, ')') = <reduce, type_specifier -> 'char'>
action(s867, '*') = <reduce, type_specifier -> 'char'>
action(s867, '[') = <reduce, type_specifier -> 'char'>
action(s867, 'char') = <reduce, type_specifier -> 'char'>
action(s867, 'const') = <reduce, type_specifier -> 'char'>
action(s867, 'double') = <reduce, type_specifier -> 'char'>
action(s867, 'enum') = <reduce, type_specifier -> 'char'>
action(s867, 'float') = <reduce, type_specifier -> 'char'>
action(s867, 'int') = <reduce, type_specifier -> 'char'>
action(s867, 'long') = <reduce, type_specifier -> 'char'>
action(s867, 'short') = <reduce, type_specifier -> 'char'>
action(s867, 'signed') = <reduce, type_specifier -> 'char'>
action(s867, 'struct') = <reduce, type_specifier -> 'char'>
action(s867, 'union') = <reduce, type_specifier -> 'char'>
action(s867, 'unsigned') = <reduce, type_specifier -> 'char'>
action(s867, 'void') = <reduce, type_specifier -> 'char'>
action(s867, 'volatile') = <reduce, type_specifier -> 'char'>
action(s867, TYPE_NAME) = <reduce, type_specifier -> 'char'>
action(s868, '(') = <reduce, type_specifier -> 'char'>
action(s868, '*') = <reduce, type_specifier -> 'char'>
action(s868, ':') = <reduce, type_specifier -> 'char'>
action(s868, 'char') = <reduce, type_specifier -> 'char'>
action(s868, 'const') = <reduce, type_specifier -> 'char'>
action(s868, 'double') = <reduce, type_specifier -> 'char'>
action(s868, 'enum') = <reduce, type_specifier -> 'char'>
action(s868, 'float') = <reduce, type_specifier -> 'char'>
action(s868, 'int') = <reduce, type_specifier -> 'char'>
action(s868, 'long') = <reduce, type_specifier -> 'char'>
action(s868, 'short') = <reduce, type_specifier -> 'char'>
action(s868, 'signed') = <reduce, type_specifier -> 'char'>
action(s868, 'struct') = <reduce, type_specifier -> 'char'>
action(s868, 'union') = <reduce, type_specifier -> 'char'>
action(s868, 'unsigned') = <reduce, type_specifier -> 'char'>
action(s868, 'void') = <reduce, type_specifier -> 'char'>
action(s868, 'volatile') = <reduce, type_specifier -> 'char'>
action(s868, IDENTIFIER) = <reduce, type_specifier -> 'char'>
action(s868, TYPE_NAME) = <reduce, type_specifier -> 'char'>
action(s869, '(') = <reduce, type_specifier -> 'double'>
action(s869, ')') = <reduce, type_specifier -> 'double'>
action(s869, '*') = <reduce, type_specifier -> 'double'>
action(s869, ',') = <reduce, type_specifier -> 'double'>
action(s869, '[') = <reduce, type_specifier -> 'double'>
action(s869, 'auto') = <reduce, type_specifier -> 'double'>
action(s869, 'char') = <reduce, type_specifier -> 'double'>
action(s869, 'const') = <reduce, type_specifier -> 'double'>
action(s869, 'double') = <reduce, type_specifier -> 'double'>
action(s869, 'enum') = <reduce, type_specifier -> 'double'>
action(s869, 'extern') = <reduce, type_specifier -> 'double'>
action(s869, 'float') = <reduce, type_specifier -> 'double'>
action(s869, 'int') = <reduce, type_specifier -> 'double'>
action(s869, 'long') = <reduce, type_specifier -> 'double'>
action(s869, 'register') = <reduce, type_specifier -> 'double'>
action(s869, 'short') = <reduce, type_specifier -> 'double'>
action(s869, 'signed') = <reduce, type_specifier -> 'double'>
action(s869, 'static') = <reduce, type_specifier -> 'double'>
action(s869, 'struct') = <reduce, type_specifier -> 'double'>
action(s869, 'typedef') = <reduce, type_specifier -> 'double'>
action(s869, 'union') = <reduce, type_specifier -> 'double'>
action(s869, 'unsigned') = <reduce, type_specifier -> 'double'>
action(s869, 'void') = <reduce, type_specifier -> 'double'>
action(s869, 'volatile') = <reduce, type_specifier -> 'double'>
action(s869, IDENTIFIER) = <reduce, type_specifier -> 'double'>
action(s869, TYPE_NAME) = <reduce, type_specifier -> 'double'>
action(s870, '(') = <reduce, type_specifier -> 'double'>
action(s870, ')') = <reduce, type_specifier -> 'double'>
action(s870, '*') = <reduce, type_specifier -> 'double'>
action(s870, '[') = <reduce, type_specifier -> 'double'>
action(s870, 'char') = <reduce, type_specifier -> 'double'>
action(s870, 'const') = <reduce, type_specifier -> 'double'>
action(s870, 'double') = <reduce, type_specifier -> 'double'>
action(s870, 'enum') = <reduce, type_specifier -> 'double'>
action(s870, 'float') = <reduce, type_specifier -> 'double'>
action(s870, 'int') = <reduce, type_specifier -> 'double'>
action(s870, 'long') = <reduce, type_specifier -> 'double'>
action(s870, 'short') = <reduce, type_specifier -> 'double'>
action(s870, 'signed') = <reduce, type_specifier -> 'double'>
action(s870, 'struct') = <reduce, type_specifier -> 'double'>
action(s870, 'union') = <reduce, type_specifier -> 'double'>
action(s870, 'unsigned') = <reduce, type_specifier -> 'double'>
action(s870, 'void') = <reduce, type_specifier -> 'double'>
action(s870, 'volatile') = <reduce, type_specifier -> 'double'>
action(s870, TYPE_NAME) = <reduce, type_specifier -> 'double'>
action(s871, '(') = <reduce, type_specifier -> 'double'>
action(s871, '*') = <reduce, type_specifier -> 'double'>
action(s871, ':') = <reduce, type_specifier -> 'double'>
action(s871, 'char') = <reduce, type_specifier -> 'double'>
action(s871, 'const') = <reduce, type_specifier -> 'double'>
action(s871, 'double') = <reduce, type_specifier -> 'double'>
action(s871, 'enum') = <reduce, type_specifier -> 'double'>
action(s871, 'float') = <reduce, type_specifier -> 'double'>
action(s871, 'int') = <reduce, type_specifier -> 'double'>
action(s871, 'long') = <reduce, type_specifier -> 'double'>
action(s871, 'short') = <reduce, type_specifier -> 'double'>
action(s871, 'signed') = <reduce, type_specifier -> 'double'>
action(s871, 'struct') = <reduce, type_specifier -> 'double'>
action(s871, 'union') = <reduce, type_specifier -> 'double'>
action(s871, 'unsigned') = <reduce, type_specifier -> 'double'>
action(s871, 'void') = <reduce, type_specifier -> 'double'>
action(s871, 'volatile') = <reduce, type_specifier -> 'double'>
action(s871, IDENTIFIER) = <reduce, type_specifier -> 'double'>
action(s871, TYPE_NAME) = <reduce, type_specifier -> 'double'>
action(s872, '(') = <reduce, type_specifier -> 'float'>
action(s872, ')') = <reduce, type_specifier -> 'float'>
action(s872, '*') = <reduce, type_specifier -> 'float'>
action(s872, ',') = <reduce, type_specifier -> 'float'>
action(s872, '[') = <reduce, type_specifier -> 'float'>
action(s872, 'auto') = <reduce, type_specifier -> 'float'>
action(s872, 'char') = <reduce, type_specifier -> 'float'>
action(s872, 'const') = <reduce, type_specifier -> 'float'>
action(s872, 'double') = <reduce, type_specifier -> 'float'>
action(s872, 'enum') = <reduce, type_specifier -> 'float'>
action(s872, 'extern') = <reduce, type_specifier -> 'float'>
action(s872, 'float') = <reduce, type_specifier -> 'float'>
action(s872, 'int') = <reduce, type_specifier -> 'float'>
action(s872, 'long') = <reduce, type_specifier -> 'float'>
action(s872, 'register') = <reduce, type_specifier -> 'float'>
action(s872, 'short') = <reduce, type_specifier -> 'float'>
action(s872, 'signed') = <reduce, type_specifier -> 'float'>
action(s872, 'static') = <reduce, type_specifier -> 'float'>
action(s872, 'struct') = <reduce, type_specifier -> 'float'>
action(s872, 'typedef') = <reduce, type_specifier -> 'float'>
action(s872, 'union') = <reduce, type_specifier -> 'float'>
action(s872, 'unsigned') = <reduce, type_specifier -> 'float'>
action(s872, 'void') = <reduce, type_specifier -> 'float'>
action(s872, 'volatile') = <reduce, type_specifier -> 'float'>
action(s872, IDENTIFIER) = <reduce, type_specifier -> 'float'>
action(s872, TYPE_NAME) = <reduce, type_specifier -> 'float'>
action(s873, '(') = <reduce, type_specifier -> 'float'>
action(s873, ')') = <reduce, type_specifier -> 'float'>
action(s873, '*') = <reduce, type_specifier -> 'float'>
action(s873, '[') = <reduce, type_specifier -> 'float'>
action(s873, 'char') = <reduce, type_specifier -> 'float'>
action(s873, 'const') = <reduce, type_specifier -> 'float'>
action(s873, 'double') = <reduce, type_specifier -> 'float'>
action(s873, 'enum') = <reduce, type_specifier -> 'float'>
action(s873, 'float') = <reduce, type_specifier -> 'float'>
action(s873, 'int') = <reduce, type_specifier -> 'float'>
action(s873, 'long') = <reduce, type_specifier -> 'float'>
action(s873, 'short') = <reduce, type_specifier -> 'float'>
action(s873, 'signed') = <reduce, type_specifier -> 'float'>
action(s873, 'struct') = <reduce, type_specifier -> 'float'>
action(s873, 'union') = <reduce, type_specifier -> 'float'>
action(s873, 'unsigned') = <reduce, type_specifier -> 'float'>
action(s873, 'void') = <reduce, type_specifier -> 'float'>
action(s873, 'volatile') = <reduce, type_specifier -> 'float'>
action(s873, TYPE_NAME) = <reduce, type_specifier -> 'float'>
action(s874, '(') = <reduce, type_specifier -> 'float'>
action(s874, '*') = <reduce, type_specifier -> 'float'>
action(s874, ':') = <reduce, type_specifier -> 'float'>
action(s874, 'char') = <reduce, type_specifier -> 'float'>
action(s874, 'const') = <reduce, type_specifier -> 'float'>
action(s874, 'double') = <reduce, type_specifier -> 'float'>
action(s874, 'enum') = <reduce, type_specifier -> 'float'>
action(s874, 'float') = <reduce, type_specifier -> 'float'>
action(s874, 'int') = <reduce, type_specifier -> 'float'>
action(s874, 'long') = <reduce, type_specifier -> 'float'>
action(s874, 'short') = <reduce, type_specifier -> 'float'>
action(s874, 'signed') = <reduce, type_specifier -> 'float'>
action(s874, 'struct') = <reduce, type_specifier -> 'float'>
action(s874, 'union') = <reduce, type_specifier -> 'float'>
action(s874, 'unsigned') = <reduce, type_specifier -> 'float'>
action(s874, 'void') = <reduce, type_specifier -> 'float'>
action(s874, 'volatile') = <reduce, type_specifier -> 'float'>
action(s874, IDENTIFIER) = <reduce, type_specifier -> 'float'>
action(s874, TYPE_NAME) = <reduce, type_specifier -> 'float'>
action(s875, '(') = <reduce, type_specifier -> 'int'>
action(s875, ')') = <reduce, type_specifier -> 'int'>
action(s875, '*') = <reduce, type_specifier -> 'int'>
action(s875, ',') = <reduce, type_specifier -> 'int'>
action(s875, '[') = <reduce, type_specifier -> 'int'>
action(s875, 'auto') = <reduce, type_specifier -> 'int'>
action(s875, 'char') = <reduce, type_specifier -> 'int'>
action(s875, 'const') = <reduce, type_specifier -> 'int'>
action(s875, 'double') = <reduce, type_specifier -> 'int'>
action(s875, 'enum') = <reduce, type_specifier -> 'int'>
action(s875, 'extern') = <reduce, type_specifier -> 'int'>
action(s875, 'float') = <reduce, type_specifier -> 'int'>
action(s875, 'int') = <reduce, type_specifier -> 'int'>
action(s875, 'long') = <reduce, type_specifier -> 'int'>
action(s875, 'register') = <reduce, type_specifier -> 'int'>
action(s875, 'short') = <reduce, type_specifier -> 'int'>
action(s875, 'signed') = <reduce, type_specifier -> 'int'>
action(s875, 'static') = <reduce, type_specifier -> 'int'>
action(s875, 'struct') = <reduce, type_specifier -> 'int'>
action(s875, 'typedef') = <reduce, type_specifier -> 'int'>
action(s875, 'union') = <reduce, type_specifier -> 'int'>
action(s875, 'unsigned') = <reduce, type_specifier -> 'int'>
action(s875, 'void') = <reduce, type_specifier -> 'int'>
action(s875, 'volatile') = <reduce, type_specifier -> 'int'>
action(s875, IDENTIFIER) = <reduce, type_specifier -> 'int'>
action(s875, TYPE_NAME) = <reduce, type_specifier -> 'int'>
action(s876, '(') = <reduce, type_specifier -> 'int'>
action(s876, ')') = <reduce, type_specifier -> 'int'>
action(s876, '*') = <reduce, type_specifier -> 'int'>
action(s876, '[') = <reduce, type_specifier -> 'int'>
action(s876, 'char') = <reduce, type_specifier -> 'int'>
action(s876, 'const') = <reduce, type_specifier -> 'int'>
action(s876, 'double') = <reduce, type_specifier -> 'int'>
action(s876, 'enum') = <reduce, type_specifier -> 'int'>
action(s876, 'float') = <reduce, type_specifier -> 'int'>
action(s876, 'int') = <reduce, type_specifier -> 'int'>
action(s876, 'long') = <reduce, type_specifier -> 'int'>
action(s876, 'short') = <reduce, type_specifier -> 'int'>
action(s876, 'signed') = <reduce, type_specifier -> 'int'>
action(s876, 'struct') = <reduce, type_specifier -> 'int'>
action(s876, 'union') = <reduce, type_specifier -> 'int'>
action(s876, 'unsigned') = <reduce, type_specifier -> 'int'>
action(s876, 'void') = <reduce, type_specifier -> 'int'>
action(s876, 'volatile') = <reduce, type_specifier -> 'int'>
action(s876, TYPE_NAME) = <reduce, type_specifier -> 'int'>
action(s877, '(') = <reduce, type_specifier -> 'int'>
action(s877, '*') = <reduce, type_specifier -> 'int'>
action(s877, ':') = <reduce, type_specifier -> 'int'>
action(s877, 'char') = <reduce, type_specifier -> 'int'>
action(s877, 'const') = <reduce, type_specifier -> 'int'>
action(s877, 'double') = <reduce, type_specifier -> 'int'>
action(s877, 'enum') = <reduce, type_specifier -> 'int'>
action(s877, 'float') = <reduce, type_specifier -> 'int'>
action(s877, 'int') = <reduce, type_specifier -> 'int'>
action(s877, 'long') = <reduce, type_specifier -> 'int'>
action(s877, 'short') = <reduce, type_specifier -> 'int'>
action(s877, 'signed') = <reduce, type_specifier -> 'int'>
action(s877, 'struct') = <reduce, type_specifier -> 'int'>
action(s877, 'union') = <reduce, type_specifier -> 'int'>
action(s877, 'unsigned') = <reduce, type_specifier -> 'int'>
action(s877, 'void') = <reduce, type_specifier -> 'int'>
action(s877, 'volatile') = <reduce, type_specifier -> 'int'>
action(s877, IDENTIFIER) = <reduce, type_specifier -> 'int'>
action(s877, TYPE_NAME) = <reduce, type_specifier -> 'int'>
action(s878, '(') = <reduce, type_specifier -> 'long'>
action(s878, ')') = <reduce, type_specifier -> 'long'>
action(s878, '*') = <reduce, type_specifier -> 'long'>
action(s878, ',') = <reduce, type_specifier -> 'long'>
action(s878, '[') = <reduce, type_specifier -> 'long'>
action(s878, 'auto') = <reduce, type_specifier -> 'long'>
action(s878, 'char') = <reduce, type_specifier -> 'long'>
action(s878, 'const') = <reduce, type_specifier -> 'long'>
action(s878, 'double') = <reduce, type_specifier -> 'long'>
action(s878, 'enum') = <reduce, type_specifier -> 'long'>
action(s878, 'extern') = <reduce, type_specifier -> 'long'>
action(s878, 'float') = <reduce, type_specifier -> 'long'>
action(s878, 'int') = <reduce, type_specifier -> 'long'>
action(s878, 'long') = <reduce, type_specifier -> 'long'>
action(s878, 'register') = <reduce, type_specifier -> 'long'>
action(s878, 'short') = <reduce, type_specifier -> 'long'>
action(s878, 'signed') = <reduce, type_specifier -> 'long'>
action(s878, 'static') = <reduce, type_specifier -> 'long'>
action(s878, 'struct') = <reduce, type_specifier -> 'long'>
action(s878, 'typedef') = <reduce, type_specifier -> 'long'>
action(s878, 'union') = <reduce, type_specifier -> 'long'>
action(s878, 'unsigned') = <reduce, type_specifier -> 'long'>
action(s878, 'void') = <reduce, type_specifier -> 'long'>
action(s878, 'volatile') = <reduce, type_specifier -> 'long'>
action(s878, IDENTIFIER) = <reduce, type_specifier -> 'long'>
action(s878, TYPE_NAME) = <reduce, type_specifier -> 'long'>
action(s879, '(') = <reduce, type_specifier -> 'long'>
action(s879, ')') = <reduce, type_specifier -> 'long'>
action(s879, '*') = <reduce, type_specifier -> 'long'>
action(s879, '[') = <reduce, type_specifier -> 'long'>
action(s879, 'char') = <reduce, type_specifier -> 'long'>
action(s879, 'const') = <reduce, type_specifier -> 'long'>
action(s879, 'double') = <reduce, type_specifier -> 'long'>
action(s879, 'enum') = <reduce, type_specifier -> 'long'>
action(s879, 'float') = <reduce, type_specifier -> 'long'>
action(s879, 'int') = <reduce, type_specifier -> 'long'>
action(s879, 'long') = <reduce, type_specifier -> 'long'>
action(s879, 'short') = <reduce, type_specifier -> 'long'>
action(s879, 'signed') = <reduce, type_specifier -> 'long'>
action(s879, 'struct') = <reduce, type_specifier -> 'long'>
action(s879, 'union') = <reduce, type_specifier -> 'long'>
action(s879, 'unsigned') = <reduce, type_specifier -> 'long'>
action(s879, 'void') = <reduce, type_specifier -> 'long'>
action(s879, 'volatile') = <reduce, type_specifier -> 'long'>
action(s879, TYPE_NAME) = <reduce, type_specifier -> 'long'>
action(s880, '(') = <reduce, type_specifier -> 'long'>
action(s880, '*') = <reduce, type_specifier -> 'long'>
action(s880, ':') = <reduce, type_specifier -> 'long'>
action(s880, 'char') = <reduce, type_specifier -> 'long'>
action(s880, 'const') = <reduce, type_specifier -> 'long'>
action(s880, 'double') = <reduce, type_specifier -> 'long'>
action(s880, 'enum') = <reduce, type_specifier -> 'long'>
action(s880, 'float') = <reduce, type_specifier -> 'long'>
action(s880, 'int') = <reduce, type_specifier -> 'long'>
action(s880, 'long') = <reduce, type_specifier -> 'long'>
action(s880, 'short') = <reduce, type_specifier -> 'long'>
action(s880, 'signed') = <reduce, type_specifier -> 'long'>
action(s880, 'struct') = <reduce, type_specifier -> 'long'>
action(s880, 'union') = <reduce, type_specifier -> 'long'>
action(s880, 'unsigned') = <reduce, type_specifier -> 'long'>
action(s880, 'void') = <reduce, type_specifier -> 'long'>
action(s880, 'volatile') = <reduce, type_specifier -> 'long'>
action(s880, IDENTIFIER) = <reduce, type_specifier -> 'long'>
action(s880, TYPE_NAME) = <reduce, type_specifier -> 'long'>
action(s881, '(') = <reduce, type_specifier -> 'short'>
action(s881, ')') = <reduce, type_specifier -> 'short'>
action(s881, '*') = <reduce, type_specifier -> 'short'>
action(s881, ',') = <reduce, type_specifier -> 'short'>
action(s881, '[') = <reduce, type_specifier -> 'short'>
action(s881, 'auto') = <reduce, type_specifier -> 'short'>
action(s881, 'char') = <reduce, type_specifier -> 'short'>
action(s881, 'const') = <reduce, type_specifier -> 'short'>
action(s881, 'double') = <reduce, type_specifier -> 'short'>
action(s881, 'enum') = <reduce, type_specifier -> 'short'>
action(s881, 'extern') = <reduce, type_specifier -> 'short'>
action(s881, 'float') = <reduce, type_specifier -> 'short'>
action(s881, 'int') = <reduce, type_specifier -> 'short'>
action(s881, 'long') = <reduce, type_specifier -> 'short'>
action(s881, 'register') = <reduce, type_specifier -> 'short'>
action(s881, 'short') = <reduce, type_specifier -> 'short'>
action(s881, 'signed') = <reduce, type_specifier -> 'short'>
action(s881, 'static') = <reduce, type_specifier -> 'short'>
action(s881, 'struct') = <reduce, type_specifier -> 'short'>
action(s881, 'typedef') = <reduce, type_specifier -> 'short'>
action(s881, 'union') = <reduce, type_specifier -> 'short'>
action(s881, 'unsigned') = <reduce, type_specifier -> 'short'>
action(s881, 'void') = <reduce, type_specifier -> 'short'>
action(s881, 'volatile') = <reduce, type_specifier -> 'short'>
action(s881, IDENTIFIER) = <reduce, type_specifier -> 'short'>
action(s881, TYPE_NAME) = <reduce, type_specifier -> 'short'>
action(s882, '(') = <reduce, type_specifier -> 'short'>
action(s882, ')') = <reduce, type_specifier -> 'short'>
action(s882, '*') = <reduce, type_specifier -> 'short'>
action(s882, '[') = <reduce, type_specifier -> 'short'>
action(s882, 'char') = <reduce, type_specifier -> 'short'>
action(s882, 'const') = <reduce, type_specifier -> 'short'>
action(s882, 'double') = <reduce, type_specifier -> 'short'>
action(s882, 'enum') = <reduce, type_specifier -> 'short'>
action(s882, 'float') = <reduce, type_specifier -> 'short'>
action(s882, 'int') = <reduce, type_specifier -> 'short'>
action(s882, 'long') = <reduce, type_specifier -> 'short'>
action(s882, 'short') = <reduce, type_specifier -> 'short'>
action(s882, 'signed') = <reduce, type_specifier -> 'short'>
action(s882, 'struct') = <reduce, type_specifier -> 'short'>
action(s882, 'union') = <reduce, type_specifier -> 'short'>
action(s882, 'unsigned') = <reduce, type_specifier -> 'short'>
action(s882, 'void') = <reduce, type_specifier -> 'short'>
action(s882, 'volatile') = <reduce, type_specifier -> 'short'>
action(s882, TYPE_NAME) = <reduce, type_specifier -> 'short'>
action(s883, '(') = <reduce, type_specifier -> 'short'>
action(s883, '*') = <reduce, type_specifier -> 'short'>
action(s883, ':') = <reduce, type_specifier -> 'short'>
action(s883, 'char') = <reduce, type_specifier -> 'short'>
action(s883, 'const') = <reduce, type_specifier -> 'short'>
action(s883, 'double') = <reduce, type_specifier -> 'short'>
action(s883, 'enum') = <reduce, type_specifier -> 'short'>
action(s883, 'float') = <reduce, type_specifier -> 'short'>
action(s883, 'int') = <reduce, type_specifier -> 'short'>
action(s883, 'long') = <reduce, type_specifier -> 'short'>
action(s883, 'short') = <reduce, type_specifier -> 'short'>
action(s883, 'signed') = <reduce, type_specifier -> 'short'>
action(s883, 'struct') = <reduce, type_specifier -> 'short'>
action(s883, 'union') = <reduce, type_specifier -> 'short'>
action(s883, 'unsigned') = <reduce, type_specifier -> 'short'>
action(s883, 'void') = <reduce, type_specifier -> 'short'>
action(s883, 'volatile') = <reduce, type_specifier -> 'short'>
action(s883, IDENTIFIER) = <reduce, type_specifier -> 'short'>
action(s883, TYPE_NAME) = <reduce, type_specifier -> 'short'>
action(s884, '(') = <reduce, type_specifier -> 'signed'>
action(s884, ')') = <reduce, type_specifier -> 'signed'>
action(s884, '*') = <reduce, type_specifier -> 'signed'>
action(s884, ',') = <reduce, type_specifier -> 'signed'>
action(s884, '[') = <reduce, type_specifier -> 'signed'>
action(s884, 'auto') = <reduce, type_specifier -> 'signed'>
action(s884, 'char') = <reduce, type_specifier -> 'signed'>
action(s884, 'const') = <reduce, type_specifier -> 'signed'>
action(s884, 'double') = <reduce, type_specifier -> 'signed'>
action(s884, 'enum') = <reduce, type_specifier -> 'signed'>
action(s884, 'extern') = <reduce, type_specifier -> 'signed'>
action(s884, 'float') = <reduce, type_specifier -> 'signed'>
action(s884, 'int') = <reduce, type_specifier -> 'signed'>
action(s884, 'long') = <reduce, type_specifier -> 'signed'>
action(s884, 'register') = <reduce, type_specifier -> 'signed'>
action(s884, 'short') = <reduce, type_specifier -> 'signed'>
action(s884, 'signed') = <reduce, type_specifier -> 'signed'>
action(s884, 'static') = <reduce, type_specifier -> 'signed'>
action(s884, 'struct') = <reduce, type_specifier -> 'signed'>
action(s884, 'typedef') = <reduce, type_specifier -> 'signed'>
action(s884, 'union') = <reduce, type_specifier -> 'signed'>
action(s884, 'unsigned') = <reduce, type_specifier -> 'signed'>
action(s884, 'void') = <reduce, type_specifier -> 'signed'>
action(s884, 'volatile') = <reduce, type_specifier -> 'signed'>
action(s884, IDENTIFIER) = <reduce, type_specifier -> 'signed'>
action(s884, TYPE_NAME) = <reduce, type_specifier -> 'signed'>
action(s885, '(') = <reduce, type_specifier -> 'signed'>
action(s885, ')') = <reduce, type_specifier -> 'signed'>
action(s885, '*') = <reduce, type_specifier -> 'signed'>
action(s885, '[') = <reduce, type_specifier -> 'signed'>
action(s885, 'char') = <reduce, type_specifier -> 'signed'>
action(s885, 'const') = <reduce, type_specifier -> 'signed'>
action(s885, 'double') = <reduce, type_specifier -> 'signed'>
action(s885, 'enum') = <reduce, type_specifier -> 'signed'>
action(s885, 'float') = <reduce, type_specifier -> 'signed'>
action(s885, 'int') = <reduce, type_specifier -> 'signed'>
action(s885, 'long') = <reduce, type_specifier -> 'signed'>
action(s885, 'short') = <reduce, type_specifier -> 'signed'>
action(s885, 'signed') = <reduce, type_specifier -> 'signed'>
action(s885, 'struct') = <reduce, type_specifier -> 'signed'>
action(s885, 'union') = <reduce, type_specifier -> 'signed'>
action(s885, 'unsigned') = <reduce, type_specifier -> 'signed'>
action(s885, 'void') = <reduce, type_specifier -> 'signed'>
action(s885, 'volatile') = <reduce, type_specifier -> 'signed'>
action(s885, TYPE_NAME) = <reduce, type_specifier -> 'signed'>
action(s886, '(') = <reduce, type_specifier -> 'signed'>
action(s886, '*') = <reduce, type_specifier -> 'signed'>
action(s886, ':') = <reduce, type_specifier -> 'signed'>
action(s886, 'char') = <reduce, type_specifier -> 'signed'>
action(s886, 'const') = <reduce, type_specifier -> 'signed'>
action(s886, 'double') = <reduce, type_specifier -> 'signed'>
action(s886, 'enum') = <reduce, type_specifier -> 'signed'>
action(s886, 'float') = <reduce, type_specifier -> 'signed'>
action(s886, 'int') = <reduce, type_specifier -> 'signed'>
action(s886, 'long') = <reduce, type_specifier -> 'signed'>
action(s886, 'short') = <reduce, type_specifier -> 'signed'>
action(s886, 'signed') = <reduce, type_specifier -> 'signed'>
action(s886, 'struct') = <reduce, type_specifier -> 'signed'>
action(s886, 'union') = <reduce, type_specifier -> 'signed'>
action(s886, 'unsigned') = <reduce, type_specifier -> 'signed'>
action(s886, 'void') = <reduce, type_specifier -> 'signed'>
action(s886, 'volatile') = <reduce, type_specifier -> 'signed'>
action(s886, IDENTIFIER) = <reduce, type_specifier -> 'signed'>
action(s886, TYPE_NAME) = <reduce, type_specifier -> 'signed'>
action(s887, '(') = <reduce, type_specifier -> 'unsigned'>
action(s887, ')') = <reduce, type_specifier -> 'unsigned'>
action(s887, '*') = <reduce, type_specifier -> 'unsigned'>
action(s887, ',') = <reduce, type_specifier -> 'unsigned'>
action(s887, '[') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'auto') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'char') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'const') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'double') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'enum') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'extern') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'float') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'int') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'long') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'register') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'short') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'signed') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'static') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'struct') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'typedef') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'union') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'unsigned') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'void') = <reduce, type_specifier -> 'unsigned'>
action(s887, 'volatile') = <reduce, type_specifier -> 'unsigned'>
action(s887, IDENTIFIER) = <reduce, type_specifier -> 'unsigned'>
action(s887, TYPE_NAME) = <reduce, type_specifier -> 'unsigned'>
action(s888, '(') = <reduce, type_specifier -> 'unsigned'>
action(s888, ')') = <reduce, type_specifier -> 'unsigned'>
action(s888, '*') = <reduce, type_specifier -> 'unsigned'>
action(s888, '[') = <reduce, type_specifier -> 'unsigned'>
action(s888, 'char') = <reduce, type_specifier -> 'unsigned'>
action(s888, 'const') = <reduce, type_specifier -> 'unsigned'>
action(s888, 'double') = <reduce, type_specifier -> 'unsigned'>
action(s888, 'enum') = <reduce, type_specifier -> 'unsigned'>
action(s888, 'float') = <reduce, type_specifier -> 'unsigned'>
action(s888, 'int') = <reduce, type_specifier -> 'unsigned'>
action(s888, 'long') = <reduce, type_specifier -> 'unsigned'>
action(s888, 'short') = <reduce, type_specifier -> 'unsigned'>
action(s888, 'signed') = <reduce, type_specifier -> 'unsigned'>
action(s888, 'struct') = <reduce, type_specifier -> 'unsigned'>
action(s888, 'union') = <reduce, type_specifier -> 'unsigned'>
action(s888, 'unsigned') = <reduce, type_specifier -> 'unsigned'>
action(s888, 'void') = <reduce, type_specifier -> 'unsigned'>
action(s888, 'volatile') = <reduce, type_specifier -> 'unsigned'>
action(s888, TYPE_NAME) = <reduce, type_specifier -> 'unsigned'>
action(s889, '(') = <reduce, type_specifier -> 'unsigned'>
action(s889, '*') = <reduce, type_specifier -> 'unsigned'>
action(s889, ':') = <reduce, type_specifier -> 'unsigned'>
action(s889, 'char') = <reduce, type_specifier -> 'unsigned'>
action(s889, 'const') = <reduce, type_specifier -> 'unsigned'>
action(s889, 'double') = <reduce, type_specifier -> 'unsigned'>
action(s889, 'enum') = <reduce, type_specifier -> 'unsigned'>
action(s889, 'float') = <reduce, type_specifier -> 'unsigned'>
action(s889, 'int') = <reduce, type_specifier -> 'unsigned'>
action(s889, 'long') = <reduce, type_specifier -> 'unsigned'>
action(s889, 'short') = <reduce, type_specifier -> 'unsigned'>
action(s889, 'signed') = <reduce, type_specifier -> 'unsigned'>
action(s889, 'struct') = <reduce, type_specifier -> 'unsigned'>
action(s889, 'union') = <reduce, type_specifier -> 'unsigned'>
action(s889, 'unsigned') = <reduce, type_specifier -> 'unsigned'>
action(s889, 'void') = <reduce, type_specifier -> 'unsigned'>
action(s889, 'volatile') = <reduce, type_specifier -> 'unsigned'>
action(s889, IDENTIFIER) = <reduce, type_specifier -> 'unsigned'>
action(s889, TYPE_NAME) = <reduce, type_specifier -> 'unsigned'>
action(s890, '(') = <reduce, type_specifier -> 'void'>
action(s890, ')') = <reduce, type_specifier -> 'void'>
action(s890, '*') = <reduce, type_specifier -> 'void'>
action(s890, ',') = <reduce, type_specifier -> 'void'>
action(s890, '[') = <reduce, type_specifier -> 'void'>
action(s890, 'auto') = <reduce, type_specifier -> 'void'>
action(s890, 'char') = <reduce, type_specifier -> 'void'>
action(s890, 'const') = <reduce, type_specifier -> 'void'>
action(s890, 'double') = <reduce, type_specifier -> 'void'>
action(s890, 'enum') = <reduce, type_specifier -> 'void'>
action(s890, 'extern') = <reduce, type_specifier -> 'void'>
action(s890, 'float') = <reduce, type_specifier -> 'void'>
action(s890, 'int') = <reduce, type_specifier -> 'void'>
action(s890, 'long') = <reduce, type_specifier -> 'void'>
action(s890, 'register') = <reduce, type_specifier -> 'void'>
action(s890, 'short') = <reduce, type_specifier -> 'void'>
action(s890, 'signed') = <reduce, type_specifier -> 'void'>
action(s890, 'static') = <reduce, type_specifier -> 'void'>
action(s890, 'struct') = <reduce, type_specifier -> 'void'>
action(s890, 'typedef') = <reduce, type_specifier -> 'void'>
action(s890, 'union') = <reduce, type_specifier -> 'void'>
action(s890, 'unsigned') = <reduce, type_specifier -> 'void'>
action(s890, 'void') = <reduce, type_specifier -> 'void'>
action(s890, 'volatile') = <reduce, type_specifier -> 'void'>
action(s890, IDENTIFIER) = <reduce, type_specifier -> 'void'>
action(s890, TYPE_NAME) = <reduce, type_specifier -> 'void'>
action(s891, '(') = <reduce, type_specifier -> 'void'>
action(s891, ')') = <reduce, type_specifier -> 'void'>
action(s891, '*') = <reduce, type_specifier -> 'void'>
action(s891, '[') = <reduce, type_specifier -> 'void'>
action(s891, 'char') = <reduce, type_specifier -> 'void'>
action(s891, 'const') = <reduce, type_specifier -> 'void'>
action(s891, 'double') = <reduce, type_specifier -> 'void'>
action(s891, 'enum') = <reduce, type_specifier -> 'void'>
action(s891, 'float') = <reduce, type_specifier -> 'void'>
action(s891, 'int') = <reduce, type_specifier -> 'void'>
action(s891, 'long') = <reduce, type_specifier -> 'void'>
action(s891, 'short') = <reduce, type_specifier -> 'void'>
action(s891, 'signed') = <reduce, type_specifier -> 'void'>
action(s891, 'struct') = <reduce, type_specifier -> 'void'>
action(s891, 'union') = <reduce, type_specifier -> 'void'>
action(s891, 'unsigned') = <reduce, type_specifier -> 'void'>
action(s891, 'void') = <reduce, type_specifier -> 'void'>
action(s891, 'volatile') = <reduce, type_specifier -> 'void'>
action(s891, TYPE_NAME) = <reduce, type_specifier -> 'void'>
action(s892, '(') = <reduce, type_specifier -> 'void'>
action(s892, '*') = <reduce, type_specifier -> 'void'>
action(s892, ':') = <reduce, type_specifier -> 'void'>
action(s892, 'char') = <reduce, type_specifier -> 'void'>
action(s892, 'const') = <reduce, type_specifier -> 'void'>
action(s892, 'double') = <reduce, type_specifier -> 'void'>
action(s892, 'enum') = <reduce, type_specifier -> 'void'>
action(s892, 'float') = <reduce, type_specifier -> 'void'>
action(s892, 'int') = <reduce, type_specifier -> 'void'>
action(s892, 'long') = <reduce, type_specifier -> 'void'>
action(s892, 'short') = <reduce, type_specifier -> 'void'>
action(s892, 'signed') = <reduce, type_specifier -> 'void'>
action(s892, 'struct') = <reduce, type_specifier -> 'void'>
action(s892, 'union') = <reduce, type_specifier -> 'void'>
action(s892, 'unsigned') = <reduce, type_specifier -> 'void'>
action(s892, 'void') = <reduce, type_specifier -> 'void'>
action(s892, 'volatile') = <reduce, type_specifier -> 'void'>
action(s892, IDENTIFIER) = <reduce, type_specifier -> 'void'>
action(s892, TYPE_NAME) = <reduce, type_specifier -> 'void'>
action(s893, '(') = <reduce, type_specifier -> TYPE_NAME>
action(s893, ')') = <reduce, type_specifier -> TYPE_NAME>
action(s893, '*') = <reduce, type_specifier -> TYPE_NAME>
action(s893, ',') = <reduce, type_specifier -> TYPE_NAME>
action(s893, '[') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'auto') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'char') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'const') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'double') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'enum') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'extern') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'float') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'int') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'long') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'register') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'short') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'signed') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'static') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'struct') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'typedef') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'union') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'unsigned') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'void') = <reduce, type_specifier -> TYPE_NAME>
action(s893, 'volatile') = <reduce, type_specifier -> TYPE_NAME>
action(s893, IDENTIFIER) = <reduce, type_specifier -> TYPE_NAME>
action(s893, TYPE_NAME) = <reduce, type_specifier -> TYPE_NAME>
action(s894, '(') = <reduce, type_specifier -> TYPE_NAME>
action(s894, ')') = <reduce, type_specifier -> TYPE_NAME>
action(s894, '*') = <reduce, type_specifier -> TYPE_NAME>
action(s894, '[') = <reduce, type_specifier -> TYPE_NAME>
action(s894, 'char') = <reduce, type_specifier -> TYPE_NAME>
action(s894, 'const') = <reduce, type_specifier -> TYPE_NAME>
action(s894, 'double') = <reduce, type_specifier -> TYPE_NAME>
action(s894, 'enum') = <reduce, type_specifier -> TYPE_NAME>
action(s894, 'float') = <reduce, type_specifier -> TYPE_NAME>
action(s894, 'int') = <reduce, type_specifier -> TYPE_NAME>
action(s894, 'long') = <reduce, type_specifier -> TYPE_NAME>
action(s894, 'short') = <reduce, type_specifier -> TYPE_NAME>
action(s894, 'signed') = <reduce, type_specifier -> TYPE_NAME>
action(s894, 'struct') = <reduce, type_specifier -> TYPE_NAME>
action(s894, 'union') = <reduce, type_specifier -> TYPE_NAME>
action(s894, 'unsigned') = <reduce, type_specifier -> TYPE_NAME>
action(s894, 'void') = <reduce, type_specifier -> TYPE_NAME>
action(s894, 'volatile') = <reduce, type_specifier -> TYPE_NAME>
action(s894, TYPE_NAME) = <reduce, type_specifier -> TYPE_NAME>
action(s895, '(') = <reduce, type_specifier -> TYPE_NAME>
action(s895, '*') = <reduce, type_specifier -> TYPE_NAME>
action(s895, ':') = <reduce, type_specifier -> TYPE_NAME>
action(s895, 'char') = <reduce, type_specifier -> TYPE_NAME>
action(s895, 'const') = <reduce, type_specifier -> TYPE_NAME>
action(s895, 'double') = <reduce, type_specifier -> TYPE_NAME>
action(s895, 'enum') = <reduce, type_specifier -> TYPE_NAME>
action(s895, 'float') = <reduce, type_specifier -> TYPE_NAME>
action(s895, 'int') = <reduce, type_specifier -> TYPE_NAME>
action(s895, 'long') = <reduce, type_specifier -> TYPE_NAME>
action(s895, 'short') = <reduce, type_specifier -> TYPE_NAME>
action(s895, 'signed') = <reduce, type_specifier -> TYPE_NAME>
action(s895, 'struct') = <reduce, type_specifier -> TYPE_NAME>
action(s895, 'union') = <reduce, type_specifier -> TYPE_NAME>
action(s895, 'unsigned') = <reduce, type_specifier -> TYPE_NAME>
action(s895, 'void') = <reduce, type_specifier -> TYPE_NAME>
action(s895, 'volatile') = <reduce, type_specifier -> TYPE_NAME>
action(s895, IDENTIFIER) = <reduce, type_specifier -> TYPE_NAME>
action(s895, TYPE_NAME) = <reduce, type_specifier -> TYPE_NAME>
action(s896, '(') = <reduce, type_specifier -> enum_specifier>
action(s896, ')') = <reduce, type_specifier -> enum_specifier>
action(s896, '*') = <reduce, type_specifier -> enum_specifier>
action(s896, ',') = <reduce, type_specifier -> enum_specifier>
action(s896, '[') = <reduce, type_specifier -> enum_specifier>
action(s896, 'auto') = <reduce, type_specifier -> enum_specifier>
action(s896, 'char') = <reduce, type_specifier -> enum_specifier>
action(s896, 'const') = <reduce, type_specifier -> enum_specifier>
action(s896, 'double') = <reduce, type_specifier -> enum_specifier>
action(s896, 'enum') = <reduce, type_specifier -> enum_specifier>
action(s896, 'extern') = <reduce, type_specifier -> enum_specifier>
action(s896, 'float') = <reduce, type_specifier -> enum_specifier>
action(s896, 'int') = <reduce, type_specifier -> enum_specifier>
action(s896, 'long') = <reduce, type_specifier -> enum_specifier>
action(s896, 'register') = <reduce, type_specifier -> enum_specifier>
action(s896, 'short') = <reduce, type_specifier -> enum_specifier>
action(s896, 'signed') = <reduce, type_specifier -> enum_specifier>
action(s896, 'static') = <reduce, type_specifier -> enum_specifier>
action(s896, 'struct') = <reduce, type_specifier -> enum_specifier>
action(s896, 'typedef') = <reduce, type_specifier -> enum_specifier>
action(s896, 'union') = <reduce, type_specifier -> enum_specifier>
action(s896, 'unsigned') = <reduce, type_specifier -> enum_specifier>
action(s896, 'void') = <reduce, type_specifier -> enum_specifier>
action(s896, 'volatile') = <reduce, type_specifier -> enum_specifier>
action(s896, IDENTIFIER) = <reduce, type_specifier -> enum_specifier>
action(s896, TYPE_NAME) = <reduce, type_specifier -> enum_specifier>
action(s897, '(') = <reduce, type_specifier -> enum_specifier>
action(s897, ')') = <reduce, type_specifier -> enum_specifier>
action(s897, '*') = <reduce, type_specifier -> enum_specifier>
action(s897, '[') = <reduce, type_specifier -> enum_specifier>
action(s897, 'char') = <reduce, type_specifier -> enum_specifier>
action(s897, 'const') = <reduce, type_specifier -> enum_specifier>
action(s897, 'double') = <reduce, type_specifier -> enum_specifier>
action(s897, 'enum') = <reduce, type_specifier -> enum_specifier>
action(s897, 'float') = <reduce, type_specifier -> enum_specifier>
action(s897, 'int') = <reduce, type_specifier -> enum_specifier>
action(s897, 'long') = <reduce, type_specifier -> enum_specifier>
action(s897, 'short') = <reduce, type_specifier -> enum_specifier>
action(s897, 'signed') = <reduce, type_specifier -> enum_specifier>
action(s897, 'struct') = <reduce, type_specifier -> enum_specifier>
action(s897, 'union') = <reduce, type_specifier -> enum_specifier>
action(s897, 'unsigned') = <reduce, type_specifier -> enum_specifier>
action(s897, 'void') = <reduce, type_specifier -> enum_specifier>
action(s897, 'volatile') = <reduce, type_specifier -> enum_specifier>
action(s897, TYPE_NAME) = <reduce, type_specifier -> enum_specifier>
action(s898, '(') = <reduce, type_specifier -> enum_specifier>
action(s898, '*') = <reduce, type_specifier -> enum_specifier>
action(s898, ':') = <reduce, type_specifier -> enum_specifier>
action(s898, 'char') = <reduce, type_specifier -> enum_specifier>
action(s898, 'const') = <reduce, type_specifier -> enum_specifier>
action(s898, 'double') = <reduce, type_specifier -> enum_specifier>
action(s898, 'enum') = <reduce, type_specifier -> enum_specifier>
action(s898, 'float') = <reduce, type_specifier -> enum_specifier>
action(s898, 'int') = <reduce, type_specifier -> enum_specifier>
action(s898, 'long') = <reduce, type_specifier -> enum_specifier>
action(s898, 'short') = <reduce, type_specifier -> enum_specifier>
action(s898, 'signed') = <reduce, type_specifier -> enum_specifier>
action(s898, 'struct') = <reduce, type_specifier -> enum_specifier>
action(s898, 'union') = <reduce, type_specifier -> enum_specifier>
action(s898, 'unsigned') = <reduce, type_specifier -> enum_specifier>
action(s898, 'void') = <reduce, type_specifier -> enum_specifier>
action(s898, 'volatile') = <reduce, type_specifier -> enum_specifier>
action(s898, IDENTIFIER) = <reduce, type_specifier -> enum_specifier>
action(s898, TYPE_NAME) = <reduce, type_specifier -> enum_specifier>
action(s899, '(') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, ')') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, '*') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, ',') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, '[') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'auto') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'char') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'const') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'double') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'enum') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'extern') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'float') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'int') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'long') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'register') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'short') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'signed') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'static') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'struct') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'typedef') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'union') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'unsigned') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'void') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, 'volatile') = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, IDENTIFIER) = <reduce, type_specifier -> struct_or_union_specifier>
action(s899, TYPE_NAME) = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, '(') = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, ')') = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, '*') = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, '[') = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, 'char') = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, 'const') = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, 'double') = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, 'enum') = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, 'float') = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, 'int') = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, 'long') = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, 'short') = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, 'signed') = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, 'struct') = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, 'union') = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, 'unsigned') = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, 'void') = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, 'volatile') = <reduce, type_specifier -> struct_or_union_specifier>
action(s900, TYPE_NAME) = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, '(') = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, '*') = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, ':') = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, 'char') = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, 'const') = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, 'double') = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, 'enum') = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, 'float') = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, 'int') = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, 'long') = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, 'short') = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, 'signed') = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, 'struct') = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, 'union') = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, 'unsigned') = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, 'void') = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, 'volatile') = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, IDENTIFIER) = <reduce, type_specifier -> struct_or_union_specifier>
action(s901, TYPE_NAME) = <reduce, type_specifier -> struct_or_union_specifier>
action(s902, '!=') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '%') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '%=') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '&&') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '&') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '&=') = <reduce, unary_expression -> '++' unary_expression>
action(s902, ')') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '*') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '*=') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '+') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '+=') = <reduce, unary_expression -> '++' unary_expression>
action(s902, ',') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '-') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '-=') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '/') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '/=') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '<') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '<<') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '<<=') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '<=') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '=') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '==') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '>') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '>=') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '>>') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '>>=') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '?') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '^') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '^=') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '|') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '|=') = <reduce, unary_expression -> '++' unary_expression>
action(s902, '||') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '!=') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '%') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '%=') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '&&') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '&') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '&=') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '*') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '*=') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '+') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '+=') = <reduce, unary_expression -> '++' unary_expression>
action(s903, ',') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '-') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '-=') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '/') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '/=') = <reduce, unary_expression -> '++' unary_expression>
action(s903, ':') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '<') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '<<') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '<<=') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '<=') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '=') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '==') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '>') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '>=') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '>>') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '>>=') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '?') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '^') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '^=') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '|') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '|=') = <reduce, unary_expression -> '++' unary_expression>
action(s903, '||') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '!=') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '%') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '%=') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '&&') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '&') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '&=') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '*') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '*=') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '+') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '+=') = <reduce, unary_expression -> '++' unary_expression>
action(s904, ',') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '-') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '-=') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '/') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '/=') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '<') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '<<') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '<<=') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '<=') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '=') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '==') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '>') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '>=') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '>>') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '>>=') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '?') = <reduce, unary_expression -> '++' unary_expression>
action(s904, ']') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '^') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '^=') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '|') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '|=') = <reduce, unary_expression -> '++' unary_expression>
action(s904, '||') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '!=') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '%') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '&&') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '&') = <reduce, unary_expression -> '++' unary_expression>
action(s905, ')') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '*') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '+') = <reduce, unary_expression -> '++' unary_expression>
action(s905, ',') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '-') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '/') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '<') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '<<') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '<=') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '==') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '>') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '>=') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '>>') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '?') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '^') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '|') = <reduce, unary_expression -> '++' unary_expression>
action(s905, '||') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '!=') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '%') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '&&') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '&') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '*') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '+') = <reduce, unary_expression -> '++' unary_expression>
action(s906, ',') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '-') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '/') = <reduce, unary_expression -> '++' unary_expression>
action(s906, ':') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '<') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '<<') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '<=') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '==') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '>') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '>=') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '>>') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '?') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '^') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '|') = <reduce, unary_expression -> '++' unary_expression>
action(s906, '||') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '!=') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '%') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '&&') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '&') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '*') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '+') = <reduce, unary_expression -> '++' unary_expression>
action(s907, ',') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '-') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '/') = <reduce, unary_expression -> '++' unary_expression>
action(s907, ';') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '<') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '<<') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '<=') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '==') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '>') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '>=') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '>>') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '?') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '^') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '|') = <reduce, unary_expression -> '++' unary_expression>
action(s907, '||') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '!=') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '%') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '&&') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '&') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '*') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '+') = <reduce, unary_expression -> '++' unary_expression>
action(s908, ',') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '-') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '/') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '<') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '<<') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '<=') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '==') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '>') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '>=') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '>>') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '?') = <reduce, unary_expression -> '++' unary_expression>
action(s908, ']') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '^') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '|') = <reduce, unary_expression -> '++' unary_expression>
action(s908, '||') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '!=') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '%') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '&&') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '&') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '*') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '+') = <reduce, unary_expression -> '++' unary_expression>
action(s909, ',') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '-') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '/') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '<') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '<<') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '<=') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '==') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '>') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '>=') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '>>') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '?') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '^') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '|') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '||') = <reduce, unary_expression -> '++' unary_expression>
action(s909, '}') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '!=') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '%') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '&&') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '&') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '*') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '+') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '-') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '/') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '<') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '<<') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '<=') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '==') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '>') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '>=') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '>>') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '?') = <reduce, unary_expression -> '++' unary_expression>
action(s910, ']') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '^') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '|') = <reduce, unary_expression -> '++' unary_expression>
action(s910, '||') = <reduce, unary_expression -> '++' unary_expression>
action(s911, '!=') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '%') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '%=') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '&&') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '&') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '&=') = <reduce, unary_expression -> '--' unary_expression>
action(s911, ')') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '*') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '*=') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '+') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '+=') = <reduce, unary_expression -> '--' unary_expression>
action(s911, ',') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '-') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '-=') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '/') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '/=') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '<') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '<<') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '<<=') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '<=') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '=') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '==') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '>') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '>=') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '>>') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '>>=') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '?') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '^') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '^=') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '|') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '|=') = <reduce, unary_expression -> '--' unary_expression>
action(s911, '||') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '!=') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '%') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '%=') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '&&') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '&') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '&=') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '*') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '*=') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '+') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '+=') = <reduce, unary_expression -> '--' unary_expression>
action(s912, ',') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '-') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '-=') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '/') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '/=') = <reduce, unary_expression -> '--' unary_expression>
action(s912, ':') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '<') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '<<') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '<<=') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '<=') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '=') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '==') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '>') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '>=') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '>>') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '>>=') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '?') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '^') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '^=') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '|') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '|=') = <reduce, unary_expression -> '--' unary_expression>
action(s912, '||') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '!=') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '%') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '%=') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '&&') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '&') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '&=') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '*') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '*=') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '+') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '+=') = <reduce, unary_expression -> '--' unary_expression>
action(s913, ',') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '-') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '-=') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '/') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '/=') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '<') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '<<') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '<<=') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '<=') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '=') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '==') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '>') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '>=') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '>>') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '>>=') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '?') = <reduce, unary_expression -> '--' unary_expression>
action(s913, ']') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '^') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '^=') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '|') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '|=') = <reduce, unary_expression -> '--' unary_expression>
action(s913, '||') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '!=') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '%') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '&&') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '&') = <reduce, unary_expression -> '--' unary_expression>
action(s914, ')') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '*') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '+') = <reduce, unary_expression -> '--' unary_expression>
action(s914, ',') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '-') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '/') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '<') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '<<') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '<=') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '==') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '>') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '>=') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '>>') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '?') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '^') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '|') = <reduce, unary_expression -> '--' unary_expression>
action(s914, '||') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '!=') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '%') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '&&') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '&') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '*') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '+') = <reduce, unary_expression -> '--' unary_expression>
action(s915, ',') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '-') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '/') = <reduce, unary_expression -> '--' unary_expression>
action(s915, ':') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '<') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '<<') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '<=') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '==') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '>') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '>=') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '>>') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '?') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '^') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '|') = <reduce, unary_expression -> '--' unary_expression>
action(s915, '||') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '!=') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '%') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '&&') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '&') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '*') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '+') = <reduce, unary_expression -> '--' unary_expression>
action(s916, ',') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '-') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '/') = <reduce, unary_expression -> '--' unary_expression>
action(s916, ';') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '<') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '<<') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '<=') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '==') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '>') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '>=') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '>>') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '?') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '^') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '|') = <reduce, unary_expression -> '--' unary_expression>
action(s916, '||') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '!=') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '%') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '&&') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '&') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '*') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '+') = <reduce, unary_expression -> '--' unary_expression>
action(s917, ',') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '-') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '/') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '<') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '<<') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '<=') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '==') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '>') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '>=') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '>>') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '?') = <reduce, unary_expression -> '--' unary_expression>
action(s917, ']') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '^') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '|') = <reduce, unary_expression -> '--' unary_expression>
action(s917, '||') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '!=') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '%') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '&&') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '&') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '*') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '+') = <reduce, unary_expression -> '--' unary_expression>
action(s918, ',') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '-') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '/') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '<') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '<<') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '<=') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '==') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '>') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '>=') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '>>') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '?') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '^') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '|') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '||') = <reduce, unary_expression -> '--' unary_expression>
action(s918, '}') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '!=') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '%') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '&&') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '&') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '*') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '+') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '-') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '/') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '<') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '<<') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '<=') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '==') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '>') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '>=') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '>>') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '?') = <reduce, unary_expression -> '--' unary_expression>
action(s919, ']') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '^') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '|') = <reduce, unary_expression -> '--' unary_expression>
action(s919, '||') = <reduce, unary_expression -> '--' unary_expression>
action(s920, ')') = <shift, s929>
action(s921, ')') = <shift, s930>
action(s922, ')') = <shift, s931>
action(s923, ')') = <shift, s932>
action(s924, ')') = <shift, s933>
action(s925, ')') = <shift, s934>
action(s926, ')') = <shift, s935>
action(s927, ')') = <shift, s936>
action(s928, ')') = <shift, s937>
action(s929, '!=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '%') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '%=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '&&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '&=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, ')') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '*') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '*=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '+') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '+=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, ',') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '-') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '-=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '/') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '/=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '<<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '<<=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '<=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '==') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '>=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '>>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '>>=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '?') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '^') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '^=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '|') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '|=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s929, '||') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '!=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '%') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '%=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '&&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '&=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '*') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '*=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '+') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '+=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, ',') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '-') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '-=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '/') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '/=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, ':') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '<<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '<<=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '<=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '==') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '>=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '>>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '>>=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '?') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '^') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '^=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '|') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '|=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s930, '||') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '!=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '%') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '%=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '&&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '&=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '*') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '*=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '+') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '+=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, ',') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '-') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '-=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '/') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '/=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '<<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '<<=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '<=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '==') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '>=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '>>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '>>=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '?') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, ']') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '^') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '^=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '|') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '|=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s931, '||') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '!=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '%') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '&&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, ')') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '*') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '+') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, ',') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '-') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '/') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '<<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '<=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '==') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '>=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '>>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '?') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '^') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '|') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s932, '||') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '!=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '%') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '&&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '*') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '+') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, ',') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '-') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '/') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, ':') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '<<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '<=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '==') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '>=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '>>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '?') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '^') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '|') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s933, '||') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '!=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '%') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '&&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '*') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '+') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, ',') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '-') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '/') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, ';') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '<<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '<=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '==') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '>=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '>>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '?') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '^') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '|') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s934, '||') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '!=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '%') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '&&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '*') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '+') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, ',') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '-') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '/') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '<<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '<=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '==') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '>=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '>>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '?') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, ']') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '^') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '|') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s935, '||') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '!=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '%') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '&&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '*') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '+') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, ',') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '-') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '/') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '<<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '<=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '==') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '>=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '>>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '?') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '^') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '|') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '||') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s936, '}') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '!=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '%') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '&&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '&') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '*') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '+') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '-') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '/') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '<<') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '<=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '==') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '>=') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '>>') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '?') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, ']') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '^') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '|') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s937, '||') = <reduce, unary_expression -> 'sizeof' '(' type_name ')'>
action(s938, '!=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '%') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '%=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '&&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '&=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, ')') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '*') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '*=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '+') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '+=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, ',') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '-') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '-=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '/') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '/=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '<<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '<<=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '<=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '==') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '>=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '>>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '>>=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '?') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '^') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '^=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '|') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '|=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s938, '||') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '!=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '%') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '%=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '&&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '&=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '*') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '*=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '+') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '+=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, ',') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '-') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '-=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '/') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '/=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, ':') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '<<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '<<=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '<=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '==') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '>=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '>>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '>>=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '?') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '^') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '^=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '|') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '|=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s939, '||') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '!=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '%') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '%=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '&&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '&=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '*') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '*=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '+') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '+=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, ',') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '-') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '-=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '/') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '/=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '<<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '<<=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '<=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '==') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '>=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '>>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '>>=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '?') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, ']') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '^') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '^=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '|') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '|=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s940, '||') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '!=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '%') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '&&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, ')') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '*') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '+') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, ',') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '-') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '/') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '<<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '<=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '==') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '>=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '>>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '?') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '^') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '|') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s941, '||') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '!=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '%') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '&&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '*') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '+') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, ',') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '-') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '/') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, ':') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '<<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '<=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '==') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '>=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '>>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '?') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '^') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '|') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s942, '||') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '!=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '%') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '&&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '*') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '+') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, ',') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '-') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '/') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, ';') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '<<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '<=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '==') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '>=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '>>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '?') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '^') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '|') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s943, '||') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '!=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '%') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '&&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '*') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '+') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, ',') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '-') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '/') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '<<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '<=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '==') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '>=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '>>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '?') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, ']') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '^') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '|') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s944, '||') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '!=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '%') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '&&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '*') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '+') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, ',') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '-') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '/') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '<<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '<=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '==') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '>=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '>>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '?') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '^') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '|') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '||') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s945, '}') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '!=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '%') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '&&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '&') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '*') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '+') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '-') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '/') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '<<') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '<=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '==') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '>=') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '>>') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '?') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, ']') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '^') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '|') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s946, '||') = <reduce, unary_expression -> 'sizeof' unary_expression>
action(s947, '!=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '%') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '%=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '&&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '&=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, ')') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '*') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '*=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '+') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '+=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, ',') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '-') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '-=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '/') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '/=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '<<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '<<=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '<=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '==') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '>=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '>>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '>>=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '?') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '^') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '^=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '|') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '|=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s947, '||') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '!=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '%') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '%=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '&&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '&=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '*') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '*=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '+') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '+=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, ',') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '-') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '-=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '/') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '/=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, ':') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '<<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '<<=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '<=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '==') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '>=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '>>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '>>=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '?') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '^') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '^=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '|') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '|=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s948, '||') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '!=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '%') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '%=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '&&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '&=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '*') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '*=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '+') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '+=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, ',') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '-') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '-=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '/') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '/=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '<<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '<<=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '<=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '==') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '>=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '>>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '>>=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '?') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, ']') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '^') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '^=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '|') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '|=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s949, '||') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '!=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '%') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '&&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, ')') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '*') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '+') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, ',') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '-') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '/') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '<<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '<=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '==') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '>=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '>>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '?') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '^') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '|') = <reduce, unary_expression -> unary_operator cast_expression>
action(s950, '||') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '!=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '%') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '&&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '*') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '+') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, ',') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '-') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '/') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, ':') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '<<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '<=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '==') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '>=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '>>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '?') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '^') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '|') = <reduce, unary_expression -> unary_operator cast_expression>
action(s951, '||') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '!=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '%') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '&&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '*') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '+') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, ',') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '-') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '/') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, ';') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '<<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '<=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '==') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '>=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '>>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '?') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '^') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '|') = <reduce, unary_expression -> unary_operator cast_expression>
action(s952, '||') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '!=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '%') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '&&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '*') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '+') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, ',') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '-') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '/') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '<<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '<=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '==') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '>=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '>>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '?') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, ']') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '^') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '|') = <reduce, unary_expression -> unary_operator cast_expression>
action(s953, '||') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '!=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '%') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '&&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '*') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '+') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, ',') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '-') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '/') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '<<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '<=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '==') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '>=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '>>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '?') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '^') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '|') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '||') = <reduce, unary_expression -> unary_operator cast_expression>
action(s954, '}') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '!=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '%') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '&&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '&') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '*') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '+') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '-') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '/') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '<<') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '<=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '==') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '>=') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '>>') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '?') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, ']') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '^') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '|') = <reduce, unary_expression -> unary_operator cast_expression>
action(s955, '||') = <reduce, unary_expression -> unary_operator cast_expression>
action(s956, '!') = <reduce, unary_operator -> '!'>
action(s956, '&') = <reduce, unary_operator -> '!'>
action(s956, '(') = <reduce, unary_operator -> '!'>
action(s956, '*') = <reduce, unary_operator -> '!'>
action(s956, '+') = <reduce, unary_operator -> '!'>
action(s956, '++') = <reduce, unary_operator -> '!'>
action(s956, '-') = <reduce, unary_operator -> '!'>
action(s956, '--') = <reduce, unary_operator -> '!'>
action(s956, 'sizeof') = <reduce, unary_operator -> '!'>
action(s956, '~') = <reduce, unary_operator -> '!'>
action(s956, CONSTANT) = <reduce, unary_operator -> '!'>
action(s956, IDENTIFIER) = <reduce, unary_operator -> '!'>
action(s956, STRING_LITERAL) = <reduce, unary_operator -> '!'>
action(s957, '!') = <reduce, unary_operator -> '&'>
action(s957, '&') = <reduce, unary_operator -> '&'>
action(s957, '(') = <reduce, unary_operator -> '&'>
action(s957, '*') = <reduce, unary_operator -> '&'>
action(s957, '+') = <reduce, unary_operator -> '&'>
action(s957, '++') = <reduce, unary_operator -> '&'>
action(s957, '-') = <reduce, unary_operator -> '&'>
action(s957, '--') = <reduce, unary_operator -> '&'>
action(s957, 'sizeof') = <reduce, unary_operator -> '&'>
action(s957, '~') = <reduce, unary_operator -> '&'>
action(s957, CONSTANT) = <reduce, unary_operator -> '&'>
action(s957, IDENTIFIER) = <reduce, unary_operator -> '&'>
action(s957, STRING_LITERAL) = <reduce, unary_operator -> '&'>
action(s958, '!') = <reduce, unary_operator -> '*'>
action(s958, '&') = <reduce, unary_operator -> '*'>
action(s958, '(') = <reduce, unary_operator -> '*'>
action(s958, '*') = <reduce, unary_operator -> '*'>
action(s958, '+') = <reduce, unary_operator -> '*'>
action(s958, '++') = <reduce, unary_operator -> '*'>
action(s958, '-') = <reduce, unary_operator -> '*'>
action(s958, '--') = <reduce, unary_operator -> '*'>
action(s958, 'sizeof') = <reduce, unary_operator -> '*'>
action(s958, '~') = <reduce, unary_operator -> '*'>
action(s958, CONSTANT) = <reduce, unary_operator -> '*'>
action(s958, IDENTIFIER) = <reduce, unary_operator -> '*'>
action(s958, STRING_LITERAL) = <reduce, unary_operator -> '*'>
action(s959, '!') = <reduce, unary_operator -> '+'>
action(s959, '&') = <reduce, unary_operator -> '+'>
action(s959, '(') = <reduce, unary_operator -> '+'>
action(s959, '*') = <reduce, unary_operator -> '+'>
action(s959, '+') = <reduce, unary_operator -> '+'>
action(s959, '++') = <reduce, unary_operator -> '+'>
action(s959, '-') = <reduce, unary_operator -> '+'>
action(s959, '--') = <reduce, unary_operator -> '+'>
action(s959, 'sizeof') = <reduce, unary_operator -> '+'>
action(s959, '~') = <reduce, unary_operator -> '+'>
action(s959, CONSTANT) = <reduce, unary_operator -> '+'>
action(s959, IDENTIFIER) = <reduce, unary_operator -> '+'>
action(s959, STRING_LITERAL) = <reduce, unary_operator -> '+'>
action(s960, '!') = <reduce, unary_operator -> '-'>
action(s960, '&') = <reduce, unary_operator -> '-'>
action(s960, '(') = <reduce, unary_operator -> '-'>
action(s960, '*') = <reduce, unary_operator -> '-'>
action(s960, '+') = <reduce, unary_operator -> '-'>
action(s960, '++') = <reduce, unary_operator -> '-'>
action(s960, '-') = <reduce, unary_operator -> '-'>
action(s960, '--') = <reduce, unary_operator -> '-'>
action(s960, 'sizeof') = <reduce, unary_operator -> '-'>
action(s960, '~') = <reduce, unary_operator -> '-'>
action(s960, CONSTANT) = <reduce, unary_operator -> '-'>
action(s960, IDENTIFIER) = <reduce, unary_operator -> '-'>
action(s960, STRING_LITERAL) = <reduce, unary_operator -> '-'>
action(s961, '!') = <reduce, unary_operator -> '~'>
action(s961, '&') = <reduce, unary_operator -> '~'>
action(s961, '(') = <reduce, unary_operator -> '~'>
action(s961, '*') = <reduce, unary_operator -> '~'>
action(s961, '+') = <reduce, unary_operator -> '~'>
action(s961, '++') = <reduce, unary_operator -> '~'>
action(s961, '-') = <reduce, unary_operator -> '~'>
action(s961, '--') = <reduce, unary_operator -> '~'>
action(s961, 'sizeof') = <reduce, unary_operator -> '~'>
action(s961, '~') = <reduce, unary_operator -> '~'>
action(s961, CONSTANT) = <reduce, unary_operator -> '~'>
action(s961, IDENTIFIER) = <reduce, unary_operator -> '~'>
action(s961, STRING_LITERAL) = <reduce, unary_operator -> '~'>

Goto Table:
goto(s0, primary_expression) = s1
goto(s0, '(') = s46
goto(s0, CONSTANT) = s751
goto(s0, IDENTIFIER) = s761
goto(s0, STRING_LITERAL) = s771
goto(s2, abstract_declarator) = s383
goto(s2, declaration_specifiers) = s6
goto(s2, declarator) = s409
goto(s2, direct_abstract_declarator) = s7
goto(s2, direct_declarator) = s373
goto(s2, enum_specifier) = s896
goto(s2, parameter_declaration) = s595
goto(s2, parameter_list) = s596
goto(s2, parameter_type_list) = s387
goto(s2, pointer) = s9
goto(s2, storage_class_specifier) = s357
goto(s2, struct_or_union) = s831
goto(s2, struct_or_union_specifier) = s899
goto(s2, type_qualifier) = s358
goto(s2, type_specifier) = s359
goto(s2, '(') = s3
goto(s2, ')') = s381
goto(s2, '*') = s603
goto(s2, '[') = s151
goto(s2, 'auto') = s815
goto(s2, 'char') = s866
goto(s2, 'const') = s844
goto(s2, 'double') = s869
goto(s2, 'enum') = s458
goto(s2, 'extern') = s816
goto(s2, 'float') = s872
goto(s2, 'int') = s875
goto(s2, 'long') = s878
goto(s2, 'register') = s817
goto(s2, 'short') = s881
goto(s2, 'signed') = s884
goto(s2, 'static') = s818
goto(s2, 'struct') = s829
goto(s2, 'typedef') = s819
goto(s2, 'union') = s830
goto(s2, 'unsigned') = s887
goto(s2, 'void') = s890
goto(s2, 'volatile') = s851
goto(s2, IDENTIFIER) = s416
goto(s2, TYPE_NAME) = s893
goto(s3, abstract_declarator) = s384
goto(s3, declaration_specifiers) = s6
goto(s3, declarator) = s410
goto(s3, direct_abstract_declarator) = s7
goto(s3, direct_declarator) = s373
goto(s3, enum_specifier) = s896
goto(s3, parameter_declaration) = s595
goto(s3, parameter_list) = s596
goto(s3, parameter_type_list) = s388
goto(s3, pointer) = s9
goto(s3, storage_class_specifier) = s357
goto(s3, struct_or_union) = s831
goto(s3, struct_or_union_specifier) = s899
goto(s3, type_qualifier) = s358
goto(s3, type_specifier) = s359
goto(s3, '(') = s3
goto(s3, ')') = s382
goto(s3, '*') = s603
goto(s3, '[') = s151
goto(s3, 'auto') = s815
goto(s3, 'char') = s866
goto(s3, 'const') = s844
goto(s3, 'double') = s869
goto(s3, 'enum') = s458
goto(s3, 'extern') = s816
goto(s3, 'float') = s872
goto(s3, 'int') = s875
goto(s3, 'long') = s878
goto(s3, 'register') = s817
goto(s3, 'short') = s881
goto(s3, 'signed') = s884
goto(s3, 'static') = s818
goto(s3, 'struct') = s829
goto(s3, 'typedef') = s819
goto(s3, 'union') = s830
goto(s3, 'unsigned') = s887
goto(s3, 'void') = s890
goto(s3, 'volatile') = s851
goto(s3, IDENTIFIER) = s416
goto(s3, TYPE_NAME) = s893
goto(s4, abstract_declarator) = s384
goto(s4, declaration_specifiers) = s6
goto(s4, direct_abstract_declarator) = s7
goto(s4, enum_specifier) = s896
goto(s4, parameter_declaration) = s595
goto(s4, parameter_list) = s596
goto(s4, parameter_type_list) = s388
goto(s4, pointer) = s10
goto(s4, storage_class_specifier) = s357
goto(s4, struct_or_union) = s831
goto(s4, struct_or_union_specifier) = s899
goto(s4, type_qualifier) = s358
goto(s4, type_specifier) = s359
goto(s4, '(') = s4
goto(s4, ')') = s382
goto(s4, '*') = s601
goto(s4, '[') = s151
goto(s4, 'auto') = s815
goto(s4, 'char') = s866
goto(s4, 'const') = s844
goto(s4, 'double') = s869
goto(s4, 'enum') = s458
goto(s4, 'extern') = s816
goto(s4, 'float') = s872
goto(s4, 'int') = s875
goto(s4, 'long') = s878
goto(s4, 'register') = s817
goto(s4, 'short') = s881
goto(s4, 'signed') = s884
goto(s4, 'static') = s818
goto(s4, 'struct') = s829
goto(s4, 'typedef') = s819
goto(s4, 'union') = s830
goto(s4, 'unsigned') = s887
goto(s4, 'void') = s890
goto(s4, 'volatile') = s851
goto(s4, TYPE_NAME) = s893
goto(s5, abstract_declarator) = s843
goto(s5, direct_abstract_declarator) = s7
goto(s5, pointer) = s10
goto(s5, '(') = s4
goto(s5, '*') = s601
goto(s5, '[') = s151
goto(s6, abstract_declarator) = s593
goto(s6, declarator) = s594
goto(s6, direct_abstract_declarator) = s8
goto(s6, direct_declarator) = s374
goto(s6, pointer) = s11
goto(s6, '(') = s2
goto(s6, '*') = s599
goto(s6, '[') = s150
goto(s6, IDENTIFIER) = s415
goto(s7, '(') = s361
goto(s7, '[') = s153
goto(s8, '(') = s360
goto(s8, '[') = s152
goto(s9, direct_abstract_declarator) = s12
goto(s9, direct_declarator) = s378
goto(s9, '(') = s3
goto(s9, '[') = s151
goto(s9, IDENTIFIER) = s416
goto(s10, direct_abstract_declarator) = s12
goto(s10, '(') = s4
goto(s10, '[') = s151
goto(s11, direct_abstract_declarator) = s13
goto(s11, direct_declarator) = s379
goto(s11, '(') = s2
goto(s11, '[') = s150
goto(s11, IDENTIFIER) = s415
goto(s12, '(') = s361
goto(s12, '[') = s153
goto(s13, '(') = s360
goto(s13, '[') = s152
goto(s14, additive_expression) = s170
goto(s14, and_expression) = s218
goto(s14, argument_expression_list) = s242
goto(s14, assignment_expression) = s252
goto(s14, cast_expression) = s569
goto(s14, conditional_expression) = s253
goto(s14, equality_expression) = s236
goto(s14, exclusive_or_expression) = s505
goto(s14, inclusive_or_expression) = s545
goto(s14, logical_and_expression) = s557
goto(s14, logical_or_expression) = s336
goto(s14, multiplicative_expression) = s212
goto(s14, postfix_expression) = s642
goto(s14, primary_expression) = s732
goto(s14, relational_expression) = s499
goto(s14, shift_expression) = s805
goto(s14, unary_expression) = s256
goto(s14, unary_operator) = s274
goto(s14, '!') = s956
goto(s14, '&') = s957
goto(s14, '(') = s28
goto(s14, ')') = s651
goto(s14, '*') = s958
goto(s14, '+') = s959
goto(s14, '++') = s615
goto(s14, '-') = s960
goto(s14, '--') = s616
goto(s14, 'sizeof') = s617
goto(s14, '~') = s961
goto(s14, CONSTANT) = s752
goto(s14, IDENTIFIER) = s762
goto(s14, STRING_LITERAL) = s772
goto(s15, additive_expression) = s170
goto(s15, and_expression) = s218
goto(s15, argument_expression_list) = s243
goto(s15, assignment_expression) = s252
goto(s15, cast_expression) = s569
goto(s15, conditional_expression) = s253
goto(s15, equality_expression) = s236
goto(s15, exclusive_or_expression) = s505
goto(s15, inclusive_or_expression) = s545
goto(s15, logical_and_expression) = s557
goto(s15, logical_or_expression) = s336
goto(s15, multiplicative_expression) = s212
goto(s15, postfix_expression) = s642
goto(s15, primary_expression) = s732
goto(s15, relational_expression) = s499
goto(s15, shift_expression) = s805
goto(s15, unary_expression) = s256
goto(s15, unary_operator) = s274
goto(s15, '!') = s956
goto(s15, '&') = s957
goto(s15, '(') = s28
goto(s15, ')') = s652
goto(s15, '*') = s958
goto(s15, '+') = s959
goto(s15, '++') = s615
goto(s15, '-') = s960
goto(s15, '--') = s616
goto(s15, 'sizeof') = s617
goto(s15, '~') = s961
goto(s15, CONSTANT) = s752
goto(s15, IDENTIFIER) = s762
goto(s15, STRING_LITERAL) = s772
goto(s16, additive_expression) = s170
goto(s16, and_expression) = s218
goto(s16, argument_expression_list) = s244
goto(s16, assignment_expression) = s252
goto(s16, cast_expression) = s569
goto(s16, conditional_expression) = s253
goto(s16, equality_expression) = s236
goto(s16, exclusive_or_expression) = s505
goto(s16, inclusive_or_expression) = s545
goto(s16, logical_and_expression) = s557
goto(s16, logical_or_expression) = s336
goto(s16, multiplicative_expression) = s212
goto(s16, postfix_expression) = s642
goto(s16, primary_expression) = s732
goto(s16, relational_expression) = s499
goto(s16, shift_expression) = s805
goto(s16, unary_expression) = s256
goto(s16, unary_operator) = s274
goto(s16, '!') = s956
goto(s16, '&') = s957
goto(s16, '(') = s28
goto(s16, ')') = s653
goto(s16, '*') = s958
goto(s16, '+') = s959
goto(s16, '++') = s615
goto(s16, '-') = s960
goto(s16, '--') = s616
goto(s16, 'sizeof') = s617
goto(s16, '~') = s961
goto(s16, CONSTANT) = s752
goto(s16, IDENTIFIER) = s762
goto(s16, STRING_LITERAL) = s772
goto(s17, additive_expression) = s170
goto(s17, and_expression) = s218
goto(s17, argument_expression_list) = s245
goto(s17, assignment_expression) = s252
goto(s17, cast_expression) = s569
goto(s17, conditional_expression) = s253
goto(s17, equality_expression) = s236
goto(s17, exclusive_or_expression) = s505
goto(s17, inclusive_or_expression) = s545
goto(s17, logical_and_expression) = s557
goto(s17, logical_or_expression) = s336
goto(s17, multiplicative_expression) = s212
goto(s17, postfix_expression) = s642
goto(s17, primary_expression) = s732
goto(s17, relational_expression) = s499
goto(s17, shift_expression) = s805
goto(s17, unary_expression) = s256
goto(s17, unary_operator) = s274
goto(s17, '!') = s956
goto(s17, '&') = s957
goto(s17, '(') = s28
goto(s17, ')') = s654
goto(s17, '*') = s958
goto(s17, '+') = s959
goto(s17, '++') = s615
goto(s17, '-') = s960
goto(s17, '--') = s616
goto(s17, 'sizeof') = s617
goto(s17, '~') = s961
goto(s17, CONSTANT) = s752
goto(s17, IDENTIFIER) = s762
goto(s17, STRING_LITERAL) = s772
goto(s18, additive_expression) = s170
goto(s18, and_expression) = s218
goto(s18, argument_expression_list) = s246
goto(s18, assignment_expression) = s252
goto(s18, cast_expression) = s569
goto(s18, conditional_expression) = s253
goto(s18, equality_expression) = s236
goto(s18, exclusive_or_expression) = s505
goto(s18, inclusive_or_expression) = s545
goto(s18, logical_and_expression) = s557
goto(s18, logical_or_expression) = s336
goto(s18, multiplicative_expression) = s212
goto(s18, postfix_expression) = s642
goto(s18, primary_expression) = s732
goto(s18, relational_expression) = s499
goto(s18, shift_expression) = s805
goto(s18, unary_expression) = s256
goto(s18, unary_operator) = s274
goto(s18, '!') = s956
goto(s18, '&') = s957
goto(s18, '(') = s28
goto(s18, ')') = s655
goto(s18, '*') = s958
goto(s18, '+') = s959
goto(s18, '++') = s615
goto(s18, '-') = s960
goto(s18, '--') = s616
goto(s18, 'sizeof') = s617
goto(s18, '~') = s961
goto(s18, CONSTANT) = s752
goto(s18, IDENTIFIER) = s762
goto(s18, STRING_LITERAL) = s772
goto(s19, additive_expression) = s170
goto(s19, and_expression) = s218
goto(s19, argument_expression_list) = s247
goto(s19, assignment_expression) = s252
goto(s19, cast_expression) = s569
goto(s19, conditional_expression) = s253
goto(s19, equality_expression) = s236
goto(s19, exclusive_or_expression) = s505
goto(s19, inclusive_or_expression) = s545
goto(s19, logical_and_expression) = s557
goto(s19, logical_or_expression) = s336
goto(s19, multiplicative_expression) = s212
goto(s19, postfix_expression) = s642
goto(s19, primary_expression) = s732
goto(s19, relational_expression) = s499
goto(s19, shift_expression) = s805
goto(s19, unary_expression) = s256
goto(s19, unary_operator) = s274
goto(s19, '!') = s956
goto(s19, '&') = s957
goto(s19, '(') = s28
goto(s19, ')') = s656
goto(s19, '*') = s958
goto(s19, '+') = s959
goto(s19, '++') = s615
goto(s19, '-') = s960
goto(s19, '--') = s616
goto(s19, 'sizeof') = s617
goto(s19, '~') = s961
goto(s19, CONSTANT) = s752
goto(s19, IDENTIFIER) = s762
goto(s19, STRING_LITERAL) = s772
goto(s20, additive_expression) = s170
goto(s20, and_expression) = s218
goto(s20, argument_expression_list) = s248
goto(s20, assignment_expression) = s252
goto(s20, cast_expression) = s569
goto(s20, conditional_expression) = s253
goto(s20, equality_expression) = s236
goto(s20, exclusive_or_expression) = s505
goto(s20, inclusive_or_expression) = s545
goto(s20, logical_and_expression) = s557
goto(s20, logical_or_expression) = s336
goto(s20, multiplicative_expression) = s212
goto(s20, postfix_expression) = s642
goto(s20, primary_expression) = s732
goto(s20, relational_expression) = s499
goto(s20, shift_expression) = s805
goto(s20, unary_expression) = s256
goto(s20, unary_operator) = s274
goto(s20, '!') = s956
goto(s20, '&') = s957
goto(s20, '(') = s28
goto(s20, ')') = s657
goto(s20, '*') = s958
goto(s20, '+') = s959
goto(s20, '++') = s615
goto(s20, '-') = s960
goto(s20, '--') = s616
goto(s20, 'sizeof') = s617
goto(s20, '~') = s961
goto(s20, CONSTANT) = s752
goto(s20, IDENTIFIER) = s762
goto(s20, STRING_LITERAL) = s772
goto(s21, additive_expression) = s170
goto(s21, and_expression) = s218
goto(s21, argument_expression_list) = s249
goto(s21, assignment_expression) = s252
goto(s21, cast_expression) = s569
goto(s21, conditional_expression) = s253
goto(s21, equality_expression) = s236
goto(s21, exclusive_or_expression) = s505
goto(s21, inclusive_or_expression) = s545
goto(s21, logical_and_expression) = s557
goto(s21, logical_or_expression) = s336
goto(s21, multiplicative_expression) = s212
goto(s21, postfix_expression) = s642
goto(s21, primary_expression) = s732
goto(s21, relational_expression) = s499
goto(s21, shift_expression) = s805
goto(s21, unary_expression) = s256
goto(s21, unary_operator) = s274
goto(s21, '!') = s956
goto(s21, '&') = s957
goto(s21, '(') = s28
goto(s21, ')') = s658
goto(s21, '*') = s958
goto(s21, '+') = s959
goto(s21, '++') = s615
goto(s21, '-') = s960
goto(s21, '--') = s616
goto(s21, 'sizeof') = s617
goto(s21, '~') = s961
goto(s21, CONSTANT) = s752
goto(s21, IDENTIFIER) = s762
goto(s21, STRING_LITERAL) = s772
goto(s22, additive_expression) = s170
goto(s22, and_expression) = s218
goto(s22, argument_expression_list) = s250
goto(s22, assignment_expression) = s252
goto(s22, cast_expression) = s569
goto(s22, conditional_expression) = s253
goto(s22, equality_expression) = s236
goto(s22, exclusive_or_expression) = s505
goto(s22, inclusive_or_expression) = s545
goto(s22, logical_and_expression) = s557
goto(s22, logical_or_expression) = s336
goto(s22, multiplicative_expression) = s212
goto(s22, postfix_expression) = s642
goto(s22, primary_expression) = s732
goto(s22, relational_expression) = s499
goto(s22, shift_expression) = s805
goto(s22, unary_expression) = s256
goto(s22, unary_operator) = s274
goto(s22, '!') = s956
goto(s22, '&') = s957
goto(s22, '(') = s28
goto(s22, ')') = s659
goto(s22, '*') = s958
goto(s22, '+') = s959
goto(s22, '++') = s615
goto(s22, '-') = s960
goto(s22, '--') = s616
goto(s22, 'sizeof') = s617
goto(s22, '~') = s961
goto(s22, CONSTANT) = s752
goto(s22, IDENTIFIER) = s762
goto(s22, STRING_LITERAL) = s772
goto(s23, additive_expression) = s170
goto(s23, and_expression) = s218
goto(s23, assignment_expression) = s251
goto(s23, cast_expression) = s569
goto(s23, conditional_expression) = s253
goto(s23, equality_expression) = s236
goto(s23, exclusive_or_expression) = s505
goto(s23, inclusive_or_expression) = s545
goto(s23, logical_and_expression) = s557
goto(s23, logical_or_expression) = s336
goto(s23, multiplicative_expression) = s212
goto(s23, postfix_expression) = s642
goto(s23, primary_expression) = s732
goto(s23, relational_expression) = s499
goto(s23, shift_expression) = s805
goto(s23, unary_expression) = s256
goto(s23, unary_operator) = s274
goto(s23, '!') = s956
goto(s23, '&') = s957
goto(s23, '(') = s28
goto(s23, '*') = s958
goto(s23, '+') = s959
goto(s23, '++') = s615
goto(s23, '-') = s960
goto(s23, '--') = s616
goto(s23, 'sizeof') = s617
goto(s23, '~') = s961
goto(s23, CONSTANT) = s752
goto(s23, IDENTIFIER) = s762
goto(s23, STRING_LITERAL) = s772
goto(s24, additive_expression) = s170
goto(s24, and_expression) = s218
goto(s24, assignment_expression) = s259
goto(s24, cast_expression) = s569
goto(s24, conditional_expression) = s253
goto(s24, equality_expression) = s236
goto(s24, exclusive_or_expression) = s505
goto(s24, inclusive_or_expression) = s545
goto(s24, logical_and_expression) = s557
goto(s24, logical_or_expression) = s336
goto(s24, multiplicative_expression) = s212
goto(s24, postfix_expression) = s642
goto(s24, primary_expression) = s732
goto(s24, relational_expression) = s499
goto(s24, shift_expression) = s805
goto(s24, unary_expression) = s256
goto(s24, unary_operator) = s274
goto(s24, '!') = s956
goto(s24, '&') = s957
goto(s24, '(') = s28
goto(s24, '*') = s958
goto(s24, '+') = s959
goto(s24, '++') = s615
goto(s24, '-') = s960
goto(s24, '--') = s616
goto(s24, 'sizeof') = s617
goto(s24, '~') = s961
goto(s24, CONSTANT) = s752
goto(s24, IDENTIFIER) = s762
goto(s24, STRING_LITERAL) = s772
goto(s25, additive_expression) = s170
goto(s25, and_expression) = s218
goto(s25, assignment_expression) = s517
goto(s25, cast_expression) = s569
goto(s25, conditional_expression) = s253
goto(s25, enum_specifier) = s897
goto(s25, equality_expression) = s236
goto(s25, exclusive_or_expression) = s505
goto(s25, expression) = s521
goto(s25, inclusive_or_expression) = s545
goto(s25, logical_and_expression) = s557
goto(s25, logical_or_expression) = s336
goto(s25, multiplicative_expression) = s212
goto(s25, postfix_expression) = s642
goto(s25, primary_expression) = s732
goto(s25, relational_expression) = s499
goto(s25, shift_expression) = s805
goto(s25, specifier_qualifier_list) = s5
goto(s25, struct_or_union) = s832
goto(s25, struct_or_union_specifier) = s900
goto(s25, type_name) = s309
goto(s25, type_qualifier) = s442
goto(s25, type_specifier) = s443
goto(s25, unary_expression) = s256
goto(s25, unary_operator) = s274
goto(s25, '!') = s956
goto(s25, '&') = s957
goto(s25, '(') = s28
goto(s25, '*') = s958
goto(s25, '+') = s959
goto(s25, '++') = s615
goto(s25, '-') = s960
goto(s25, '--') = s616
goto(s25, 'char') = s867
goto(s25, 'const') = s846
goto(s25, 'double') = s870
goto(s25, 'enum') = s459
goto(s25, 'float') = s873
goto(s25, 'int') = s876
goto(s25, 'long') = s879
goto(s25, 'short') = s882
goto(s25, 'signed') = s885
goto(s25, 'sizeof') = s617
goto(s25, 'struct') = s829
goto(s25, 'union') = s830
goto(s25, 'unsigned') = s888
goto(s25, 'void') = s891
goto(s25, 'volatile') = s853
goto(s25, '~') = s961
goto(s25, CONSTANT) = s752
goto(s25, IDENTIFIER) = s762
goto(s25, STRING_LITERAL) = s772
goto(s25, TYPE_NAME) = s894
goto(s26, additive_expression) = s170
goto(s26, and_expression) = s218
goto(s26, assignment_expression) = s517
goto(s26, cast_expression) = s569
goto(s26, conditional_expression) = s253
goto(s26, enum_specifier) = s897
goto(s26, equality_expression) = s236
goto(s26, exclusive_or_expression) = s505
goto(s26, expression) = s522
goto(s26, inclusive_or_expression) = s545
goto(s26, logical_and_expression) = s557
goto(s26, logical_or_expression) = s336
goto(s26, multiplicative_expression) = s212
goto(s26, postfix_expression) = s642
goto(s26, primary_expression) = s732
goto(s26, relational_expression) = s499
goto(s26, shift_expression) = s805
goto(s26, specifier_qualifier_list) = s5
goto(s26, struct_or_union) = s832
goto(s26, struct_or_union_specifier) = s900
goto(s26, type_name) = s310
goto(s26, type_qualifier) = s442
goto(s26, type_specifier) = s443
goto(s26, unary_expression) = s256
goto(s26, unary_operator) = s274
goto(s26, '!') = s956
goto(s26, '&') = s957
goto(s26, '(') = s28
goto(s26, '*') = s958
goto(s26, '+') = s959
goto(s26, '++') = s615
goto(s26, '-') = s960
goto(s26, '--') = s616
goto(s26, 'char') = s867
goto(s26, 'const') = s846
goto(s26, 'double') = s870
goto(s26, 'enum') = s459
goto(s26, 'float') = s873
goto(s26, 'int') = s876
goto(s26, 'long') = s879
goto(s26, 'short') = s882
goto(s26, 'signed') = s885
goto(s26, 'sizeof') = s617
goto(s26, 'struct') = s829
goto(s26, 'union') = s830
goto(s26, 'unsigned') = s888
goto(s26, 'void') = s891
goto(s26, 'volatile') = s853
goto(s26, '~') = s961
goto(s26, CONSTANT) = s752
goto(s26, IDENTIFIER) = s762
goto(s26, STRING_LITERAL) = s772
goto(s26, TYPE_NAME) = s894
goto(s27, additive_expression) = s170
goto(s27, and_expression) = s218
goto(s27, assignment_expression) = s517
goto(s27, cast_expression) = s569
goto(s27, conditional_expression) = s253
goto(s27, enum_specifier) = s897
goto(s27, equality_expression) = s236
goto(s27, exclusive_or_expression) = s505
goto(s27, expression) = s523
goto(s27, inclusive_or_expression) = s545
goto(s27, logical_and_expression) = s557
goto(s27, logical_or_expression) = s336
goto(s27, multiplicative_expression) = s212
goto(s27, postfix_expression) = s642
goto(s27, primary_expression) = s732
goto(s27, relational_expression) = s499
goto(s27, shift_expression) = s805
goto(s27, specifier_qualifier_list) = s5
goto(s27, struct_or_union) = s832
goto(s27, struct_or_union_specifier) = s900
goto(s27, type_name) = s311
goto(s27, type_qualifier) = s442
goto(s27, type_specifier) = s443
goto(s27, unary_expression) = s256
goto(s27, unary_operator) = s274
goto(s27, '!') = s956
goto(s27, '&') = s957
goto(s27, '(') = s28
goto(s27, '*') = s958
goto(s27, '+') = s959
goto(s27, '++') = s615
goto(s27, '-') = s960
goto(s27, '--') = s616
goto(s27, 'char') = s867
goto(s27, 'const') = s846
goto(s27, 'double') = s870
goto(s27, 'enum') = s459
goto(s27, 'float') = s873
goto(s27, 'int') = s876
goto(s27, 'long') = s879
goto(s27, 'short') = s882
goto(s27, 'signed') = s885
goto(s27, 'sizeof') = s617
goto(s27, 'struct') = s829
goto(s27, 'union') = s830
goto(s27, 'unsigned') = s888
goto(s27, 'void') = s891
goto(s27, 'volatile') = s853
goto(s27, '~') = s961
goto(s27, CONSTANT) = s752
goto(s27, IDENTIFIER) = s762
goto(s27, STRING_LITERAL) = s772
goto(s27, TYPE_NAME) = s894
goto(s28, additive_expression) = s170
goto(s28, and_expression) = s218
goto(s28, assignment_expression) = s517
goto(s28, cast_expression) = s569
goto(s28, conditional_expression) = s253
goto(s28, enum_specifier) = s897
goto(s28, equality_expression) = s236
goto(s28, exclusive_or_expression) = s505
goto(s28, expression) = s521
goto(s28, inclusive_or_expression) = s545
goto(s28, logical_and_expression) = s557
goto(s28, logical_or_expression) = s336
goto(s28, multiplicative_expression) = s212
goto(s28, postfix_expression) = s642
goto(s28, primary_expression) = s732
goto(s28, relational_expression) = s499
goto(s28, shift_expression) = s805
goto(s28, specifier_qualifier_list) = s5
goto(s28, struct_or_union) = s832
goto(s28, struct_or_union_specifier) = s900
goto(s28, type_name) = s312
goto(s28, type_qualifier) = s442
goto(s28, type_specifier) = s443
goto(s28, unary_expression) = s256
goto(s28, unary_operator) = s274
goto(s28, '!') = s956
goto(s28, '&') = s957
goto(s28, '(') = s28
goto(s28, '*') = s958
goto(s28, '+') = s959
goto(s28, '++') = s615
goto(s28, '-') = s960
goto(s28, '--') = s616
goto(s28, 'char') = s867
goto(s28, 'const') = s846
goto(s28, 'double') = s870
goto(s28, 'enum') = s459
goto(s28, 'float') = s873
goto(s28, 'int') = s876
goto(s28, 'long') = s879
goto(s28, 'short') = s882
goto(s28, 'signed') = s885
goto(s28, 'sizeof') = s617
goto(s28, 'struct') = s829
goto(s28, 'union') = s830
goto(s28, 'unsigned') = s888
goto(s28, 'void') = s891
goto(s28, 'volatile') = s853
goto(s28, '~') = s961
goto(s28, CONSTANT) = s752
goto(s28, IDENTIFIER) = s762
goto(s28, STRING_LITERAL) = s772
goto(s28, TYPE_NAME) = s894
goto(s29, additive_expression) = s170
goto(s29, and_expression) = s218
goto(s29, assignment_expression) = s517
goto(s29, cast_expression) = s569
goto(s29, conditional_expression) = s253
goto(s29, enum_specifier) = s897
goto(s29, equality_expression) = s236
goto(s29, exclusive_or_expression) = s505
goto(s29, expression) = s524
goto(s29, inclusive_or_expression) = s545
goto(s29, logical_and_expression) = s557
goto(s29, logical_or_expression) = s336
goto(s29, multiplicative_expression) = s212
goto(s29, postfix_expression) = s642
goto(s29, primary_expression) = s732
goto(s29, relational_expression) = s499
goto(s29, shift_expression) = s805
goto(s29, specifier_qualifier_list) = s5
goto(s29, struct_or_union) = s832
goto(s29, struct_or_union_specifier) = s900
goto(s29, type_name) = s312
goto(s29, type_qualifier) = s442
goto(s29, type_specifier) = s443
goto(s29, unary_expression) = s256
goto(s29, unary_operator) = s274
goto(s29, '!') = s956
goto(s29, '&') = s957
goto(s29, '(') = s28
goto(s29, '*') = s958
goto(s29, '+') = s959
goto(s29, '++') = s615
goto(s29, '-') = s960
goto(s29, '--') = s616
goto(s29, 'char') = s867
goto(s29, 'const') = s846
goto(s29, 'double') = s870
goto(s29, 'enum') = s459
goto(s29, 'float') = s873
goto(s29, 'int') = s876
goto(s29, 'long') = s879
goto(s29, 'short') = s882
goto(s29, 'signed') = s885
goto(s29, 'sizeof') = s617
goto(s29, 'struct') = s829
goto(s29, 'union') = s830
goto(s29, 'unsigned') = s888
goto(s29, 'void') = s891
goto(s29, 'volatile') = s853
goto(s29, '~') = s961
goto(s29, CONSTANT) = s752
goto(s29, IDENTIFIER) = s762
goto(s29, STRING_LITERAL) = s772
goto(s29, TYPE_NAME) = s894
goto(s30, additive_expression) = s170
goto(s30, and_expression) = s218
goto(s30, assignment_expression) = s517
goto(s30, cast_expression) = s569
goto(s30, conditional_expression) = s253
goto(s30, enum_specifier) = s897
goto(s30, equality_expression) = s236
goto(s30, exclusive_or_expression) = s505
goto(s30, expression) = s522
goto(s30, inclusive_or_expression) = s545
goto(s30, logical_and_expression) = s557
goto(s30, logical_or_expression) = s336
goto(s30, multiplicative_expression) = s212
goto(s30, postfix_expression) = s642
goto(s30, primary_expression) = s732
goto(s30, relational_expression) = s499
goto(s30, shift_expression) = s805
goto(s30, specifier_qualifier_list) = s5
goto(s30, struct_or_union) = s832
goto(s30, struct_or_union_specifier) = s900
goto(s30, type_name) = s313
goto(s30, type_qualifier) = s442
goto(s30, type_specifier) = s443
goto(s30, unary_expression) = s256
goto(s30, unary_operator) = s274
goto(s30, '!') = s956
goto(s30, '&') = s957
goto(s30, '(') = s28
goto(s30, '*') = s958
goto(s30, '+') = s959
goto(s30, '++') = s615
goto(s30, '-') = s960
goto(s30, '--') = s616
goto(s30, 'char') = s867
goto(s30, 'const') = s846
goto(s30, 'double') = s870
goto(s30, 'enum') = s459
goto(s30, 'float') = s873
goto(s30, 'int') = s876
goto(s30, 'long') = s879
goto(s30, 'short') = s882
goto(s30, 'signed') = s885
goto(s30, 'sizeof') = s617
goto(s30, 'struct') = s829
goto(s30, 'union') = s830
goto(s30, 'unsigned') = s888
goto(s30, 'void') = s891
goto(s30, 'volatile') = s853
goto(s30, '~') = s961
goto(s30, CONSTANT) = s752
goto(s30, IDENTIFIER) = s762
goto(s30, STRING_LITERAL) = s772
goto(s30, TYPE_NAME) = s894
goto(s31, additive_expression) = s170
goto(s31, and_expression) = s218
goto(s31, assignment_expression) = s517
goto(s31, cast_expression) = s569
goto(s31, conditional_expression) = s253
goto(s31, enum_specifier) = s897
goto(s31, equality_expression) = s236
goto(s31, exclusive_or_expression) = s505
goto(s31, expression) = s525
goto(s31, inclusive_or_expression) = s545
goto(s31, logical_and_expression) = s557
goto(s31, logical_or_expression) = s336
goto(s31, multiplicative_expression) = s212
goto(s31, postfix_expression) = s642
goto(s31, primary_expression) = s732
goto(s31, relational_expression) = s499
goto(s31, shift_expression) = s805
goto(s31, specifier_qualifier_list) = s5
goto(s31, struct_or_union) = s832
goto(s31, struct_or_union_specifier) = s900
goto(s31, type_name) = s313
goto(s31, type_qualifier) = s442
goto(s31, type_specifier) = s443
goto(s31, unary_expression) = s256
goto(s31, unary_operator) = s274
goto(s31, '!') = s956
goto(s31, '&') = s957
goto(s31, '(') = s28
goto(s31, '*') = s958
goto(s31, '+') = s959
goto(s31, '++') = s615
goto(s31, '-') = s960
goto(s31, '--') = s616
goto(s31, 'char') = s867
goto(s31, 'const') = s846
goto(s31, 'double') = s870
goto(s31, 'enum') = s459
goto(s31, 'float') = s873
goto(s31, 'int') = s876
goto(s31, 'long') = s879
goto(s31, 'short') = s882
goto(s31, 'signed') = s885
goto(s31, 'sizeof') = s617
goto(s31, 'struct') = s829
goto(s31, 'union') = s830
goto(s31, 'unsigned') = s888
goto(s31, 'void') = s891
goto(s31, 'volatile') = s853
goto(s31, '~') = s961
goto(s31, CONSTANT) = s752
goto(s31, IDENTIFIER) = s762
goto(s31, STRING_LITERAL) = s772
goto(s31, TYPE_NAME) = s894
goto(s32, additive_expression) = s170
goto(s32, and_expression) = s218
goto(s32, assignment_expression) = s517
goto(s32, cast_expression) = s569
goto(s32, conditional_expression) = s253
goto(s32, enum_specifier) = s897
goto(s32, equality_expression) = s236
goto(s32, exclusive_or_expression) = s505
goto(s32, expression) = s526
goto(s32, inclusive_or_expression) = s545
goto(s32, logical_and_expression) = s557
goto(s32, logical_or_expression) = s336
goto(s32, multiplicative_expression) = s212
goto(s32, postfix_expression) = s642
goto(s32, primary_expression) = s732
goto(s32, relational_expression) = s499
goto(s32, shift_expression) = s805
goto(s32, specifier_qualifier_list) = s5
goto(s32, struct_or_union) = s832
goto(s32, struct_or_union_specifier) = s900
goto(s32, type_name) = s314
goto(s32, type_qualifier) = s442
goto(s32, type_specifier) = s443
goto(s32, unary_expression) = s256
goto(s32, unary_operator) = s274
goto(s32, '!') = s956
goto(s32, '&') = s957
goto(s32, '(') = s28
goto(s32, '*') = s958
goto(s32, '+') = s959
goto(s32, '++') = s615
goto(s32, '-') = s960
goto(s32, '--') = s616
goto(s32, 'char') = s867
goto(s32, 'const') = s846
goto(s32, 'double') = s870
goto(s32, 'enum') = s459
goto(s32, 'float') = s873
goto(s32, 'int') = s876
goto(s32, 'long') = s879
goto(s32, 'short') = s882
goto(s32, 'signed') = s885
goto(s32, 'sizeof') = s617
goto(s32, 'struct') = s829
goto(s32, 'union') = s830
goto(s32, 'unsigned') = s888
goto(s32, 'void') = s891
goto(s32, 'volatile') = s853
goto(s32, '~') = s961
goto(s32, CONSTANT) = s752
goto(s32, IDENTIFIER) = s762
goto(s32, STRING_LITERAL) = s772
goto(s32, TYPE_NAME) = s894
goto(s33, additive_expression) = s170
goto(s33, and_expression) = s218
goto(s33, assignment_expression) = s517
goto(s33, cast_expression) = s569
goto(s33, conditional_expression) = s253
goto(s33, enum_specifier) = s897
goto(s33, equality_expression) = s236
goto(s33, exclusive_or_expression) = s505
goto(s33, expression) = s523
goto(s33, inclusive_or_expression) = s545
goto(s33, logical_and_expression) = s557
goto(s33, logical_or_expression) = s336
goto(s33, multiplicative_expression) = s212
goto(s33, postfix_expression) = s642
goto(s33, primary_expression) = s732
goto(s33, relational_expression) = s499
goto(s33, shift_expression) = s805
goto(s33, specifier_qualifier_list) = s5
goto(s33, struct_or_union) = s832
goto(s33, struct_or_union_specifier) = s900
goto(s33, type_name) = s315
goto(s33, type_qualifier) = s442
goto(s33, type_specifier) = s443
goto(s33, unary_expression) = s256
goto(s33, unary_operator) = s274
goto(s33, '!') = s956
goto(s33, '&') = s957
goto(s33, '(') = s28
goto(s33, '*') = s958
goto(s33, '+') = s959
goto(s33, '++') = s615
goto(s33, '-') = s960
goto(s33, '--') = s616
goto(s33, 'char') = s867
goto(s33, 'const') = s846
goto(s33, 'double') = s870
goto(s33, 'enum') = s459
goto(s33, 'float') = s873
goto(s33, 'int') = s876
goto(s33, 'long') = s879
goto(s33, 'short') = s882
goto(s33, 'signed') = s885
goto(s33, 'sizeof') = s617
goto(s33, 'struct') = s829
goto(s33, 'union') = s830
goto(s33, 'unsigned') = s888
goto(s33, 'void') = s891
goto(s33, 'volatile') = s853
goto(s33, '~') = s961
goto(s33, CONSTANT) = s752
goto(s33, IDENTIFIER) = s762
goto(s33, STRING_LITERAL) = s772
goto(s33, TYPE_NAME) = s894
goto(s34, additive_expression) = s170
goto(s34, and_expression) = s218
goto(s34, assignment_expression) = s517
goto(s34, cast_expression) = s569
goto(s34, conditional_expression) = s253
goto(s34, enum_specifier) = s897
goto(s34, equality_expression) = s236
goto(s34, exclusive_or_expression) = s505
goto(s34, expression) = s527
goto(s34, inclusive_or_expression) = s545
goto(s34, logical_and_expression) = s557
goto(s34, logical_or_expression) = s336
goto(s34, multiplicative_expression) = s212
goto(s34, postfix_expression) = s642
goto(s34, primary_expression) = s732
goto(s34, relational_expression) = s499
goto(s34, shift_expression) = s805
goto(s34, specifier_qualifier_list) = s5
goto(s34, struct_or_union) = s832
goto(s34, struct_or_union_specifier) = s900
goto(s34, type_name) = s315
goto(s34, type_qualifier) = s442
goto(s34, type_specifier) = s443
goto(s34, unary_expression) = s256
goto(s34, unary_operator) = s274
goto(s34, '!') = s956
goto(s34, '&') = s957
goto(s34, '(') = s28
goto(s34, '*') = s958
goto(s34, '+') = s959
goto(s34, '++') = s615
goto(s34, '-') = s960
goto(s34, '--') = s616
goto(s34, 'char') = s867
goto(s34, 'const') = s846
goto(s34, 'double') = s870
goto(s34, 'enum') = s459
goto(s34, 'float') = s873
goto(s34, 'int') = s876
goto(s34, 'long') = s879
goto(s34, 'short') = s882
goto(s34, 'signed') = s885
goto(s34, 'sizeof') = s617
goto(s34, 'struct') = s829
goto(s34, 'union') = s830
goto(s34, 'unsigned') = s888
goto(s34, 'void') = s891
goto(s34, 'volatile') = s853
goto(s34, '~') = s961
goto(s34, CONSTANT) = s752
goto(s34, IDENTIFIER) = s762
goto(s34, STRING_LITERAL) = s772
goto(s34, TYPE_NAME) = s894
goto(s35, additive_expression) = s170
goto(s35, and_expression) = s218
goto(s35, assignment_expression) = s517
goto(s35, cast_expression) = s569
goto(s35, conditional_expression) = s253
goto(s35, enum_specifier) = s897
goto(s35, equality_expression) = s236
goto(s35, exclusive_or_expression) = s505
goto(s35, expression) = s528
goto(s35, inclusive_or_expression) = s545
goto(s35, logical_and_expression) = s557
goto(s35, logical_or_expression) = s336
goto(s35, multiplicative_expression) = s212
goto(s35, postfix_expression) = s642
goto(s35, primary_expression) = s732
goto(s35, relational_expression) = s499
goto(s35, shift_expression) = s805
goto(s35, specifier_qualifier_list) = s5
goto(s35, struct_or_union) = s832
goto(s35, struct_or_union_specifier) = s900
goto(s35, type_name) = s316
goto(s35, type_qualifier) = s442
goto(s35, type_specifier) = s443
goto(s35, unary_expression) = s256
goto(s35, unary_operator) = s274
goto(s35, '!') = s956
goto(s35, '&') = s957
goto(s35, '(') = s28
goto(s35, '*') = s958
goto(s35, '+') = s959
goto(s35, '++') = s615
goto(s35, '-') = s960
goto(s35, '--') = s616
goto(s35, 'char') = s867
goto(s35, 'const') = s846
goto(s35, 'double') = s870
goto(s35, 'enum') = s459
goto(s35, 'float') = s873
goto(s35, 'int') = s876
goto(s35, 'long') = s879
goto(s35, 'short') = s882
goto(s35, 'signed') = s885
goto(s35, 'sizeof') = s617
goto(s35, 'struct') = s829
goto(s35, 'union') = s830
goto(s35, 'unsigned') = s888
goto(s35, 'void') = s891
goto(s35, 'volatile') = s853
goto(s35, '~') = s961
goto(s35, CONSTANT) = s752
goto(s35, IDENTIFIER) = s762
goto(s35, STRING_LITERAL) = s772
goto(s35, TYPE_NAME) = s894
goto(s36, additive_expression) = s170
goto(s36, and_expression) = s218
goto(s36, assignment_expression) = s517
goto(s36, cast_expression) = s569
goto(s36, conditional_expression) = s253
goto(s36, enum_specifier) = s897
goto(s36, equality_expression) = s236
goto(s36, exclusive_or_expression) = s505
goto(s36, expression) = s529
goto(s36, inclusive_or_expression) = s545
goto(s36, logical_and_expression) = s557
goto(s36, logical_or_expression) = s336
goto(s36, multiplicative_expression) = s212
goto(s36, postfix_expression) = s642
goto(s36, primary_expression) = s732
goto(s36, relational_expression) = s499
goto(s36, shift_expression) = s805
goto(s36, specifier_qualifier_list) = s5
goto(s36, struct_or_union) = s832
goto(s36, struct_or_union_specifier) = s900
goto(s36, type_name) = s317
goto(s36, type_qualifier) = s442
goto(s36, type_specifier) = s443
goto(s36, unary_expression) = s256
goto(s36, unary_operator) = s274
goto(s36, '!') = s956
goto(s36, '&') = s957
goto(s36, '(') = s28
goto(s36, '*') = s958
goto(s36, '+') = s959
goto(s36, '++') = s615
goto(s36, '-') = s960
goto(s36, '--') = s616
goto(s36, 'char') = s867
goto(s36, 'const') = s846
goto(s36, 'double') = s870
goto(s36, 'enum') = s459
goto(s36, 'float') = s873
goto(s36, 'int') = s876
goto(s36, 'long') = s879
goto(s36, 'short') = s882
goto(s36, 'signed') = s885
goto(s36, 'sizeof') = s617
goto(s36, 'struct') = s829
goto(s36, 'union') = s830
goto(s36, 'unsigned') = s888
goto(s36, 'void') = s891
goto(s36, 'volatile') = s853
goto(s36, '~') = s961
goto(s36, CONSTANT) = s752
goto(s36, IDENTIFIER) = s762
goto(s36, STRING_LITERAL) = s772
goto(s36, TYPE_NAME) = s894
goto(s37, additive_expression) = s170
goto(s37, and_expression) = s218
goto(s37, assignment_expression) = s517
goto(s37, cast_expression) = s569
goto(s37, conditional_expression) = s253
goto(s37, enum_specifier) = s897
goto(s37, equality_expression) = s236
goto(s37, exclusive_or_expression) = s505
goto(s37, expression) = s521
goto(s37, inclusive_or_expression) = s545
goto(s37, logical_and_expression) = s557
goto(s37, logical_or_expression) = s336
goto(s37, multiplicative_expression) = s212
goto(s37, postfix_expression) = s642
goto(s37, primary_expression) = s732
goto(s37, relational_expression) = s499
goto(s37, shift_expression) = s805
goto(s37, specifier_qualifier_list) = s5
goto(s37, struct_or_union) = s832
goto(s37, struct_or_union_specifier) = s900
goto(s37, type_name) = s920
goto(s37, type_qualifier) = s442
goto(s37, type_specifier) = s443
goto(s37, unary_expression) = s256
goto(s37, unary_operator) = s274
goto(s37, '!') = s956
goto(s37, '&') = s957
goto(s37, '(') = s28
goto(s37, '*') = s958
goto(s37, '+') = s959
goto(s37, '++') = s615
goto(s37, '-') = s960
goto(s37, '--') = s616
goto(s37, 'char') = s867
goto(s37, 'const') = s846
goto(s37, 'double') = s870
goto(s37, 'enum') = s459
goto(s37, 'float') = s873
goto(s37, 'int') = s876
goto(s37, 'long') = s879
goto(s37, 'short') = s882
goto(s37, 'signed') = s885
goto(s37, 'sizeof') = s617
goto(s37, 'struct') = s829
goto(s37, 'union') = s830
goto(s37, 'unsigned') = s888
goto(s37, 'void') = s891
goto(s37, 'volatile') = s853
goto(s37, '~') = s961
goto(s37, CONSTANT) = s752
goto(s37, IDENTIFIER) = s762
goto(s37, STRING_LITERAL) = s772
goto(s37, TYPE_NAME) = s894
goto(s38, additive_expression) = s170
goto(s38, and_expression) = s218
goto(s38, assignment_expression) = s517
goto(s38, cast_expression) = s569
goto(s38, conditional_expression) = s253
goto(s38, enum_specifier) = s897
goto(s38, equality_expression) = s236
goto(s38, exclusive_or_expression) = s505
goto(s38, expression) = s522
goto(s38, inclusive_or_expression) = s545
goto(s38, logical_and_expression) = s557
goto(s38, logical_or_expression) = s336
goto(s38, multiplicative_expression) = s212
goto(s38, postfix_expression) = s642
goto(s38, primary_expression) = s732
goto(s38, relational_expression) = s499
goto(s38, shift_expression) = s805
goto(s38, specifier_qualifier_list) = s5
goto(s38, struct_or_union) = s832
goto(s38, struct_or_union_specifier) = s900
goto(s38, type_name) = s921
goto(s38, type_qualifier) = s442
goto(s38, type_specifier) = s443
goto(s38, unary_expression) = s256
goto(s38, unary_operator) = s274
goto(s38, '!') = s956
goto(s38, '&') = s957
goto(s38, '(') = s28
goto(s38, '*') = s958
goto(s38, '+') = s959
goto(s38, '++') = s615
goto(s38, '-') = s960
goto(s38, '--') = s616
goto(s38, 'char') = s867
goto(s38, 'const') = s846
goto(s38, 'double') = s870
goto(s38, 'enum') = s459
goto(s38, 'float') = s873
goto(s38, 'int') = s876
goto(s38, 'long') = s879
goto(s38, 'short') = s882
goto(s38, 'signed') = s885
goto(s38, 'sizeof') = s617
goto(s38, 'struct') = s829
goto(s38, 'union') = s830
goto(s38, 'unsigned') = s888
goto(s38, 'void') = s891
goto(s38, 'volatile') = s853
goto(s38, '~') = s961
goto(s38, CONSTANT) = s752
goto(s38, IDENTIFIER) = s762
goto(s38, STRING_LITERAL) = s772
goto(s38, TYPE_NAME) = s894
goto(s39, additive_expression) = s170
goto(s39, and_expression) = s218
goto(s39, assignment_expression) = s517
goto(s39, cast_expression) = s569
goto(s39, conditional_expression) = s253
goto(s39, enum_specifier) = s897
goto(s39, equality_expression) = s236
goto(s39, exclusive_or_expression) = s505
goto(s39, expression) = s523
goto(s39, inclusive_or_expression) = s545
goto(s39, logical_and_expression) = s557
goto(s39, logical_or_expression) = s336
goto(s39, multiplicative_expression) = s212
goto(s39, postfix_expression) = s642
goto(s39, primary_expression) = s732
goto(s39, relational_expression) = s499
goto(s39, shift_expression) = s805
goto(s39, specifier_qualifier_list) = s5
goto(s39, struct_or_union) = s832
goto(s39, struct_or_union_specifier) = s900
goto(s39, type_name) = s922
goto(s39, type_qualifier) = s442
goto(s39, type_specifier) = s443
goto(s39, unary_expression) = s256
goto(s39, unary_operator) = s274
goto(s39, '!') = s956
goto(s39, '&') = s957
goto(s39, '(') = s28
goto(s39, '*') = s958
goto(s39, '+') = s959
goto(s39, '++') = s615
goto(s39, '-') = s960
goto(s39, '--') = s616
goto(s39, 'char') = s867
goto(s39, 'const') = s846
goto(s39, 'double') = s870
goto(s39, 'enum') = s459
goto(s39, 'float') = s873
goto(s39, 'int') = s876
goto(s39, 'long') = s879
goto(s39, 'short') = s882
goto(s39, 'signed') = s885
goto(s39, 'sizeof') = s617
goto(s39, 'struct') = s829
goto(s39, 'union') = s830
goto(s39, 'unsigned') = s888
goto(s39, 'void') = s891
goto(s39, 'volatile') = s853
goto(s39, '~') = s961
goto(s39, CONSTANT) = s752
goto(s39, IDENTIFIER) = s762
goto(s39, STRING_LITERAL) = s772
goto(s39, TYPE_NAME) = s894
goto(s40, additive_expression) = s170
goto(s40, and_expression) = s218
goto(s40, assignment_expression) = s517
goto(s40, cast_expression) = s569
goto(s40, conditional_expression) = s253
goto(s40, enum_specifier) = s897
goto(s40, equality_expression) = s236
goto(s40, exclusive_or_expression) = s505
goto(s40, expression) = s524
goto(s40, inclusive_or_expression) = s545
goto(s40, logical_and_expression) = s557
goto(s40, logical_or_expression) = s336
goto(s40, multiplicative_expression) = s212
goto(s40, postfix_expression) = s642
goto(s40, primary_expression) = s732
goto(s40, relational_expression) = s499
goto(s40, shift_expression) = s805
goto(s40, specifier_qualifier_list) = s5
goto(s40, struct_or_union) = s832
goto(s40, struct_or_union_specifier) = s900
goto(s40, type_name) = s923
goto(s40, type_qualifier) = s442
goto(s40, type_specifier) = s443
goto(s40, unary_expression) = s256
goto(s40, unary_operator) = s274
goto(s40, '!') = s956
goto(s40, '&') = s957
goto(s40, '(') = s28
goto(s40, '*') = s958
goto(s40, '+') = s959
goto(s40, '++') = s615
goto(s40, '-') = s960
goto(s40, '--') = s616
goto(s40, 'char') = s867
goto(s40, 'const') = s846
goto(s40, 'double') = s870
goto(s40, 'enum') = s459
goto(s40, 'float') = s873
goto(s40, 'int') = s876
goto(s40, 'long') = s879
goto(s40, 'short') = s882
goto(s40, 'signed') = s885
goto(s40, 'sizeof') = s617
goto(s40, 'struct') = s829
goto(s40, 'union') = s830
goto(s40, 'unsigned') = s888
goto(s40, 'void') = s891
goto(s40, 'volatile') = s853
goto(s40, '~') = s961
goto(s40, CONSTANT) = s752
goto(s40, IDENTIFIER) = s762
goto(s40, STRING_LITERAL) = s772
goto(s40, TYPE_NAME) = s894
goto(s41, additive_expression) = s170
goto(s41, and_expression) = s218
goto(s41, assignment_expression) = s517
goto(s41, cast_expression) = s569
goto(s41, conditional_expression) = s253
goto(s41, enum_specifier) = s897
goto(s41, equality_expression) = s236
goto(s41, exclusive_or_expression) = s505
goto(s41, expression) = s525
goto(s41, inclusive_or_expression) = s545
goto(s41, logical_and_expression) = s557
goto(s41, logical_or_expression) = s336
goto(s41, multiplicative_expression) = s212
goto(s41, postfix_expression) = s642
goto(s41, primary_expression) = s732
goto(s41, relational_expression) = s499
goto(s41, shift_expression) = s805
goto(s41, specifier_qualifier_list) = s5
goto(s41, struct_or_union) = s832
goto(s41, struct_or_union_specifier) = s900
goto(s41, type_name) = s924
goto(s41, type_qualifier) = s442
goto(s41, type_specifier) = s443
goto(s41, unary_expression) = s256
goto(s41, unary_operator) = s274
goto(s41, '!') = s956
goto(s41, '&') = s957
goto(s41, '(') = s28
goto(s41, '*') = s958
goto(s41, '+') = s959
goto(s41, '++') = s615
goto(s41, '-') = s960
goto(s41, '--') = s616
goto(s41, 'char') = s867
goto(s41, 'const') = s846
goto(s41, 'double') = s870
goto(s41, 'enum') = s459
goto(s41, 'float') = s873
goto(s41, 'int') = s876
goto(s41, 'long') = s879
goto(s41, 'short') = s882
goto(s41, 'signed') = s885
goto(s41, 'sizeof') = s617
goto(s41, 'struct') = s829
goto(s41, 'union') = s830
goto(s41, 'unsigned') = s888
goto(s41, 'void') = s891
goto(s41, 'volatile') = s853
goto(s41, '~') = s961
goto(s41, CONSTANT) = s752
goto(s41, IDENTIFIER) = s762
goto(s41, STRING_LITERAL) = s772
goto(s41, TYPE_NAME) = s894
goto(s42, additive_expression) = s170
goto(s42, and_expression) = s218
goto(s42, assignment_expression) = s517
goto(s42, cast_expression) = s569
goto(s42, conditional_expression) = s253
goto(s42, enum_specifier) = s897
goto(s42, equality_expression) = s236
goto(s42, exclusive_or_expression) = s505
goto(s42, expression) = s526
goto(s42, inclusive_or_expression) = s545
goto(s42, logical_and_expression) = s557
goto(s42, logical_or_expression) = s336
goto(s42, multiplicative_expression) = s212
goto(s42, postfix_expression) = s642
goto(s42, primary_expression) = s732
goto(s42, relational_expression) = s499
goto(s42, shift_expression) = s805
goto(s42, specifier_qualifier_list) = s5
goto(s42, struct_or_union) = s832
goto(s42, struct_or_union_specifier) = s900
goto(s42, type_name) = s925
goto(s42, type_qualifier) = s442
goto(s42, type_specifier) = s443
goto(s42, unary_expression) = s256
goto(s42, unary_operator) = s274
goto(s42, '!') = s956
goto(s42, '&') = s957
goto(s42, '(') = s28
goto(s42, '*') = s958
goto(s42, '+') = s959
goto(s42, '++') = s615
goto(s42, '-') = s960
goto(s42, '--') = s616
goto(s42, 'char') = s867
goto(s42, 'const') = s846
goto(s42, 'double') = s870
goto(s42, 'enum') = s459
goto(s42, 'float') = s873
goto(s42, 'int') = s876
goto(s42, 'long') = s879
goto(s42, 'short') = s882
goto(s42, 'signed') = s885
goto(s42, 'sizeof') = s617
goto(s42, 'struct') = s829
goto(s42, 'union') = s830
goto(s42, 'unsigned') = s888
goto(s42, 'void') = s891
goto(s42, 'volatile') = s853
goto(s42, '~') = s961
goto(s42, CONSTANT) = s752
goto(s42, IDENTIFIER) = s762
goto(s42, STRING_LITERAL) = s772
goto(s42, TYPE_NAME) = s894
goto(s43, additive_expression) = s170
goto(s43, and_expression) = s218
goto(s43, assignment_expression) = s517
goto(s43, cast_expression) = s569
goto(s43, conditional_expression) = s253
goto(s43, enum_specifier) = s897
goto(s43, equality_expression) = s236
goto(s43, exclusive_or_expression) = s505
goto(s43, expression) = s527
goto(s43, inclusive_or_expression) = s545
goto(s43, logical_and_expression) = s557
goto(s43, logical_or_expression) = s336
goto(s43, multiplicative_expression) = s212
goto(s43, postfix_expression) = s642
goto(s43, primary_expression) = s732
goto(s43, relational_expression) = s499
goto(s43, shift_expression) = s805
goto(s43, specifier_qualifier_list) = s5
goto(s43, struct_or_union) = s832
goto(s43, struct_or_union_specifier) = s900
goto(s43, type_name) = s926
goto(s43, type_qualifier) = s442
goto(s43, type_specifier) = s443
goto(s43, unary_expression) = s256
goto(s43, unary_operator) = s274
goto(s43, '!') = s956
goto(s43, '&') = s957
goto(s43, '(') = s28
goto(s43, '*') = s958
goto(s43, '+') = s959
goto(s43, '++') = s615
goto(s43, '-') = s960
goto(s43, '--') = s616
goto(s43, 'char') = s867
goto(s43, 'const') = s846
goto(s43, 'double') = s870
goto(s43, 'enum') = s459
goto(s43, 'float') = s873
goto(s43, 'int') = s876
goto(s43, 'long') = s879
goto(s43, 'short') = s882
goto(s43, 'signed') = s885
goto(s43, 'sizeof') = s617
goto(s43, 'struct') = s829
goto(s43, 'union') = s830
goto(s43, 'unsigned') = s888
goto(s43, 'void') = s891
goto(s43, 'volatile') = s853
goto(s43, '~') = s961
goto(s43, CONSTANT) = s752
goto(s43, IDENTIFIER) = s762
goto(s43, STRING_LITERAL) = s772
goto(s43, TYPE_NAME) = s894
goto(s44, additive_expression) = s170
goto(s44, and_expression) = s218
goto(s44, assignment_expression) = s517
goto(s44, cast_expression) = s569
goto(s44, conditional_expression) = s253
goto(s44, enum_specifier) = s897
goto(s44, equality_expression) = s236
goto(s44, exclusive_or_expression) = s505
goto(s44, expression) = s528
goto(s44, inclusive_or_expression) = s545
goto(s44, logical_and_expression) = s557
goto(s44, logical_or_expression) = s336
goto(s44, multiplicative_expression) = s212
goto(s44, postfix_expression) = s642
goto(s44, primary_expression) = s732
goto(s44, relational_expression) = s499
goto(s44, shift_expression) = s805
goto(s44, specifier_qualifier_list) = s5
goto(s44, struct_or_union) = s832
goto(s44, struct_or_union_specifier) = s900
goto(s44, type_name) = s927
goto(s44, type_qualifier) = s442
goto(s44, type_specifier) = s443
goto(s44, unary_expression) = s256
goto(s44, unary_operator) = s274
goto(s44, '!') = s956
goto(s44, '&') = s957
goto(s44, '(') = s28
goto(s44, '*') = s958
goto(s44, '+') = s959
goto(s44, '++') = s615
goto(s44, '-') = s960
goto(s44, '--') = s616
goto(s44, 'char') = s867
goto(s44, 'const') = s846
goto(s44, 'double') = s870
goto(s44, 'enum') = s459
goto(s44, 'float') = s873
goto(s44, 'int') = s876
goto(s44, 'long') = s879
goto(s44, 'short') = s882
goto(s44, 'signed') = s885
goto(s44, 'sizeof') = s617
goto(s44, 'struct') = s829
goto(s44, 'union') = s830
goto(s44, 'unsigned') = s888
goto(s44, 'void') = s891
goto(s44, 'volatile') = s853
goto(s44, '~') = s961
goto(s44, CONSTANT) = s752
goto(s44, IDENTIFIER) = s762
goto(s44, STRING_LITERAL) = s772
goto(s44, TYPE_NAME) = s894
goto(s45, additive_expression) = s170
goto(s45, and_expression) = s218
goto(s45, assignment_expression) = s517
goto(s45, cast_expression) = s569
goto(s45, conditional_expression) = s253
goto(s45, enum_specifier) = s897
goto(s45, equality_expression) = s236
goto(s45, exclusive_or_expression) = s505
goto(s45, expression) = s529
goto(s45, inclusive_or_expression) = s545
goto(s45, logical_and_expression) = s557
goto(s45, logical_or_expression) = s336
goto(s45, multiplicative_expression) = s212
goto(s45, postfix_expression) = s642
goto(s45, primary_expression) = s732
goto(s45, relational_expression) = s499
goto(s45, shift_expression) = s805
goto(s45, specifier_qualifier_list) = s5
goto(s45, struct_or_union) = s832
goto(s45, struct_or_union_specifier) = s900
goto(s45, type_name) = s928
goto(s45, type_qualifier) = s442
goto(s45, type_specifier) = s443
goto(s45, unary_expression) = s256
goto(s45, unary_operator) = s274
goto(s45, '!') = s956
goto(s45, '&') = s957
goto(s45, '(') = s28
goto(s45, '*') = s958
goto(s45, '+') = s959
goto(s45, '++') = s615
goto(s45, '-') = s960
goto(s45, '--') = s616
goto(s45, 'char') = s867
goto(s45, 'const') = s846
goto(s45, 'double') = s870
goto(s45, 'enum') = s459
goto(s45, 'float') = s873
goto(s45, 'int') = s876
goto(s45, 'long') = s879
goto(s45, 'short') = s882
goto(s45, 'signed') = s885
goto(s45, 'sizeof') = s617
goto(s45, 'struct') = s829
goto(s45, 'union') = s830
goto(s45, 'unsigned') = s888
goto(s45, 'void') = s891
goto(s45, 'volatile') = s853
goto(s45, '~') = s961
goto(s45, CONSTANT) = s752
goto(s45, IDENTIFIER) = s762
goto(s45, STRING_LITERAL) = s772
goto(s45, TYPE_NAME) = s894
goto(s46, additive_expression) = s170
goto(s46, and_expression) = s218
goto(s46, assignment_expression) = s517
goto(s46, cast_expression) = s569
goto(s46, conditional_expression) = s253
goto(s46, equality_expression) = s236
goto(s46, exclusive_or_expression) = s505
goto(s46, expression) = s520
goto(s46, inclusive_or_expression) = s545
goto(s46, logical_and_expression) = s557
goto(s46, logical_or_expression) = s336
goto(s46, multiplicative_expression) = s212
goto(s46, postfix_expression) = s642
goto(s46, primary_expression) = s732
goto(s46, relational_expression) = s499
goto(s46, shift_expression) = s805
goto(s46, unary_expression) = s256
goto(s46, unary_operator) = s274
goto(s46, '!') = s956
goto(s46, '&') = s957
goto(s46, '(') = s28
goto(s46, '*') = s958
goto(s46, '+') = s959
goto(s46, '++') = s615
goto(s46, '-') = s960
goto(s46, '--') = s616
goto(s46, 'sizeof') = s617
goto(s46, '~') = s961
goto(s46, CONSTANT) = s752
goto(s46, IDENTIFIER) = s762
goto(s46, STRING_LITERAL) = s772
goto(s47, additive_expression) = s170
goto(s47, and_expression) = s218
goto(s47, assignment_expression) = s517
goto(s47, cast_expression) = s569
goto(s47, conditional_expression) = s253
goto(s47, equality_expression) = s236
goto(s47, exclusive_or_expression) = s505
goto(s47, expression) = s521
goto(s47, inclusive_or_expression) = s545
goto(s47, logical_and_expression) = s557
goto(s47, logical_or_expression) = s336
goto(s47, multiplicative_expression) = s212
goto(s47, postfix_expression) = s642
goto(s47, primary_expression) = s732
goto(s47, relational_expression) = s499
goto(s47, shift_expression) = s805
goto(s47, unary_expression) = s256
goto(s47, unary_operator) = s274
goto(s47, '!') = s956
goto(s47, '&') = s957
goto(s47, '(') = s28
goto(s47, '*') = s958
goto(s47, '+') = s959
goto(s47, '++') = s615
goto(s47, '-') = s960
goto(s47, '--') = s616
goto(s47, 'sizeof') = s617
goto(s47, '~') = s961
goto(s47, CONSTANT) = s752
goto(s47, IDENTIFIER) = s762
goto(s47, STRING_LITERAL) = s772
goto(s48, additive_expression) = s170
goto(s48, and_expression) = s218
goto(s48, assignment_expression) = s517
goto(s48, cast_expression) = s569
goto(s48, conditional_expression) = s253
goto(s48, equality_expression) = s236
goto(s48, exclusive_or_expression) = s505
goto(s48, expression) = s522
goto(s48, inclusive_or_expression) = s545
goto(s48, logical_and_expression) = s557
goto(s48, logical_or_expression) = s336
goto(s48, multiplicative_expression) = s212
goto(s48, postfix_expression) = s642
goto(s48, primary_expression) = s732
goto(s48, relational_expression) = s499
goto(s48, shift_expression) = s805
goto(s48, unary_expression) = s256
goto(s48, unary_operator) = s274
goto(s48, '!') = s956
goto(s48, '&') = s957
goto(s48, '(') = s28
goto(s48, '*') = s958
goto(s48, '+') = s959
goto(s48, '++') = s615
goto(s48, '-') = s960
goto(s48, '--') = s616
goto(s48, 'sizeof') = s617
goto(s48, '~') = s961
goto(s48, CONSTANT) = s752
goto(s48, IDENTIFIER) = s762
goto(s48, STRING_LITERAL) = s772
goto(s49, additive_expression) = s170
goto(s49, and_expression) = s218
goto(s49, assignment_expression) = s517
goto(s49, cast_expression) = s569
goto(s49, conditional_expression) = s253
goto(s49, equality_expression) = s236
goto(s49, exclusive_or_expression) = s505
goto(s49, expression) = s523
goto(s49, inclusive_or_expression) = s545
goto(s49, logical_and_expression) = s557
goto(s49, logical_or_expression) = s336
goto(s49, multiplicative_expression) = s212
goto(s49, postfix_expression) = s642
goto(s49, primary_expression) = s732
goto(s49, relational_expression) = s499
goto(s49, shift_expression) = s805
goto(s49, unary_expression) = s256
goto(s49, unary_operator) = s274
goto(s49, '!') = s956
goto(s49, '&') = s957
goto(s49, '(') = s28
goto(s49, '*') = s958
goto(s49, '+') = s959
goto(s49, '++') = s615
goto(s49, '-') = s960
goto(s49, '--') = s616
goto(s49, 'sizeof') = s617
goto(s49, '~') = s961
goto(s49, CONSTANT) = s752
goto(s49, IDENTIFIER) = s762
goto(s49, STRING_LITERAL) = s772
goto(s50, additive_expression) = s170
goto(s50, and_expression) = s218
goto(s50, assignment_expression) = s517
goto(s50, cast_expression) = s569
goto(s50, conditional_expression) = s253
goto(s50, equality_expression) = s236
goto(s50, exclusive_or_expression) = s505
goto(s50, expression) = s524
goto(s50, inclusive_or_expression) = s545
goto(s50, logical_and_expression) = s557
goto(s50, logical_or_expression) = s336
goto(s50, multiplicative_expression) = s212
goto(s50, postfix_expression) = s642
goto(s50, primary_expression) = s732
goto(s50, relational_expression) = s499
goto(s50, shift_expression) = s805
goto(s50, unary_expression) = s256
goto(s50, unary_operator) = s274
goto(s50, '!') = s956
goto(s50, '&') = s957
goto(s50, '(') = s28
goto(s50, '*') = s958
goto(s50, '+') = s959
goto(s50, '++') = s615
goto(s50, '-') = s960
goto(s50, '--') = s616
goto(s50, 'sizeof') = s617
goto(s50, '~') = s961
goto(s50, CONSTANT) = s752
goto(s50, IDENTIFIER) = s762
goto(s50, STRING_LITERAL) = s772
goto(s51, additive_expression) = s170
goto(s51, and_expression) = s218
goto(s51, assignment_expression) = s517
goto(s51, cast_expression) = s569
goto(s51, conditional_expression) = s253
goto(s51, equality_expression) = s236
goto(s51, exclusive_or_expression) = s505
goto(s51, expression) = s525
goto(s51, inclusive_or_expression) = s545
goto(s51, logical_and_expression) = s557
goto(s51, logical_or_expression) = s336
goto(s51, multiplicative_expression) = s212
goto(s51, postfix_expression) = s642
goto(s51, primary_expression) = s732
goto(s51, relational_expression) = s499
goto(s51, shift_expression) = s805
goto(s51, unary_expression) = s256
goto(s51, unary_operator) = s274
goto(s51, '!') = s956
goto(s51, '&') = s957
goto(s51, '(') = s28
goto(s51, '*') = s958
goto(s51, '+') = s959
goto(s51, '++') = s615
goto(s51, '-') = s960
goto(s51, '--') = s616
goto(s51, 'sizeof') = s617
goto(s51, '~') = s961
goto(s51, CONSTANT) = s752
goto(s51, IDENTIFIER) = s762
goto(s51, STRING_LITERAL) = s772
goto(s52, additive_expression) = s170
goto(s52, and_expression) = s218
goto(s52, assignment_expression) = s517
goto(s52, cast_expression) = s569
goto(s52, conditional_expression) = s253
goto(s52, equality_expression) = s236
goto(s52, exclusive_or_expression) = s505
goto(s52, expression) = s526
goto(s52, inclusive_or_expression) = s545
goto(s52, logical_and_expression) = s557
goto(s52, logical_or_expression) = s336
goto(s52, multiplicative_expression) = s212
goto(s52, postfix_expression) = s642
goto(s52, primary_expression) = s732
goto(s52, relational_expression) = s499
goto(s52, shift_expression) = s805
goto(s52, unary_expression) = s256
goto(s52, unary_operator) = s274
goto(s52, '!') = s956
goto(s52, '&') = s957
goto(s52, '(') = s28
goto(s52, '*') = s958
goto(s52, '+') = s959
goto(s52, '++') = s615
goto(s52, '-') = s960
goto(s52, '--') = s616
goto(s52, 'sizeof') = s617
goto(s52, '~') = s961
goto(s52, CONSTANT) = s752
goto(s52, IDENTIFIER) = s762
goto(s52, STRING_LITERAL) = s772
goto(s53, additive_expression) = s170
goto(s53, and_expression) = s218
goto(s53, assignment_expression) = s517
goto(s53, cast_expression) = s569
goto(s53, conditional_expression) = s253
goto(s53, equality_expression) = s236
goto(s53, exclusive_or_expression) = s505
goto(s53, expression) = s527
goto(s53, inclusive_or_expression) = s545
goto(s53, logical_and_expression) = s557
goto(s53, logical_or_expression) = s336
goto(s53, multiplicative_expression) = s212
goto(s53, postfix_expression) = s642
goto(s53, primary_expression) = s732
goto(s53, relational_expression) = s499
goto(s53, shift_expression) = s805
goto(s53, unary_expression) = s256
goto(s53, unary_operator) = s274
goto(s53, '!') = s956
goto(s53, '&') = s957
goto(s53, '(') = s28
goto(s53, '*') = s958
goto(s53, '+') = s959
goto(s53, '++') = s615
goto(s53, '-') = s960
goto(s53, '--') = s616
goto(s53, 'sizeof') = s617
goto(s53, '~') = s961
goto(s53, CONSTANT) = s752
goto(s53, IDENTIFIER) = s762
goto(s53, STRING_LITERAL) = s772
goto(s54, additive_expression) = s170
goto(s54, and_expression) = s218
goto(s54, assignment_expression) = s517
goto(s54, cast_expression) = s569
goto(s54, conditional_expression) = s253
goto(s54, equality_expression) = s236
goto(s54, exclusive_or_expression) = s505
goto(s54, expression) = s528
goto(s54, inclusive_or_expression) = s545
goto(s54, logical_and_expression) = s557
goto(s54, logical_or_expression) = s336
goto(s54, multiplicative_expression) = s212
goto(s54, postfix_expression) = s642
goto(s54, primary_expression) = s732
goto(s54, relational_expression) = s499
goto(s54, shift_expression) = s805
goto(s54, unary_expression) = s256
goto(s54, unary_operator) = s274
goto(s54, '!') = s956
goto(s54, '&') = s957
goto(s54, '(') = s28
goto(s54, '*') = s958
goto(s54, '+') = s959
goto(s54, '++') = s615
goto(s54, '-') = s960
goto(s54, '--') = s616
goto(s54, 'sizeof') = s617
goto(s54, '~') = s961
goto(s54, CONSTANT) = s752
goto(s54, IDENTIFIER) = s762
goto(s54, STRING_LITERAL) = s772
goto(s55, additive_expression) = s170
goto(s55, and_expression) = s218
goto(s55, assignment_expression) = s517
goto(s55, cast_expression) = s569
goto(s55, conditional_expression) = s253
goto(s55, equality_expression) = s236
goto(s55, exclusive_or_expression) = s505
goto(s55, expression) = s529
goto(s55, inclusive_or_expression) = s545
goto(s55, logical_and_expression) = s557
goto(s55, logical_or_expression) = s336
goto(s55, multiplicative_expression) = s212
goto(s55, postfix_expression) = s642
goto(s55, primary_expression) = s732
goto(s55, relational_expression) = s499
goto(s55, shift_expression) = s805
goto(s55, unary_expression) = s256
goto(s55, unary_operator) = s274
goto(s55, '!') = s956
goto(s55, '&') = s957
goto(s55, '(') = s28
goto(s55, '*') = s958
goto(s55, '+') = s959
goto(s55, '++') = s615
goto(s55, '-') = s960
goto(s55, '--') = s616
goto(s55, 'sizeof') = s617
goto(s55, '~') = s961
goto(s55, CONSTANT) = s752
goto(s55, IDENTIFIER) = s762
goto(s55, STRING_LITERAL) = s772
goto(s56, additive_expression) = s170
goto(s56, and_expression) = s218
goto(s56, assignment_expression) = s539
goto(s56, cast_expression) = s569
goto(s56, conditional_expression) = s253
goto(s56, equality_expression) = s236
goto(s56, exclusive_or_expression) = s505
goto(s56, inclusive_or_expression) = s545
goto(s56, logical_and_expression) = s557
goto(s56, logical_or_expression) = s336
goto(s56, multiplicative_expression) = s212
goto(s56, postfix_expression) = s642
goto(s56, primary_expression) = s732
goto(s56, relational_expression) = s499
goto(s56, shift_expression) = s805
goto(s56, unary_expression) = s256
goto(s56, unary_operator) = s274
goto(s56, '!') = s956
goto(s56, '&') = s957
goto(s56, '(') = s28
goto(s56, '*') = s958
goto(s56, '+') = s959
goto(s56, '++') = s615
goto(s56, '-') = s960
goto(s56, '--') = s616
goto(s56, 'sizeof') = s617
goto(s56, '~') = s961
goto(s56, CONSTANT) = s752
goto(s56, IDENTIFIER) = s762
goto(s56, STRING_LITERAL) = s772
goto(s57, additive_expression) = s170
goto(s57, and_expression) = s218
goto(s57, cast_expression) = s569
goto(s57, conditional_expression) = s348
goto(s57, equality_expression) = s236
goto(s57, exclusive_or_expression) = s505
goto(s57, inclusive_or_expression) = s545
goto(s57, logical_and_expression) = s557
goto(s57, logical_or_expression) = s336
goto(s57, multiplicative_expression) = s212
goto(s57, postfix_expression) = s645
goto(s57, primary_expression) = s735
goto(s57, relational_expression) = s499
goto(s57, shift_expression) = s805
goto(s57, unary_expression) = s330
goto(s57, unary_operator) = s283
goto(s57, '!') = s956
goto(s57, '&') = s957
goto(s57, '(') = s29
goto(s57, '*') = s958
goto(s57, '+') = s959
goto(s57, '++') = s624
goto(s57, '-') = s960
goto(s57, '--') = s625
goto(s57, 'sizeof') = s626
goto(s57, '~') = s961
goto(s57, CONSTANT) = s755
goto(s57, IDENTIFIER) = s765
goto(s57, STRING_LITERAL) = s775
goto(s58, additive_expression) = s170
goto(s58, and_expression) = s218
goto(s58, cast_expression) = s569
goto(s58, equality_expression) = s236
goto(s58, exclusive_or_expression) = s505
goto(s58, inclusive_or_expression) = s545
goto(s58, logical_and_expression) = s558
goto(s58, multiplicative_expression) = s212
goto(s58, postfix_expression) = s645
goto(s58, primary_expression) = s735
goto(s58, relational_expression) = s499
goto(s58, shift_expression) = s805
goto(s58, unary_expression) = s330
goto(s58, unary_operator) = s283
goto(s58, '!') = s956
goto(s58, '&') = s957
goto(s58, '(') = s29
goto(s58, '*') = s958
goto(s58, '+') = s959
goto(s58, '++') = s624
goto(s58, '-') = s960
goto(s58, '--') = s625
goto(s58, 'sizeof') = s626
goto(s58, '~') = s961
goto(s58, CONSTANT) = s755
goto(s58, IDENTIFIER) = s765
goto(s58, STRING_LITERAL) = s775
goto(s59, additive_expression) = s170
goto(s59, and_expression) = s218
goto(s59, cast_expression) = s569
goto(s59, equality_expression) = s236
goto(s59, exclusive_or_expression) = s505
goto(s59, inclusive_or_expression) = s546
goto(s59, multiplicative_expression) = s212
goto(s59, postfix_expression) = s645
goto(s59, primary_expression) = s735
goto(s59, relational_expression) = s499
goto(s59, shift_expression) = s805
goto(s59, unary_expression) = s330
goto(s59, unary_operator) = s283
goto(s59, '!') = s956
goto(s59, '&') = s957
goto(s59, '(') = s29
goto(s59, '*') = s958
goto(s59, '+') = s959
goto(s59, '++') = s624
goto(s59, '-') = s960
goto(s59, '--') = s625
goto(s59, 'sizeof') = s626
goto(s59, '~') = s961
goto(s59, CONSTANT) = s755
goto(s59, IDENTIFIER) = s765
goto(s59, STRING_LITERAL) = s775
goto(s60, additive_expression) = s170
goto(s60, and_expression) = s218
goto(s60, cast_expression) = s569
goto(s60, equality_expression) = s236
goto(s60, exclusive_or_expression) = s506
goto(s60, multiplicative_expression) = s212
goto(s60, postfix_expression) = s645
goto(s60, primary_expression) = s735
goto(s60, relational_expression) = s499
goto(s60, shift_expression) = s805
goto(s60, unary_expression) = s330
goto(s60, unary_operator) = s283
goto(s60, '!') = s956
goto(s60, '&') = s957
goto(s60, '(') = s29
goto(s60, '*') = s958
goto(s60, '+') = s959
goto(s60, '++') = s624
goto(s60, '-') = s960
goto(s60, '--') = s625
goto(s60, 'sizeof') = s626
goto(s60, '~') = s961
goto(s60, CONSTANT) = s755
goto(s60, IDENTIFIER) = s765
goto(s60, STRING_LITERAL) = s775
goto(s61, additive_expression) = s170
goto(s61, and_expression) = s219
goto(s61, cast_expression) = s569
goto(s61, equality_expression) = s236
goto(s61, multiplicative_expression) = s212
goto(s61, postfix_expression) = s645
goto(s61, primary_expression) = s735
goto(s61, relational_expression) = s499
goto(s61, shift_expression) = s805
goto(s61, unary_expression) = s330
goto(s61, unary_operator) = s283
goto(s61, '!') = s956
goto(s61, '&') = s957
goto(s61, '(') = s29
goto(s61, '*') = s958
goto(s61, '+') = s959
goto(s61, '++') = s624
goto(s61, '-') = s960
goto(s61, '--') = s625
goto(s61, 'sizeof') = s626
goto(s61, '~') = s961
goto(s61, CONSTANT) = s755
goto(s61, IDENTIFIER) = s765
goto(s61, STRING_LITERAL) = s775
goto(s62, additive_expression) = s170
goto(s62, cast_expression) = s569
goto(s62, equality_expression) = s230
goto(s62, multiplicative_expression) = s212
goto(s62, postfix_expression) = s645
goto(s62, primary_expression) = s735
goto(s62, relational_expression) = s499
goto(s62, shift_expression) = s805
goto(s62, unary_expression) = s330
goto(s62, unary_operator) = s283
goto(s62, '!') = s956
goto(s62, '&') = s957
goto(s62, '(') = s29
goto(s62, '*') = s958
goto(s62, '+') = s959
goto(s62, '++') = s624
goto(s62, '-') = s960
goto(s62, '--') = s625
goto(s62, 'sizeof') = s626
goto(s62, '~') = s961
goto(s62, CONSTANT) = s755
goto(s62, IDENTIFIER) = s765
goto(s62, STRING_LITERAL) = s775
goto(s63, additive_expression) = s170
goto(s63, cast_expression) = s569
goto(s63, multiplicative_expression) = s212
goto(s63, postfix_expression) = s645
goto(s63, primary_expression) = s735
goto(s63, relational_expression) = s487
goto(s63, shift_expression) = s805
goto(s63, unary_expression) = s330
goto(s63, unary_operator) = s283
goto(s63, '!') = s956
goto(s63, '&') = s957
goto(s63, '(') = s29
goto(s63, '*') = s958
goto(s63, '+') = s959
goto(s63, '++') = s624
goto(s63, '-') = s960
goto(s63, '--') = s625
goto(s63, 'sizeof') = s626
goto(s63, '~') = s961
goto(s63, CONSTANT) = s755
goto(s63, IDENTIFIER) = s765
goto(s63, STRING_LITERAL) = s775
goto(s64, additive_expression) = s170
goto(s64, cast_expression) = s569
goto(s64, multiplicative_expression) = s212
goto(s64, postfix_expression) = s645
goto(s64, primary_expression) = s735
goto(s64, relational_expression) = s493
goto(s64, shift_expression) = s805
goto(s64, unary_expression) = s330
goto(s64, unary_operator) = s283
goto(s64, '!') = s956
goto(s64, '&') = s957
goto(s64, '(') = s29
goto(s64, '*') = s958
goto(s64, '+') = s959
goto(s64, '++') = s624
goto(s64, '-') = s960
goto(s64, '--') = s625
goto(s64, 'sizeof') = s626
goto(s64, '~') = s961
goto(s64, CONSTANT) = s755
goto(s64, IDENTIFIER) = s765
goto(s64, STRING_LITERAL) = s775
goto(s65, additive_expression) = s170
goto(s65, cast_expression) = s569
goto(s65, multiplicative_expression) = s212
goto(s65, postfix_expression) = s645
goto(s65, primary_expression) = s735
goto(s65, shift_expression) = s781
goto(s65, unary_expression) = s330
goto(s65, unary_operator) = s283
goto(s65, '!') = s956
goto(s65, '&') = s957
goto(s65, '(') = s29
goto(s65, '*') = s958
goto(s65, '+') = s959
goto(s65, '++') = s624
goto(s65, '-') = s960
goto(s65, '--') = s625
goto(s65, 'sizeof') = s626
goto(s65, '~') = s961
goto(s65, CONSTANT) = s755
goto(s65, IDENTIFIER) = s765
goto(s65, STRING_LITERAL) = s775
goto(s66, additive_expression) = s170
goto(s66, cast_expression) = s569
goto(s66, multiplicative_expression) = s212
goto(s66, postfix_expression) = s645
goto(s66, primary_expression) = s735
goto(s66, shift_expression) = s787
goto(s66, unary_expression) = s330
goto(s66, unary_operator) = s283
goto(s66, '!') = s956
goto(s66, '&') = s957
goto(s66, '(') = s29
goto(s66, '*') = s958
goto(s66, '+') = s959
goto(s66, '++') = s624
goto(s66, '-') = s960
goto(s66, '--') = s625
goto(s66, 'sizeof') = s626
goto(s66, '~') = s961
goto(s66, CONSTANT) = s755
goto(s66, IDENTIFIER) = s765
goto(s66, STRING_LITERAL) = s775
goto(s67, additive_expression) = s170
goto(s67, cast_expression) = s569
goto(s67, multiplicative_expression) = s212
goto(s67, postfix_expression) = s645
goto(s67, primary_expression) = s735
goto(s67, shift_expression) = s793
goto(s67, unary_expression) = s330
goto(s67, unary_operator) = s283
goto(s67, '!') = s956
goto(s67, '&') = s957
goto(s67, '(') = s29
goto(s67, '*') = s958
goto(s67, '+') = s959
goto(s67, '++') = s624
goto(s67, '-') = s960
goto(s67, '--') = s625
goto(s67, 'sizeof') = s626
goto(s67, '~') = s961
goto(s67, CONSTANT) = s755
goto(s67, IDENTIFIER) = s765
goto(s67, STRING_LITERAL) = s775
goto(s68, additive_expression) = s170
goto(s68, cast_expression) = s569
goto(s68, multiplicative_expression) = s212
goto(s68, postfix_expression) = s645
goto(s68, primary_expression) = s735
goto(s68, shift_expression) = s799
goto(s68, unary_expression) = s330
goto(s68, unary_operator) = s283
goto(s68, '!') = s956
goto(s68, '&') = s957
goto(s68, '(') = s29
goto(s68, '*') = s958
goto(s68, '+') = s959
goto(s68, '++') = s624
goto(s68, '-') = s960
goto(s68, '--') = s625
goto(s68, 'sizeof') = s626
goto(s68, '~') = s961
goto(s68, CONSTANT) = s755
goto(s68, IDENTIFIER) = s765
goto(s68, STRING_LITERAL) = s775
goto(s69, additive_expression) = s171
goto(s69, cast_expression) = s569
goto(s69, multiplicative_expression) = s212
goto(s69, postfix_expression) = s645
goto(s69, primary_expression) = s735
goto(s69, unary_expression) = s330
goto(s69, unary_operator) = s283
goto(s69, '!') = s956
goto(s69, '&') = s957
goto(s69, '(') = s29
goto(s69, '*') = s958
goto(s69, '+') = s959
goto(s69, '++') = s624
goto(s69, '-') = s960
goto(s69, '--') = s625
goto(s69, 'sizeof') = s626
goto(s69, '~') = s961
goto(s69, CONSTANT) = s755
goto(s69, IDENTIFIER) = s765
goto(s69, STRING_LITERAL) = s775
goto(s70, additive_expression) = s172
goto(s70, cast_expression) = s569
goto(s70, multiplicative_expression) = s212
goto(s70, postfix_expression) = s645
goto(s70, primary_expression) = s735
goto(s70, unary_expression) = s330
goto(s70, unary_operator) = s283
goto(s70, '!') = s956
goto(s70, '&') = s957
goto(s70, '(') = s29
goto(s70, '*') = s958
goto(s70, '+') = s959
goto(s70, '++') = s624
goto(s70, '-') = s960
goto(s70, '--') = s625
goto(s70, 'sizeof') = s626
goto(s70, '~') = s961
goto(s70, CONSTANT) = s755
goto(s70, IDENTIFIER) = s765
goto(s70, STRING_LITERAL) = s775
goto(s71, additive_expression) = s173
goto(s71, and_expression) = s220
goto(s71, assignment_expression) = s260
goto(s71, cast_expression) = s570
goto(s71, conditional_expression) = s254
goto(s71, equality_expression) = s237
goto(s71, exclusive_or_expression) = s507
goto(s71, inclusive_or_expression) = s547
goto(s71, logical_and_expression) = s559
goto(s71, logical_or_expression) = s337
goto(s71, multiplicative_expression) = s213
goto(s71, postfix_expression) = s643
goto(s71, primary_expression) = s733
goto(s71, relational_expression) = s500
goto(s71, shift_expression) = s806
goto(s71, unary_expression) = s257
goto(s71, unary_operator) = s276
goto(s71, '!') = s956
goto(s71, '&') = s957
goto(s71, '(') = s30
goto(s71, '*') = s958
goto(s71, '+') = s959
goto(s71, '++') = s618
goto(s71, '-') = s960
goto(s71, '--') = s619
goto(s71, 'sizeof') = s620
goto(s71, '~') = s961
goto(s71, CONSTANT) = s753
goto(s71, IDENTIFIER) = s763
goto(s71, STRING_LITERAL) = s773
goto(s72, additive_expression) = s173
goto(s72, and_expression) = s220
goto(s72, assignment_expression) = s518
goto(s72, cast_expression) = s570
goto(s72, conditional_expression) = s254
goto(s72, equality_expression) = s237
goto(s72, exclusive_or_expression) = s507
goto(s72, expression) = s342
goto(s72, inclusive_or_expression) = s547
goto(s72, logical_and_expression) = s559
goto(s72, logical_or_expression) = s337
goto(s72, multiplicative_expression) = s213
goto(s72, postfix_expression) = s643
goto(s72, primary_expression) = s733
goto(s72, relational_expression) = s500
goto(s72, shift_expression) = s806
goto(s72, unary_expression) = s257
goto(s72, unary_operator) = s276
goto(s72, '!') = s956
goto(s72, '&') = s957
goto(s72, '(') = s30
goto(s72, '*') = s958
goto(s72, '+') = s959
goto(s72, '++') = s618
goto(s72, '-') = s960
goto(s72, '--') = s619
goto(s72, 'sizeof') = s620
goto(s72, '~') = s961
goto(s72, CONSTANT) = s753
goto(s72, IDENTIFIER) = s763
goto(s72, STRING_LITERAL) = s773
goto(s73, additive_expression) = s173
goto(s73, and_expression) = s220
goto(s73, assignment_expression) = s518
goto(s73, cast_expression) = s570
goto(s73, conditional_expression) = s254
goto(s73, equality_expression) = s237
goto(s73, exclusive_or_expression) = s507
goto(s73, expression) = s343
goto(s73, inclusive_or_expression) = s547
goto(s73, logical_and_expression) = s559
goto(s73, logical_or_expression) = s337
goto(s73, multiplicative_expression) = s213
goto(s73, postfix_expression) = s643
goto(s73, primary_expression) = s733
goto(s73, relational_expression) = s500
goto(s73, shift_expression) = s806
goto(s73, unary_expression) = s257
goto(s73, unary_operator) = s276
goto(s73, '!') = s956
goto(s73, '&') = s957
goto(s73, '(') = s30
goto(s73, '*') = s958
goto(s73, '+') = s959
goto(s73, '++') = s618
goto(s73, '-') = s960
goto(s73, '--') = s619
goto(s73, 'sizeof') = s620
goto(s73, '~') = s961
goto(s73, CONSTANT) = s753
goto(s73, IDENTIFIER) = s763
goto(s73, STRING_LITERAL) = s773
goto(s74, additive_expression) = s173
goto(s74, and_expression) = s220
goto(s74, assignment_expression) = s518
goto(s74, cast_expression) = s570
goto(s74, conditional_expression) = s254
goto(s74, equality_expression) = s237
goto(s74, exclusive_or_expression) = s507
goto(s74, expression) = s344
goto(s74, inclusive_or_expression) = s547
goto(s74, logical_and_expression) = s559
goto(s74, logical_or_expression) = s337
goto(s74, multiplicative_expression) = s213
goto(s74, postfix_expression) = s643
goto(s74, primary_expression) = s733
goto(s74, relational_expression) = s500
goto(s74, shift_expression) = s806
goto(s74, unary_expression) = s257
goto(s74, unary_operator) = s276
goto(s74, '!') = s956
goto(s74, '&') = s957
goto(s74, '(') = s30
goto(s74, '*') = s958
goto(s74, '+') = s959
goto(s74, '++') = s618
goto(s74, '-') = s960
goto(s74, '--') = s619
goto(s74, 'sizeof') = s620
goto(s74, '~') = s961
goto(s74, CONSTANT) = s753
goto(s74, IDENTIFIER) = s763
goto(s74, STRING_LITERAL) = s773
goto(s75, additive_expression) = s173
goto(s75, and_expression) = s220
goto(s75, assignment_expression) = s518
goto(s75, cast_expression) = s570
goto(s75, conditional_expression) = s254
goto(s75, equality_expression) = s237
goto(s75, exclusive_or_expression) = s507
goto(s75, expression) = s345
goto(s75, inclusive_or_expression) = s547
goto(s75, logical_and_expression) = s559
goto(s75, logical_or_expression) = s337
goto(s75, multiplicative_expression) = s213
goto(s75, postfix_expression) = s643
goto(s75, primary_expression) = s733
goto(s75, relational_expression) = s500
goto(s75, shift_expression) = s806
goto(s75, unary_expression) = s257
goto(s75, unary_operator) = s276
goto(s75, '!') = s956
goto(s75, '&') = s957
goto(s75, '(') = s30
goto(s75, '*') = s958
goto(s75, '+') = s959
goto(s75, '++') = s618
goto(s75, '-') = s960
goto(s75, '--') = s619
goto(s75, 'sizeof') = s620
goto(s75, '~') = s961
goto(s75, CONSTANT) = s753
goto(s75, IDENTIFIER) = s763
goto(s75, STRING_LITERAL) = s773
goto(s76, additive_expression) = s173
goto(s76, and_expression) = s220
goto(s76, assignment_expression) = s518
goto(s76, cast_expression) = s570
goto(s76, conditional_expression) = s254
goto(s76, equality_expression) = s237
goto(s76, exclusive_or_expression) = s507
goto(s76, expression) = s346
goto(s76, inclusive_or_expression) = s547
goto(s76, logical_and_expression) = s559
goto(s76, logical_or_expression) = s337
goto(s76, multiplicative_expression) = s213
goto(s76, postfix_expression) = s643
goto(s76, primary_expression) = s733
goto(s76, relational_expression) = s500
goto(s76, shift_expression) = s806
goto(s76, unary_expression) = s257
goto(s76, unary_operator) = s276
goto(s76, '!') = s956
goto(s76, '&') = s957
goto(s76, '(') = s30
goto(s76, '*') = s958
goto(s76, '+') = s959
goto(s76, '++') = s618
goto(s76, '-') = s960
goto(s76, '--') = s619
goto(s76, 'sizeof') = s620
goto(s76, '~') = s961
goto(s76, CONSTANT) = s753
goto(s76, IDENTIFIER) = s763
goto(s76, STRING_LITERAL) = s773
goto(s77, additive_expression) = s173
goto(s77, and_expression) = s220
goto(s77, assignment_expression) = s518
goto(s77, cast_expression) = s570
goto(s77, conditional_expression) = s254
goto(s77, equality_expression) = s237
goto(s77, exclusive_or_expression) = s507
goto(s77, expression) = s347
goto(s77, inclusive_or_expression) = s547
goto(s77, logical_and_expression) = s559
goto(s77, logical_or_expression) = s337
goto(s77, multiplicative_expression) = s213
goto(s77, postfix_expression) = s643
goto(s77, primary_expression) = s733
goto(s77, relational_expression) = s500
goto(s77, shift_expression) = s806
goto(s77, unary_expression) = s257
goto(s77, unary_operator) = s276
goto(s77, '!') = s956
goto(s77, '&') = s957
goto(s77, '(') = s30
goto(s77, '*') = s958
goto(s77, '+') = s959
goto(s77, '++') = s618
goto(s77, '-') = s960
goto(s77, '--') = s619
goto(s77, 'sizeof') = s620
goto(s77, '~') = s961
goto(s77, CONSTANT) = s753
goto(s77, IDENTIFIER) = s763
goto(s77, STRING_LITERAL) = s773
goto(s78, additive_expression) = s173
goto(s78, and_expression) = s220
goto(s78, assignment_expression) = s540
goto(s78, cast_expression) = s570
goto(s78, conditional_expression) = s254
goto(s78, equality_expression) = s237
goto(s78, exclusive_or_expression) = s507
goto(s78, inclusive_or_expression) = s547
goto(s78, logical_and_expression) = s559
goto(s78, logical_or_expression) = s337
goto(s78, multiplicative_expression) = s213
goto(s78, postfix_expression) = s643
goto(s78, primary_expression) = s733
goto(s78, relational_expression) = s500
goto(s78, shift_expression) = s806
goto(s78, unary_expression) = s257
goto(s78, unary_operator) = s276
goto(s78, '!') = s956
goto(s78, '&') = s957
goto(s78, '(') = s30
goto(s78, '*') = s958
goto(s78, '+') = s959
goto(s78, '++') = s618
goto(s78, '-') = s960
goto(s78, '--') = s619
goto(s78, 'sizeof') = s620
goto(s78, '~') = s961
goto(s78, CONSTANT) = s753
goto(s78, IDENTIFIER) = s763
goto(s78, STRING_LITERAL) = s773
goto(s79, additive_expression) = s173
goto(s79, and_expression) = s220
goto(s79, cast_expression) = s570
goto(s79, conditional_expression) = s349
goto(s79, equality_expression) = s237
goto(s79, exclusive_or_expression) = s507
goto(s79, inclusive_or_expression) = s547
goto(s79, logical_and_expression) = s559
goto(s79, logical_or_expression) = s337
goto(s79, multiplicative_expression) = s213
goto(s79, postfix_expression) = s646
goto(s79, primary_expression) = s736
goto(s79, relational_expression) = s500
goto(s79, shift_expression) = s806
goto(s79, unary_expression) = s331
goto(s79, unary_operator) = s288
goto(s79, '!') = s956
goto(s79, '&') = s957
goto(s79, '(') = s31
goto(s79, '*') = s958
goto(s79, '+') = s959
goto(s79, '++') = s627
goto(s79, '-') = s960
goto(s79, '--') = s628
goto(s79, 'sizeof') = s629
goto(s79, '~') = s961
goto(s79, CONSTANT) = s756
goto(s79, IDENTIFIER) = s766
goto(s79, STRING_LITERAL) = s776
goto(s80, additive_expression) = s173
goto(s80, and_expression) = s220
goto(s80, cast_expression) = s570
goto(s80, equality_expression) = s237
goto(s80, exclusive_or_expression) = s507
goto(s80, inclusive_or_expression) = s547
goto(s80, logical_and_expression) = s560
goto(s80, multiplicative_expression) = s213
goto(s80, postfix_expression) = s646
goto(s80, primary_expression) = s736
goto(s80, relational_expression) = s500
goto(s80, shift_expression) = s806
goto(s80, unary_expression) = s331
goto(s80, unary_operator) = s288
goto(s80, '!') = s956
goto(s80, '&') = s957
goto(s80, '(') = s31
goto(s80, '*') = s958
goto(s80, '+') = s959
goto(s80, '++') = s627
goto(s80, '-') = s960
goto(s80, '--') = s628
goto(s80, 'sizeof') = s629
goto(s80, '~') = s961
goto(s80, CONSTANT) = s756
goto(s80, IDENTIFIER) = s766
goto(s80, STRING_LITERAL) = s776
goto(s81, additive_expression) = s173
goto(s81, and_expression) = s220
goto(s81, cast_expression) = s570
goto(s81, equality_expression) = s237
goto(s81, exclusive_or_expression) = s507
goto(s81, inclusive_or_expression) = s548
goto(s81, multiplicative_expression) = s213
goto(s81, postfix_expression) = s646
goto(s81, primary_expression) = s736
goto(s81, relational_expression) = s500
goto(s81, shift_expression) = s806
goto(s81, unary_expression) = s331
goto(s81, unary_operator) = s288
goto(s81, '!') = s956
goto(s81, '&') = s957
goto(s81, '(') = s31
goto(s81, '*') = s958
goto(s81, '+') = s959
goto(s81, '++') = s627
goto(s81, '-') = s960
goto(s81, '--') = s628
goto(s81, 'sizeof') = s629
goto(s81, '~') = s961
goto(s81, CONSTANT) = s756
goto(s81, IDENTIFIER) = s766
goto(s81, STRING_LITERAL) = s776
goto(s82, additive_expression) = s173
goto(s82, and_expression) = s220
goto(s82, cast_expression) = s570
goto(s82, equality_expression) = s237
goto(s82, exclusive_or_expression) = s508
goto(s82, multiplicative_expression) = s213
goto(s82, postfix_expression) = s646
goto(s82, primary_expression) = s736
goto(s82, relational_expression) = s500
goto(s82, shift_expression) = s806
goto(s82, unary_expression) = s331
goto(s82, unary_operator) = s288
goto(s82, '!') = s956
goto(s82, '&') = s957
goto(s82, '(') = s31
goto(s82, '*') = s958
goto(s82, '+') = s959
goto(s82, '++') = s627
goto(s82, '-') = s960
goto(s82, '--') = s628
goto(s82, 'sizeof') = s629
goto(s82, '~') = s961
goto(s82, CONSTANT) = s756
goto(s82, IDENTIFIER) = s766
goto(s82, STRING_LITERAL) = s776
goto(s83, additive_expression) = s173
goto(s83, and_expression) = s221
goto(s83, cast_expression) = s570
goto(s83, equality_expression) = s237
goto(s83, multiplicative_expression) = s213
goto(s83, postfix_expression) = s646
goto(s83, primary_expression) = s736
goto(s83, relational_expression) = s500
goto(s83, shift_expression) = s806
goto(s83, unary_expression) = s331
goto(s83, unary_operator) = s288
goto(s83, '!') = s956
goto(s83, '&') = s957
goto(s83, '(') = s31
goto(s83, '*') = s958
goto(s83, '+') = s959
goto(s83, '++') = s627
goto(s83, '-') = s960
goto(s83, '--') = s628
goto(s83, 'sizeof') = s629
goto(s83, '~') = s961
goto(s83, CONSTANT) = s756
goto(s83, IDENTIFIER) = s766
goto(s83, STRING_LITERAL) = s776
goto(s84, additive_expression) = s173
goto(s84, cast_expression) = s570
goto(s84, equality_expression) = s231
goto(s84, multiplicative_expression) = s213
goto(s84, postfix_expression) = s646
goto(s84, primary_expression) = s736
goto(s84, relational_expression) = s500
goto(s84, shift_expression) = s806
goto(s84, unary_expression) = s331
goto(s84, unary_operator) = s288
goto(s84, '!') = s956
goto(s84, '&') = s957
goto(s84, '(') = s31
goto(s84, '*') = s958
goto(s84, '+') = s959
goto(s84, '++') = s627
goto(s84, '-') = s960
goto(s84, '--') = s628
goto(s84, 'sizeof') = s629
goto(s84, '~') = s961
goto(s84, CONSTANT) = s756
goto(s84, IDENTIFIER) = s766
goto(s84, STRING_LITERAL) = s776
goto(s85, additive_expression) = s173
goto(s85, cast_expression) = s570
goto(s85, multiplicative_expression) = s213
goto(s85, postfix_expression) = s646
goto(s85, primary_expression) = s736
goto(s85, relational_expression) = s488
goto(s85, shift_expression) = s806
goto(s85, unary_expression) = s331
goto(s85, unary_operator) = s288
goto(s85, '!') = s956
goto(s85, '&') = s957
goto(s85, '(') = s31
goto(s85, '*') = s958
goto(s85, '+') = s959
goto(s85, '++') = s627
goto(s85, '-') = s960
goto(s85, '--') = s628
goto(s85, 'sizeof') = s629
goto(s85, '~') = s961
goto(s85, CONSTANT) = s756
goto(s85, IDENTIFIER) = s766
goto(s85, STRING_LITERAL) = s776
goto(s86, additive_expression) = s173
goto(s86, cast_expression) = s570
goto(s86, multiplicative_expression) = s213
goto(s86, postfix_expression) = s646
goto(s86, primary_expression) = s736
goto(s86, relational_expression) = s494
goto(s86, shift_expression) = s806
goto(s86, unary_expression) = s331
goto(s86, unary_operator) = s288
goto(s86, '!') = s956
goto(s86, '&') = s957
goto(s86, '(') = s31
goto(s86, '*') = s958
goto(s86, '+') = s959
goto(s86, '++') = s627
goto(s86, '-') = s960
goto(s86, '--') = s628
goto(s86, 'sizeof') = s629
goto(s86, '~') = s961
goto(s86, CONSTANT) = s756
goto(s86, IDENTIFIER) = s766
goto(s86, STRING_LITERAL) = s776
goto(s87, additive_expression) = s173
goto(s87, cast_expression) = s570
goto(s87, multiplicative_expression) = s213
goto(s87, postfix_expression) = s646
goto(s87, primary_expression) = s736
goto(s87, shift_expression) = s782
goto(s87, unary_expression) = s331
goto(s87, unary_operator) = s288
goto(s87, '!') = s956
goto(s87, '&') = s957
goto(s87, '(') = s31
goto(s87, '*') = s958
goto(s87, '+') = s959
goto(s87, '++') = s627
goto(s87, '-') = s960
goto(s87, '--') = s628
goto(s87, 'sizeof') = s629
goto(s87, '~') = s961
goto(s87, CONSTANT) = s756
goto(s87, IDENTIFIER) = s766
goto(s87, STRING_LITERAL) = s776
goto(s88, additive_expression) = s173
goto(s88, cast_expression) = s570
goto(s88, multiplicative_expression) = s213
goto(s88, postfix_expression) = s646
goto(s88, primary_expression) = s736
goto(s88, shift_expression) = s788
goto(s88, unary_expression) = s331
goto(s88, unary_operator) = s288
goto(s88, '!') = s956
goto(s88, '&') = s957
goto(s88, '(') = s31
goto(s88, '*') = s958
goto(s88, '+') = s959
goto(s88, '++') = s627
goto(s88, '-') = s960
goto(s88, '--') = s628
goto(s88, 'sizeof') = s629
goto(s88, '~') = s961
goto(s88, CONSTANT) = s756
goto(s88, IDENTIFIER) = s766
goto(s88, STRING_LITERAL) = s776
goto(s89, additive_expression) = s173
goto(s89, cast_expression) = s570
goto(s89, multiplicative_expression) = s213
goto(s89, postfix_expression) = s646
goto(s89, primary_expression) = s736
goto(s89, shift_expression) = s794
goto(s89, unary_expression) = s331
goto(s89, unary_operator) = s288
goto(s89, '!') = s956
goto(s89, '&') = s957
goto(s89, '(') = s31
goto(s89, '*') = s958
goto(s89, '+') = s959
goto(s89, '++') = s627
goto(s89, '-') = s960
goto(s89, '--') = s628
goto(s89, 'sizeof') = s629
goto(s89, '~') = s961
goto(s89, CONSTANT) = s756
goto(s89, IDENTIFIER) = s766
goto(s89, STRING_LITERAL) = s776
goto(s90, additive_expression) = s173
goto(s90, cast_expression) = s570
goto(s90, multiplicative_expression) = s213
goto(s90, postfix_expression) = s646
goto(s90, primary_expression) = s736
goto(s90, shift_expression) = s800
goto(s90, unary_expression) = s331
goto(s90, unary_operator) = s288
goto(s90, '!') = s956
goto(s90, '&') = s957
goto(s90, '(') = s31
goto(s90, '*') = s958
goto(s90, '+') = s959
goto(s90, '++') = s627
goto(s90, '-') = s960
goto(s90, '--') = s628
goto(s90, 'sizeof') = s629
goto(s90, '~') = s961
goto(s90, CONSTANT) = s756
goto(s90, IDENTIFIER) = s766
goto(s90, STRING_LITERAL) = s776
goto(s91, additive_expression) = s174
goto(s91, cast_expression) = s570
goto(s91, multiplicative_expression) = s213
goto(s91, postfix_expression) = s646
goto(s91, primary_expression) = s736
goto(s91, unary_expression) = s331
goto(s91, unary_operator) = s288
goto(s91, '!') = s956
goto(s91, '&') = s957
goto(s91, '(') = s31
goto(s91, '*') = s958
goto(s91, '+') = s959
goto(s91, '++') = s627
goto(s91, '-') = s960
goto(s91, '--') = s628
goto(s91, 'sizeof') = s629
goto(s91, '~') = s961
goto(s91, CONSTANT) = s756
goto(s91, IDENTIFIER) = s766
goto(s91, STRING_LITERAL) = s776
goto(s92, additive_expression) = s175
goto(s92, cast_expression) = s570
goto(s92, multiplicative_expression) = s213
goto(s92, postfix_expression) = s646
goto(s92, primary_expression) = s736
goto(s92, unary_expression) = s331
goto(s92, unary_operator) = s288
goto(s92, '!') = s956
goto(s92, '&') = s957
goto(s92, '(') = s31
goto(s92, '*') = s958
goto(s92, '+') = s959
goto(s92, '++') = s627
goto(s92, '-') = s960
goto(s92, '--') = s628
goto(s92, 'sizeof') = s629
goto(s92, '~') = s961
goto(s92, CONSTANT) = s756
goto(s92, IDENTIFIER) = s766
goto(s92, STRING_LITERAL) = s776
goto(s93, additive_expression) = s176
goto(s93, and_expression) = s222
goto(s93, cast_expression) = s571
goto(s93, conditional_expression) = s350
goto(s93, equality_expression) = s238
goto(s93, exclusive_or_expression) = s509
goto(s93, inclusive_or_expression) = s549
goto(s93, logical_and_expression) = s561
goto(s93, logical_or_expression) = s338
goto(s93, multiplicative_expression) = s214
goto(s93, postfix_expression) = s647
goto(s93, primary_expression) = s737
goto(s93, relational_expression) = s501
goto(s93, shift_expression) = s807
goto(s93, unary_expression) = s332
goto(s93, unary_operator) = s293
goto(s93, '!') = s956
goto(s93, '&') = s957
goto(s93, '(') = s32
goto(s93, '*') = s958
goto(s93, '+') = s959
goto(s93, '++') = s630
goto(s93, '-') = s960
goto(s93, '--') = s631
goto(s93, 'sizeof') = s632
goto(s93, '~') = s961
goto(s93, CONSTANT) = s757
goto(s93, IDENTIFIER) = s767
goto(s93, STRING_LITERAL) = s777
goto(s94, additive_expression) = s176
goto(s94, and_expression) = s222
goto(s94, cast_expression) = s571
goto(s94, conditional_expression) = s354
goto(s94, constant_expression) = s824
goto(s94, equality_expression) = s238
goto(s94, exclusive_or_expression) = s509
goto(s94, inclusive_or_expression) = s549
goto(s94, logical_and_expression) = s561
goto(s94, logical_or_expression) = s338
goto(s94, multiplicative_expression) = s214
goto(s94, postfix_expression) = s647
goto(s94, primary_expression) = s737
goto(s94, relational_expression) = s501
goto(s94, shift_expression) = s807
goto(s94, unary_expression) = s332
goto(s94, unary_operator) = s293
goto(s94, '!') = s956
goto(s94, '&') = s957
goto(s94, '(') = s32
goto(s94, '*') = s958
goto(s94, '+') = s959
goto(s94, '++') = s630
goto(s94, '-') = s960
goto(s94, '--') = s631
goto(s94, 'sizeof') = s632
goto(s94, '~') = s961
goto(s94, CONSTANT) = s757
goto(s94, IDENTIFIER) = s767
goto(s94, STRING_LITERAL) = s777
goto(s95, additive_expression) = s176
goto(s95, and_expression) = s222
goto(s95, cast_expression) = s571
goto(s95, conditional_expression) = s354
goto(s95, constant_expression) = s826
goto(s95, equality_expression) = s238
goto(s95, exclusive_or_expression) = s509
goto(s95, inclusive_or_expression) = s549
goto(s95, logical_and_expression) = s561
goto(s95, logical_or_expression) = s338
goto(s95, multiplicative_expression) = s214
goto(s95, postfix_expression) = s647
goto(s95, primary_expression) = s737
goto(s95, relational_expression) = s501
goto(s95, shift_expression) = s807
goto(s95, unary_expression) = s332
goto(s95, unary_operator) = s293
goto(s95, '!') = s956
goto(s95, '&') = s957
goto(s95, '(') = s32
goto(s95, '*') = s958
goto(s95, '+') = s959
goto(s95, '++') = s630
goto(s95, '-') = s960
goto(s95, '--') = s631
goto(s95, 'sizeof') = s632
goto(s95, '~') = s961
goto(s95, CONSTANT) = s757
goto(s95, IDENTIFIER) = s767
goto(s95, STRING_LITERAL) = s777
goto(s96, additive_expression) = s176
goto(s96, and_expression) = s222
goto(s96, cast_expression) = s571
goto(s96, equality_expression) = s238
goto(s96, exclusive_or_expression) = s509
goto(s96, inclusive_or_expression) = s549
goto(s96, logical_and_expression) = s562
goto(s96, multiplicative_expression) = s214
goto(s96, postfix_expression) = s647
goto(s96, primary_expression) = s737
goto(s96, relational_expression) = s501
goto(s96, shift_expression) = s807
goto(s96, unary_expression) = s332
goto(s96, unary_operator) = s293
goto(s96, '!') = s956
goto(s96, '&') = s957
goto(s96, '(') = s32
goto(s96, '*') = s958
goto(s96, '+') = s959
goto(s96, '++') = s630
goto(s96, '-') = s960
goto(s96, '--') = s631
goto(s96, 'sizeof') = s632
goto(s96, '~') = s961
goto(s96, CONSTANT) = s757
goto(s96, IDENTIFIER) = s767
goto(s96, STRING_LITERAL) = s777
goto(s97, additive_expression) = s176
goto(s97, and_expression) = s222
goto(s97, cast_expression) = s571
goto(s97, equality_expression) = s238
goto(s97, exclusive_or_expression) = s509
goto(s97, inclusive_or_expression) = s550
goto(s97, multiplicative_expression) = s214
goto(s97, postfix_expression) = s647
goto(s97, primary_expression) = s737
goto(s97, relational_expression) = s501
goto(s97, shift_expression) = s807
goto(s97, unary_expression) = s332
goto(s97, unary_operator) = s293
goto(s97, '!') = s956
goto(s97, '&') = s957
goto(s97, '(') = s32
goto(s97, '*') = s958
goto(s97, '+') = s959
goto(s97, '++') = s630
goto(s97, '-') = s960
goto(s97, '--') = s631
goto(s97, 'sizeof') = s632
goto(s97, '~') = s961
goto(s97, CONSTANT) = s757
goto(s97, IDENTIFIER) = s767
goto(s97, STRING_LITERAL) = s777
goto(s98, additive_expression) = s176
goto(s98, and_expression) = s222
goto(s98, cast_expression) = s571
goto(s98, equality_expression) = s238
goto(s98, exclusive_or_expression) = s510
goto(s98, multiplicative_expression) = s214
goto(s98, postfix_expression) = s647
goto(s98, primary_expression) = s737
goto(s98, relational_expression) = s501
goto(s98, shift_expression) = s807
goto(s98, unary_expression) = s332
goto(s98, unary_operator) = s293
goto(s98, '!') = s956
goto(s98, '&') = s957
goto(s98, '(') = s32
goto(s98, '*') = s958
goto(s98, '+') = s959
goto(s98, '++') = s630
goto(s98, '-') = s960
goto(s98, '--') = s631
goto(s98, 'sizeof') = s632
goto(s98, '~') = s961
goto(s98, CONSTANT) = s757
goto(s98, IDENTIFIER) = s767
goto(s98, STRING_LITERAL) = s777
goto(s99, additive_expression) = s176
goto(s99, and_expression) = s223
goto(s99, cast_expression) = s571
goto(s99, equality_expression) = s238
goto(s99, multiplicative_expression) = s214
goto(s99, postfix_expression) = s647
goto(s99, primary_expression) = s737
goto(s99, relational_expression) = s501
goto(s99, shift_expression) = s807
goto(s99, unary_expression) = s332
goto(s99, unary_operator) = s293
goto(s99, '!') = s956
goto(s99, '&') = s957
goto(s99, '(') = s32
goto(s99, '*') = s958
goto(s99, '+') = s959
goto(s99, '++') = s630
goto(s99, '-') = s960
goto(s99, '--') = s631
goto(s99, 'sizeof') = s632
goto(s99, '~') = s961
goto(s99, CONSTANT) = s757
goto(s99, IDENTIFIER) = s767
goto(s99, STRING_LITERAL) = s777
goto(s100, additive_expression) = s176
goto(s100, cast_expression) = s571
goto(s100, equality_expression) = s232
goto(s100, multiplicative_expression) = s214
goto(s100, postfix_expression) = s647
goto(s100, primary_expression) = s737
goto(s100, relational_expression) = s501
goto(s100, shift_expression) = s807
goto(s100, unary_expression) = s332
goto(s100, unary_operator) = s293
goto(s100, '!') = s956
goto(s100, '&') = s957
goto(s100, '(') = s32
goto(s100, '*') = s958
goto(s100, '+') = s959
goto(s100, '++') = s630
goto(s100, '-') = s960
goto(s100, '--') = s631
goto(s100, 'sizeof') = s632
goto(s100, '~') = s961
goto(s100, CONSTANT) = s757
goto(s100, IDENTIFIER) = s767
goto(s100, STRING_LITERAL) = s777
goto(s101, additive_expression) = s176
goto(s101, cast_expression) = s571
goto(s101, multiplicative_expression) = s214
goto(s101, postfix_expression) = s647
goto(s101, primary_expression) = s737
goto(s101, relational_expression) = s489
goto(s101, shift_expression) = s807
goto(s101, unary_expression) = s332
goto(s101, unary_operator) = s293
goto(s101, '!') = s956
goto(s101, '&') = s957
goto(s101, '(') = s32
goto(s101, '*') = s958
goto(s101, '+') = s959
goto(s101, '++') = s630
goto(s101, '-') = s960
goto(s101, '--') = s631
goto(s101, 'sizeof') = s632
goto(s101, '~') = s961
goto(s101, CONSTANT) = s757
goto(s101, IDENTIFIER) = s767
goto(s101, STRING_LITERAL) = s777
goto(s102, additive_expression) = s176
goto(s102, cast_expression) = s571
goto(s102, multiplicative_expression) = s214
goto(s102, postfix_expression) = s647
goto(s102, primary_expression) = s737
goto(s102, relational_expression) = s495
goto(s102, shift_expression) = s807
goto(s102, unary_expression) = s332
goto(s102, unary_operator) = s293
goto(s102, '!') = s956
goto(s102, '&') = s957
goto(s102, '(') = s32
goto(s102, '*') = s958
goto(s102, '+') = s959
goto(s102, '++') = s630
goto(s102, '-') = s960
goto(s102, '--') = s631
goto(s102, 'sizeof') = s632
goto(s102, '~') = s961
goto(s102, CONSTANT) = s757
goto(s102, IDENTIFIER) = s767
goto(s102, STRING_LITERAL) = s777
goto(s103, additive_expression) = s176
goto(s103, cast_expression) = s571
goto(s103, multiplicative_expression) = s214
goto(s103, postfix_expression) = s647
goto(s103, primary_expression) = s737
goto(s103, shift_expression) = s783
goto(s103, unary_expression) = s332
goto(s103, unary_operator) = s293
goto(s103, '!') = s956
goto(s103, '&') = s957
goto(s103, '(') = s32
goto(s103, '*') = s958
goto(s103, '+') = s959
goto(s103, '++') = s630
goto(s103, '-') = s960
goto(s103, '--') = s631
goto(s103, 'sizeof') = s632
goto(s103, '~') = s961
goto(s103, CONSTANT) = s757
goto(s103, IDENTIFIER) = s767
goto(s103, STRING_LITERAL) = s777
goto(s104, additive_expression) = s176
goto(s104, cast_expression) = s571
goto(s104, multiplicative_expression) = s214
goto(s104, postfix_expression) = s647
goto(s104, primary_expression) = s737
goto(s104, shift_expression) = s789
goto(s104, unary_expression) = s332
goto(s104, unary_operator) = s293
goto(s104, '!') = s956
goto(s104, '&') = s957
goto(s104, '(') = s32
goto(s104, '*') = s958
goto(s104, '+') = s959
goto(s104, '++') = s630
goto(s104, '-') = s960
goto(s104, '--') = s631
goto(s104, 'sizeof') = s632
goto(s104, '~') = s961
goto(s104, CONSTANT) = s757
goto(s104, IDENTIFIER) = s767
goto(s104, STRING_LITERAL) = s777
goto(s105, additive_expression) = s176
goto(s105, cast_expression) = s571
goto(s105, multiplicative_expression) = s214
goto(s105, postfix_expression) = s647
goto(s105, primary_expression) = s737
goto(s105, shift_expression) = s795
goto(s105, unary_expression) = s332
goto(s105, unary_operator) = s293
goto(s105, '!') = s956
goto(s105, '&') = s957
goto(s105, '(') = s32
goto(s105, '*') = s958
goto(s105, '+') = s959
goto(s105, '++') = s630
goto(s105, '-') = s960
goto(s105, '--') = s631
goto(s105, 'sizeof') = s632
goto(s105, '~') = s961
goto(s105, CONSTANT) = s757
goto(s105, IDENTIFIER) = s767
goto(s105, STRING_LITERAL) = s777
goto(s106, additive_expression) = s176
goto(s106, cast_expression) = s571
goto(s106, multiplicative_expression) = s214
goto(s106, postfix_expression) = s647
goto(s106, primary_expression) = s737
goto(s106, shift_expression) = s801
goto(s106, unary_expression) = s332
goto(s106, unary_operator) = s293
goto(s106, '!') = s956
goto(s106, '&') = s957
goto(s106, '(') = s32
goto(s106, '*') = s958
goto(s106, '+') = s959
goto(s106, '++') = s630
goto(s106, '-') = s960
goto(s106, '--') = s631
goto(s106, 'sizeof') = s632
goto(s106, '~') = s961
goto(s106, CONSTANT) = s757
goto(s106, IDENTIFIER) = s767
goto(s106, STRING_LITERAL) = s777
goto(s107, additive_expression) = s177
goto(s107, cast_expression) = s571
goto(s107, multiplicative_expression) = s214
goto(s107, postfix_expression) = s647
goto(s107, primary_expression) = s737
goto(s107, unary_expression) = s332
goto(s107, unary_operator) = s293
goto(s107, '!') = s956
goto(s107, '&') = s957
goto(s107, '(') = s32
goto(s107, '*') = s958
goto(s107, '+') = s959
goto(s107, '++') = s630
goto(s107, '-') = s960
goto(s107, '--') = s631
goto(s107, 'sizeof') = s632
goto(s107, '~') = s961
goto(s107, CONSTANT) = s757
goto(s107, IDENTIFIER) = s767
goto(s107, STRING_LITERAL) = s777
goto(s108, additive_expression) = s178
goto(s108, cast_expression) = s571
goto(s108, multiplicative_expression) = s214
goto(s108, postfix_expression) = s647
goto(s108, primary_expression) = s737
goto(s108, unary_expression) = s332
goto(s108, unary_operator) = s293
goto(s108, '!') = s956
goto(s108, '&') = s957
goto(s108, '(') = s32
goto(s108, '*') = s958
goto(s108, '+') = s959
goto(s108, '++') = s630
goto(s108, '-') = s960
goto(s108, '--') = s631
goto(s108, 'sizeof') = s632
goto(s108, '~') = s961
goto(s108, CONSTANT) = s757
goto(s108, IDENTIFIER) = s767
goto(s108, STRING_LITERAL) = s777
goto(s109, additive_expression) = s179
goto(s109, and_expression) = s224
goto(s109, assignment_expression) = s261
goto(s109, cast_expression) = s572
goto(s109, conditional_expression) = s255
goto(s109, equality_expression) = s239
goto(s109, exclusive_or_expression) = s511
goto(s109, inclusive_or_expression) = s551
goto(s109, logical_and_expression) = s563
goto(s109, logical_or_expression) = s339
goto(s109, multiplicative_expression) = s215
goto(s109, postfix_expression) = s644
goto(s109, primary_expression) = s734
goto(s109, relational_expression) = s502
goto(s109, shift_expression) = s808
goto(s109, unary_expression) = s258
goto(s109, unary_operator) = s278
goto(s109, '!') = s956
goto(s109, '&') = s957
goto(s109, '(') = s33
goto(s109, '*') = s958
goto(s109, '+') = s959
goto(s109, '++') = s621
goto(s109, '-') = s960
goto(s109, '--') = s622
goto(s109, 'sizeof') = s623
goto(s109, '~') = s961
goto(s109, CONSTANT) = s754
goto(s109, IDENTIFIER) = s764
goto(s109, STRING_LITERAL) = s774
goto(s110, additive_expression) = s179
goto(s110, and_expression) = s224
goto(s110, assignment_expression) = s519
goto(s110, cast_expression) = s572
goto(s110, conditional_expression) = s255
goto(s110, equality_expression) = s239
goto(s110, exclusive_or_expression) = s511
goto(s110, expression) = s530
goto(s110, inclusive_or_expression) = s551
goto(s110, logical_and_expression) = s563
goto(s110, logical_or_expression) = s339
goto(s110, multiplicative_expression) = s215
goto(s110, postfix_expression) = s644
goto(s110, primary_expression) = s734
goto(s110, relational_expression) = s502
goto(s110, shift_expression) = s808
goto(s110, unary_expression) = s258
goto(s110, unary_operator) = s278
goto(s110, '!') = s956
goto(s110, '&') = s957
goto(s110, '(') = s33
goto(s110, '*') = s958
goto(s110, '+') = s959
goto(s110, '++') = s621
goto(s110, '-') = s960
goto(s110, '--') = s622
goto(s110, 'sizeof') = s623
goto(s110, '~') = s961
goto(s110, CONSTANT) = s754
goto(s110, IDENTIFIER) = s764
goto(s110, STRING_LITERAL) = s774
goto(s111, additive_expression) = s179
goto(s111, and_expression) = s224
goto(s111, assignment_expression) = s519
goto(s111, cast_expression) = s572
goto(s111, conditional_expression) = s255
goto(s111, equality_expression) = s239
goto(s111, exclusive_or_expression) = s511
goto(s111, expression) = s531
goto(s111, inclusive_or_expression) = s551
goto(s111, logical_and_expression) = s563
goto(s111, logical_or_expression) = s339
goto(s111, multiplicative_expression) = s215
goto(s111, postfix_expression) = s644
goto(s111, primary_expression) = s734
goto(s111, relational_expression) = s502
goto(s111, shift_expression) = s808
goto(s111, unary_expression) = s258
goto(s111, unary_operator) = s278
goto(s111, '!') = s956
goto(s111, '&') = s957
goto(s111, '(') = s33
goto(s111, '*') = s958
goto(s111, '+') = s959
goto(s111, '++') = s621
goto(s111, '-') = s960
goto(s111, '--') = s622
goto(s111, 'sizeof') = s623
goto(s111, '~') = s961
goto(s111, CONSTANT) = s754
goto(s111, IDENTIFIER) = s764
goto(s111, STRING_LITERAL) = s774
goto(s112, additive_expression) = s179
goto(s112, and_expression) = s224
goto(s112, assignment_expression) = s519
goto(s112, cast_expression) = s572
goto(s112, conditional_expression) = s255
goto(s112, equality_expression) = s239
goto(s112, exclusive_or_expression) = s511
goto(s112, expression) = s532
goto(s112, inclusive_or_expression) = s551
goto(s112, logical_and_expression) = s563
goto(s112, logical_or_expression) = s339
goto(s112, multiplicative_expression) = s215
goto(s112, postfix_expression) = s644
goto(s112, primary_expression) = s734
goto(s112, relational_expression) = s502
goto(s112, shift_expression) = s808
goto(s112, unary_expression) = s258
goto(s112, unary_operator) = s278
goto(s112, '!') = s956
goto(s112, '&') = s957
goto(s112, '(') = s33
goto(s112, '*') = s958
goto(s112, '+') = s959
goto(s112, '++') = s621
goto(s112, '-') = s960
goto(s112, '--') = s622
goto(s112, 'sizeof') = s623
goto(s112, '~') = s961
goto(s112, CONSTANT) = s754
goto(s112, IDENTIFIER) = s764
goto(s112, STRING_LITERAL) = s774
goto(s113, additive_expression) = s179
goto(s113, and_expression) = s224
goto(s113, assignment_expression) = s519
goto(s113, cast_expression) = s572
goto(s113, conditional_expression) = s255
goto(s113, equality_expression) = s239
goto(s113, exclusive_or_expression) = s511
goto(s113, expression) = s533
goto(s113, inclusive_or_expression) = s551
goto(s113, logical_and_expression) = s563
goto(s113, logical_or_expression) = s339
goto(s113, multiplicative_expression) = s215
goto(s113, postfix_expression) = s644
goto(s113, primary_expression) = s734
goto(s113, relational_expression) = s502
goto(s113, shift_expression) = s808
goto(s113, unary_expression) = s258
goto(s113, unary_operator) = s278
goto(s113, '!') = s956
goto(s113, '&') = s957
goto(s113, '(') = s33
goto(s113, '*') = s958
goto(s113, '+') = s959
goto(s113, '++') = s621
goto(s113, '-') = s960
goto(s113, '--') = s622
goto(s113, 'sizeof') = s623
goto(s113, '~') = s961
goto(s113, CONSTANT) = s754
goto(s113, IDENTIFIER) = s764
goto(s113, STRING_LITERAL) = s774
goto(s114, additive_expression) = s179
goto(s114, and_expression) = s224
goto(s114, assignment_expression) = s519
goto(s114, cast_expression) = s572
goto(s114, conditional_expression) = s255
goto(s114, equality_expression) = s239
goto(s114, exclusive_or_expression) = s511
goto(s114, expression) = s534
goto(s114, inclusive_or_expression) = s551
goto(s114, logical_and_expression) = s563
goto(s114, logical_or_expression) = s339
goto(s114, multiplicative_expression) = s215
goto(s114, postfix_expression) = s644
goto(s114, primary_expression) = s734
goto(s114, relational_expression) = s502
goto(s114, shift_expression) = s808
goto(s114, unary_expression) = s258
goto(s114, unary_operator) = s278
goto(s114, '!') = s956
goto(s114, '&') = s957
goto(s114, '(') = s33
goto(s114, '*') = s958
goto(s114, '+') = s959
goto(s114, '++') = s621
goto(s114, '-') = s960
goto(s114, '--') = s622
goto(s114, 'sizeof') = s623
goto(s114, '~') = s961
goto(s114, CONSTANT) = s754
goto(s114, IDENTIFIER) = s764
goto(s114, STRING_LITERAL) = s774
goto(s115, additive_expression) = s179
goto(s115, and_expression) = s224
goto(s115, assignment_expression) = s519
goto(s115, cast_expression) = s572
goto(s115, conditional_expression) = s255
goto(s115, equality_expression) = s239
goto(s115, exclusive_or_expression) = s511
goto(s115, expression) = s535
goto(s115, inclusive_or_expression) = s551
goto(s115, logical_and_expression) = s563
goto(s115, logical_or_expression) = s339
goto(s115, multiplicative_expression) = s215
goto(s115, postfix_expression) = s644
goto(s115, primary_expression) = s734
goto(s115, relational_expression) = s502
goto(s115, shift_expression) = s808
goto(s115, unary_expression) = s258
goto(s115, unary_operator) = s278
goto(s115, '!') = s956
goto(s115, '&') = s957
goto(s115, '(') = s33
goto(s115, '*') = s958
goto(s115, '+') = s959
goto(s115, '++') = s621
goto(s115, '-') = s960
goto(s115, '--') = s622
goto(s115, 'sizeof') = s623
goto(s115, '~') = s961
goto(s115, CONSTANT) = s754
goto(s115, IDENTIFIER) = s764
goto(s115, STRING_LITERAL) = s774
goto(s116, additive_expression) = s179
goto(s116, and_expression) = s224
goto(s116, assignment_expression) = s519
goto(s116, cast_expression) = s572
goto(s116, conditional_expression) = s255
goto(s116, equality_expression) = s239
goto(s116, exclusive_or_expression) = s511
goto(s116, expression) = s536
goto(s116, inclusive_or_expression) = s551
goto(s116, logical_and_expression) = s563
goto(s116, logical_or_expression) = s339
goto(s116, multiplicative_expression) = s215
goto(s116, postfix_expression) = s644
goto(s116, primary_expression) = s734
goto(s116, relational_expression) = s502
goto(s116, shift_expression) = s808
goto(s116, unary_expression) = s258
goto(s116, unary_operator) = s278
goto(s116, '!') = s956
goto(s116, '&') = s957
goto(s116, '(') = s33
goto(s116, '*') = s958
goto(s116, '+') = s959
goto(s116, '++') = s621
goto(s116, '-') = s960
goto(s116, '--') = s622
goto(s116, 'sizeof') = s623
goto(s116, '~') = s961
goto(s116, CONSTANT) = s754
goto(s116, IDENTIFIER) = s764
goto(s116, STRING_LITERAL) = s774
goto(s117, additive_expression) = s179
goto(s117, and_expression) = s224
goto(s117, assignment_expression) = s519
goto(s117, cast_expression) = s572
goto(s117, conditional_expression) = s255
goto(s117, equality_expression) = s239
goto(s117, exclusive_or_expression) = s511
goto(s117, expression) = s537
goto(s117, inclusive_or_expression) = s551
goto(s117, logical_and_expression) = s563
goto(s117, logical_or_expression) = s339
goto(s117, multiplicative_expression) = s215
goto(s117, postfix_expression) = s644
goto(s117, primary_expression) = s734
goto(s117, relational_expression) = s502
goto(s117, shift_expression) = s808
goto(s117, unary_expression) = s258
goto(s117, unary_operator) = s278
goto(s117, '!') = s956
goto(s117, '&') = s957
goto(s117, '(') = s33
goto(s117, '*') = s958
goto(s117, '+') = s959
goto(s117, '++') = s621
goto(s117, '-') = s960
goto(s117, '--') = s622
goto(s117, 'sizeof') = s623
goto(s117, '~') = s961
goto(s117, CONSTANT) = s754
goto(s117, IDENTIFIER) = s764
goto(s117, STRING_LITERAL) = s774
goto(s118, additive_expression) = s179
goto(s118, and_expression) = s224
goto(s118, assignment_expression) = s519
goto(s118, cast_expression) = s572
goto(s118, conditional_expression) = s255
goto(s118, equality_expression) = s239
goto(s118, exclusive_or_expression) = s511
goto(s118, expression) = s538
goto(s118, inclusive_or_expression) = s551
goto(s118, logical_and_expression) = s563
goto(s118, logical_or_expression) = s339
goto(s118, multiplicative_expression) = s215
goto(s118, postfix_expression) = s644
goto(s118, primary_expression) = s734
goto(s118, relational_expression) = s502
goto(s118, shift_expression) = s808
goto(s118, unary_expression) = s258
goto(s118, unary_operator) = s278
goto(s118, '!') = s956
goto(s118, '&') = s957
goto(s118, '(') = s33
goto(s118, '*') = s958
goto(s118, '+') = s959
goto(s118, '++') = s621
goto(s118, '-') = s960
goto(s118, '--') = s622
goto(s118, 'sizeof') = s623
goto(s118, '~') = s961
goto(s118, CONSTANT) = s754
goto(s118, IDENTIFIER) = s764
goto(s118, STRING_LITERAL) = s774
goto(s119, additive_expression) = s179
goto(s119, and_expression) = s224
goto(s119, assignment_expression) = s541
goto(s119, cast_expression) = s572
goto(s119, conditional_expression) = s255
goto(s119, equality_expression) = s239
goto(s119, exclusive_or_expression) = s511
goto(s119, inclusive_or_expression) = s551
goto(s119, logical_and_expression) = s563
goto(s119, logical_or_expression) = s339
goto(s119, multiplicative_expression) = s215
goto(s119, postfix_expression) = s644
goto(s119, primary_expression) = s734
goto(s119, relational_expression) = s502
goto(s119, shift_expression) = s808
goto(s119, unary_expression) = s258
goto(s119, unary_operator) = s278
goto(s119, '!') = s956
goto(s119, '&') = s957
goto(s119, '(') = s33
goto(s119, '*') = s958
goto(s119, '+') = s959
goto(s119, '++') = s621
goto(s119, '-') = s960
goto(s119, '--') = s622
goto(s119, 'sizeof') = s623
goto(s119, '~') = s961
goto(s119, CONSTANT) = s754
goto(s119, IDENTIFIER) = s764
goto(s119, STRING_LITERAL) = s774
goto(s120, additive_expression) = s179
goto(s120, and_expression) = s224
goto(s120, cast_expression) = s572
goto(s120, conditional_expression) = s351
goto(s120, equality_expression) = s239
goto(s120, exclusive_or_expression) = s511
goto(s120, inclusive_or_expression) = s551
goto(s120, logical_and_expression) = s563
goto(s120, logical_or_expression) = s339
goto(s120, multiplicative_expression) = s215
goto(s120, postfix_expression) = s648
goto(s120, primary_expression) = s738
goto(s120, relational_expression) = s502
goto(s120, shift_expression) = s808
goto(s120, unary_expression) = s333
goto(s120, unary_operator) = s298
goto(s120, '!') = s956
goto(s120, '&') = s957
goto(s120, '(') = s34
goto(s120, '*') = s958
goto(s120, '+') = s959
goto(s120, '++') = s633
goto(s120, '-') = s960
goto(s120, '--') = s634
goto(s120, 'sizeof') = s635
goto(s120, '~') = s961
goto(s120, CONSTANT) = s758
goto(s120, IDENTIFIER) = s768
goto(s120, STRING_LITERAL) = s778
goto(s121, additive_expression) = s179
goto(s121, and_expression) = s224
goto(s121, cast_expression) = s572
goto(s121, equality_expression) = s239
goto(s121, exclusive_or_expression) = s511
goto(s121, inclusive_or_expression) = s551
goto(s121, logical_and_expression) = s564
goto(s121, multiplicative_expression) = s215
goto(s121, postfix_expression) = s648
goto(s121, primary_expression) = s738
goto(s121, relational_expression) = s502
goto(s121, shift_expression) = s808
goto(s121, unary_expression) = s333
goto(s121, unary_operator) = s298
goto(s121, '!') = s956
goto(s121, '&') = s957
goto(s121, '(') = s34
goto(s121, '*') = s958
goto(s121, '+') = s959
goto(s121, '++') = s633
goto(s121, '-') = s960
goto(s121, '--') = s634
goto(s121, 'sizeof') = s635
goto(s121, '~') = s961
goto(s121, CONSTANT) = s758
goto(s121, IDENTIFIER) = s768
goto(s121, STRING_LITERAL) = s778
goto(s122, additive_expression) = s179
goto(s122, and_expression) = s224
goto(s122, cast_expression) = s572
goto(s122, equality_expression) = s239
goto(s122, exclusive_or_expression) = s511
goto(s122, inclusive_or_expression) = s552
goto(s122, multiplicative_expression) = s215
goto(s122, postfix_expression) = s648
goto(s122, primary_expression) = s738
goto(s122, relational_expression) = s502
goto(s122, shift_expression) = s808
goto(s122, unary_expression) = s333
goto(s122, unary_operator) = s298
goto(s122, '!') = s956
goto(s122, '&') = s957
goto(s122, '(') = s34
goto(s122, '*') = s958
goto(s122, '+') = s959
goto(s122, '++') = s633
goto(s122, '-') = s960
goto(s122, '--') = s634
goto(s122, 'sizeof') = s635
goto(s122, '~') = s961
goto(s122, CONSTANT) = s758
goto(s122, IDENTIFIER) = s768
goto(s122, STRING_LITERAL) = s778
goto(s123, additive_expression) = s179
goto(s123, and_expression) = s224
goto(s123, cast_expression) = s572
goto(s123, equality_expression) = s239
goto(s123, exclusive_or_expression) = s512
goto(s123, multiplicative_expression) = s215
goto(s123, postfix_expression) = s648
goto(s123, primary_expression) = s738
goto(s123, relational_expression) = s502
goto(s123, shift_expression) = s808
goto(s123, unary_expression) = s333
goto(s123, unary_operator) = s298
goto(s123, '!') = s956
goto(s123, '&') = s957
goto(s123, '(') = s34
goto(s123, '*') = s958
goto(s123, '+') = s959
goto(s123, '++') = s633
goto(s123, '-') = s960
goto(s123, '--') = s634
goto(s123, 'sizeof') = s635
goto(s123, '~') = s961
goto(s123, CONSTANT) = s758
goto(s123, IDENTIFIER) = s768
goto(s123, STRING_LITERAL) = s778
goto(s124, additive_expression) = s179
goto(s124, and_expression) = s225
goto(s124, cast_expression) = s572
goto(s124, equality_expression) = s239
goto(s124, multiplicative_expression) = s215
goto(s124, postfix_expression) = s648
goto(s124, primary_expression) = s738
goto(s124, relational_expression) = s502
goto(s124, shift_expression) = s808
goto(s124, unary_expression) = s333
goto(s124, unary_operator) = s298
goto(s124, '!') = s956
goto(s124, '&') = s957
goto(s124, '(') = s34
goto(s124, '*') = s958
goto(s124, '+') = s959
goto(s124, '++') = s633
goto(s124, '-') = s960
goto(s124, '--') = s634
goto(s124, 'sizeof') = s635
goto(s124, '~') = s961
goto(s124, CONSTANT) = s758
goto(s124, IDENTIFIER) = s768
goto(s124, STRING_LITERAL) = s778
goto(s125, additive_expression) = s179
goto(s125, cast_expression) = s572
goto(s125, equality_expression) = s233
goto(s125, multiplicative_expression) = s215
goto(s125, postfix_expression) = s648
goto(s125, primary_expression) = s738
goto(s125, relational_expression) = s502
goto(s125, shift_expression) = s808
goto(s125, unary_expression) = s333
goto(s125, unary_operator) = s298
goto(s125, '!') = s956
goto(s125, '&') = s957
goto(s125, '(') = s34
goto(s125, '*') = s958
goto(s125, '+') = s959
goto(s125, '++') = s633
goto(s125, '-') = s960
goto(s125, '--') = s634
goto(s125, 'sizeof') = s635
goto(s125, '~') = s961
goto(s125, CONSTANT) = s758
goto(s125, IDENTIFIER) = s768
goto(s125, STRING_LITERAL) = s778
goto(s126, additive_expression) = s179
goto(s126, cast_expression) = s572
goto(s126, multiplicative_expression) = s215
goto(s126, postfix_expression) = s648
goto(s126, primary_expression) = s738
goto(s126, relational_expression) = s490
goto(s126, shift_expression) = s808
goto(s126, unary_expression) = s333
goto(s126, unary_operator) = s298
goto(s126, '!') = s956
goto(s126, '&') = s957
goto(s126, '(') = s34
goto(s126, '*') = s958
goto(s126, '+') = s959
goto(s126, '++') = s633
goto(s126, '-') = s960
goto(s126, '--') = s634
goto(s126, 'sizeof') = s635
goto(s126, '~') = s961
goto(s126, CONSTANT) = s758
goto(s126, IDENTIFIER) = s768
goto(s126, STRING_LITERAL) = s778
goto(s127, additive_expression) = s179
goto(s127, cast_expression) = s572
goto(s127, multiplicative_expression) = s215
goto(s127, postfix_expression) = s648
goto(s127, primary_expression) = s738
goto(s127, relational_expression) = s496
goto(s127, shift_expression) = s808
goto(s127, unary_expression) = s333
goto(s127, unary_operator) = s298
goto(s127, '!') = s956
goto(s127, '&') = s957
goto(s127, '(') = s34
goto(s127, '*') = s958
goto(s127, '+') = s959
goto(s127, '++') = s633
goto(s127, '-') = s960
goto(s127, '--') = s634
goto(s127, 'sizeof') = s635
goto(s127, '~') = s961
goto(s127, CONSTANT) = s758
goto(s127, IDENTIFIER) = s768
goto(s127, STRING_LITERAL) = s778
goto(s128, additive_expression) = s179
goto(s128, cast_expression) = s572
goto(s128, multiplicative_expression) = s215
goto(s128, postfix_expression) = s648
goto(s128, primary_expression) = s738
goto(s128, shift_expression) = s784
goto(s128, unary_expression) = s333
goto(s128, unary_operator) = s298
goto(s128, '!') = s956
goto(s128, '&') = s957
goto(s128, '(') = s34
goto(s128, '*') = s958
goto(s128, '+') = s959
goto(s128, '++') = s633
goto(s128, '-') = s960
goto(s128, '--') = s634
goto(s128, 'sizeof') = s635
goto(s128, '~') = s961
goto(s128, CONSTANT) = s758
goto(s128, IDENTIFIER) = s768
goto(s128, STRING_LITERAL) = s778
goto(s129, additive_expression) = s179
goto(s129, cast_expression) = s572
goto(s129, multiplicative_expression) = s215
goto(s129, postfix_expression) = s648
goto(s129, primary_expression) = s738
goto(s129, shift_expression) = s790
goto(s129, unary_expression) = s333
goto(s129, unary_operator) = s298
goto(s129, '!') = s956
goto(s129, '&') = s957
goto(s129, '(') = s34
goto(s129, '*') = s958
goto(s129, '+') = s959
goto(s129, '++') = s633
goto(s129, '-') = s960
goto(s129, '--') = s634
goto(s129, 'sizeof') = s635
goto(s129, '~') = s961
goto(s129, CONSTANT) = s758
goto(s129, IDENTIFIER) = s768
goto(s129, STRING_LITERAL) = s778
goto(s130, additive_expression) = s179
goto(s130, cast_expression) = s572
goto(s130, multiplicative_expression) = s215
goto(s130, postfix_expression) = s648
goto(s130, primary_expression) = s738
goto(s130, shift_expression) = s796
goto(s130, unary_expression) = s333
goto(s130, unary_operator) = s298
goto(s130, '!') = s956
goto(s130, '&') = s957
goto(s130, '(') = s34
goto(s130, '*') = s958
goto(s130, '+') = s959
goto(s130, '++') = s633
goto(s130, '-') = s960
goto(s130, '--') = s634
goto(s130, 'sizeof') = s635
goto(s130, '~') = s961
goto(s130, CONSTANT) = s758
goto(s130, IDENTIFIER) = s768
goto(s130, STRING_LITERAL) = s778
goto(s131, additive_expression) = s179
goto(s131, cast_expression) = s572
goto(s131, multiplicative_expression) = s215
goto(s131, postfix_expression) = s648
goto(s131, primary_expression) = s738
goto(s131, shift_expression) = s802
goto(s131, unary_expression) = s333
goto(s131, unary_operator) = s298
goto(s131, '!') = s956
goto(s131, '&') = s957
goto(s131, '(') = s34
goto(s131, '*') = s958
goto(s131, '+') = s959
goto(s131, '++') = s633
goto(s131, '-') = s960
goto(s131, '--') = s634
goto(s131, 'sizeof') = s635
goto(s131, '~') = s961
goto(s131, CONSTANT) = s758
goto(s131, IDENTIFIER) = s768
goto(s131, STRING_LITERAL) = s778
goto(s132, additive_expression) = s180
goto(s132, cast_expression) = s572
goto(s132, multiplicative_expression) = s215
goto(s132, postfix_expression) = s648
goto(s132, primary_expression) = s738
goto(s132, unary_expression) = s333
goto(s132, unary_operator) = s298
goto(s132, '!') = s956
goto(s132, '&') = s957
goto(s132, '(') = s34
goto(s132, '*') = s958
goto(s132, '+') = s959
goto(s132, '++') = s633
goto(s132, '-') = s960
goto(s132, '--') = s634
goto(s132, 'sizeof') = s635
goto(s132, '~') = s961
goto(s132, CONSTANT) = s758
goto(s132, IDENTIFIER) = s768
goto(s132, STRING_LITERAL) = s778
goto(s133, additive_expression) = s181
goto(s133, cast_expression) = s572
goto(s133, multiplicative_expression) = s215
goto(s133, postfix_expression) = s648
goto(s133, primary_expression) = s738
goto(s133, unary_expression) = s333
goto(s133, unary_operator) = s298
goto(s133, '!') = s956
goto(s133, '&') = s957
goto(s133, '(') = s34
goto(s133, '*') = s958
goto(s133, '+') = s959
goto(s133, '++') = s633
goto(s133, '-') = s960
goto(s133, '--') = s634
goto(s133, 'sizeof') = s635
goto(s133, '~') = s961
goto(s133, CONSTANT) = s758
goto(s133, IDENTIFIER) = s768
goto(s133, STRING_LITERAL) = s778
goto(s134, additive_expression) = s182
goto(s134, and_expression) = s226
goto(s134, cast_expression) = s573
goto(s134, conditional_expression) = s352
goto(s134, equality_expression) = s240
goto(s134, exclusive_or_expression) = s513
goto(s134, inclusive_or_expression) = s553
goto(s134, logical_and_expression) = s565
goto(s134, logical_or_expression) = s340
goto(s134, multiplicative_expression) = s216
goto(s134, postfix_expression) = s649
goto(s134, primary_expression) = s739
goto(s134, relational_expression) = s503
goto(s134, shift_expression) = s809
goto(s134, unary_expression) = s334
goto(s134, unary_operator) = s303
goto(s134, '!') = s956
goto(s134, '&') = s957
goto(s134, '(') = s35
goto(s134, '*') = s958
goto(s134, '+') = s959
goto(s134, '++') = s636
goto(s134, '-') = s960
goto(s134, '--') = s637
goto(s134, 'sizeof') = s638
goto(s134, '~') = s961
goto(s134, CONSTANT) = s759
goto(s134, IDENTIFIER) = s769
goto(s134, STRING_LITERAL) = s779
goto(s135, additive_expression) = s182
goto(s135, and_expression) = s226
goto(s135, cast_expression) = s573
goto(s135, conditional_expression) = s355
goto(s135, constant_expression) = s484
goto(s135, equality_expression) = s240
goto(s135, exclusive_or_expression) = s513
goto(s135, inclusive_or_expression) = s553
goto(s135, logical_and_expression) = s565
goto(s135, logical_or_expression) = s340
goto(s135, multiplicative_expression) = s216
goto(s135, postfix_expression) = s649
goto(s135, primary_expression) = s739
goto(s135, relational_expression) = s503
goto(s135, shift_expression) = s809
goto(s135, unary_expression) = s334
goto(s135, unary_operator) = s303
goto(s135, '!') = s956
goto(s135, '&') = s957
goto(s135, '(') = s35
goto(s135, '*') = s958
goto(s135, '+') = s959
goto(s135, '++') = s636
goto(s135, '-') = s960
goto(s135, '--') = s637
goto(s135, 'sizeof') = s638
goto(s135, '~') = s961
goto(s135, CONSTANT) = s759
goto(s135, IDENTIFIER) = s769
goto(s135, STRING_LITERAL) = s779
goto(s136, additive_expression) = s182
goto(s136, and_expression) = s226
goto(s136, cast_expression) = s573
goto(s136, equality_expression) = s240
goto(s136, exclusive_or_expression) = s513
goto(s136, inclusive_or_expression) = s553
goto(s136, logical_and_expression) = s566
goto(s136, multiplicative_expression) = s216
goto(s136, postfix_expression) = s649
goto(s136, primary_expression) = s739
goto(s136, relational_expression) = s503
goto(s136, shift_expression) = s809
goto(s136, unary_expression) = s334
goto(s136, unary_operator) = s303
goto(s136, '!') = s956
goto(s136, '&') = s957
goto(s136, '(') = s35
goto(s136, '*') = s958
goto(s136, '+') = s959
goto(s136, '++') = s636
goto(s136, '-') = s960
goto(s136, '--') = s637
goto(s136, 'sizeof') = s638
goto(s136, '~') = s961
goto(s136, CONSTANT) = s759
goto(s136, IDENTIFIER) = s769
goto(s136, STRING_LITERAL) = s779
goto(s137, additive_expression) = s182
goto(s137, and_expression) = s226
goto(s137, cast_expression) = s573
goto(s137, equality_expression) = s240
goto(s137, exclusive_or_expression) = s513
goto(s137, inclusive_or_expression) = s554
goto(s137, multiplicative_expression) = s216
goto(s137, postfix_expression) = s649
goto(s137, primary_expression) = s739
goto(s137, relational_expression) = s503
goto(s137, shift_expression) = s809
goto(s137, unary_expression) = s334
goto(s137, unary_operator) = s303
goto(s137, '!') = s956
goto(s137, '&') = s957
goto(s137, '(') = s35
goto(s137, '*') = s958
goto(s137, '+') = s959
goto(s137, '++') = s636
goto(s137, '-') = s960
goto(s137, '--') = s637
goto(s137, 'sizeof') = s638
goto(s137, '~') = s961
goto(s137, CONSTANT) = s759
goto(s137, IDENTIFIER) = s769
goto(s137, STRING_LITERAL) = s779
goto(s138, additive_expression) = s182
goto(s138, and_expression) = s226
goto(s138, cast_expression) = s573
goto(s138, equality_expression) = s240
goto(s138, exclusive_or_expression) = s514
goto(s138, multiplicative_expression) = s216
goto(s138, postfix_expression) = s649
goto(s138, primary_expression) = s739
goto(s138, relational_expression) = s503
goto(s138, shift_expression) = s809
goto(s138, unary_expression) = s334
goto(s138, unary_operator) = s303
goto(s138, '!') = s956
goto(s138, '&') = s957
goto(s138, '(') = s35
goto(s138, '*') = s958
goto(s138, '+') = s959
goto(s138, '++') = s636
goto(s138, '-') = s960
goto(s138, '--') = s637
goto(s138, 'sizeof') = s638
goto(s138, '~') = s961
goto(s138, CONSTANT) = s759
goto(s138, IDENTIFIER) = s769
goto(s138, STRING_LITERAL) = s779
goto(s139, additive_expression) = s182
goto(s139, and_expression) = s227
goto(s139, cast_expression) = s573
goto(s139, equality_expression) = s240
goto(s139, multiplicative_expression) = s216
goto(s139, postfix_expression) = s649
goto(s139, primary_expression) = s739
goto(s139, relational_expression) = s503
goto(s139, shift_expression) = s809
goto(s139, unary_expression) = s334
goto(s139, unary_operator) = s303
goto(s139, '!') = s956
goto(s139, '&') = s957
goto(s139, '(') = s35
goto(s139, '*') = s958
goto(s139, '+') = s959
goto(s139, '++') = s636
goto(s139, '-') = s960
goto(s139, '--') = s637
goto(s139, 'sizeof') = s638
goto(s139, '~') = s961
goto(s139, CONSTANT) = s759
goto(s139, IDENTIFIER) = s769
goto(s139, STRING_LITERAL) = s779
goto(s140, additive_expression) = s182
goto(s140, cast_expression) = s573
goto(s140, equality_expression) = s234
goto(s140, multiplicative_expression) = s216
goto(s140, postfix_expression) = s649
goto(s140, primary_expression) = s739
goto(s140, relational_expression) = s503
goto(s140, shift_expression) = s809
goto(s140, unary_expression) = s334
goto(s140, unary_operator) = s303
goto(s140, '!') = s956
goto(s140, '&') = s957
goto(s140, '(') = s35
goto(s140, '*') = s958
goto(s140, '+') = s959
goto(s140, '++') = s636
goto(s140, '-') = s960
goto(s140, '--') = s637
goto(s140, 'sizeof') = s638
goto(s140, '~') = s961
goto(s140, CONSTANT) = s759
goto(s140, IDENTIFIER) = s769
goto(s140, STRING_LITERAL) = s779
goto(s141, additive_expression) = s182
goto(s141, cast_expression) = s573
goto(s141, multiplicative_expression) = s216
goto(s141, postfix_expression) = s649
goto(s141, primary_expression) = s739
goto(s141, relational_expression) = s491
goto(s141, shift_expression) = s809
goto(s141, unary_expression) = s334
goto(s141, unary_operator) = s303
goto(s141, '!') = s956
goto(s141, '&') = s957
goto(s141, '(') = s35
goto(s141, '*') = s958
goto(s141, '+') = s959
goto(s141, '++') = s636
goto(s141, '-') = s960
goto(s141, '--') = s637
goto(s141, 'sizeof') = s638
goto(s141, '~') = s961
goto(s141, CONSTANT) = s759
goto(s141, IDENTIFIER) = s769
goto(s141, STRING_LITERAL) = s779
goto(s142, additive_expression) = s182
goto(s142, cast_expression) = s573
goto(s142, multiplicative_expression) = s216
goto(s142, postfix_expression) = s649
goto(s142, primary_expression) = s739
goto(s142, relational_expression) = s497
goto(s142, shift_expression) = s809
goto(s142, unary_expression) = s334
goto(s142, unary_operator) = s303
goto(s142, '!') = s956
goto(s142, '&') = s957
goto(s142, '(') = s35
goto(s142, '*') = s958
goto(s142, '+') = s959
goto(s142, '++') = s636
goto(s142, '-') = s960
goto(s142, '--') = s637
goto(s142, 'sizeof') = s638
goto(s142, '~') = s961
goto(s142, CONSTANT) = s759
goto(s142, IDENTIFIER) = s769
goto(s142, STRING_LITERAL) = s779
goto(s143, additive_expression) = s182
goto(s143, cast_expression) = s573
goto(s143, multiplicative_expression) = s216
goto(s143, postfix_expression) = s649
goto(s143, primary_expression) = s739
goto(s143, shift_expression) = s785
goto(s143, unary_expression) = s334
goto(s143, unary_operator) = s303
goto(s143, '!') = s956
goto(s143, '&') = s957
goto(s143, '(') = s35
goto(s143, '*') = s958
goto(s143, '+') = s959
goto(s143, '++') = s636
goto(s143, '-') = s960
goto(s143, '--') = s637
goto(s143, 'sizeof') = s638
goto(s143, '~') = s961
goto(s143, CONSTANT) = s759
goto(s143, IDENTIFIER) = s769
goto(s143, STRING_LITERAL) = s779
goto(s144, additive_expression) = s182
goto(s144, cast_expression) = s573
goto(s144, multiplicative_expression) = s216
goto(s144, postfix_expression) = s649
goto(s144, primary_expression) = s739
goto(s144, shift_expression) = s791
goto(s144, unary_expression) = s334
goto(s144, unary_operator) = s303
goto(s144, '!') = s956
goto(s144, '&') = s957
goto(s144, '(') = s35
goto(s144, '*') = s958
goto(s144, '+') = s959
goto(s144, '++') = s636
goto(s144, '-') = s960
goto(s144, '--') = s637
goto(s144, 'sizeof') = s638
goto(s144, '~') = s961
goto(s144, CONSTANT) = s759
goto(s144, IDENTIFIER) = s769
goto(s144, STRING_LITERAL) = s779
goto(s145, additive_expression) = s182
goto(s145, cast_expression) = s573
goto(s145, multiplicative_expression) = s216
goto(s145, postfix_expression) = s649
goto(s145, primary_expression) = s739
goto(s145, shift_expression) = s797
goto(s145, unary_expression) = s334
goto(s145, unary_operator) = s303
goto(s145, '!') = s956
goto(s145, '&') = s957
goto(s145, '(') = s35
goto(s145, '*') = s958
goto(s145, '+') = s959
goto(s145, '++') = s636
goto(s145, '-') = s960
goto(s145, '--') = s637
goto(s145, 'sizeof') = s638
goto(s145, '~') = s961
goto(s145, CONSTANT) = s759
goto(s145, IDENTIFIER) = s769
goto(s145, STRING_LITERAL) = s779
goto(s146, additive_expression) = s182
goto(s146, cast_expression) = s573
goto(s146, multiplicative_expression) = s216
goto(s146, postfix_expression) = s649
goto(s146, primary_expression) = s739
goto(s146, shift_expression) = s803
goto(s146, unary_expression) = s334
goto(s146, unary_operator) = s303
goto(s146, '!') = s956
goto(s146, '&') = s957
goto(s146, '(') = s35
goto(s146, '*') = s958
goto(s146, '+') = s959
goto(s146, '++') = s636
goto(s146, '-') = s960
goto(s146, '--') = s637
goto(s146, 'sizeof') = s638
goto(s146, '~') = s961
goto(s146, CONSTANT) = s759
goto(s146, IDENTIFIER) = s769
goto(s146, STRING_LITERAL) = s779
goto(s147, additive_expression) = s183
goto(s147, cast_expression) = s573
goto(s147, multiplicative_expression) = s216
goto(s147, postfix_expression) = s649
goto(s147, primary_expression) = s739
goto(s147, unary_expression) = s334
goto(s147, unary_operator) = s303
goto(s147, '!') = s956
goto(s147, '&') = s957
goto(s147, '(') = s35
goto(s147, '*') = s958
goto(s147, '+') = s959
goto(s147, '++') = s636
goto(s147, '-') = s960
goto(s147, '--') = s637
goto(s147, 'sizeof') = s638
goto(s147, '~') = s961
goto(s147, CONSTANT) = s759
goto(s147, IDENTIFIER) = s769
goto(s147, STRING_LITERAL) = s779
goto(s148, additive_expression) = s184
goto(s148, cast_expression) = s573
goto(s148, multiplicative_expression) = s216
goto(s148, postfix_expression) = s649
goto(s148, primary_expression) = s739
goto(s148, unary_expression) = s334
goto(s148, unary_operator) = s303
goto(s148, '!') = s956
goto(s148, '&') = s957
goto(s148, '(') = s35
goto(s148, '*') = s958
goto(s148, '+') = s959
goto(s148, '++') = s636
goto(s148, '-') = s960
goto(s148, '--') = s637
goto(s148, 'sizeof') = s638
goto(s148, '~') = s961
goto(s148, CONSTANT) = s759
goto(s148, IDENTIFIER) = s769
goto(s148, STRING_LITERAL) = s779
goto(s149, additive_expression) = s185
goto(s149, and_expression) = s228
goto(s149, cast_expression) = s574
goto(s149, conditional_expression) = s353
goto(s149, equality_expression) = s241
goto(s149, exclusive_or_expression) = s515
goto(s149, inclusive_or_expression) = s555
goto(s149, logical_and_expression) = s567
goto(s149, logical_or_expression) = s341
goto(s149, multiplicative_expression) = s217
goto(s149, postfix_expression) = s650
goto(s149, primary_expression) = s740
goto(s149, relational_expression) = s504
goto(s149, shift_expression) = s810
goto(s149, unary_expression) = s335
goto(s149, unary_operator) = s308
goto(s149, '!') = s956
goto(s149, '&') = s957
goto(s149, '(') = s36
goto(s149, '*') = s958
goto(s149, '+') = s959
goto(s149, '++') = s639
goto(s149, '-') = s960
goto(s149, '--') = s640
goto(s149, 'sizeof') = s641
goto(s149, '~') = s961
goto(s149, CONSTANT) = s760
goto(s149, IDENTIFIER) = s770
goto(s149, STRING_LITERAL) = s780
goto(s150, additive_expression) = s185
goto(s150, and_expression) = s228
goto(s150, cast_expression) = s574
goto(s150, conditional_expression) = s356
goto(s150, constant_expression) = s393
goto(s150, equality_expression) = s241
goto(s150, exclusive_or_expression) = s515
goto(s150, inclusive_or_expression) = s555
goto(s150, logical_and_expression) = s567
goto(s150, logical_or_expression) = s341
goto(s150, multiplicative_expression) = s217
goto(s150, postfix_expression) = s650
goto(s150, primary_expression) = s740
goto(s150, relational_expression) = s504
goto(s150, shift_expression) = s810
goto(s150, unary_expression) = s335
goto(s150, unary_operator) = s308
goto(s150, '!') = s956
goto(s150, '&') = s957
goto(s150, '(') = s36
goto(s150, '*') = s958
goto(s150, '+') = s959
goto(s150, '++') = s639
goto(s150, '-') = s960
goto(s150, '--') = s640
goto(s150, ']') = s391
goto(s150, 'sizeof') = s641
goto(s150, '~') = s961
goto(s150, CONSTANT) = s760
goto(s150, IDENTIFIER) = s770
goto(s150, STRING_LITERAL) = s780
goto(s151, additive_expression) = s185
goto(s151, and_expression) = s228
goto(s151, cast_expression) = s574
goto(s151, conditional_expression) = s356
goto(s151, constant_expression) = s394
goto(s151, equality_expression) = s241
goto(s151, exclusive_or_expression) = s515
goto(s151, inclusive_or_expression) = s555
goto(s151, logical_and_expression) = s567
goto(s151, logical_or_expression) = s341
goto(s151, multiplicative_expression) = s217
goto(s151, postfix_expression) = s650
goto(s151, primary_expression) = s740
goto(s151, relational_expression) = s504
goto(s151, shift_expression) = s810
goto(s151, unary_expression) = s335
goto(s151, unary_operator) = s308
goto(s151, '!') = s956
goto(s151, '&') = s957
goto(s151, '(') = s36
goto(s151, '*') = s958
goto(s151, '+') = s959
goto(s151, '++') = s639
goto(s151, '-') = s960
goto(s151, '--') = s640
goto(s151, ']') = s392
goto(s151, 'sizeof') = s641
goto(s151, '~') = s961
goto(s151, CONSTANT) = s760
goto(s151, IDENTIFIER) = s770
goto(s151, STRING_LITERAL) = s780
goto(s152, additive_expression) = s185
goto(s152, and_expression) = s228
goto(s152, cast_expression) = s574
goto(s152, conditional_expression) = s356
goto(s152, constant_expression) = s405
goto(s152, equality_expression) = s241
goto(s152, exclusive_or_expression) = s515
goto(s152, inclusive_or_expression) = s555
goto(s152, logical_and_expression) = s567
goto(s152, logical_or_expression) = s341
goto(s152, multiplicative_expression) = s217
goto(s152, postfix_expression) = s650
goto(s152, primary_expression) = s740
goto(s152, relational_expression) = s504
goto(s152, shift_expression) = s810
goto(s152, unary_expression) = s335
goto(s152, unary_operator) = s308
goto(s152, '!') = s956
goto(s152, '&') = s957
goto(s152, '(') = s36
goto(s152, '*') = s958
goto(s152, '+') = s959
goto(s152, '++') = s639
goto(s152, '-') = s960
goto(s152, '--') = s640
goto(s152, ']') = s403
goto(s152, 'sizeof') = s641
goto(s152, '~') = s961
goto(s152, CONSTANT) = s760
goto(s152, IDENTIFIER) = s770
goto(s152, STRING_LITERAL) = s780
goto(s153, additive_expression) = s185
goto(s153, and_expression) = s228
goto(s153, cast_expression) = s574
goto(s153, conditional_expression) = s356
goto(s153, constant_expression) = s406
goto(s153, equality_expression) = s241
goto(s153, exclusive_or_expression) = s515
goto(s153, inclusive_or_expression) = s555
goto(s153, logical_and_expression) = s567
goto(s153, logical_or_expression) = s341
goto(s153, multiplicative_expression) = s217
goto(s153, postfix_expression) = s650
goto(s153, primary_expression) = s740
goto(s153, relational_expression) = s504
goto(s153, shift_expression) = s810
goto(s153, unary_expression) = s335
goto(s153, unary_operator) = s308
goto(s153, '!') = s956
goto(s153, '&') = s957
goto(s153, '(') = s36
goto(s153, '*') = s958
goto(s153, '+') = s959
goto(s153, '++') = s639
goto(s153, '-') = s960
goto(s153, '--') = s640
goto(s153, ']') = s404
goto(s153, 'sizeof') = s641
goto(s153, '~') = s961
goto(s153, CONSTANT) = s760
goto(s153, IDENTIFIER) = s770
goto(s153, STRING_LITERAL) = s780
goto(s154, additive_expression) = s185
goto(s154, and_expression) = s228
goto(s154, cast_expression) = s574
goto(s154, conditional_expression) = s356
goto(s154, constant_expression) = s436
goto(s154, equality_expression) = s241
goto(s154, exclusive_or_expression) = s515
goto(s154, inclusive_or_expression) = s555
goto(s154, logical_and_expression) = s567
goto(s154, logical_or_expression) = s341
goto(s154, multiplicative_expression) = s217
goto(s154, postfix_expression) = s650
goto(s154, primary_expression) = s740
goto(s154, relational_expression) = s504
goto(s154, shift_expression) = s810
goto(s154, unary_expression) = s335
goto(s154, unary_operator) = s308
goto(s154, '!') = s956
goto(s154, '&') = s957
goto(s154, '(') = s36
goto(s154, '*') = s958
goto(s154, '+') = s959
goto(s154, '++') = s639
goto(s154, '-') = s960
goto(s154, '--') = s640
goto(s154, ']') = s433
goto(s154, 'sizeof') = s641
goto(s154, '~') = s961
goto(s154, CONSTANT) = s760
goto(s154, IDENTIFIER) = s770
goto(s154, STRING_LITERAL) = s780
goto(s155, additive_expression) = s185
goto(s155, and_expression) = s228
goto(s155, cast_expression) = s574
goto(s155, conditional_expression) = s356
goto(s155, constant_expression) = s437
goto(s155, equality_expression) = s241
goto(s155, exclusive_or_expression) = s515
goto(s155, inclusive_or_expression) = s555
goto(s155, logical_and_expression) = s567
goto(s155, logical_or_expression) = s341
goto(s155, multiplicative_expression) = s217
goto(s155, postfix_expression) = s650
goto(s155, primary_expression) = s740
goto(s155, relational_expression) = s504
goto(s155, shift_expression) = s810
goto(s155, unary_expression) = s335
goto(s155, unary_operator) = s308
goto(s155, '!') = s956
goto(s155, '&') = s957
goto(s155, '(') = s36
goto(s155, '*') = s958
goto(s155, '+') = s959
goto(s155, '++') = s639
goto(s155, '-') = s960
goto(s155, '--') = s640
goto(s155, ']') = s434
goto(s155, 'sizeof') = s641
goto(s155, '~') = s961
goto(s155, CONSTANT) = s760
goto(s155, IDENTIFIER) = s770
goto(s155, STRING_LITERAL) = s780
goto(s156, additive_expression) = s185
goto(s156, and_expression) = s228
goto(s156, cast_expression) = s574
goto(s156, conditional_expression) = s356
goto(s156, constant_expression) = s438
goto(s156, equality_expression) = s241
goto(s156, exclusive_or_expression) = s515
goto(s156, inclusive_or_expression) = s555
goto(s156, logical_and_expression) = s567
goto(s156, logical_or_expression) = s341
goto(s156, multiplicative_expression) = s217
goto(s156, postfix_expression) = s650
goto(s156, primary_expression) = s740
goto(s156, relational_expression) = s504
goto(s156, shift_expression) = s810
goto(s156, unary_expression) = s335
goto(s156, unary_operator) = s308
goto(s156, '!') = s956
goto(s156, '&') = s957
goto(s156, '(') = s36
goto(s156, '*') = s958
goto(s156, '+') = s959
goto(s156, '++') = s639
goto(s156, '-') = s960
goto(s156, '--') = s640
goto(s156, ']') = s435
goto(s156, 'sizeof') = s641
goto(s156, '~') = s961
goto(s156, CONSTANT) = s760
goto(s156, IDENTIFIER) = s770
goto(s156, STRING_LITERAL) = s780
goto(s157, additive_expression) = s185
goto(s157, and_expression) = s228
goto(s157, cast_expression) = s574
goto(s157, equality_expression) = s241
goto(s157, exclusive_or_expression) = s515
goto(s157, inclusive_or_expression) = s555
goto(s157, logical_and_expression) = s568
goto(s157, multiplicative_expression) = s217
goto(s157, postfix_expression) = s650
goto(s157, primary_expression) = s740
goto(s157, relational_expression) = s504
goto(s157, shift_expression) = s810
goto(s157, unary_expression) = s335
goto(s157, unary_operator) = s308
goto(s157, '!') = s956
goto(s157, '&') = s957
goto(s157, '(') = s36
goto(s157, '*') = s958
goto(s157, '+') = s959
goto(s157, '++') = s639
goto(s157, '-') = s960
goto(s157, '--') = s640
goto(s157, 'sizeof') = s641
goto(s157, '~') = s961
goto(s157, CONSTANT) = s760
goto(s157, IDENTIFIER) = s770
goto(s157, STRING_LITERAL) = s780
goto(s158, additive_expression) = s185
goto(s158, and_expression) = s228
goto(s158, cast_expression) = s574
goto(s158, equality_expression) = s241
goto(s158, exclusive_or_expression) = s515
goto(s158, inclusive_or_expression) = s556
goto(s158, multiplicative_expression) = s217
goto(s158, postfix_expression) = s650
goto(s158, primary_expression) = s740
goto(s158, relational_expression) = s504
goto(s158, shift_expression) = s810
goto(s158, unary_expression) = s335
goto(s158, unary_operator) = s308
goto(s158, '!') = s956
goto(s158, '&') = s957
goto(s158, '(') = s36
goto(s158, '*') = s958
goto(s158, '+') = s959
goto(s158, '++') = s639
goto(s158, '-') = s960
goto(s158, '--') = s640
goto(s158, 'sizeof') = s641
goto(s158, '~') = s961
goto(s158, CONSTANT) = s760
goto(s158, IDENTIFIER) = s770
goto(s158, STRING_LITERAL) = s780
goto(s159, additive_expression) = s185
goto(s159, and_expression) = s228
goto(s159, cast_expression) = s574
goto(s159, equality_expression) = s241
goto(s159, exclusive_or_expression) = s516
goto(s159, multiplicative_expression) = s217
goto(s159, postfix_expression) = s650
goto(s159, primary_expression) = s740
goto(s159, relational_expression) = s504
goto(s159, shift_expression) = s810
goto(s159, unary_expression) = s335
goto(s159, unary_operator) = s308
goto(s159, '!') = s956
goto(s159, '&') = s957
goto(s159, '(') = s36
goto(s159, '*') = s958
goto(s159, '+') = s959
goto(s159, '++') = s639
goto(s159, '-') = s960
goto(s159, '--') = s640
goto(s159, 'sizeof') = s641
goto(s159, '~') = s961
goto(s159, CONSTANT) = s760
goto(s159, IDENTIFIER) = s770
goto(s159, STRING_LITERAL) = s780
goto(s160, additive_expression) = s185
goto(s160, and_expression) = s229
goto(s160, cast_expression) = s574
goto(s160, equality_expression) = s241
goto(s160, multiplicative_expression) = s217
goto(s160, postfix_expression) = s650
goto(s160, primary_expression) = s740
goto(s160, relational_expression) = s504
goto(s160, shift_expression) = s810
goto(s160, unary_expression) = s335
goto(s160, unary_operator) = s308
goto(s160, '!') = s956
goto(s160, '&') = s957
goto(s160, '(') = s36
goto(s160, '*') = s958
goto(s160, '+') = s959
goto(s160, '++') = s639
goto(s160, '-') = s960
goto(s160, '--') = s640
goto(s160, 'sizeof') = s641
goto(s160, '~') = s961
goto(s160, CONSTANT) = s760
goto(s160, IDENTIFIER) = s770
goto(s160, STRING_LITERAL) = s780
goto(s161, additive_expression) = s185
goto(s161, cast_expression) = s574
goto(s161, equality_expression) = s235
goto(s161, multiplicative_expression) = s217
goto(s161, postfix_expression) = s650
goto(s161, primary_expression) = s740
goto(s161, relational_expression) = s504
goto(s161, shift_expression) = s810
goto(s161, unary_expression) = s335
goto(s161, unary_operator) = s308
goto(s161, '!') = s956
goto(s161, '&') = s957
goto(s161, '(') = s36
goto(s161, '*') = s958
goto(s161, '+') = s959
goto(s161, '++') = s639
goto(s161, '-') = s960
goto(s161, '--') = s640
goto(s161, 'sizeof') = s641
goto(s161, '~') = s961
goto(s161, CONSTANT) = s760
goto(s161, IDENTIFIER) = s770
goto(s161, STRING_LITERAL) = s780
goto(s162, additive_expression) = s185
goto(s162, cast_expression) = s574
goto(s162, multiplicative_expression) = s217
goto(s162, postfix_expression) = s650
goto(s162, primary_expression) = s740
goto(s162, relational_expression) = s492
goto(s162, shift_expression) = s810
goto(s162, unary_expression) = s335
goto(s162, unary_operator) = s308
goto(s162, '!') = s956
goto(s162, '&') = s957
goto(s162, '(') = s36
goto(s162, '*') = s958
goto(s162, '+') = s959
goto(s162, '++') = s639
goto(s162, '-') = s960
goto(s162, '--') = s640
goto(s162, 'sizeof') = s641
goto(s162, '~') = s961
goto(s162, CONSTANT) = s760
goto(s162, IDENTIFIER) = s770
goto(s162, STRING_LITERAL) = s780
goto(s163, additive_expression) = s185
goto(s163, cast_expression) = s574
goto(s163, multiplicative_expression) = s217
goto(s163, postfix_expression) = s650
goto(s163, primary_expression) = s740
goto(s163, relational_expression) = s498
goto(s163, shift_expression) = s810
goto(s163, unary_expression) = s335
goto(s163, unary_operator) = s308
goto(s163, '!') = s956
goto(s163, '&') = s957
goto(s163, '(') = s36
goto(s163, '*') = s958
goto(s163, '+') = s959
goto(s163, '++') = s639
goto(s163, '-') = s960
goto(s163, '--') = s640
goto(s163, 'sizeof') = s641
goto(s163, '~') = s961
goto(s163, CONSTANT) = s760
goto(s163, IDENTIFIER) = s770
goto(s163, STRING_LITERAL) = s780
goto(s164, additive_expression) = s185
goto(s164, cast_expression) = s574
goto(s164, multiplicative_expression) = s217
goto(s164, postfix_expression) = s650
goto(s164, primary_expression) = s740
goto(s164, shift_expression) = s786
goto(s164, unary_expression) = s335
goto(s164, unary_operator) = s308
goto(s164, '!') = s956
goto(s164, '&') = s957
goto(s164, '(') = s36
goto(s164, '*') = s958
goto(s164, '+') = s959
goto(s164, '++') = s639
goto(s164, '-') = s960
goto(s164, '--') = s640
goto(s164, 'sizeof') = s641
goto(s164, '~') = s961
goto(s164, CONSTANT) = s760
goto(s164, IDENTIFIER) = s770
goto(s164, STRING_LITERAL) = s780
goto(s165, additive_expression) = s185
goto(s165, cast_expression) = s574
goto(s165, multiplicative_expression) = s217
goto(s165, postfix_expression) = s650
goto(s165, primary_expression) = s740
goto(s165, shift_expression) = s792
goto(s165, unary_expression) = s335
goto(s165, unary_operator) = s308
goto(s165, '!') = s956
goto(s165, '&') = s957
goto(s165, '(') = s36
goto(s165, '*') = s958
goto(s165, '+') = s959
goto(s165, '++') = s639
goto(s165, '-') = s960
goto(s165, '--') = s640
goto(s165, 'sizeof') = s641
goto(s165, '~') = s961
goto(s165, CONSTANT) = s760
goto(s165, IDENTIFIER) = s770
goto(s165, STRING_LITERAL) = s780
goto(s166, additive_expression) = s185
goto(s166, cast_expression) = s574
goto(s166, multiplicative_expression) = s217
goto(s166, postfix_expression) = s650
goto(s166, primary_expression) = s740
goto(s166, shift_expression) = s798
goto(s166, unary_expression) = s335
goto(s166, unary_operator) = s308
goto(s166, '!') = s956
goto(s166, '&') = s957
goto(s166, '(') = s36
goto(s166, '*') = s958
goto(s166, '+') = s959
goto(s166, '++') = s639
goto(s166, '-') = s960
goto(s166, '--') = s640
goto(s166, 'sizeof') = s641
goto(s166, '~') = s961
goto(s166, CONSTANT) = s760
goto(s166, IDENTIFIER) = s770
goto(s166, STRING_LITERAL) = s780
goto(s167, additive_expression) = s185
goto(s167, cast_expression) = s574
goto(s167, multiplicative_expression) = s217
goto(s167, postfix_expression) = s650
goto(s167, primary_expression) = s740
goto(s167, shift_expression) = s804
goto(s167, unary_expression) = s335
goto(s167, unary_operator) = s308
goto(s167, '!') = s956
goto(s167, '&') = s957
goto(s167, '(') = s36
goto(s167, '*') = s958
goto(s167, '+') = s959
goto(s167, '++') = s639
goto(s167, '-') = s960
goto(s167, '--') = s640
goto(s167, 'sizeof') = s641
goto(s167, '~') = s961
goto(s167, CONSTANT) = s760
goto(s167, IDENTIFIER) = s770
goto(s167, STRING_LITERAL) = s780
goto(s168, additive_expression) = s186
goto(s168, cast_expression) = s574
goto(s168, multiplicative_expression) = s217
goto(s168, postfix_expression) = s650
goto(s168, primary_expression) = s740
goto(s168, unary_expression) = s335
goto(s168, unary_operator) = s308
goto(s168, '!') = s956
goto(s168, '&') = s957
goto(s168, '(') = s36
goto(s168, '*') = s958
goto(s168, '+') = s959
goto(s168, '++') = s639
goto(s168, '-') = s960
goto(s168, '--') = s640
goto(s168, 'sizeof') = s641
goto(s168, '~') = s961
goto(s168, CONSTANT) = s760
goto(s168, IDENTIFIER) = s770
goto(s168, STRING_LITERAL) = s780
goto(s169, additive_expression) = s187
goto(s169, cast_expression) = s574
goto(s169, multiplicative_expression) = s217
goto(s169, postfix_expression) = s650
goto(s169, primary_expression) = s740
goto(s169, unary_expression) = s335
goto(s169, unary_operator) = s308
goto(s169, '!') = s956
goto(s169, '&') = s957
goto(s169, '(') = s36
goto(s169, '*') = s958
goto(s169, '+') = s959
goto(s169, '++') = s639
goto(s169, '-') = s960
goto(s169, '--') = s640
goto(s169, 'sizeof') = s641
goto(s169, '~') = s961
goto(s169, CONSTANT) = s760
goto(s169, IDENTIFIER) = s770
goto(s169, STRING_LITERAL) = s780
goto(s170, '+') = s188
goto(s170, '-') = s200
goto(s171, '+') = s188
goto(s171, '-') = s200
goto(s172, '+') = s188
goto(s172, '-') = s200
goto(s173, '+') = s189
goto(s173, '-') = s201
goto(s174, '+') = s189
goto(s174, '-') = s201
goto(s175, '+') = s189
goto(s175, '-') = s201
goto(s176, '+') = s190
goto(s176, '-') = s202
goto(s177, '+') = s190
goto(s177, '-') = s202
goto(s178, '+') = s190
goto(s178, '-') = s202
goto(s179, '+') = s191
goto(s179, '-') = s203
goto(s180, '+') = s191
goto(s180, '-') = s203
goto(s181, '+') = s191
goto(s181, '-') = s203
goto(s182, '+') = s192
goto(s182, '-') = s204
goto(s183, '+') = s192
goto(s183, '-') = s204
goto(s184, '+') = s192
goto(s184, '-') = s204
goto(s185, '+') = s193
goto(s185, '-') = s205
goto(s186, '+') = s193
goto(s186, '-') = s205
goto(s187, '+') = s193
goto(s187, '-') = s205
goto(s188, cast_expression) = s569
goto(s188, multiplicative_expression) = s194
goto(s188, postfix_expression) = s645
goto(s188, primary_expression) = s735
goto(s188, unary_expression) = s330
goto(s188, unary_operator) = s283
goto(s188, '!') = s956
goto(s188, '&') = s957
goto(s188, '(') = s29
goto(s188, '*') = s958
goto(s188, '+') = s959
goto(s188, '++') = s624
goto(s188, '-') = s960
goto(s188, '--') = s625
goto(s188, 'sizeof') = s626
goto(s188, '~') = s961
goto(s188, CONSTANT) = s755
goto(s188, IDENTIFIER) = s765
goto(s188, STRING_LITERAL) = s775
goto(s189, cast_expression) = s570
goto(s189, multiplicative_expression) = s195
goto(s189, postfix_expression) = s646
goto(s189, primary_expression) = s736
goto(s189, unary_expression) = s331
goto(s189, unary_operator) = s288
goto(s189, '!') = s956
goto(s189, '&') = s957
goto(s189, '(') = s31
goto(s189, '*') = s958
goto(s189, '+') = s959
goto(s189, '++') = s627
goto(s189, '-') = s960
goto(s189, '--') = s628
goto(s189, 'sizeof') = s629
goto(s189, '~') = s961
goto(s189, CONSTANT) = s756
goto(s189, IDENTIFIER) = s766
goto(s189, STRING_LITERAL) = s776
goto(s190, cast_expression) = s571
goto(s190, multiplicative_expression) = s196
goto(s190, postfix_expression) = s647
goto(s190, primary_expression) = s737
goto(s190, unary_expression) = s332
goto(s190, unary_operator) = s293
goto(s190, '!') = s956
goto(s190, '&') = s957
goto(s190, '(') = s32
goto(s190, '*') = s958
goto(s190, '+') = s959
goto(s190, '++') = s630
goto(s190, '-') = s960
goto(s190, '--') = s631
goto(s190, 'sizeof') = s632
goto(s190, '~') = s961
goto(s190, CONSTANT) = s757
goto(s190, IDENTIFIER) = s767
goto(s190, STRING_LITERAL) = s777
goto(s191, cast_expression) = s572
goto(s191, multiplicative_expression) = s197
goto(s191, postfix_expression) = s648
goto(s191, primary_expression) = s738
goto(s191, unary_expression) = s333
goto(s191, unary_operator) = s298
goto(s191, '!') = s956
goto(s191, '&') = s957
goto(s191, '(') = s34
goto(s191, '*') = s958
goto(s191, '+') = s959
goto(s191, '++') = s633
goto(s191, '-') = s960
goto(s191, '--') = s634
goto(s191, 'sizeof') = s635
goto(s191, '~') = s961
goto(s191, CONSTANT) = s758
goto(s191, IDENTIFIER) = s768
goto(s191, STRING_LITERAL) = s778
goto(s192, cast_expression) = s573
goto(s192, multiplicative_expression) = s198
goto(s192, postfix_expression) = s649
goto(s192, primary_expression) = s739
goto(s192, unary_expression) = s334
goto(s192, unary_operator) = s303
goto(s192, '!') = s956
goto(s192, '&') = s957
goto(s192, '(') = s35
goto(s192, '*') = s958
goto(s192, '+') = s959
goto(s192, '++') = s636
goto(s192, '-') = s960
goto(s192, '--') = s637
goto(s192, 'sizeof') = s638
goto(s192, '~') = s961
goto(s192, CONSTANT) = s759
goto(s192, IDENTIFIER) = s769
goto(s192, STRING_LITERAL) = s779
goto(s193, cast_expression) = s574
goto(s193, multiplicative_expression) = s199
goto(s193, postfix_expression) = s650
goto(s193, primary_expression) = s740
goto(s193, unary_expression) = s335
goto(s193, unary_operator) = s308
goto(s193, '!') = s956
goto(s193, '&') = s957
goto(s193, '(') = s36
goto(s193, '*') = s958
goto(s193, '+') = s959
goto(s193, '++') = s639
goto(s193, '-') = s960
goto(s193, '--') = s640
goto(s193, 'sizeof') = s641
goto(s193, '~') = s961
goto(s193, CONSTANT) = s760
goto(s193, IDENTIFIER) = s770
goto(s193, STRING_LITERAL) = s780
goto(s194, '%') = s280
goto(s194, '*') = s281
goto(s194, '/') = s282
goto(s195, '%') = s285
goto(s195, '*') = s286
goto(s195, '/') = s287
goto(s196, '%') = s290
goto(s196, '*') = s291
goto(s196, '/') = s292
goto(s197, '%') = s295
goto(s197, '*') = s296
goto(s197, '/') = s297
goto(s198, '%') = s300
goto(s198, '*') = s301
goto(s198, '/') = s302
goto(s199, '%') = s305
goto(s199, '*') = s306
goto(s199, '/') = s307
goto(s200, cast_expression) = s569
goto(s200, multiplicative_expression) = s206
goto(s200, postfix_expression) = s645
goto(s200, primary_expression) = s735
goto(s200, unary_expression) = s330
goto(s200, unary_operator) = s283
goto(s200, '!') = s956
goto(s200, '&') = s957
goto(s200, '(') = s29
goto(s200, '*') = s958
goto(s200, '+') = s959
goto(s200, '++') = s624
goto(s200, '-') = s960
goto(s200, '--') = s625
goto(s200, 'sizeof') = s626
goto(s200, '~') = s961
goto(s200, CONSTANT) = s755
goto(s200, IDENTIFIER) = s765
goto(s200, STRING_LITERAL) = s775
goto(s201, cast_expression) = s570
goto(s201, multiplicative_expression) = s207
goto(s201, postfix_expression) = s646
goto(s201, primary_expression) = s736
goto(s201, unary_expression) = s331
goto(s201, unary_operator) = s288
goto(s201, '!') = s956
goto(s201, '&') = s957
goto(s201, '(') = s31
goto(s201, '*') = s958
goto(s201, '+') = s959
goto(s201, '++') = s627
goto(s201, '-') = s960
goto(s201, '--') = s628
goto(s201, 'sizeof') = s629
goto(s201, '~') = s961
goto(s201, CONSTANT) = s756
goto(s201, IDENTIFIER) = s766
goto(s201, STRING_LITERAL) = s776
goto(s202, cast_expression) = s571
goto(s202, multiplicative_expression) = s208
goto(s202, postfix_expression) = s647
goto(s202, primary_expression) = s737
goto(s202, unary_expression) = s332
goto(s202, unary_operator) = s293
goto(s202, '!') = s956
goto(s202, '&') = s957
goto(s202, '(') = s32
goto(s202, '*') = s958
goto(s202, '+') = s959
goto(s202, '++') = s630
goto(s202, '-') = s960
goto(s202, '--') = s631
goto(s202, 'sizeof') = s632
goto(s202, '~') = s961
goto(s202, CONSTANT) = s757
goto(s202, IDENTIFIER) = s767
goto(s202, STRING_LITERAL) = s777
goto(s203, cast_expression) = s572
goto(s203, multiplicative_expression) = s209
goto(s203, postfix_expression) = s648
goto(s203, primary_expression) = s738
goto(s203, unary_expression) = s333
goto(s203, unary_operator) = s298
goto(s203, '!') = s956
goto(s203, '&') = s957
goto(s203, '(') = s34
goto(s203, '*') = s958
goto(s203, '+') = s959
goto(s203, '++') = s633
goto(s203, '-') = s960
goto(s203, '--') = s634
goto(s203, 'sizeof') = s635
goto(s203, '~') = s961
goto(s203, CONSTANT) = s758
goto(s203, IDENTIFIER) = s768
goto(s203, STRING_LITERAL) = s778
goto(s204, cast_expression) = s573
goto(s204, multiplicative_expression) = s210
goto(s204, postfix_expression) = s649
goto(s204, primary_expression) = s739
goto(s204, unary_expression) = s334
goto(s204, unary_operator) = s303
goto(s204, '!') = s956
goto(s204, '&') = s957
goto(s204, '(') = s35
goto(s204, '*') = s958
goto(s204, '+') = s959
goto(s204, '++') = s636
goto(s204, '-') = s960
goto(s204, '--') = s637
goto(s204, 'sizeof') = s638
goto(s204, '~') = s961
goto(s204, CONSTANT) = s759
goto(s204, IDENTIFIER) = s769
goto(s204, STRING_LITERAL) = s779
goto(s205, cast_expression) = s574
goto(s205, multiplicative_expression) = s211
goto(s205, postfix_expression) = s650
goto(s205, primary_expression) = s740
goto(s205, unary_expression) = s335
goto(s205, unary_operator) = s308
goto(s205, '!') = s956
goto(s205, '&') = s957
goto(s205, '(') = s36
goto(s205, '*') = s958
goto(s205, '+') = s959
goto(s205, '++') = s639
goto(s205, '-') = s960
goto(s205, '--') = s640
goto(s205, 'sizeof') = s641
goto(s205, '~') = s961
goto(s205, CONSTANT) = s760
goto(s205, IDENTIFIER) = s770
goto(s205, STRING_LITERAL) = s780
goto(s206, '%') = s280
goto(s206, '*') = s281
goto(s206, '/') = s282
goto(s207, '%') = s285
goto(s207, '*') = s286
goto(s207, '/') = s287
goto(s208, '%') = s290
goto(s208, '*') = s291
goto(s208, '/') = s292
goto(s209, '%') = s295
goto(s209, '*') = s296
goto(s209, '/') = s297
goto(s210, '%') = s300
goto(s210, '*') = s301
goto(s210, '/') = s302
goto(s211, '%') = s305
goto(s211, '*') = s306
goto(s211, '/') = s307
goto(s212, '%') = s280
goto(s212, '*') = s281
goto(s212, '/') = s282
goto(s213, '%') = s285
goto(s213, '*') = s286
goto(s213, '/') = s287
goto(s214, '%') = s290
goto(s214, '*') = s291
goto(s214, '/') = s292
goto(s215, '%') = s295
goto(s215, '*') = s296
goto(s215, '/') = s297
goto(s216, '%') = s300
goto(s216, '*') = s301
goto(s216, '/') = s302
goto(s217, '%') = s305
goto(s217, '*') = s306
goto(s217, '/') = s307
goto(s218, '&') = s62
goto(s219, '&') = s62
goto(s220, '&') = s84
goto(s221, '&') = s84
goto(s222, '&') = s100
goto(s223, '&') = s100
goto(s224, '&') = s125
goto(s225, '&') = s125
goto(s226, '&') = s140
goto(s227, '&') = s140
goto(s228, '&') = s161
goto(s229, '&') = s161
goto(s230, '!=') = s63
goto(s230, '==') = s64
goto(s231, '!=') = s85
goto(s231, '==') = s86
goto(s232, '!=') = s101
goto(s232, '==') = s102
goto(s233, '!=') = s126
goto(s233, '==') = s127
goto(s234, '!=') = s141
goto(s234, '==') = s142
goto(s235, '!=') = s162
goto(s235, '==') = s163
goto(s236, '!=') = s63
goto(s236, '==') = s64
goto(s237, '!=') = s85
goto(s237, '==') = s86
goto(s238, '!=') = s101
goto(s238, '==') = s102
goto(s239, '!=') = s126
goto(s239, '==') = s127
goto(s240, '!=') = s141
goto(s240, '==') = s142
goto(s241, '!=') = s162
goto(s241, '==') = s163
goto(s242, ')') = s660
goto(s242, ',') = s23
goto(s243, ')') = s661
goto(s243, ',') = s23
goto(s244, ')') = s662
goto(s244, ',') = s23
goto(s245, ')') = s663
goto(s245, ',') = s23
goto(s246, ')') = s664
goto(s246, ',') = s23
goto(s247, ')') = s665
goto(s247, ',') = s23
goto(s248, ')') = s666
goto(s248, ',') = s23
goto(s249, ')') = s667
goto(s249, ',') = s23
goto(s250, ')') = s668
goto(s250, ',') = s23
goto(s256, assignment_operator) = s24
goto(s256, '%=') = s262
goto(s256, '&=') = s263
goto(s256, '*=') = s264
goto(s256, '+=') = s265
goto(s256, '-=') = s266
goto(s256, '/=') = s267
goto(s256, '<<=') = s268
goto(s256, '=') = s269
goto(s256, '>>=') = s270
goto(s256, '^=') = s271
goto(s256, '|=') = s272
goto(s257, assignment_operator) = s71
goto(s257, '%=') = s262
goto(s257, '&=') = s263
goto(s257, '*=') = s264
goto(s257, '+=') = s265
goto(s257, '-=') = s266
goto(s257, '/=') = s267
goto(s257, '<<=') = s268
goto(s257, '=') = s269
goto(s257, '>>=') = s270
goto(s257, '^=') = s271
goto(s257, '|=') = s272
goto(s258, assignment_operator) = s109
goto(s258, '%=') = s262
goto(s258, '&=') = s263
goto(s258, '*=') = s264
goto(s258, '+=') = s265
goto(s258, '-=') = s266
goto(s258, '/=') = s267
goto(s258, '<<=') = s268
goto(s258, '=') = s269
goto(s258, '>>=') = s270
goto(s258, '^=') = s271
goto(s258, '|=') = s272
goto(s273, cast_expression) = s318
goto(s273, postfix_expression) = s642
goto(s273, primary_expression) = s732
goto(s273, unary_expression) = s327
goto(s273, unary_operator) = s274
goto(s273, '!') = s956
goto(s273, '&') = s957
goto(s273, '(') = s25
goto(s273, '*') = s958
goto(s273, '+') = s959
goto(s273, '++') = s615
goto(s273, '-') = s960
goto(s273, '--') = s616
goto(s273, 'sizeof') = s617
goto(s273, '~') = s961
goto(s273, CONSTANT) = s752
goto(s273, IDENTIFIER) = s762
goto(s273, STRING_LITERAL) = s772
goto(s274, cast_expression) = s947
goto(s274, postfix_expression) = s642
goto(s274, primary_expression) = s732
goto(s274, unary_expression) = s327
goto(s274, unary_operator) = s274
goto(s274, '!') = s956
goto(s274, '&') = s957
goto(s274, '(') = s25
goto(s274, '*') = s958
goto(s274, '+') = s959
goto(s274, '++') = s615
goto(s274, '-') = s960
goto(s274, '--') = s616
goto(s274, 'sizeof') = s617
goto(s274, '~') = s961
goto(s274, CONSTANT) = s752
goto(s274, IDENTIFIER) = s762
goto(s274, STRING_LITERAL) = s772
goto(s275, cast_expression) = s319
goto(s275, postfix_expression) = s643
goto(s275, primary_expression) = s733
goto(s275, unary_expression) = s328
goto(s275, unary_operator) = s276
goto(s275, '!') = s956
goto(s275, '&') = s957
goto(s275, '(') = s26
goto(s275, '*') = s958
goto(s275, '+') = s959
goto(s275, '++') = s618
goto(s275, '-') = s960
goto(s275, '--') = s619
goto(s275, 'sizeof') = s620
goto(s275, '~') = s961
goto(s275, CONSTANT) = s753
goto(s275, IDENTIFIER) = s763
goto(s275, STRING_LITERAL) = s773
goto(s276, cast_expression) = s948
goto(s276, postfix_expression) = s643
goto(s276, primary_expression) = s733
goto(s276, unary_expression) = s328
goto(s276, unary_operator) = s276
goto(s276, '!') = s956
goto(s276, '&') = s957
goto(s276, '(') = s26
goto(s276, '*') = s958
goto(s276, '+') = s959
goto(s276, '++') = s618
goto(s276, '-') = s960
goto(s276, '--') = s619
goto(s276, 'sizeof') = s620
goto(s276, '~') = s961
goto(s276, CONSTANT) = s753
goto(s276, IDENTIFIER) = s763
goto(s276, STRING_LITERAL) = s773
goto(s277, cast_expression) = s320
goto(s277, postfix_expression) = s644
goto(s277, primary_expression) = s734
goto(s277, unary_expression) = s329
goto(s277, unary_operator) = s278
goto(s277, '!') = s956
goto(s277, '&') = s957
goto(s277, '(') = s27
goto(s277, '*') = s958
goto(s277, '+') = s959
goto(s277, '++') = s621
goto(s277, '-') = s960
goto(s277, '--') = s622
goto(s277, 'sizeof') = s623
goto(s277, '~') = s961
goto(s277, CONSTANT) = s754
goto(s277, IDENTIFIER) = s764
goto(s277, STRING_LITERAL) = s774
goto(s278, cast_expression) = s949
goto(s278, postfix_expression) = s644
goto(s278, primary_expression) = s734
goto(s278, unary_expression) = s329
goto(s278, unary_operator) = s278
goto(s278, '!') = s956
goto(s278, '&') = s957
goto(s278, '(') = s27
goto(s278, '*') = s958
goto(s278, '+') = s959
goto(s278, '++') = s621
goto(s278, '-') = s960
goto(s278, '--') = s622
goto(s278, 'sizeof') = s623
goto(s278, '~') = s961
goto(s278, CONSTANT) = s754
goto(s278, IDENTIFIER) = s764
goto(s278, STRING_LITERAL) = s774
goto(s279, cast_expression) = s321
goto(s279, postfix_expression) = s645
goto(s279, primary_expression) = s735
goto(s279, unary_expression) = s330
goto(s279, unary_operator) = s283
goto(s279, '!') = s956
goto(s279, '&') = s957
goto(s279, '(') = s29
goto(s279, '*') = s958
goto(s279, '+') = s959
goto(s279, '++') = s624
goto(s279, '-') = s960
goto(s279, '--') = s625
goto(s279, 'sizeof') = s626
goto(s279, '~') = s961
goto(s279, CONSTANT) = s755
goto(s279, IDENTIFIER) = s765
goto(s279, STRING_LITERAL) = s775
goto(s280, cast_expression) = s575
goto(s280, postfix_expression) = s645
goto(s280, primary_expression) = s735
goto(s280, unary_expression) = s330
goto(s280, unary_operator) = s283
goto(s280, '!') = s956
goto(s280, '&') = s957
goto(s280, '(') = s29
goto(s280, '*') = s958
goto(s280, '+') = s959
goto(s280, '++') = s624
goto(s280, '-') = s960
goto(s280, '--') = s625
goto(s280, 'sizeof') = s626
goto(s280, '~') = s961
goto(s280, CONSTANT) = s755
goto(s280, IDENTIFIER) = s765
goto(s280, STRING_LITERAL) = s775
goto(s281, cast_expression) = s581
goto(s281, postfix_expression) = s645
goto(s281, primary_expression) = s735
goto(s281, unary_expression) = s330
goto(s281, unary_operator) = s283
goto(s281, '!') = s956
goto(s281, '&') = s957
goto(s281, '(') = s29
goto(s281, '*') = s958
goto(s281, '+') = s959
goto(s281, '++') = s624
goto(s281, '-') = s960
goto(s281, '--') = s625
goto(s281, 'sizeof') = s626
goto(s281, '~') = s961
goto(s281, CONSTANT) = s755
goto(s281, IDENTIFIER) = s765
goto(s281, STRING_LITERAL) = s775
goto(s282, cast_expression) = s587
goto(s282, postfix_expression) = s645
goto(s282, primary_expression) = s735
goto(s282, unary_expression) = s330
goto(s282, unary_operator) = s283
goto(s282, '!') = s956
goto(s282, '&') = s957
goto(s282, '(') = s29
goto(s282, '*') = s958
goto(s282, '+') = s959
goto(s282, '++') = s624
goto(s282, '-') = s960
goto(s282, '--') = s625
goto(s282, 'sizeof') = s626
goto(s282, '~') = s961
goto(s282, CONSTANT) = s755
goto(s282, IDENTIFIER) = s765
goto(s282, STRING_LITERAL) = s775
goto(s283, cast_expression) = s950
goto(s283, postfix_expression) = s645
goto(s283, primary_expression) = s735
goto(s283, unary_expression) = s330
goto(s283, unary_operator) = s283
goto(s283, '!') = s956
goto(s283, '&') = s957
goto(s283, '(') = s29
goto(s283, '*') = s958
goto(s283, '+') = s959
goto(s283, '++') = s624
goto(s283, '-') = s960
goto(s283, '--') = s625
goto(s283, 'sizeof') = s626
goto(s283, '~') = s961
goto(s283, CONSTANT) = s755
goto(s283, IDENTIFIER) = s765
goto(s283, STRING_LITERAL) = s775
goto(s284, cast_expression) = s322
goto(s284, postfix_expression) = s646
goto(s284, primary_expression) = s736
goto(s284, unary_expression) = s331
goto(s284, unary_operator) = s288
goto(s284, '!') = s956
goto(s284, '&') = s957
goto(s284, '(') = s31
goto(s284, '*') = s958
goto(s284, '+') = s959
goto(s284, '++') = s627
goto(s284, '-') = s960
goto(s284, '--') = s628
goto(s284, 'sizeof') = s629
goto(s284, '~') = s961
goto(s284, CONSTANT) = s756
goto(s284, IDENTIFIER) = s766
goto(s284, STRING_LITERAL) = s776
goto(s285, cast_expression) = s576
goto(s285, postfix_expression) = s646
goto(s285, primary_expression) = s736
goto(s285, unary_expression) = s331
goto(s285, unary_operator) = s288
goto(s285, '!') = s956
goto(s285, '&') = s957
goto(s285, '(') = s31
goto(s285, '*') = s958
goto(s285, '+') = s959
goto(s285, '++') = s627
goto(s285, '-') = s960
goto(s285, '--') = s628
goto(s285, 'sizeof') = s629
goto(s285, '~') = s961
goto(s285, CONSTANT) = s756
goto(s285, IDENTIFIER) = s766
goto(s285, STRING_LITERAL) = s776
goto(s286, cast_expression) = s582
goto(s286, postfix_expression) = s646
goto(s286, primary_expression) = s736
goto(s286, unary_expression) = s331
goto(s286, unary_operator) = s288
goto(s286, '!') = s956
goto(s286, '&') = s957
goto(s286, '(') = s31
goto(s286, '*') = s958
goto(s286, '+') = s959
goto(s286, '++') = s627
goto(s286, '-') = s960
goto(s286, '--') = s628
goto(s286, 'sizeof') = s629
goto(s286, '~') = s961
goto(s286, CONSTANT) = s756
goto(s286, IDENTIFIER) = s766
goto(s286, STRING_LITERAL) = s776
goto(s287, cast_expression) = s588
goto(s287, postfix_expression) = s646
goto(s287, primary_expression) = s736
goto(s287, unary_expression) = s331
goto(s287, unary_operator) = s288
goto(s287, '!') = s956
goto(s287, '&') = s957
goto(s287, '(') = s31
goto(s287, '*') = s958
goto(s287, '+') = s959
goto(s287, '++') = s627
goto(s287, '-') = s960
goto(s287, '--') = s628
goto(s287, 'sizeof') = s629
goto(s287, '~') = s961
goto(s287, CONSTANT) = s756
goto(s287, IDENTIFIER) = s766
goto(s287, STRING_LITERAL) = s776
goto(s288, cast_expression) = s951
goto(s288, postfix_expression) = s646
goto(s288, primary_expression) = s736
goto(s288, unary_expression) = s331
goto(s288, unary_operator) = s288
goto(s288, '!') = s956
goto(s288, '&') = s957
goto(s288, '(') = s31
goto(s288, '*') = s958
goto(s288, '+') = s959
goto(s288, '++') = s627
goto(s288, '-') = s960
goto(s288, '--') = s628
goto(s288, 'sizeof') = s629
goto(s288, '~') = s961
goto(s288, CONSTANT) = s756
goto(s288, IDENTIFIER) = s766
goto(s288, STRING_LITERAL) = s776
goto(s289, cast_expression) = s323
goto(s289, postfix_expression) = s647
goto(s289, primary_expression) = s737
goto(s289, unary_expression) = s332
goto(s289, unary_operator) = s293
goto(s289, '!') = s956
goto(s289, '&') = s957
goto(s289, '(') = s32
goto(s289, '*') = s958
goto(s289, '+') = s959
goto(s289, '++') = s630
goto(s289, '-') = s960
goto(s289, '--') = s631
goto(s289, 'sizeof') = s632
goto(s289, '~') = s961
goto(s289, CONSTANT) = s757
goto(s289, IDENTIFIER) = s767
goto(s289, STRING_LITERAL) = s777
goto(s290, cast_expression) = s577
goto(s290, postfix_expression) = s647
goto(s290, primary_expression) = s737
goto(s290, unary_expression) = s332
goto(s290, unary_operator) = s293
goto(s290, '!') = s956
goto(s290, '&') = s957
goto(s290, '(') = s32
goto(s290, '*') = s958
goto(s290, '+') = s959
goto(s290, '++') = s630
goto(s290, '-') = s960
goto(s290, '--') = s631
goto(s290, 'sizeof') = s632
goto(s290, '~') = s961
goto(s290, CONSTANT) = s757
goto(s290, IDENTIFIER) = s767
goto(s290, STRING_LITERAL) = s777
goto(s291, cast_expression) = s583
goto(s291, postfix_expression) = s647
goto(s291, primary_expression) = s737
goto(s291, unary_expression) = s332
goto(s291, unary_operator) = s293
goto(s291, '!') = s956
goto(s291, '&') = s957
goto(s291, '(') = s32
goto(s291, '*') = s958
goto(s291, '+') = s959
goto(s291, '++') = s630
goto(s291, '-') = s960
goto(s291, '--') = s631
goto(s291, 'sizeof') = s632
goto(s291, '~') = s961
goto(s291, CONSTANT) = s757
goto(s291, IDENTIFIER) = s767
goto(s291, STRING_LITERAL) = s777
goto(s292, cast_expression) = s589
goto(s292, postfix_expression) = s647
goto(s292, primary_expression) = s737
goto(s292, unary_expression) = s332
goto(s292, unary_operator) = s293
goto(s292, '!') = s956
goto(s292, '&') = s957
goto(s292, '(') = s32
goto(s292, '*') = s958
goto(s292, '+') = s959
goto(s292, '++') = s630
goto(s292, '-') = s960
goto(s292, '--') = s631
goto(s292, 'sizeof') = s632
goto(s292, '~') = s961
goto(s292, CONSTANT) = s757
goto(s292, IDENTIFIER) = s767
goto(s292, STRING_LITERAL) = s777
goto(s293, cast_expression) = s952
goto(s293, postfix_expression) = s647
goto(s293, primary_expression) = s737
goto(s293, unary_expression) = s332
goto(s293, unary_operator) = s293
goto(s293, '!') = s956
goto(s293, '&') = s957
goto(s293, '(') = s32
goto(s293, '*') = s958
goto(s293, '+') = s959
goto(s293, '++') = s630
goto(s293, '-') = s960
goto(s293, '--') = s631
goto(s293, 'sizeof') = s632
goto(s293, '~') = s961
goto(s293, CONSTANT) = s757
goto(s293, IDENTIFIER) = s767
goto(s293, STRING_LITERAL) = s777
goto(s294, cast_expression) = s324
goto(s294, postfix_expression) = s648
goto(s294, primary_expression) = s738
goto(s294, unary_expression) = s333
goto(s294, unary_operator) = s298
goto(s294, '!') = s956
goto(s294, '&') = s957
goto(s294, '(') = s34
goto(s294, '*') = s958
goto(s294, '+') = s959
goto(s294, '++') = s633
goto(s294, '-') = s960
goto(s294, '--') = s634
goto(s294, 'sizeof') = s635
goto(s294, '~') = s961
goto(s294, CONSTANT) = s758
goto(s294, IDENTIFIER) = s768
goto(s294, STRING_LITERAL) = s778
goto(s295, cast_expression) = s578
goto(s295, postfix_expression) = s648
goto(s295, primary_expression) = s738
goto(s295, unary_expression) = s333
goto(s295, unary_operator) = s298
goto(s295, '!') = s956
goto(s295, '&') = s957
goto(s295, '(') = s34
goto(s295, '*') = s958
goto(s295, '+') = s959
goto(s295, '++') = s633
goto(s295, '-') = s960
goto(s295, '--') = s634
goto(s295, 'sizeof') = s635
goto(s295, '~') = s961
goto(s295, CONSTANT) = s758
goto(s295, IDENTIFIER) = s768
goto(s295, STRING_LITERAL) = s778
goto(s296, cast_expression) = s584
goto(s296, postfix_expression) = s648
goto(s296, primary_expression) = s738
goto(s296, unary_expression) = s333
goto(s296, unary_operator) = s298
goto(s296, '!') = s956
goto(s296, '&') = s957
goto(s296, '(') = s34
goto(s296, '*') = s958
goto(s296, '+') = s959
goto(s296, '++') = s633
goto(s296, '-') = s960
goto(s296, '--') = s634
goto(s296, 'sizeof') = s635
goto(s296, '~') = s961
goto(s296, CONSTANT) = s758
goto(s296, IDENTIFIER) = s768
goto(s296, STRING_LITERAL) = s778
goto(s297, cast_expression) = s590
goto(s297, postfix_expression) = s648
goto(s297, primary_expression) = s738
goto(s297, unary_expression) = s333
goto(s297, unary_operator) = s298
goto(s297, '!') = s956
goto(s297, '&') = s957
goto(s297, '(') = s34
goto(s297, '*') = s958
goto(s297, '+') = s959
goto(s297, '++') = s633
goto(s297, '-') = s960
goto(s297, '--') = s634
goto(s297, 'sizeof') = s635
goto(s297, '~') = s961
goto(s297, CONSTANT) = s758
goto(s297, IDENTIFIER) = s768
goto(s297, STRING_LITERAL) = s778
goto(s298, cast_expression) = s953
goto(s298, postfix_expression) = s648
goto(s298, primary_expression) = s738
goto(s298, unary_expression) = s333
goto(s298, unary_operator) = s298
goto(s298, '!') = s956
goto(s298, '&') = s957
goto(s298, '(') = s34
goto(s298, '*') = s958
goto(s298, '+') = s959
goto(s298, '++') = s633
goto(s298, '-') = s960
goto(s298, '--') = s634
goto(s298, 'sizeof') = s635
goto(s298, '~') = s961
goto(s298, CONSTANT) = s758
goto(s298, IDENTIFIER) = s768
goto(s298, STRING_LITERAL) = s778
goto(s299, cast_expression) = s325
goto(s299, postfix_expression) = s649
goto(s299, primary_expression) = s739
goto(s299, unary_expression) = s334
goto(s299, unary_operator) = s303
goto(s299, '!') = s956
goto(s299, '&') = s957
goto(s299, '(') = s35
goto(s299, '*') = s958
goto(s299, '+') = s959
goto(s299, '++') = s636
goto(s299, '-') = s960
goto(s299, '--') = s637
goto(s299, 'sizeof') = s638
goto(s299, '~') = s961
goto(s299, CONSTANT) = s759
goto(s299, IDENTIFIER) = s769
goto(s299, STRING_LITERAL) = s779
goto(s300, cast_expression) = s579
goto(s300, postfix_expression) = s649
goto(s300, primary_expression) = s739
goto(s300, unary_expression) = s334
goto(s300, unary_operator) = s303
goto(s300, '!') = s956
goto(s300, '&') = s957
goto(s300, '(') = s35
goto(s300, '*') = s958
goto(s300, '+') = s959
goto(s300, '++') = s636
goto(s300, '-') = s960
goto(s300, '--') = s637
goto(s300, 'sizeof') = s638
goto(s300, '~') = s961
goto(s300, CONSTANT) = s759
goto(s300, IDENTIFIER) = s769
goto(s300, STRING_LITERAL) = s779
goto(s301, cast_expression) = s585
goto(s301, postfix_expression) = s649
goto(s301, primary_expression) = s739
goto(s301, unary_expression) = s334
goto(s301, unary_operator) = s303
goto(s301, '!') = s956
goto(s301, '&') = s957
goto(s301, '(') = s35
goto(s301, '*') = s958
goto(s301, '+') = s959
goto(s301, '++') = s636
goto(s301, '-') = s960
goto(s301, '--') = s637
goto(s301, 'sizeof') = s638
goto(s301, '~') = s961
goto(s301, CONSTANT) = s759
goto(s301, IDENTIFIER) = s769
goto(s301, STRING_LITERAL) = s779
goto(s302, cast_expression) = s591
goto(s302, postfix_expression) = s649
goto(s302, primary_expression) = s739
goto(s302, unary_expression) = s334
goto(s302, unary_operator) = s303
goto(s302, '!') = s956
goto(s302, '&') = s957
goto(s302, '(') = s35
goto(s302, '*') = s958
goto(s302, '+') = s959
goto(s302, '++') = s636
goto(s302, '-') = s960
goto(s302, '--') = s637
goto(s302, 'sizeof') = s638
goto(s302, '~') = s961
goto(s302, CONSTANT) = s759
goto(s302, IDENTIFIER) = s769
goto(s302, STRING_LITERAL) = s779
goto(s303, cast_expression) = s954
goto(s303, postfix_expression) = s649
goto(s303, primary_expression) = s739
goto(s303, unary_expression) = s334
goto(s303, unary_operator) = s303
goto(s303, '!') = s956
goto(s303, '&') = s957
goto(s303, '(') = s35
goto(s303, '*') = s958
goto(s303, '+') = s959
goto(s303, '++') = s636
goto(s303, '-') = s960
goto(s303, '--') = s637
goto(s303, 'sizeof') = s638
goto(s303, '~') = s961
goto(s303, CONSTANT) = s759
goto(s303, IDENTIFIER) = s769
goto(s303, STRING_LITERAL) = s779
goto(s304, cast_expression) = s326
goto(s304, postfix_expression) = s650
goto(s304, primary_expression) = s740
goto(s304, unary_expression) = s335
goto(s304, unary_operator) = s308
goto(s304, '!') = s956
goto(s304, '&') = s957
goto(s304, '(') = s36
goto(s304, '*') = s958
goto(s304, '+') = s959
goto(s304, '++') = s639
goto(s304, '-') = s960
goto(s304, '--') = s640
goto(s304, 'sizeof') = s641
goto(s304, '~') = s961
goto(s304, CONSTANT) = s760
goto(s304, IDENTIFIER) = s770
goto(s304, STRING_LITERAL) = s780
goto(s305, cast_expression) = s580
goto(s305, postfix_expression) = s650
goto(s305, primary_expression) = s740
goto(s305, unary_expression) = s335
goto(s305, unary_operator) = s308
goto(s305, '!') = s956
goto(s305, '&') = s957
goto(s305, '(') = s36
goto(s305, '*') = s958
goto(s305, '+') = s959
goto(s305, '++') = s639
goto(s305, '-') = s960
goto(s305, '--') = s640
goto(s305, 'sizeof') = s641
goto(s305, '~') = s961
goto(s305, CONSTANT) = s760
goto(s305, IDENTIFIER) = s770
goto(s305, STRING_LITERAL) = s780
goto(s306, cast_expression) = s586
goto(s306, postfix_expression) = s650
goto(s306, primary_expression) = s740
goto(s306, unary_expression) = s335
goto(s306, unary_operator) = s308
goto(s306, '!') = s956
goto(s306, '&') = s957
goto(s306, '(') = s36
goto(s306, '*') = s958
goto(s306, '+') = s959
goto(s306, '++') = s639
goto(s306, '-') = s960
goto(s306, '--') = s640
goto(s306, 'sizeof') = s641
goto(s306, '~') = s961
goto(s306, CONSTANT) = s760
goto(s306, IDENTIFIER) = s770
goto(s306, STRING_LITERAL) = s780
goto(s307, cast_expression) = s592
goto(s307, postfix_expression) = s650
goto(s307, primary_expression) = s740
goto(s307, unary_expression) = s335
goto(s307, unary_operator) = s308
goto(s307, '!') = s956
goto(s307, '&') = s957
goto(s307, '(') = s36
goto(s307, '*') = s958
goto(s307, '+') = s959
goto(s307, '++') = s639
goto(s307, '-') = s960
goto(s307, '--') = s640
goto(s307, 'sizeof') = s641
goto(s307, '~') = s961
goto(s307, CONSTANT) = s760
goto(s307, IDENTIFIER) = s770
goto(s307, STRING_LITERAL) = s780
goto(s308, cast_expression) = s955
goto(s308, postfix_expression) = s650
goto(s308, primary_expression) = s740
goto(s308, unary_expression) = s335
goto(s308, unary_operator) = s308
goto(s308, '!') = s956
goto(s308, '&') = s957
goto(s308, '(') = s36
goto(s308, '*') = s958
goto(s308, '+') = s959
goto(s308, '++') = s639
goto(s308, '-') = s960
goto(s308, '--') = s640
goto(s308, 'sizeof') = s641
goto(s308, '~') = s961
goto(s308, CONSTANT) = s760
goto(s308, IDENTIFIER) = s770
goto(s308, STRING_LITERAL) = s780
goto(s309, ')') = s273
goto(s310, ')') = s275
goto(s311, ')') = s277
goto(s312, ')') = s279
goto(s313, ')') = s284
goto(s314, ')') = s289
goto(s315, ')') = s294
goto(s316, ')') = s299
goto(s317, ')') = s304
goto(s336, '?') = s72
goto(s336, '||') = s58
goto(s337, '?') = s73
goto(s337, '||') = s80
goto(s338, '?') = s74
goto(s338, '||') = s96
goto(s339, '?') = s75
goto(s339, '||') = s121
goto(s340, '?') = s76
goto(s340, '||') = s136
goto(s341, '?') = s77
goto(s341, '||') = s157
goto(s342, ',') = s78
goto(s342, ':') = s57
goto(s343, ',') = s78
goto(s343, ':') = s79
goto(s344, ',') = s78
goto(s344, ':') = s93
goto(s345, ',') = s78
goto(s345, ':') = s120
goto(s346, ',') = s78
goto(s346, ':') = s134
goto(s347, ',') = s78
goto(s347, ':') = s149
goto(s357, declaration_specifiers) = s366
goto(s357, enum_specifier) = s896
goto(s357, storage_class_specifier) = s357
goto(s357, struct_or_union) = s831
goto(s357, struct_or_union_specifier) = s899
goto(s357, type_qualifier) = s358
goto(s357, type_specifier) = s359
goto(s357, 'auto') = s815
goto(s357, 'char') = s866
goto(s357, 'const') = s844
goto(s357, 'double') = s869
goto(s357, 'enum') = s458
goto(s357, 'extern') = s816
goto(s357, 'float') = s872
goto(s357, 'int') = s875
goto(s357, 'long') = s878
goto(s357, 'register') = s817
goto(s357, 'short') = s881
goto(s357, 'signed') = s884
goto(s357, 'static') = s818
goto(s357, 'struct') = s829
goto(s357, 'typedef') = s819
goto(s357, 'union') = s830
goto(s357, 'unsigned') = s887
goto(s357, 'void') = s890
goto(s357, 'volatile') = s851
goto(s357, TYPE_NAME) = s893
goto(s358, declaration_specifiers) = s367
goto(s358, enum_specifier) = s896
goto(s358, storage_class_specifier) = s357
goto(s358, struct_or_union) = s831
goto(s358, struct_or_union_specifier) = s899
goto(s358, type_qualifier) = s358
goto(s358, type_specifier) = s359
goto(s358, 'auto') = s815
goto(s358, 'char') = s866
goto(s358, 'const') = s844
goto(s358, 'double') = s869
goto(s358, 'enum') = s458
goto(s358, 'extern') = s816
goto(s358, 'float') = s872
goto(s358, 'int') = s875
goto(s358, 'long') = s878
goto(s358, 'register') = s817
goto(s358, 'short') = s881
goto(s358, 'signed') = s884
goto(s358, 'static') = s818
goto(s358, 'struct') = s829
goto(s358, 'typedef') = s819
goto(s358, 'union') = s830
goto(s358, 'unsigned') = s887
goto(s358, 'void') = s890
goto(s358, 'volatile') = s851
goto(s358, TYPE_NAME) = s893
goto(s359, declaration_specifiers) = s368
goto(s359, enum_specifier) = s896
goto(s359, storage_class_specifier) = s357
goto(s359, struct_or_union) = s831
goto(s359, struct_or_union_specifier) = s899
goto(s359, type_qualifier) = s358
goto(s359, type_specifier) = s359
goto(s359, 'auto') = s815
goto(s359, 'char') = s866
goto(s359, 'const') = s844
goto(s359, 'double') = s869
goto(s359, 'enum') = s458
goto(s359, 'extern') = s816
goto(s359, 'float') = s872
goto(s359, 'int') = s875
goto(s359, 'long') = s878
goto(s359, 'register') = s817
goto(s359, 'short') = s881
goto(s359, 'signed') = s884
goto(s359, 'static') = s818
goto(s359, 'struct') = s829
goto(s359, 'typedef') = s819
goto(s359, 'union') = s830
goto(s359, 'unsigned') = s887
goto(s359, 'void') = s890
goto(s359, 'volatile') = s851
goto(s359, TYPE_NAME) = s893
goto(s360, declaration_specifiers) = s6
goto(s360, enum_specifier) = s896
goto(s360, parameter_declaration) = s595
goto(s360, parameter_list) = s596
goto(s360, parameter_type_list) = s399
goto(s360, storage_class_specifier) = s357
goto(s360, struct_or_union) = s831
goto(s360, struct_or_union_specifier) = s899
goto(s360, type_qualifier) = s358
goto(s360, type_specifier) = s359
goto(s360, ')') = s397
goto(s360, 'auto') = s815
goto(s360, 'char') = s866
goto(s360, 'const') = s844
goto(s360, 'double') = s869
goto(s360, 'enum') = s458
goto(s360, 'extern') = s816
goto(s360, 'float') = s872
goto(s360, 'int') = s875
goto(s360, 'long') = s878
goto(s360, 'register') = s817
goto(s360, 'short') = s881
goto(s360, 'signed') = s884
goto(s360, 'static') = s818
goto(s360, 'struct') = s829
goto(s360, 'typedef') = s819
goto(s360, 'union') = s830
goto(s360, 'unsigned') = s887
goto(s360, 'void') = s890
goto(s360, 'volatile') = s851
goto(s360, TYPE_NAME) = s893
goto(s361, declaration_specifiers) = s6
goto(s361, enum_specifier) = s896
goto(s361, parameter_declaration) = s595
goto(s361, parameter_list) = s596
goto(s361, parameter_type_list) = s400
goto(s361, storage_class_specifier) = s357
goto(s361, struct_or_union) = s831
goto(s361, struct_or_union_specifier) = s899
goto(s361, type_qualifier) = s358
goto(s361, type_specifier) = s359
goto(s361, ')') = s398
goto(s361, 'auto') = s815
goto(s361, 'char') = s866
goto(s361, 'const') = s844
goto(s361, 'double') = s869
goto(s361, 'enum') = s458
goto(s361, 'extern') = s816
goto(s361, 'float') = s872
goto(s361, 'int') = s875
goto(s361, 'long') = s878
goto(s361, 'register') = s817
goto(s361, 'short') = s881
goto(s361, 'signed') = s884
goto(s361, 'static') = s818
goto(s361, 'struct') = s829
goto(s361, 'typedef') = s819
goto(s361, 'union') = s830
goto(s361, 'unsigned') = s887
goto(s361, 'void') = s890
goto(s361, 'volatile') = s851
goto(s361, TYPE_NAME) = s893
goto(s362, declaration_specifiers) = s6
goto(s362, enum_specifier) = s896
goto(s362, identifier_list) = s421
goto(s362, parameter_declaration) = s595
goto(s362, parameter_list) = s596
goto(s362, parameter_type_list) = s427
goto(s362, storage_class_specifier) = s357
goto(s362, struct_or_union) = s831
goto(s362, struct_or_union_specifier) = s899
goto(s362, type_qualifier) = s358
goto(s362, type_specifier) = s359
goto(s362, ')') = s418
goto(s362, 'auto') = s815
goto(s362, 'char') = s866
goto(s362, 'const') = s844
goto(s362, 'double') = s869
goto(s362, 'enum') = s458
goto(s362, 'extern') = s816
goto(s362, 'float') = s872
goto(s362, 'int') = s875
goto(s362, 'long') = s878
goto(s362, 'register') = s817
goto(s362, 'short') = s881
goto(s362, 'signed') = s884
goto(s362, 'static') = s818
goto(s362, 'struct') = s829
goto(s362, 'typedef') = s819
goto(s362, 'union') = s830
goto(s362, 'unsigned') = s887
goto(s362, 'void') = s890
goto(s362, 'volatile') = s851
goto(s362, IDENTIFIER) = s542
goto(s362, TYPE_NAME) = s893
goto(s363, declaration_specifiers) = s6
goto(s363, enum_specifier) = s896
goto(s363, identifier_list) = s422
goto(s363, parameter_declaration) = s595
goto(s363, parameter_list) = s596
goto(s363, parameter_type_list) = s428
goto(s363, storage_class_specifier) = s357
goto(s363, struct_or_union) = s831
goto(s363, struct_or_union_specifier) = s899
goto(s363, type_qualifier) = s358
goto(s363, type_specifier) = s359
goto(s363, ')') = s419
goto(s363, 'auto') = s815
goto(s363, 'char') = s866
goto(s363, 'const') = s844
goto(s363, 'double') = s869
goto(s363, 'enum') = s458
goto(s363, 'extern') = s816
goto(s363, 'float') = s872
goto(s363, 'int') = s875
goto(s363, 'long') = s878
goto(s363, 'register') = s817
goto(s363, 'short') = s881
goto(s363, 'signed') = s884
goto(s363, 'static') = s818
goto(s363, 'struct') = s829
goto(s363, 'typedef') = s819
goto(s363, 'union') = s830
goto(s363, 'unsigned') = s887
goto(s363, 'void') = s890
goto(s363, 'volatile') = s851
goto(s363, IDENTIFIER) = s542
goto(s363, TYPE_NAME) = s893
goto(s364, declaration_specifiers) = s6
goto(s364, enum_specifier) = s896
goto(s364, identifier_list) = s423
goto(s364, parameter_declaration) = s595
goto(s364, parameter_list) = s596
goto(s364, parameter_type_list) = s429
goto(s364, storage_class_specifier) = s357
goto(s364, struct_or_union) = s831
goto(s364, struct_or_union_specifier) = s899
goto(s364, type_qualifier) = s358
goto(s364, type_specifier) = s359
goto(s364, ')') = s420
goto(s364, 'auto') = s815
goto(s364, 'char') = s866
goto(s364, 'const') = s844
goto(s364, 'double') = s869
goto(s364, 'enum') = s458
goto(s364, 'extern') = s816
goto(s364, 'float') = s872
goto(s364, 'int') = s875
goto(s364, 'long') = s878
goto(s364, 'register') = s817
goto(s364, 'short') = s881
goto(s364, 'signed') = s884
goto(s364, 'static') = s818
goto(s364, 'struct') = s829
goto(s364, 'typedef') = s819
goto(s364, 'union') = s830
goto(s364, 'unsigned') = s887
goto(s364, 'void') = s890
goto(s364, 'volatile') = s851
goto(s364, IDENTIFIER) = s542
goto(s364, TYPE_NAME) = s893
goto(s365, declaration_specifiers) = s6
goto(s365, enum_specifier) = s896
goto(s365, parameter_declaration) = s597
goto(s365, storage_class_specifier) = s357
goto(s365, struct_or_union) = s831
goto(s365, struct_or_union_specifier) = s899
goto(s365, type_qualifier) = s358
goto(s365, type_specifier) = s359
goto(s365, '...') = s598
goto(s365, 'auto') = s815
goto(s365, 'char') = s866
goto(s365, 'const') = s844
goto(s365, 'double') = s869
goto(s365, 'enum') = s458
goto(s365, 'extern') = s816
goto(s365, 'float') = s872
goto(s365, 'int') = s875
goto(s365, 'long') = s878
goto(s365, 'register') = s817
goto(s365, 'short') = s881
goto(s365, 'signed') = s884
goto(s365, 'static') = s818
goto(s365, 'struct') = s829
goto(s365, 'typedef') = s819
goto(s365, 'union') = s830
goto(s365, 'unsigned') = s887
goto(s365, 'void') = s890
goto(s365, 'volatile') = s851
goto(s365, TYPE_NAME) = s893
goto(s369, declarator) = s410
goto(s369, direct_declarator) = s373
goto(s369, pointer) = s376
goto(s369, '(') = s369
goto(s369, '*') = s605
goto(s369, IDENTIFIER) = s416
goto(s370, declarator) = s411
goto(s370, direct_declarator) = s373
goto(s370, pointer) = s376
goto(s370, '(') = s369
goto(s370, '*') = s605
goto(s370, IDENTIFIER) = s416
goto(s371, declarator) = s825
goto(s371, direct_declarator) = s375
goto(s371, pointer) = s377
goto(s371, struct_declarator) = s827
goto(s371, struct_declarator_list) = s820
goto(s371, '(') = s370
goto(s371, '*') = s605
goto(s371, ':') = s94
goto(s371, IDENTIFIER) = s417
goto(s372, declarator) = s825
goto(s372, direct_declarator) = s375
goto(s372, pointer) = s377
goto(s372, struct_declarator) = s828
goto(s372, '(') = s370
goto(s372, '*') = s605
goto(s372, ':') = s94
goto(s372, IDENTIFIER) = s417
goto(s373, '(') = s363
goto(s373, '[') = s155
goto(s374, '(') = s362
goto(s374, '[') = s154
goto(s375, '(') = s364
goto(s375, '[') = s156
goto(s376, direct_declarator) = s378
goto(s376, '(') = s369
goto(s376, IDENTIFIER) = s416
goto(s377, direct_declarator) = s380
goto(s377, '(') = s370
goto(s377, IDENTIFIER) = s417
goto(s378, '(') = s363
goto(s378, '[') = s155
goto(s379, '(') = s362
goto(s379, '[') = s154
goto(s380, '(') = s364
goto(s380, '[') = s156
goto(s383, ')') = s385
goto(s384, ')') = s386
goto(s387, ')') = s389
goto(s388, ')') = s390
goto(s393, ']') = s395
goto(s394, ']') = s396
goto(s399, ')') = s401
goto(s400, ')') = s402
goto(s405, ']') = s407
goto(s406, ']') = s408
goto(s409, ')') = s412
goto(s410, ')') = s413
goto(s411, ')') = s414
goto(s421, ')') = s424
goto(s421, ',') = s543
goto(s422, ')') = s425
goto(s422, ',') = s543
goto(s423, ')') = s426
goto(s423, ',') = s543
goto(s427, ')') = s430
goto(s428, ')') = s431
goto(s429, ')') = s432
goto(s436, ']') = s439
goto(s437, ']') = s440
goto(s438, ']') = s441
goto(s442, enum_specifier) = s897
goto(s442, specifier_qualifier_list) = s811
goto(s442, struct_or_union) = s832
goto(s442, struct_or_union_specifier) = s900
goto(s442, type_qualifier) = s442
goto(s442, type_specifier) = s443
goto(s442, 'char') = s867
goto(s442, 'const') = s846
goto(s442, 'double') = s870
goto(s442, 'enum') = s459
goto(s442, 'float') = s873
goto(s442, 'int') = s876
goto(s442, 'long') = s879
goto(s442, 'short') = s882
goto(s442, 'signed') = s885
goto(s442, 'struct') = s829
goto(s442, 'union') = s830
goto(s442, 'unsigned') = s888
goto(s442, 'void') = s891
goto(s442, 'volatile') = s853
goto(s442, TYPE_NAME) = s894
goto(s443, enum_specifier) = s897
goto(s443, specifier_qualifier_list) = s813
goto(s443, struct_or_union) = s832
goto(s443, struct_or_union_specifier) = s900
goto(s443, type_qualifier) = s442
goto(s443, type_specifier) = s443
goto(s443, 'char') = s867
goto(s443, 'const') = s846
goto(s443, 'double') = s870
goto(s443, 'enum') = s459
goto(s443, 'float') = s873
goto(s443, 'int') = s876
goto(s443, 'long') = s879
goto(s443, 'short') = s882
goto(s443, 'signed') = s885
goto(s443, 'struct') = s829
goto(s443, 'union') = s830
goto(s443, 'unsigned') = s888
goto(s443, 'void') = s891
goto(s443, 'volatile') = s853
goto(s443, TYPE_NAME) = s894
goto(s444, enum_specifier) = s898
goto(s444, specifier_qualifier_list) = s812
goto(s444, struct_or_union) = s833
goto(s444, struct_or_union_specifier) = s901
goto(s444, type_qualifier) = s444
goto(s444, type_specifier) = s445
goto(s444, 'char') = s868
goto(s444, 'const') = s849
goto(s444, 'double') = s871
goto(s444, 'enum') = s460
goto(s444, 'float') = s874
goto(s444, 'int') = s877
goto(s444, 'long') = s880
goto(s444, 'short') = s883
goto(s444, 'signed') = s886
goto(s444, 'struct') = s829
goto(s444, 'union') = s830
goto(s444, 'unsigned') = s889
goto(s444, 'void') = s892
goto(s444, 'volatile') = s856
goto(s444, TYPE_NAME) = s895
goto(s445, enum_specifier) = s898
goto(s445, specifier_qualifier_list) = s814
goto(s445, struct_or_union) = s833
goto(s445, struct_or_union_specifier) = s901
goto(s445, type_qualifier) = s444
goto(s445, type_specifier) = s445
goto(s445, 'char') = s868
goto(s445, 'const') = s849
goto(s445, 'double') = s871
goto(s445, 'enum') = s460
goto(s445, 'float') = s874
goto(s445, 'int') = s877
goto(s445, 'long') = s880
goto(s445, 'short') = s883
goto(s445, 'signed') = s886
goto(s445, 'struct') = s829
goto(s445, 'union') = s830
goto(s445, 'unsigned') = s889
goto(s445, 'void') = s892
goto(s445, 'volatile') = s856
goto(s445, TYPE_NAME) = s895
goto(s446, enum_specifier) = s898
goto(s446, specifier_qualifier_list) = s371
goto(s446, struct_declaration) = s822
goto(s446, struct_declaration_list) = s452
goto(s446, struct_or_union) = s833
goto(s446, struct_or_union_specifier) = s901
goto(s446, type_qualifier) = s444
goto(s446, type_specifier) = s445
goto(s446, 'char') = s868
goto(s446, 'const') = s849
goto(s446, 'double') = s871
goto(s446, 'enum') = s460
goto(s446, 'float') = s874
goto(s446, 'int') = s877
goto(s446, 'long') = s880
goto(s446, 'short') = s883
goto(s446, 'signed') = s886
goto(s446, 'struct') = s829
goto(s446, 'union') = s830
goto(s446, 'unsigned') = s889
goto(s446, 'void') = s892
goto(s446, 'volatile') = s856
goto(s446, TYPE_NAME) = s895
goto(s447, enum_specifier) = s898
goto(s447, specifier_qualifier_list) = s371
goto(s447, struct_declaration) = s822
goto(s447, struct_declaration_list) = s453
goto(s447, struct_or_union) = s833
goto(s447, struct_or_union_specifier) = s901
goto(s447, type_qualifier) = s444
goto(s447, type_specifier) = s445
goto(s447, 'char') = s868
goto(s447, 'const') = s849
goto(s447, 'double') = s871
goto(s447, 'enum') = s460
goto(s447, 'float') = s874
goto(s447, 'int') = s877
goto(s447, 'long') = s880
goto(s447, 'short') = s883
goto(s447, 'signed') = s886
goto(s447, 'struct') = s829
goto(s447, 'union') = s830
goto(s447, 'unsigned') = s889
goto(s447, 'void') = s892
goto(s447, 'volatile') = s856
goto(s447, TYPE_NAME) = s895
goto(s448, enum_specifier) = s898
goto(s448, specifier_qualifier_list) = s371
goto(s448, struct_declaration) = s822
goto(s448, struct_declaration_list) = s454
goto(s448, struct_or_union) = s833
goto(s448, struct_or_union_specifier) = s901
goto(s448, type_qualifier) = s444
goto(s448, type_specifier) = s445
goto(s448, 'char') = s868
goto(s448, 'const') = s849
goto(s448, 'double') = s871
goto(s448, 'enum') = s460
goto(s448, 'float') = s874
goto(s448, 'int') = s877
goto(s448, 'long') = s880
goto(s448, 'short') = s883
goto(s448, 'signed') = s886
goto(s448, 'struct') = s829
goto(s448, 'union') = s830
goto(s448, 'unsigned') = s889
goto(s448, 'void') = s892
goto(s448, 'volatile') = s856
goto(s448, TYPE_NAME) = s895
goto(s449, enum_specifier) = s898
goto(s449, specifier_qualifier_list) = s371
goto(s449, struct_declaration) = s822
goto(s449, struct_declaration_list) = s455
goto(s449, struct_or_union) = s833
goto(s449, struct_or_union_specifier) = s901
goto(s449, type_qualifier) = s444
goto(s449, type_specifier) = s445
goto(s449, 'char') = s868
goto(s449, 'const') = s849
goto(s449, 'double') = s871
goto(s449, 'enum') = s460
goto(s449, 'float') = s874
goto(s449, 'int') = s877
goto(s449, 'long') = s880
goto(s449, 'short') = s883
goto(s449, 'signed') = s886
goto(s449, 'struct') = s829
goto(s449, 'union') = s830
goto(s449, 'unsigned') = s889
goto(s449, 'void') = s892
goto(s449, 'volatile') = s856
goto(s449, TYPE_NAME) = s895
goto(s450, enum_specifier) = s898
goto(s450, specifier_qualifier_list) = s371
goto(s450, struct_declaration) = s822
goto(s450, struct_declaration_list) = s456
goto(s450, struct_or_union) = s833
goto(s450, struct_or_union_specifier) = s901
goto(s450, type_qualifier) = s444
goto(s450, type_specifier) = s445
goto(s450, 'char') = s868
goto(s450, 'const') = s849
goto(s450, 'double') = s871
goto(s450, 'enum') = s460
goto(s450, 'float') = s874
goto(s450, 'int') = s877
goto(s450, 'long') = s880
goto(s450, 'short') = s883
goto(s450, 'signed') = s886
goto(s450, 'struct') = s829
goto(s450, 'union') = s830
goto(s450, 'unsigned') = s889
goto(s450, 'void') = s892
goto(s450, 'volatile') = s856
goto(s450, TYPE_NAME) = s895
goto(s451, enum_specifier) = s898
goto(s451, specifier_qualifier_list) = s371
goto(s451, struct_declaration) = s822
goto(s451, struct_declaration_list) = s457
goto(s451, struct_or_union) = s833
goto(s451, struct_or_union_specifier) = s901
goto(s451, type_qualifier) = s444
goto(s451, type_specifier) = s445
goto(s451, 'char') = s868
goto(s451, 'const') = s849
goto(s451, 'double') = s871
goto(s451, 'enum') = s460
goto(s451, 'float') = s874
goto(s451, 'int') = s877
goto(s451, 'long') = s880
goto(s451, 'short') = s883
goto(s451, 'signed') = s886
goto(s451, 'struct') = s829
goto(s451, 'union') = s830
goto(s451, 'unsigned') = s889
goto(s451, 'void') = s892
goto(s451, 'volatile') = s856
goto(s451, TYPE_NAME) = s895
goto(s452, enum_specifier) = s898
goto(s452, specifier_qualifier_list) = s371
goto(s452, struct_declaration) = s823
goto(s452, struct_or_union) = s833
goto(s452, struct_or_union_specifier) = s901
goto(s452, type_qualifier) = s444
goto(s452, type_specifier) = s445
goto(s452, 'char') = s868
goto(s452, 'const') = s849
goto(s452, 'double') = s871
goto(s452, 'enum') = s460
goto(s452, 'float') = s874
goto(s452, 'int') = s877
goto(s452, 'long') = s880
goto(s452, 'short') = s883
goto(s452, 'signed') = s886
goto(s452, 'struct') = s829
goto(s452, 'union') = s830
goto(s452, 'unsigned') = s889
goto(s452, 'void') = s892
goto(s452, 'volatile') = s856
goto(s452, '}') = s834
goto(s452, TYPE_NAME) = s895
goto(s453, enum_specifier) = s898
goto(s453, specifier_qualifier_list) = s371
goto(s453, struct_declaration) = s823
goto(s453, struct_or_union) = s833
goto(s453, struct_or_union_specifier) = s901
goto(s453, type_qualifier) = s444
goto(s453, type_specifier) = s445
goto(s453, 'char') = s868
goto(s453, 'const') = s849
goto(s453, 'double') = s871
goto(s453, 'enum') = s460
goto(s453, 'float') = s874
goto(s453, 'int') = s877
goto(s453, 'long') = s880
goto(s453, 'short') = s883
goto(s453, 'signed') = s886
goto(s453, 'struct') = s829
goto(s453, 'union') = s830
goto(s453, 'unsigned') = s889
goto(s453, 'void') = s892
goto(s453, 'volatile') = s856
goto(s453, '}') = s835
goto(s453, TYPE_NAME) = s895
goto(s454, enum_specifier) = s898
goto(s454, specifier_qualifier_list) = s371
goto(s454, struct_declaration) = s823
goto(s454, struct_or_union) = s833
goto(s454, struct_or_union_specifier) = s901
goto(s454, type_qualifier) = s444
goto(s454, type_specifier) = s445
goto(s454, 'char') = s868
goto(s454, 'const') = s849
goto(s454, 'double') = s871
goto(s454, 'enum') = s460
goto(s454, 'float') = s874
goto(s454, 'int') = s877
goto(s454, 'long') = s880
goto(s454, 'short') = s883
goto(s454, 'signed') = s886
goto(s454, 'struct') = s829
goto(s454, 'union') = s830
goto(s454, 'unsigned') = s889
goto(s454, 'void') = s892
goto(s454, 'volatile') = s856
goto(s454, '}') = s836
goto(s454, TYPE_NAME) = s895
goto(s455, enum_specifier) = s898
goto(s455, specifier_qualifier_list) = s371
goto(s455, struct_declaration) = s823
goto(s455, struct_or_union) = s833
goto(s455, struct_or_union_specifier) = s901
goto(s455, type_qualifier) = s444
goto(s455, type_specifier) = s445
goto(s455, 'char') = s868
goto(s455, 'const') = s849
goto(s455, 'double') = s871
goto(s455, 'enum') = s460
goto(s455, 'float') = s874
goto(s455, 'int') = s877
goto(s455, 'long') = s880
goto(s455, 'short') = s883
goto(s455, 'signed') = s886
goto(s455, 'struct') = s829
goto(s455, 'union') = s830
goto(s455, 'unsigned') = s889
goto(s455, 'void') = s892
goto(s455, 'volatile') = s856
goto(s455, '}') = s840
goto(s455, TYPE_NAME) = s895
goto(s456, enum_specifier) = s898
goto(s456, specifier_qualifier_list) = s371
goto(s456, struct_declaration) = s823
goto(s456, struct_or_union) = s833
goto(s456, struct_or_union_specifier) = s901
goto(s456, type_qualifier) = s444
goto(s456, type_specifier) = s445
goto(s456, 'char') = s868
goto(s456, 'const') = s849
goto(s456, 'double') = s871
goto(s456, 'enum') = s460
goto(s456, 'float') = s874
goto(s456, 'int') = s877
goto(s456, 'long') = s880
goto(s456, 'short') = s883
goto(s456, 'signed') = s886
goto(s456, 'struct') = s829
goto(s456, 'union') = s830
goto(s456, 'unsigned') = s889
goto(s456, 'void') = s892
goto(s456, 'volatile') = s856
goto(s456, '}') = s841
goto(s456, TYPE_NAME) = s895
goto(s457, enum_specifier) = s898
goto(s457, specifier_qualifier_list) = s371
goto(s457, struct_declaration) = s823
goto(s457, struct_or_union) = s833
goto(s457, struct_or_union_specifier) = s901
goto(s457, type_qualifier) = s444
goto(s457, type_specifier) = s445
goto(s457, 'char') = s868
goto(s457, 'const') = s849
goto(s457, 'double') = s871
goto(s457, 'enum') = s460
goto(s457, 'float') = s874
goto(s457, 'int') = s877
goto(s457, 'long') = s880
goto(s457, 'short') = s883
goto(s457, 'signed') = s886
goto(s457, 'struct') = s829
goto(s457, 'union') = s830
goto(s457, 'unsigned') = s889
goto(s457, 'void') = s892
goto(s457, 'volatile') = s856
goto(s457, '}') = s842
goto(s457, TYPE_NAME) = s895
goto(s458, '{') = s461
goto(s458, IDENTIFIER) = s470
goto(s459, '{') = s462
goto(s459, IDENTIFIER) = s471
goto(s460, '{') = s463
goto(s460, IDENTIFIER) = s472
goto(s461, enumerator) = s485
goto(s461, enumerator_list) = s464
goto(s461, IDENTIFIER) = s483
goto(s462, enumerator) = s485
goto(s462, enumerator_list) = s465
goto(s462, IDENTIFIER) = s483
goto(s463, enumerator) = s485
goto(s463, enumerator_list) = s466
goto(s463, IDENTIFIER) = s483
goto(s464, ',') = s482
goto(s464, '}') = s467
goto(s465, ',') = s482
goto(s465, '}') = s468
goto(s466, ',') = s482
goto(s466, '}') = s469
goto(s470, '{') = s473
goto(s471, '{') = s474
goto(s472, '{') = s475
goto(s473, enumerator) = s485
goto(s473, enumerator_list) = s476
goto(s473, IDENTIFIER) = s483
goto(s474, enumerator) = s485
goto(s474, enumerator_list) = s477
goto(s474, IDENTIFIER) = s483
goto(s475, enumerator) = s485
goto(s475, enumerator_list) = s478
goto(s475, IDENTIFIER) = s483
goto(s476, ',') = s482
goto(s476, '}') = s479
goto(s477, ',') = s482
goto(s477, '}') = s480
goto(s478, ',') = s482
goto(s478, '}') = s481
goto(s482, enumerator) = s486
goto(s482, IDENTIFIER) = s483
goto(s483, '=') = s135
goto(s487, '<') = s65
goto(s487, '<=') = s66
goto(s487, '>') = s67
goto(s487, '>=') = s68
goto(s488, '<') = s87
goto(s488, '<=') = s88
goto(s488, '>') = s89
goto(s488, '>=') = s90
goto(s489, '<') = s103
goto(s489, '<=') = s104
goto(s489, '>') = s105
goto(s489, '>=') = s106
goto(s490, '<') = s128
goto(s490, '<=') = s129
goto(s490, '>') = s130
goto(s490, '>=') = s131
goto(s491, '<') = s143
goto(s491, '<=') = s144
goto(s491, '>') = s145
goto(s491, '>=') = s146
goto(s492, '<') = s164
goto(s492, '<=') = s165
goto(s492, '>') = s166
goto(s492, '>=') = s167
goto(s493, '<') = s65
goto(s493, '<=') = s66
goto(s493, '>') = s67
goto(s493, '>=') = s68
goto(s494, '<') = s87
goto(s494, '<=') = s88
goto(s494, '>') = s89
goto(s494, '>=') = s90
goto(s495, '<') = s103
goto(s495, '<=') = s104
goto(s495, '>') = s105
goto(s495, '>=') = s106
goto(s496, '<') = s128
goto(s496, '<=') = s129
goto(s496, '>') = s130
goto(s496, '>=') = s131
goto(s497, '<') = s143
goto(s497, '<=') = s144
goto(s497, '>') = s145
goto(s497, '>=') = s146
goto(s498, '<') = s164
goto(s498, '<=') = s165
goto(s498, '>') = s166
goto(s498, '>=') = s167
goto(s499, '<') = s65
goto(s499, '<=') = s66
goto(s499, '>') = s67
goto(s499, '>=') = s68
goto(s500, '<') = s87
goto(s500, '<=') = s88
goto(s500, '>') = s89
goto(s500, '>=') = s90
goto(s501, '<') = s103
goto(s501, '<=') = s104
goto(s501, '>') = s105
goto(s501, '>=') = s106
goto(s502, '<') = s128
goto(s502, '<=') = s129
goto(s502, '>') = s130
goto(s502, '>=') = s131
goto(s503, '<') = s143
goto(s503, '<=') = s144
goto(s503, '>') = s145
goto(s503, '>=') = s146
goto(s504, '<') = s164
goto(s504, '<=') = s165
goto(s504, '>') = s166
goto(s504, '>=') = s167
goto(s505, '^') = s61
goto(s506, '^') = s61
goto(s507, '^') = s83
goto(s508, '^') = s83
goto(s509, '^') = s99
goto(s510, '^') = s99
goto(s511, '^') = s124
goto(s512, '^') = s124
goto(s513, '^') = s139
goto(s514, '^') = s139
goto(s515, '^') = s160
goto(s516, '^') = s160
goto(s520, ')') = s741
goto(s520, ',') = s56
goto(s521, ')') = s742
goto(s521, ',') = s56
goto(s522, ')') = s743
goto(s522, ',') = s56
goto(s523, ')') = s744
goto(s523, ',') = s56
goto(s524, ')') = s745
goto(s524, ',') = s56
goto(s525, ')') = s746
goto(s525, ',') = s56
goto(s526, ')') = s747
goto(s526, ',') = s56
goto(s527, ')') = s748
goto(s527, ',') = s56
goto(s528, ')') = s749
goto(s528, ',') = s56
goto(s529, ')') = s750
goto(s529, ',') = s56
goto(s530, ',') = s119
goto(s530, ']') = s723
goto(s531, ',') = s119
goto(s531, ']') = s724
goto(s532, ',') = s119
goto(s532, ']') = s725
goto(s533, ',') = s119
goto(s533, ']') = s726
goto(s534, ',') = s119
goto(s534, ']') = s727
goto(s535, ',') = s119
goto(s535, ']') = s728
goto(s536, ',') = s119
goto(s536, ']') = s729
goto(s537, ',') = s119
goto(s537, ']') = s730
goto(s538, ',') = s119
goto(s538, ']') = s731
goto(s543, IDENTIFIER) = s544
goto(s545, '|') = s60
goto(s546, '|') = s60
goto(s547, '|') = s82
goto(s548, '|') = s82
goto(s549, '|') = s98
goto(s550, '|') = s98
goto(s551, '|') = s123
goto(s552, '|') = s123
goto(s553, '|') = s138
goto(s554, '|') = s138
goto(s555, '|') = s159
goto(s556, '|') = s159
goto(s557, '&&') = s59
goto(s558, '&&') = s59
goto(s559, '&&') = s81
goto(s560, '&&') = s81
goto(s561, '&&') = s97
goto(s562, '&&') = s97
goto(s563, '&&') = s122
goto(s564, '&&') = s122
goto(s565, '&&') = s137
goto(s566, '&&') = s137
goto(s567, '&&') = s158
goto(s568, '&&') = s158
goto(s596, ',') = s365
goto(s599, pointer) = s607
goto(s599, type_qualifier) = s858
goto(s599, type_qualifier_list) = s600
goto(s599, '*') = s599
goto(s599, 'const') = s845
goto(s599, 'volatile') = s852
goto(s600, pointer) = s611
goto(s600, type_qualifier) = s862
goto(s600, '*') = s599
goto(s600, 'const') = s845
goto(s600, 'volatile') = s852
goto(s601, pointer) = s608
goto(s601, type_qualifier) = s859
goto(s601, type_qualifier_list) = s602
goto(s601, '*') = s601
goto(s601, 'const') = s847
goto(s601, 'volatile') = s854
goto(s602, pointer) = s612
goto(s602, type_qualifier) = s863
goto(s602, '*') = s601
goto(s602, 'const') = s847
goto(s602, 'volatile') = s854
goto(s603, pointer) = s609
goto(s603, type_qualifier) = s860
goto(s603, type_qualifier_list) = s604
goto(s603, '*') = s603
goto(s603, 'const') = s848
goto(s603, 'volatile') = s855
goto(s604, pointer) = s613
goto(s604, type_qualifier) = s864
goto(s604, '*') = s603
goto(s604, 'const') = s848
goto(s604, 'volatile') = s855
goto(s605, pointer) = s610
goto(s605, type_qualifier) = s861
goto(s605, type_qualifier_list) = s606
goto(s605, '*') = s605
goto(s605, 'const') = s850
goto(s605, 'volatile') = s857
goto(s606, pointer) = s614
goto(s606, type_qualifier) = s865
goto(s606, '*') = s605
goto(s606, 'const') = s850
goto(s606, 'volatile') = s857
goto(s615, postfix_expression) = s642
goto(s615, primary_expression) = s732
goto(s615, unary_expression) = s902
goto(s615, unary_operator) = s274
goto(s615, '!') = s956
goto(s615, '&') = s957
goto(s615, '(') = s47
goto(s615, '*') = s958
goto(s615, '+') = s959
goto(s615, '++') = s615
goto(s615, '-') = s960
goto(s615, '--') = s616
goto(s615, 'sizeof') = s617
goto(s615, '~') = s961
goto(s615, CONSTANT) = s752
goto(s615, IDENTIFIER) = s762
goto(s615, STRING_LITERAL) = s772
goto(s616, postfix_expression) = s642
goto(s616, primary_expression) = s732
goto(s616, unary_expression) = s911
goto(s616, unary_operator) = s274
goto(s616, '!') = s956
goto(s616, '&') = s957
goto(s616, '(') = s47
goto(s616, '*') = s958
goto(s616, '+') = s959
goto(s616, '++') = s615
goto(s616, '-') = s960
goto(s616, '--') = s616
goto(s616, 'sizeof') = s617
goto(s616, '~') = s961
goto(s616, CONSTANT) = s752
goto(s616, IDENTIFIER) = s762
goto(s616, STRING_LITERAL) = s772
goto(s617, postfix_expression) = s642
goto(s617, primary_expression) = s732
goto(s617, unary_expression) = s938
goto(s617, unary_operator) = s274
goto(s617, '!') = s956
goto(s617, '&') = s957
goto(s617, '(') = s37
goto(s617, '*') = s958
goto(s617, '+') = s959
goto(s617, '++') = s615
goto(s617, '-') = s960
goto(s617, '--') = s616
goto(s617, 'sizeof') = s617
goto(s617, '~') = s961
goto(s617, CONSTANT) = s752
goto(s617, IDENTIFIER) = s762
goto(s617, STRING_LITERAL) = s772
goto(s618, postfix_expression) = s643
goto(s618, primary_expression) = s733
goto(s618, unary_expression) = s903
goto(s618, unary_operator) = s276
goto(s618, '!') = s956
goto(s618, '&') = s957
goto(s618, '(') = s48
goto(s618, '*') = s958
goto(s618, '+') = s959
goto(s618, '++') = s618
goto(s618, '-') = s960
goto(s618, '--') = s619
goto(s618, 'sizeof') = s620
goto(s618, '~') = s961
goto(s618, CONSTANT) = s753
goto(s618, IDENTIFIER) = s763
goto(s618, STRING_LITERAL) = s773
goto(s619, postfix_expression) = s643
goto(s619, primary_expression) = s733
goto(s619, unary_expression) = s912
goto(s619, unary_operator) = s276
goto(s619, '!') = s956
goto(s619, '&') = s957
goto(s619, '(') = s48
goto(s619, '*') = s958
goto(s619, '+') = s959
goto(s619, '++') = s618
goto(s619, '-') = s960
goto(s619, '--') = s619
goto(s619, 'sizeof') = s620
goto(s619, '~') = s961
goto(s619, CONSTANT) = s753
goto(s619, IDENTIFIER) = s763
goto(s619, STRING_LITERAL) = s773
goto(s620, postfix_expression) = s643
goto(s620, primary_expression) = s733
goto(s620, unary_expression) = s939
goto(s620, unary_operator) = s276
goto(s620, '!') = s956
goto(s620, '&') = s957
goto(s620, '(') = s38
goto(s620, '*') = s958
goto(s620, '+') = s959
goto(s620, '++') = s618
goto(s620, '-') = s960
goto(s620, '--') = s619
goto(s620, 'sizeof') = s620
goto(s620, '~') = s961
goto(s620, CONSTANT) = s753
goto(s620, IDENTIFIER) = s763
goto(s620, STRING_LITERAL) = s773
goto(s621, postfix_expression) = s644
goto(s621, primary_expression) = s734
goto(s621, unary_expression) = s904
goto(s621, unary_operator) = s278
goto(s621, '!') = s956
goto(s621, '&') = s957
goto(s621, '(') = s49
goto(s621, '*') = s958
goto(s621, '+') = s959
goto(s621, '++') = s621
goto(s621, '-') = s960
goto(s621, '--') = s622
goto(s621, 'sizeof') = s623
goto(s621, '~') = s961
goto(s621, CONSTANT) = s754
goto(s621, IDENTIFIER) = s764
goto(s621, STRING_LITERAL) = s774
goto(s622, postfix_expression) = s644
goto(s622, primary_expression) = s734
goto(s622, unary_expression) = s913
goto(s622, unary_operator) = s278
goto(s622, '!') = s956
goto(s622, '&') = s957
goto(s622, '(') = s49
goto(s622, '*') = s958
goto(s622, '+') = s959
goto(s622, '++') = s621
goto(s622, '-') = s960
goto(s622, '--') = s622
goto(s622, 'sizeof') = s623
goto(s622, '~') = s961
goto(s622, CONSTANT) = s754
goto(s622, IDENTIFIER) = s764
goto(s622, STRING_LITERAL) = s774
goto(s623, postfix_expression) = s644
goto(s623, primary_expression) = s734
goto(s623, unary_expression) = s940
goto(s623, unary_operator) = s278
goto(s623, '!') = s956
goto(s623, '&') = s957
goto(s623, '(') = s39
goto(s623, '*') = s958
goto(s623, '+') = s959
goto(s623, '++') = s621
goto(s623, '-') = s960
goto(s623, '--') = s622
goto(s623, 'sizeof') = s623
goto(s623, '~') = s961
goto(s623, CONSTANT) = s754
goto(s623, IDENTIFIER) = s764
goto(s623, STRING_LITERAL) = s774
goto(s624, postfix_expression) = s645
goto(s624, primary_expression) = s735
goto(s624, unary_expression) = s905
goto(s624, unary_operator) = s283
goto(s624, '!') = s956
goto(s624, '&') = s957
goto(s624, '(') = s50
goto(s624, '*') = s958
goto(s624, '+') = s959
goto(s624, '++') = s624
goto(s624, '-') = s960
goto(s624, '--') = s625
goto(s624, 'sizeof') = s626
goto(s624, '~') = s961
goto(s624, CONSTANT) = s755
goto(s624, IDENTIFIER) = s765
goto(s624, STRING_LITERAL) = s775
goto(s625, postfix_expression) = s645
goto(s625, primary_expression) = s735
goto(s625, unary_expression) = s914
goto(s625, unary_operator) = s283
goto(s625, '!') = s956
goto(s625, '&') = s957
goto(s625, '(') = s50
goto(s625, '*') = s958
goto(s625, '+') = s959
goto(s625, '++') = s624
goto(s625, '-') = s960
goto(s625, '--') = s625
goto(s625, 'sizeof') = s626
goto(s625, '~') = s961
goto(s625, CONSTANT) = s755
goto(s625, IDENTIFIER) = s765
goto(s625, STRING_LITERAL) = s775
goto(s626, postfix_expression) = s645
goto(s626, primary_expression) = s735
goto(s626, unary_expression) = s941
goto(s626, unary_operator) = s283
goto(s626, '!') = s956
goto(s626, '&') = s957
goto(s626, '(') = s40
goto(s626, '*') = s958
goto(s626, '+') = s959
goto(s626, '++') = s624
goto(s626, '-') = s960
goto(s626, '--') = s625
goto(s626, 'sizeof') = s626
goto(s626, '~') = s961
goto(s626, CONSTANT) = s755
goto(s626, IDENTIFIER) = s765
goto(s626, STRING_LITERAL) = s775
goto(s627, postfix_expression) = s646
goto(s627, primary_expression) = s736
goto(s627, unary_expression) = s906
goto(s627, unary_operator) = s288
goto(s627, '!') = s956
goto(s627, '&') = s957
goto(s627, '(') = s51
goto(s627, '*') = s958
goto(s627, '+') = s959
goto(s627, '++') = s627
goto(s627, '-') = s960
goto(s627, '--') = s628
goto(s627, 'sizeof') = s629
goto(s627, '~') = s961
goto(s627, CONSTANT) = s756
goto(s627, IDENTIFIER) = s766
goto(s627, STRING_LITERAL) = s776
goto(s628, postfix_expression) = s646
goto(s628, primary_expression) = s736
goto(s628, unary_expression) = s915
goto(s628, unary_operator) = s288
goto(s628, '!') = s956
goto(s628, '&') = s957
goto(s628, '(') = s51
goto(s628, '*') = s958
goto(s628, '+') = s959
goto(s628, '++') = s627
goto(s628, '-') = s960
goto(s628, '--') = s628
goto(s628, 'sizeof') = s629
goto(s628, '~') = s961
goto(s628, CONSTANT) = s756
goto(s628, IDENTIFIER) = s766
goto(s628, STRING_LITERAL) = s776
goto(s629, postfix_expression) = s646
goto(s629, primary_expression) = s736
goto(s629, unary_expression) = s942
goto(s629, unary_operator) = s288
goto(s629, '!') = s956
goto(s629, '&') = s957
goto(s629, '(') = s41
goto(s629, '*') = s958
goto(s629, '+') = s959
goto(s629, '++') = s627
goto(s629, '-') = s960
goto(s629, '--') = s628
goto(s629, 'sizeof') = s629
goto(s629, '~') = s961
goto(s629, CONSTANT) = s756
goto(s629, IDENTIFIER) = s766
goto(s629, STRING_LITERAL) = s776
goto(s630, postfix_expression) = s647
goto(s630, primary_expression) = s737
goto(s630, unary_expression) = s907
goto(s630, unary_operator) = s293
goto(s630, '!') = s956
goto(s630, '&') = s957
goto(s630, '(') = s52
goto(s630, '*') = s958
goto(s630, '+') = s959
goto(s630, '++') = s630
goto(s630, '-') = s960
goto(s630, '--') = s631
goto(s630, 'sizeof') = s632
goto(s630, '~') = s961
goto(s630, CONSTANT) = s757
goto(s630, IDENTIFIER) = s767
goto(s630, STRING_LITERAL) = s777
goto(s631, postfix_expression) = s647
goto(s631, primary_expression) = s737
goto(s631, unary_expression) = s916
goto(s631, unary_operator) = s293
goto(s631, '!') = s956
goto(s631, '&') = s957
goto(s631, '(') = s52
goto(s631, '*') = s958
goto(s631, '+') = s959
goto(s631, '++') = s630
goto(s631, '-') = s960
goto(s631, '--') = s631
goto(s631, 'sizeof') = s632
goto(s631, '~') = s961
goto(s631, CONSTANT) = s757
goto(s631, IDENTIFIER) = s767
goto(s631, STRING_LITERAL) = s777
goto(s632, postfix_expression) = s647
goto(s632, primary_expression) = s737
goto(s632, unary_expression) = s943
goto(s632, unary_operator) = s293
goto(s632, '!') = s956
goto(s632, '&') = s957
goto(s632, '(') = s42
goto(s632, '*') = s958
goto(s632, '+') = s959
goto(s632, '++') = s630
goto(s632, '-') = s960
goto(s632, '--') = s631
goto(s632, 'sizeof') = s632
goto(s632, '~') = s961
goto(s632, CONSTANT) = s757
goto(s632, IDENTIFIER) = s767
goto(s632, STRING_LITERAL) = s777
goto(s633, postfix_expression) = s648
goto(s633, primary_expression) = s738
goto(s633, unary_expression) = s908
goto(s633, unary_operator) = s298
goto(s633, '!') = s956
goto(s633, '&') = s957
goto(s633, '(') = s53
goto(s633, '*') = s958
goto(s633, '+') = s959
goto(s633, '++') = s633
goto(s633, '-') = s960
goto(s633, '--') = s634
goto(s633, 'sizeof') = s635
goto(s633, '~') = s961
goto(s633, CONSTANT) = s758
goto(s633, IDENTIFIER) = s768
goto(s633, STRING_LITERAL) = s778
goto(s634, postfix_expression) = s648
goto(s634, primary_expression) = s738
goto(s634, unary_expression) = s917
goto(s634, unary_operator) = s298
goto(s634, '!') = s956
goto(s634, '&') = s957
goto(s634, '(') = s53
goto(s634, '*') = s958
goto(s634, '+') = s959
goto(s634, '++') = s633
goto(s634, '-') = s960
goto(s634, '--') = s634
goto(s634, 'sizeof') = s635
goto(s634, '~') = s961
goto(s634, CONSTANT) = s758
goto(s634, IDENTIFIER) = s768
goto(s634, STRING_LITERAL) = s778
goto(s635, postfix_expression) = s648
goto(s635, primary_expression) = s738
goto(s635, unary_expression) = s944
goto(s635, unary_operator) = s298
goto(s635, '!') = s956
goto(s635, '&') = s957
goto(s635, '(') = s43
goto(s635, '*') = s958
goto(s635, '+') = s959
goto(s635, '++') = s633
goto(s635, '-') = s960
goto(s635, '--') = s634
goto(s635, 'sizeof') = s635
goto(s635, '~') = s961
goto(s635, CONSTANT) = s758
goto(s635, IDENTIFIER) = s768
goto(s635, STRING_LITERAL) = s778
goto(s636, postfix_expression) = s649
goto(s636, primary_expression) = s739
goto(s636, unary_expression) = s909
goto(s636, unary_operator) = s303
goto(s636, '!') = s956
goto(s636, '&') = s957
goto(s636, '(') = s54
goto(s636, '*') = s958
goto(s636, '+') = s959
goto(s636, '++') = s636
goto(s636, '-') = s960
goto(s636, '--') = s637
goto(s636, 'sizeof') = s638
goto(s636, '~') = s961
goto(s636, CONSTANT) = s759
goto(s636, IDENTIFIER) = s769
goto(s636, STRING_LITERAL) = s779
goto(s637, postfix_expression) = s649
goto(s637, primary_expression) = s739
goto(s637, unary_expression) = s918
goto(s637, unary_operator) = s303
goto(s637, '!') = s956
goto(s637, '&') = s957
goto(s637, '(') = s54
goto(s637, '*') = s958
goto(s637, '+') = s959
goto(s637, '++') = s636
goto(s637, '-') = s960
goto(s637, '--') = s637
goto(s637, 'sizeof') = s638
goto(s637, '~') = s961
goto(s637, CONSTANT) = s759
goto(s637, IDENTIFIER) = s769
goto(s637, STRING_LITERAL) = s779
goto(s638, postfix_expression) = s649
goto(s638, primary_expression) = s739
goto(s638, unary_expression) = s945
goto(s638, unary_operator) = s303
goto(s638, '!') = s956
goto(s638, '&') = s957
goto(s638, '(') = s44
goto(s638, '*') = s958
goto(s638, '+') = s959
goto(s638, '++') = s636
goto(s638, '-') = s960
goto(s638, '--') = s637
goto(s638, 'sizeof') = s638
goto(s638, '~') = s961
goto(s638, CONSTANT) = s759
goto(s638, IDENTIFIER) = s769
goto(s638, STRING_LITERAL) = s779
goto(s639, postfix_expression) = s650
goto(s639, primary_expression) = s740
goto(s639, unary_expression) = s910
goto(s639, unary_operator) = s308
goto(s639, '!') = s956
goto(s639, '&') = s957
goto(s639, '(') = s55
goto(s639, '*') = s958
goto(s639, '+') = s959
goto(s639, '++') = s639
goto(s639, '-') = s960
goto(s639, '--') = s640
goto(s639, 'sizeof') = s641
goto(s639, '~') = s961
goto(s639, CONSTANT) = s760
goto(s639, IDENTIFIER) = s770
goto(s639, STRING_LITERAL) = s780
goto(s640, postfix_expression) = s650
goto(s640, primary_expression) = s740
goto(s640, unary_expression) = s919
goto(s640, unary_operator) = s308
goto(s640, '!') = s956
goto(s640, '&') = s957
goto(s640, '(') = s55
goto(s640, '*') = s958
goto(s640, '+') = s959
goto(s640, '++') = s639
goto(s640, '-') = s960
goto(s640, '--') = s640
goto(s640, 'sizeof') = s641
goto(s640, '~') = s961
goto(s640, CONSTANT) = s760
goto(s640, IDENTIFIER) = s770
goto(s640, STRING_LITERAL) = s780
goto(s641, postfix_expression) = s650
goto(s641, primary_expression) = s740
goto(s641, unary_expression) = s946
goto(s641, unary_operator) = s308
goto(s641, '!') = s956
goto(s641, '&') = s957
goto(s641, '(') = s45
goto(s641, '*') = s958
goto(s641, '+') = s959
goto(s641, '++') = s639
goto(s641, '-') = s960
goto(s641, '--') = s640
goto(s641, 'sizeof') = s641
goto(s641, '~') = s961
goto(s641, CONSTANT) = s760
goto(s641, IDENTIFIER) = s770
goto(s641, STRING_LITERAL) = s780
goto(s642, '(') = s14
goto(s642, '++') = s669
goto(s642, '--') = s678
goto(s642, '->') = s687
goto(s642, '.') = s705
goto(s642, '[') = s110
goto(s643, '(') = s15
goto(s643, '++') = s670
goto(s643, '--') = s679
goto(s643, '->') = s688
goto(s643, '.') = s706
goto(s643, '[') = s111
goto(s644, '(') = s16
goto(s644, '++') = s671
goto(s644, '--') = s680
goto(s644, '->') = s689
goto(s644, '.') = s707
goto(s644, '[') = s112
goto(s645, '(') = s17
goto(s645, '++') = s672
goto(s645, '--') = s681
goto(s645, '->') = s690
goto(s645, '.') = s708
goto(s645, '[') = s113
goto(s646, '(') = s18
goto(s646, '++') = s673
goto(s646, '--') = s682
goto(s646, '->') = s691
goto(s646, '.') = s709
goto(s646, '[') = s114
goto(s647, '(') = s19
goto(s647, '++') = s674
goto(s647, '--') = s683
goto(s647, '->') = s692
goto(s647, '.') = s710
goto(s647, '[') = s115
goto(s648, '(') = s20
goto(s648, '++') = s675
goto(s648, '--') = s684
goto(s648, '->') = s693
goto(s648, '.') = s711
goto(s648, '[') = s116
goto(s649, '(') = s21
goto(s649, '++') = s676
goto(s649, '--') = s685
goto(s649, '->') = s694
goto(s649, '.') = s712
goto(s649, '[') = s117
goto(s650, '(') = s22
goto(s650, '++') = s677
goto(s650, '--') = s686
goto(s650, '->') = s695
goto(s650, '.') = s713
goto(s650, '[') = s118
goto(s687, IDENTIFIER) = s696
goto(s688, IDENTIFIER) = s697
goto(s689, IDENTIFIER) = s698
goto(s690, IDENTIFIER) = s699
goto(s691, IDENTIFIER) = s700
goto(s692, IDENTIFIER) = s701
goto(s693, IDENTIFIER) = s702
goto(s694, IDENTIFIER) = s703
goto(s695, IDENTIFIER) = s704
goto(s705, IDENTIFIER) = s714
goto(s706, IDENTIFIER) = s715
goto(s707, IDENTIFIER) = s716
goto(s708, IDENTIFIER) = s717
goto(s709, IDENTIFIER) = s718
goto(s710, IDENTIFIER) = s719
goto(s711, IDENTIFIER) = s720
goto(s712, IDENTIFIER) = s721
goto(s713, IDENTIFIER) = s722
goto(s781, '<<') = s69
goto(s781, '>>') = s70
goto(s782, '<<') = s91
goto(s782, '>>') = s92
goto(s783, '<<') = s107
goto(s783, '>>') = s108
goto(s784, '<<') = s132
goto(s784, '>>') = s133
goto(s785, '<<') = s147
goto(s785, '>>') = s148
goto(s786, '<<') = s168
goto(s786, '>>') = s169
goto(s787, '<<') = s69
goto(s787, '>>') = s70
goto(s788, '<<') = s91
goto(s788, '>>') = s92
goto(s789, '<<') = s107
goto(s789, '>>') = s108
goto(s790, '<<') = s132
goto(s790, '>>') = s133
goto(s791, '<<') = s147
goto(s791, '>>') = s148
goto(s792, '<<') = s168
goto(s792, '>>') = s169
goto(s793, '<<') = s69
goto(s793, '>>') = s70
goto(s794, '<<') = s91
goto(s794, '>>') = s92
goto(s795, '<<') = s107
goto(s795, '>>') = s108
goto(s796, '<<') = s132
goto(s796, '>>') = s133
goto(s797, '<<') = s147
goto(s797, '>>') = s148
goto(s798, '<<') = s168
goto(s798, '>>') = s169
goto(s799, '<<') = s69
goto(s799, '>>') = s70
goto(s800, '<<') = s91
goto(s800, '>>') = s92
goto(s801, '<<') = s107
goto(s801, '>>') = s108
goto(s802, '<<') = s132
goto(s802, '>>') = s133
goto(s803, '<<') = s147
goto(s803, '>>') = s148
goto(s804, '<<') = s168
goto(s804, '>>') = s169
goto(s805, '<<') = s69
goto(s805, '>>') = s70
goto(s806, '<<') = s91
goto(s806, '>>') = s92
goto(s807, '<<') = s107
goto(s807, '>>') = s108
goto(s808, '<<') = s132
goto(s808, '>>') = s133
goto(s809, '<<') = s147
goto(s809, '>>') = s148
goto(s810, '<<') = s168
goto(s810, '>>') = s169
goto(s820, ',') = s372
goto(s820, ';') = s821
goto(s825, ':') = s95
goto(s831, '{') = s446
goto(s831, IDENTIFIER) = s837
goto(s832, '{') = s447
goto(s832, IDENTIFIER) = s838
goto(s833, '{') = s448
goto(s833, IDENTIFIER) = s839
goto(s837, '{') = s449
goto(s838, '{') = s450
goto(s839, '{') = s451
goto(s920, ')') = s929
goto(s921, ')') = s930
goto(s922, ')') = s931
goto(s923, ')') = s932
goto(s924, ')') = s933
goto(s925, ')') = s934
goto(s926, ')') = s935
goto(s927, ')') = s936
goto(s928, ')') = s937
