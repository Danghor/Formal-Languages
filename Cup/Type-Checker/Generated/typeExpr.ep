Program = Program(List<TypeDef>   typeDefs, 
                  List<Signature> signatures, 
                  List<TypedTerm> typedTerms);

TypeDef = SimpleTypeDef(String name, List<Type> typeSum)
        + ParamTypeDef(String name, List<String> parameters, List<Type> typeSum);

Type = Parameter(String name) 
     + CompositeType(String name, List<Type> argTypes);

substitute: Type * Parameter * Type -> Type;

Signature = Signature(String name, List<Type> argList, Type result);

Term = Term(String function, List<Term> termList);

typeEqs: Term * Type * Map<String, Signature> -> List<Equation>;

TypedTerm = TypedTerm(Term term, Type type);

Substitution = Substitution(List<Parameter> variables, List<Type> types);

Equation = Equation(Type lhs, Type rhs);

substitute: Equation * Parameter * Term -> Equation;

MartelliMontanari = MartelliMontanari(List<Equation> equations, Substitution theta);