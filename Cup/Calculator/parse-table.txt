===== Terminals =====
[0]EOF [1]error [2]SEMI [3]PLUS [4]MINUS 
[5]TIMES [6]DIVIDE [7]MOD [8]POW [9]UMINUS 
[10]LPAREN [11]RPAREN [12]NUMBER 

===== Non terminals =====
[0]expr_list [1]expr_part [2]expr [3]NT$0 

===== Productions =====
[0] expr_list ::= expr_list expr_part 
[1] $START ::= expr_list EOF 
[2] expr_list ::= expr_part 
[3] NT$0 ::= 
[4] expr_part ::= expr NT$0 SEMI 
[5] expr ::= expr PLUS expr 
[6] expr ::= expr MINUS expr 
[7] expr ::= expr TIMES expr 
[8] expr ::= expr DIVIDE expr 
[9] expr ::= expr MOD expr 
[10] expr ::= expr POW expr 
[11] expr ::= NUMBER 
[12] expr ::= MINUS expr 
[13] expr ::= LPAREN expr RPAREN 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [expr ::= (*) NUMBER , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr ::= (*) expr DIVIDE expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr ::= (*) expr PLUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr_list ::= (*) expr_part , {EOF MINUS LPAREN NUMBER }]
  [expr ::= (*) LPAREN expr RPAREN , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr ::= (*) expr POW expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr ::= (*) expr TIMES expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr_part ::= (*) expr NT$0 SEMI , {EOF MINUS LPAREN NUMBER }]
  [$START ::= (*) expr_list EOF , {EOF }]
  [expr ::= (*) MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr ::= (*) expr MOD expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr ::= (*) expr MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr_list ::= (*) expr_list expr_part , {EOF MINUS LPAREN NUMBER }]
}
transition on expr to state [6]
transition on LPAREN to state [5]
transition on expr_list to state [4]
transition on MINUS to state [3]
transition on NUMBER to state [2]
transition on expr_part to state [1]

-------------------
lalr_state [1]: {
  [expr_list ::= expr_part (*) , {EOF MINUS LPAREN NUMBER }]
}

-------------------
lalr_state [2]: {
  [expr ::= NUMBER (*) , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
}

-------------------
lalr_state [3]: {
  [expr ::= (*) NUMBER , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr DIVIDE expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr PLUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) LPAREN expr RPAREN , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr POW expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr TIMES expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= MINUS (*) expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr MOD expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
}
transition on expr to state [25]
transition on LPAREN to state [5]
transition on MINUS to state [3]
transition on NUMBER to state [2]

-------------------
lalr_state [4]: {
  [expr ::= (*) NUMBER , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr ::= (*) expr DIVIDE expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr ::= (*) expr PLUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr ::= (*) LPAREN expr RPAREN , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr ::= (*) expr POW expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr ::= (*) expr TIMES expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [$START ::= expr_list (*) EOF , {EOF }]
  [expr_part ::= (*) expr NT$0 SEMI , {EOF MINUS LPAREN NUMBER }]
  [expr ::= (*) MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr ::= (*) expr MOD expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr ::= (*) expr MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr_list ::= expr_list (*) expr_part , {EOF MINUS LPAREN NUMBER }]
}
transition on EOF to state [24]
transition on expr to state [6]
transition on LPAREN to state [5]
transition on MINUS to state [3]
transition on NUMBER to state [2]
transition on expr_part to state [23]

-------------------
lalr_state [5]: {
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr DIVIDE expr , {PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= LPAREN (*) expr RPAREN , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr POW expr , {PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr MOD expr , {PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
}
transition on expr to state [21]
transition on LPAREN to state [5]
transition on MINUS to state [3]
transition on NUMBER to state [2]

-------------------
lalr_state [6]: {
  [expr ::= expr (*) PLUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr ::= expr (*) POW expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr ::= expr (*) TIMES expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr_part ::= expr (*) NT$0 SEMI , {EOF MINUS LPAREN NUMBER }]
  [expr ::= expr (*) MOD expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [expr ::= expr (*) MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
  [NT$0 ::= (*) , {SEMI }]
  [expr ::= expr (*) DIVIDE expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW }]
}
transition on TIMES to state [13]
transition on DIVIDE to state [12]
transition on MINUS to state [11]
transition on PLUS to state [10]
transition on POW to state [9]
transition on NT$0 to state [8]
transition on MOD to state [7]

-------------------
lalr_state [7]: {
  [expr ::= (*) NUMBER , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr DIVIDE expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr PLUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) LPAREN expr RPAREN , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr POW expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr TIMES expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr MOD (*) expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr MOD expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
}
transition on expr to state [20]
transition on LPAREN to state [5]
transition on MINUS to state [3]
transition on NUMBER to state [2]

-------------------
lalr_state [8]: {
  [expr_part ::= expr NT$0 (*) SEMI , {EOF MINUS LPAREN NUMBER }]
}
transition on SEMI to state [19]

-------------------
lalr_state [9]: {
  [expr ::= (*) NUMBER , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr DIVIDE expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr PLUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr POW (*) expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) LPAREN expr RPAREN , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr POW expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr TIMES expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr MOD expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
}
transition on expr to state [18]
transition on LPAREN to state [5]
transition on MINUS to state [3]
transition on NUMBER to state [2]

-------------------
lalr_state [10]: {
  [expr ::= (*) NUMBER , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr PLUS (*) expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr DIVIDE expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr PLUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) LPAREN expr RPAREN , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr POW expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr TIMES expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr MOD expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
}
transition on expr to state [17]
transition on LPAREN to state [5]
transition on MINUS to state [3]
transition on NUMBER to state [2]

-------------------
lalr_state [11]: {
  [expr ::= (*) NUMBER , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr DIVIDE expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr PLUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) LPAREN expr RPAREN , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr POW expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr TIMES expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr MINUS (*) expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr MOD expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
}
transition on expr to state [16]
transition on LPAREN to state [5]
transition on MINUS to state [3]
transition on NUMBER to state [2]

-------------------
lalr_state [12]: {
  [expr ::= expr DIVIDE (*) expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) NUMBER , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr DIVIDE expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr PLUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) LPAREN expr RPAREN , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr POW expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr TIMES expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr MOD expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
}
transition on expr to state [15]
transition on LPAREN to state [5]
transition on MINUS to state [3]
transition on NUMBER to state [2]

-------------------
lalr_state [13]: {
  [expr ::= (*) NUMBER , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr DIVIDE expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr PLUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr TIMES (*) expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) LPAREN expr RPAREN , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr POW expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr TIMES expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr MOD expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= (*) expr MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
}
transition on expr to state [14]
transition on LPAREN to state [5]
transition on MINUS to state [3]
transition on NUMBER to state [2]

-------------------
lalr_state [14]: {
  [expr ::= expr (*) PLUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr TIMES expr (*) , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) POW expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) TIMES expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) MOD expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) DIVIDE expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
}
transition on TIMES to state [13]
transition on DIVIDE to state [12]
transition on MINUS to state [11]
transition on PLUS to state [10]
transition on POW to state [9]
transition on MOD to state [7]

-------------------
lalr_state [15]: {
  [expr ::= expr (*) PLUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) POW expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) TIMES expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) MOD expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr DIVIDE expr (*) , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) DIVIDE expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
}
transition on TIMES to state [13]
transition on DIVIDE to state [12]
transition on MINUS to state [11]
transition on PLUS to state [10]
transition on POW to state [9]
transition on MOD to state [7]

-------------------
lalr_state [16]: {
  [expr ::= expr (*) PLUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) POW expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) TIMES expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr MINUS expr (*) , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) MOD expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) DIVIDE expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
}
transition on TIMES to state [13]
transition on DIVIDE to state [12]
transition on MINUS to state [11]
transition on PLUS to state [10]
transition on POW to state [9]
transition on MOD to state [7]

-------------------
lalr_state [17]: {
  [expr ::= expr (*) PLUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) POW expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) TIMES expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) MOD expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr PLUS expr (*) , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) DIVIDE expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
}
transition on TIMES to state [13]
transition on DIVIDE to state [12]
transition on MINUS to state [11]
transition on PLUS to state [10]
transition on POW to state [9]
transition on MOD to state [7]

-------------------
lalr_state [18]: {
  [expr ::= expr POW expr (*) , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) PLUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) POW expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) TIMES expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) MOD expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) DIVIDE expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
}
transition on TIMES to state [13]
transition on DIVIDE to state [12]
transition on MINUS to state [11]
transition on PLUS to state [10]
transition on POW to state [9]
transition on MOD to state [7]

-------------------
lalr_state [19]: {
  [expr_part ::= expr NT$0 SEMI (*) , {EOF MINUS LPAREN NUMBER }]
}

-------------------
lalr_state [20]: {
  [expr ::= expr (*) PLUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) POW expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) TIMES expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr MOD expr (*) , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) MOD expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) DIVIDE expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
}
transition on TIMES to state [13]
transition on DIVIDE to state [12]
transition on MINUS to state [11]
transition on PLUS to state [10]
transition on POW to state [9]
transition on MOD to state [7]

-------------------
lalr_state [21]: {
  [expr ::= LPAREN expr (*) RPAREN , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) POW expr , {PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) MOD expr , {PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) DIVIDE expr , {PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
}
transition on TIMES to state [13]
transition on DIVIDE to state [12]
transition on MINUS to state [11]
transition on PLUS to state [10]
transition on POW to state [9]
transition on RPAREN to state [22]
transition on MOD to state [7]

-------------------
lalr_state [22]: {
  [expr ::= LPAREN expr RPAREN (*) , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
}

-------------------
lalr_state [23]: {
  [expr_list ::= expr_list expr_part (*) , {EOF MINUS LPAREN NUMBER }]
}

-------------------
lalr_state [24]: {
  [$START ::= expr_list EOF (*) , {EOF }]
}

-------------------
lalr_state [25]: {
  [expr ::= expr (*) PLUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) POW expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) TIMES expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= MINUS expr (*) , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) MOD expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) MINUS expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
  [expr ::= expr (*) DIVIDE expr , {SEMI PLUS MINUS TIMES DIVIDE MOD POW RPAREN }]
}
transition on TIMES to state [13]
transition on DIVIDE to state [12]
transition on MINUS to state [11]
transition on PLUS to state [10]
transition on POW to state [9]
transition on MOD to state [7]

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 4:SHIFT(to state 3)] [term 10:SHIFT(to state 5)]
 [term 12:SHIFT(to state 2)]
From state #1
 [term 0:REDUCE(with prod 2)] [term 4:REDUCE(with prod 2)]
 [term 10:REDUCE(with prod 2)] [term 12:REDUCE(with prod 2)]
From state #2
 [term 2:REDUCE(with prod 11)] [term 3:REDUCE(with prod 11)]
 [term 4:REDUCE(with prod 11)] [term 5:REDUCE(with prod 11)]
 [term 6:REDUCE(with prod 11)] [term 7:REDUCE(with prod 11)]
 [term 8:REDUCE(with prod 11)] [term 11:REDUCE(with prod 11)]
From state #3
 [term 4:SHIFT(to state 3)] [term 10:SHIFT(to state 5)]
 [term 12:SHIFT(to state 2)]
From state #4
 [term 0:SHIFT(to state 24)] [term 4:SHIFT(to state 3)]
 [term 10:SHIFT(to state 5)] [term 12:SHIFT(to state 2)]
From state #5
 [term 4:SHIFT(to state 3)] [term 10:SHIFT(to state 5)]
 [term 12:SHIFT(to state 2)]
From state #6
 [term 2:REDUCE(with prod 3)] [term 3:SHIFT(to state 10)]
 [term 4:SHIFT(to state 11)] [term 5:SHIFT(to state 13)]
 [term 6:SHIFT(to state 12)] [term 7:SHIFT(to state 7)]
 [term 8:SHIFT(to state 9)]
From state #7
 [term 4:SHIFT(to state 3)] [term 10:SHIFT(to state 5)]
 [term 12:SHIFT(to state 2)]
From state #8
 [term 2:SHIFT(to state 19)]
From state #9
 [term 4:SHIFT(to state 3)] [term 10:SHIFT(to state 5)]
 [term 12:SHIFT(to state 2)]
From state #10
 [term 4:SHIFT(to state 3)] [term 10:SHIFT(to state 5)]
 [term 12:SHIFT(to state 2)]
From state #11
 [term 4:SHIFT(to state 3)] [term 10:SHIFT(to state 5)]
 [term 12:SHIFT(to state 2)]
From state #12
 [term 4:SHIFT(to state 3)] [term 10:SHIFT(to state 5)]
 [term 12:SHIFT(to state 2)]
From state #13
 [term 4:SHIFT(to state 3)] [term 10:SHIFT(to state 5)]
 [term 12:SHIFT(to state 2)]
From state #14
 [term 2:REDUCE(with prod 7)] [term 3:REDUCE(with prod 7)]
 [term 4:REDUCE(with prod 7)] [term 5:REDUCE(with prod 7)]
 [term 6:REDUCE(with prod 7)] [term 7:REDUCE(with prod 7)]
 [term 8:SHIFT(to state 9)] [term 11:REDUCE(with prod 7)]
From state #15
 [term 2:REDUCE(with prod 8)] [term 3:REDUCE(with prod 8)]
 [term 4:REDUCE(with prod 8)] [term 5:REDUCE(with prod 8)]
 [term 6:REDUCE(with prod 8)] [term 7:REDUCE(with prod 8)]
 [term 8:SHIFT(to state 9)] [term 11:REDUCE(with prod 8)]
From state #16
 [term 2:REDUCE(with prod 6)] [term 3:REDUCE(with prod 6)]
 [term 4:REDUCE(with prod 6)] [term 5:SHIFT(to state 13)]
 [term 6:SHIFT(to state 12)] [term 7:SHIFT(to state 7)]
 [term 8:SHIFT(to state 9)] [term 11:REDUCE(with prod 6)]
From state #17
 [term 2:REDUCE(with prod 5)] [term 3:REDUCE(with prod 5)]
 [term 4:REDUCE(with prod 5)] [term 5:SHIFT(to state 13)]
 [term 6:SHIFT(to state 12)] [term 7:SHIFT(to state 7)]
 [term 8:SHIFT(to state 9)] [term 11:REDUCE(with prod 5)]
From state #18
 [term 2:REDUCE(with prod 10)] [term 3:REDUCE(with prod 10)]
 [term 4:REDUCE(with prod 10)] [term 5:REDUCE(with prod 10)]
 [term 6:REDUCE(with prod 10)] [term 7:REDUCE(with prod 10)]
 [term 8:SHIFT(to state 9)] [term 11:REDUCE(with prod 10)]
From state #19
 [term 0:REDUCE(with prod 4)] [term 4:REDUCE(with prod 4)]
 [term 10:REDUCE(with prod 4)] [term 12:REDUCE(with prod 4)]
From state #20
 [term 2:REDUCE(with prod 9)] [term 3:REDUCE(with prod 9)]
 [term 4:REDUCE(with prod 9)] [term 5:REDUCE(with prod 9)]
 [term 6:REDUCE(with prod 9)] [term 7:REDUCE(with prod 9)]
 [term 8:SHIFT(to state 9)] [term 11:REDUCE(with prod 9)]
From state #21
 [term 3:SHIFT(to state 10)] [term 4:SHIFT(to state 11)]
 [term 5:SHIFT(to state 13)] [term 6:SHIFT(to state 12)]
 [term 7:SHIFT(to state 7)] [term 8:SHIFT(to state 9)]
 [term 11:SHIFT(to state 22)]
From state #22
 [term 2:REDUCE(with prod 13)] [term 3:REDUCE(with prod 13)]
 [term 4:REDUCE(with prod 13)] [term 5:REDUCE(with prod 13)]
 [term 6:REDUCE(with prod 13)] [term 7:REDUCE(with prod 13)]
 [term 8:REDUCE(with prod 13)] [term 11:REDUCE(with prod 13)]
From state #23
 [term 0:REDUCE(with prod 0)] [term 4:REDUCE(with prod 0)]
 [term 10:REDUCE(with prod 0)] [term 12:REDUCE(with prod 0)]
From state #24
 [term 0:REDUCE(with prod 1)]
From state #25
 [term 2:REDUCE(with prod 12)] [term 3:REDUCE(with prod 12)]
 [term 4:REDUCE(with prod 12)] [term 5:REDUCE(with prod 12)]
 [term 6:REDUCE(with prod 12)] [term 7:REDUCE(with prod 12)]
 [term 8:SHIFT(to state 9)] [term 11:REDUCE(with prod 12)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 4] [non term 1->state 1] [non term 2->state 6]
From state #1
From state #2
From state #3
 [non term 2->state 25]
From state #4
 [non term 1->state 23] [non term 2->state 6]
From state #5
 [non term 2->state 21]
From state #6
 [non term 3->state 8]
From state #7
 [non term 2->state 20]
From state #8
From state #9
 [non term 2->state 18]
From state #10
 [non term 2->state 17]
From state #11
 [non term 2->state 16]
From state #12
 [non term 2->state 15]
From state #13
 [non term 2->state 14]
From state #14
From state #15
From state #16
From state #17
From state #18
From state #19
From state #20
From state #21
From state #22
From state #23
From state #24
From state #25
-----------------------------
------- CUP v0.11a beta 20060608 Parser Generation Summary -------
  0 errors and 0 warnings
  13 terminals, 4 non-terminals, and 14 productions declared, 
  producing 26 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (v0.11a beta 20060608)
