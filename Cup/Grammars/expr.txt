===== Terminals =====
[0]EOF [1]error [2]PLUS [3]TIMES [4]LPAR 
[5]RPAR [6]NUMBER 

===== Non terminals =====
[0]expr [1]prod [2]fact 

===== Productions =====
[0] expr ::= expr PLUS prod 
[1] $START ::= expr EOF 
[2] expr ::= prod 
[3] prod ::= prod TIMES fact 
[4] prod ::= fact 
[5] fact ::= LPAR expr RPAR 
[6] fact ::= NUMBER 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [fact ::= (*) LPAR expr RPAR , {EOF PLUS TIMES }]
  [expr ::= (*) prod , {EOF PLUS }]
  [prod ::= (*) fact , {EOF PLUS TIMES }]
  [$START ::= (*) expr EOF , {EOF }]
  [fact ::= (*) NUMBER , {EOF PLUS TIMES }]
  [prod ::= (*) prod TIMES fact , {EOF PLUS TIMES }]
  [expr ::= (*) expr PLUS prod , {EOF PLUS }]
}
transition on expr to state [5]
transition on LPAR to state [4]
transition on NUMBER to state [3]
transition on fact to state [2]
transition on prod to state [1]

-------------------
lalr_state [1]: {
  [expr ::= prod (*) , {EOF PLUS RPAR }]
  [prod ::= prod (*) TIMES fact , {EOF PLUS TIMES RPAR }]
}
transition on TIMES to state [9]

-------------------
lalr_state [2]: {
  [prod ::= fact (*) , {EOF PLUS TIMES RPAR }]
}

-------------------
lalr_state [3]: {
  [fact ::= NUMBER (*) , {EOF PLUS TIMES RPAR }]
}

-------------------
lalr_state [4]: {
  [fact ::= LPAR (*) expr RPAR , {EOF PLUS TIMES RPAR }]
  [fact ::= (*) LPAR expr RPAR , {PLUS TIMES RPAR }]
  [expr ::= (*) prod , {PLUS RPAR }]
  [prod ::= (*) fact , {PLUS TIMES RPAR }]
  [fact ::= (*) NUMBER , {PLUS TIMES RPAR }]
  [prod ::= (*) prod TIMES fact , {PLUS TIMES RPAR }]
  [expr ::= (*) expr PLUS prod , {PLUS RPAR }]
}
transition on expr to state [11]
transition on LPAR to state [4]
transition on NUMBER to state [3]
transition on fact to state [2]
transition on prod to state [1]

-------------------
lalr_state [5]: {
  [$START ::= expr (*) EOF , {EOF }]
  [expr ::= expr (*) PLUS prod , {EOF PLUS }]
}
transition on EOF to state [7]
transition on PLUS to state [6]

-------------------
lalr_state [6]: {
  [fact ::= (*) LPAR expr RPAR , {EOF PLUS TIMES RPAR }]
  [prod ::= (*) fact , {EOF PLUS TIMES RPAR }]
  [fact ::= (*) NUMBER , {EOF PLUS TIMES RPAR }]
  [expr ::= expr PLUS (*) prod , {EOF PLUS RPAR }]
  [prod ::= (*) prod TIMES fact , {EOF PLUS TIMES RPAR }]
}
transition on LPAR to state [4]
transition on NUMBER to state [3]
transition on fact to state [2]
transition on prod to state [8]

-------------------
lalr_state [7]: {
  [$START ::= expr EOF (*) , {EOF }]
}

-------------------
lalr_state [8]: {
  [expr ::= expr PLUS prod (*) , {EOF PLUS RPAR }]
  [prod ::= prod (*) TIMES fact , {EOF PLUS TIMES RPAR }]
}
transition on TIMES to state [9]

-------------------
lalr_state [9]: {
  [fact ::= (*) LPAR expr RPAR , {EOF PLUS TIMES RPAR }]
  [prod ::= prod TIMES (*) fact , {EOF PLUS TIMES RPAR }]
  [fact ::= (*) NUMBER , {EOF PLUS TIMES RPAR }]
}
transition on LPAR to state [4]
transition on NUMBER to state [3]
transition on fact to state [10]

-------------------
lalr_state [10]: {
  [prod ::= prod TIMES fact (*) , {EOF PLUS TIMES RPAR }]
}

-------------------
lalr_state [11]: {
  [expr ::= expr (*) PLUS prod , {PLUS RPAR }]
  [fact ::= LPAR expr (*) RPAR , {EOF PLUS TIMES RPAR }]
}
transition on RPAR to state [12]
transition on PLUS to state [6]

-------------------
lalr_state [12]: {
  [fact ::= LPAR expr RPAR (*) , {EOF PLUS TIMES RPAR }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 4:SHIFT(to state 4)] [term 6:SHIFT(to state 3)]
From state #1
 [term 0:REDUCE(with prod 2)] [term 2:REDUCE(with prod 2)]
 [term 3:SHIFT(to state 9)] [term 5:REDUCE(with prod 2)]
From state #2
 [term 0:REDUCE(with prod 4)] [term 2:REDUCE(with prod 4)]
 [term 3:REDUCE(with prod 4)] [term 5:REDUCE(with prod 4)]
From state #3
 [term 0:REDUCE(with prod 6)] [term 2:REDUCE(with prod 6)]
 [term 3:REDUCE(with prod 6)] [term 5:REDUCE(with prod 6)]
From state #4
 [term 4:SHIFT(to state 4)] [term 6:SHIFT(to state 3)]
From state #5
 [term 0:SHIFT(to state 7)] [term 2:SHIFT(to state 6)]
From state #6
 [term 4:SHIFT(to state 4)] [term 6:SHIFT(to state 3)]
From state #7
 [term 0:REDUCE(with prod 1)]
From state #8
 [term 0:REDUCE(with prod 0)] [term 2:REDUCE(with prod 0)]
 [term 3:SHIFT(to state 9)] [term 5:REDUCE(with prod 0)]
From state #9
 [term 4:SHIFT(to state 4)] [term 6:SHIFT(to state 3)]
From state #10
 [term 0:REDUCE(with prod 3)] [term 2:REDUCE(with prod 3)]
 [term 3:REDUCE(with prod 3)] [term 5:REDUCE(with prod 3)]
From state #11
 [term 2:SHIFT(to state 6)] [term 5:SHIFT(to state 12)]
From state #12
 [term 0:REDUCE(with prod 5)] [term 2:REDUCE(with prod 5)]
 [term 3:REDUCE(with prod 5)] [term 5:REDUCE(with prod 5)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 5] [non term 1->state 1] [non term 2->state 2]
From state #1
From state #2
From state #3
From state #4
 [non term 0->state 11] [non term 1->state 1] [non term 2->state 2]
From state #5
From state #6
 [non term 1->state 8] [non term 2->state 2]
From state #7
From state #8
From state #9
 [non term 2->state 10]
From state #10
From state #11
From state #12
-----------------------------
------- CUP v0.11a beta 20060608 Parser Generation Summary -------
  0 errors and 0 warnings
  7 terminals, 3 non-terminals, and 7 productions declared, 
  producing 13 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (v0.11a beta 20060608)
