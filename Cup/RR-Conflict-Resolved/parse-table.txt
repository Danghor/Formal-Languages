Opening files...
Parsing specification from standard input...
Checking specification...
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
  Checking for non-reduced productions...
Writing parser...
===== Terminals =====
[0]EOF [1]error [2]X [3]Y 

===== Non terminals =====
[0]$START [1]S [2]A [3]B 

===== Productions =====
[0] S ::= A X A Y 
[1] $START ::= S EOF 
[2] S ::= B Y B X 
[3] A ::= 
[4] B ::= 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [S ::= (*) B Y B X , {EOF }]
  [B ::= (*) , {Y }]
  [$START ::= (*) S EOF , {EOF }]
  [A ::= (*) , {X }]
  [S ::= (*) A X A Y , {EOF }]
}
transition on B to state [3]
transition on S to state [2]
transition on A to state [1]

-------------------
lalr_state [1]: {
  [S ::= A (*) X A Y , {EOF }]
}
transition on X to state [8]

-------------------
lalr_state [2]: {
  [$START ::= S (*) EOF , {EOF }]
}
transition on EOF to state [7]

-------------------
lalr_state [3]: {
  [S ::= B (*) Y B X , {EOF }]
}
transition on Y to state [4]

-------------------
lalr_state [4]: {
  [S ::= B Y (*) B X , {EOF }]
  [B ::= (*) , {X }]
}
transition on B to state [5]

-------------------
lalr_state [5]: {
  [S ::= B Y B (*) X , {EOF }]
}
transition on X to state [6]

-------------------
lalr_state [6]: {
  [S ::= B Y B X (*) , {EOF }]
}

-------------------
lalr_state [7]: {
  [$START ::= S EOF (*) , {EOF }]
}

-------------------
lalr_state [8]: {
  [S ::= A X (*) A Y , {EOF }]
  [A ::= (*) , {Y }]
}
transition on A to state [9]

-------------------
lalr_state [9]: {
  [S ::= A X A (*) Y , {EOF }]
}
transition on Y to state [10]

-------------------
lalr_state [10]: {
  [S ::= A X A Y (*) , {EOF }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 2:REDUCE(with prod 3)] [term 3:REDUCE(with prod 4)]
From state #1
 [term 2:SHIFT(to state 8)]
From state #2
 [term 0:SHIFT(to state 7)]
From state #3
 [term 3:SHIFT(to state 4)]
From state #4
 [term 2:REDUCE(with prod 4)]
From state #5
 [term 2:SHIFT(to state 6)]
From state #6
 [term 0:REDUCE(with prod 2)]
From state #7
 [term 0:REDUCE(with prod 1)]
From state #8
 [term 3:REDUCE(with prod 3)]
From state #9
 [term 3:SHIFT(to state 10)]
From state #10
 [term 0:REDUCE(with prod 0)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 1->state 2] [non term 2->state 1] [non term 3->state 3]
From state #1
From state #2
From state #3
From state #4
 [non term 3->state 5]
From state #5
From state #6
From state #7
From state #8
 [non term 2->state 9]
From state #9
From state #10
-----------------------------
Closing files...
------- CUP v0.10k Parser Generation Summary -------
  0 errors and 0 warnings
  4 terminals, 4 non-terminals, and 5 productions declared, 
  producing 11 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (v0.10k)
