===== Terminals =====
[0]EOF [1]error [2]ID [3]COMMA [4]COLON 
[5]BOGUS 

===== Non terminals =====
[0]def [1]param_spec [2]return_spec [3]type [4]name_list 
[5]name 

===== Productions =====
[0] def ::= param_spec return_spec COMMA 
[1] $START ::= def EOF 
[2] param_spec ::= type 
[3] param_spec ::= name_list COLON type 
[4] return_spec ::= type 
[5] return_spec ::= name COLON type 
[6] return_spec ::= ID BOGUS 
[7] type ::= ID 
[8] name ::= ID 
[9] name_list ::= name 
[10] name_list ::= name COMMA name_list 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [name ::= (*) ID , {COMMA COLON }]
  [param_spec ::= (*) type , {ID }]
  [name_list ::= (*) name COMMA name_list , {COLON }]
  [type ::= (*) ID , {ID }]
  [$START ::= (*) def EOF , {EOF }]
  [name_list ::= (*) name , {COLON }]
  [param_spec ::= (*) name_list COLON type , {ID }]
  [def ::= (*) param_spec return_spec COMMA , {EOF }]
}
transition on def to state [6]
transition on param_spec to state [5]
transition on type to state [4]
transition on name to state [3]
transition on name_list to state [2]
transition on ID to state [1]

-------------------
lalr_state [1]: {
  [type ::= ID (*) , {ID }]
  [name ::= ID (*) , {COMMA COLON }]
}

-------------------
lalr_state [2]: {
  [param_spec ::= name_list (*) COLON type , {ID }]
}
transition on COLON to state [20]

-------------------
lalr_state [3]: {
  [name_list ::= name (*) COMMA name_list , {COLON }]
  [name_list ::= name (*) , {COLON }]
}
transition on COMMA to state [17]

-------------------
lalr_state [4]: {
  [param_spec ::= type (*) , {ID }]
}

-------------------
lalr_state [5]: {
  [name ::= (*) ID , {COLON }]
  [return_spec ::= (*) name COLON type , {COMMA }]
  [type ::= (*) ID , {COMMA }]
  [return_spec ::= (*) type , {COMMA }]
  [return_spec ::= (*) ID BOGUS , {COMMA }]
  [def ::= param_spec (*) return_spec COMMA , {EOF }]
}
transition on type to state [11]
transition on name to state [10]
transition on return_spec to state [9]
transition on ID to state [8]

-------------------
lalr_state [6]: {
  [$START ::= def (*) EOF , {EOF }]
}
transition on EOF to state [7]

-------------------
lalr_state [7]: {
  [$START ::= def EOF (*) , {EOF }]
}

-------------------
lalr_state [8]: {
  [type ::= ID (*) , {COMMA }]
  [return_spec ::= ID (*) BOGUS , {COMMA }]
  [name ::= ID (*) , {COLON }]
}
transition on BOGUS to state [16]

-------------------
lalr_state [9]: {
  [def ::= param_spec return_spec (*) COMMA , {EOF }]
}
transition on COMMA to state [15]

-------------------
lalr_state [10]: {
  [return_spec ::= name (*) COLON type , {COMMA }]
}
transition on COLON to state [12]

-------------------
lalr_state [11]: {
  [return_spec ::= type (*) , {COMMA }]
}

-------------------
lalr_state [12]: {
  [type ::= (*) ID , {COMMA }]
  [return_spec ::= name COLON (*) type , {COMMA }]
}
transition on type to state [14]
transition on ID to state [13]

-------------------
lalr_state [13]: {
  [type ::= ID (*) , {ID COMMA }]
}

-------------------
lalr_state [14]: {
  [return_spec ::= name COLON type (*) , {COMMA }]
}

-------------------
lalr_state [15]: {
  [def ::= param_spec return_spec COMMA (*) , {EOF }]
}

-------------------
lalr_state [16]: {
  [return_spec ::= ID BOGUS (*) , {COMMA }]
}

-------------------
lalr_state [17]: {
  [name ::= (*) ID , {COMMA COLON }]
  [name_list ::= name COMMA (*) name_list , {COLON }]
  [name_list ::= (*) name COMMA name_list , {COLON }]
  [name_list ::= (*) name , {COLON }]
}
transition on name_list to state [19]
transition on name to state [3]
transition on ID to state [18]

-------------------
lalr_state [18]: {
  [name ::= ID (*) , {COMMA COLON }]
}

-------------------
lalr_state [19]: {
  [name_list ::= name COMMA name_list (*) , {COLON }]
}

-------------------
lalr_state [20]: {
  [type ::= (*) ID , {ID }]
  [param_spec ::= name_list COLON (*) type , {ID }]
}
transition on type to state [21]
transition on ID to state [13]

-------------------
lalr_state [21]: {
  [param_spec ::= name_list COLON type (*) , {ID }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 2:SHIFT(to state 1)]
From state #1
 [term 2:REDUCE(with prod 7)] [term 3:REDUCE(with prod 8)]
 [term 4:REDUCE(with prod 8)]
From state #2
 [term 4:SHIFT(to state 20)]
From state #3
 [term 3:SHIFT(to state 17)] [term 4:REDUCE(with prod 9)]
From state #4
 [term 2:REDUCE(with prod 2)]
From state #5
 [term 2:SHIFT(to state 8)]
From state #6
 [term 0:SHIFT(to state 7)]
From state #7
 [term 0:REDUCE(with prod 1)]
From state #8
 [term 3:REDUCE(with prod 7)] [term 4:REDUCE(with prod 8)]
 [term 5:SHIFT(to state 16)]
From state #9
 [term 3:SHIFT(to state 15)]
From state #10
 [term 4:SHIFT(to state 12)]
From state #11
 [term 3:REDUCE(with prod 4)]
From state #12
 [term 2:SHIFT(to state 13)]
From state #13
 [term 2:REDUCE(with prod 7)] [term 3:REDUCE(with prod 7)]
From state #14
 [term 3:REDUCE(with prod 5)]
From state #15
 [term 0:REDUCE(with prod 0)]
From state #16
 [term 3:REDUCE(with prod 6)]
From state #17
 [term 2:SHIFT(to state 18)]
From state #18
 [term 3:REDUCE(with prod 8)] [term 4:REDUCE(with prod 8)]
From state #19
 [term 4:REDUCE(with prod 10)]
From state #20
 [term 2:SHIFT(to state 13)]
From state #21
 [term 2:REDUCE(with prod 3)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 6] [non term 1->state 5] [non term 3->state 4]
 [non term 4->state 2] [non term 5->state 3]
From state #1
From state #2
From state #3
From state #4
From state #5
 [non term 2->state 9] [non term 3->state 11] [non term 5->state 10]
From state #6
From state #7
From state #8
From state #9
From state #10
From state #11
From state #12
 [non term 3->state 14]
From state #13
From state #14
From state #15
From state #16
From state #17
 [non term 4->state 19] [non term 5->state 3]
From state #18
From state #19
From state #20
 [non term 3->state 21]
From state #21
-----------------------------
------- CUP v0.11a beta 20060608 Parser Generation Summary -------
  0 errors and 0 warnings
  6 terminals, 6 non-terminals, and 11 productions declared, 
  producing 22 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (3 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (v0.11a beta 20060608)
