Opening files...
Parsing specification from standard input...
Checking specification...
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
  Checking for non-reduced productions...
Writing parser...
===== Terminals =====
[0]EOF [1]error [2]PLUS [3]MINUS [4]TIMES 
[5]DIVIDE [6]LPAREN [7]RPAREN [8]NUMBER [9]IDENTIFIER 


===== Non terminals =====
[0]$START [1]expr 

===== Productions =====
[0] expr ::= expr PLUS expr 
[1] $START ::= expr EOF 
[2] expr ::= expr MINUS expr 
[3] expr ::= expr TIMES expr 
[4] expr ::= expr DIVIDE expr 
[5] expr ::= NUMBER 
[6] expr ::= IDENTIFIER 
[7] expr ::= LPAREN expr RPAREN 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [expr ::= (*) NUMBER , {EOF PLUS MINUS TIMES DIVIDE }]
  [expr ::= (*) expr MINUS expr , {EOF PLUS MINUS TIMES DIVIDE }]
  [expr ::= (*) LPAREN expr RPAREN , {EOF PLUS MINUS TIMES DIVIDE }]
  [expr ::= (*) expr DIVIDE expr , {EOF PLUS MINUS TIMES DIVIDE }]
  [$START ::= (*) expr EOF , {EOF }]
  [expr ::= (*) IDENTIFIER , {EOF PLUS MINUS TIMES DIVIDE }]
  [expr ::= (*) expr TIMES expr , {EOF PLUS MINUS TIMES DIVIDE }]
  [expr ::= (*) expr PLUS expr , {EOF PLUS MINUS TIMES DIVIDE }]
}
transition on expr to state [4]
transition on LPAREN to state [3]
transition on IDENTIFIER to state [2]
transition on NUMBER to state [1]

-------------------
lalr_state [1]: {
  [expr ::= NUMBER (*) , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}

-------------------
lalr_state [2]: {
  [expr ::= IDENTIFIER (*) , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}

-------------------
lalr_state [3]: {
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= LPAREN (*) expr RPAREN , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr DIVIDE expr , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN }]
}
transition on expr to state [14]
transition on LPAREN to state [3]
transition on IDENTIFIER to state [2]
transition on NUMBER to state [1]

-------------------
lalr_state [4]: {
  [expr ::= expr (*) MINUS expr , {EOF PLUS MINUS TIMES DIVIDE }]
  [expr ::= expr (*) DIVIDE expr , {EOF PLUS MINUS TIMES DIVIDE }]
  [$START ::= expr (*) EOF , {EOF }]
  [expr ::= expr (*) TIMES expr , {EOF PLUS MINUS TIMES DIVIDE }]
  [expr ::= expr (*) PLUS expr , {EOF PLUS MINUS TIMES DIVIDE }]
}
transition on EOF to state [9]
transition on TIMES to state [8]
transition on DIVIDE to state [7]
transition on MINUS to state [6]
transition on PLUS to state [5]

-------------------
lalr_state [5]: {
  [expr ::= (*) NUMBER , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr MINUS expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) LPAREN expr RPAREN , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr DIVIDE expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) IDENTIFIER , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr PLUS (*) expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr TIMES expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr PLUS expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}
transition on expr to state [13]
transition on LPAREN to state [3]
transition on IDENTIFIER to state [2]
transition on NUMBER to state [1]

-------------------
lalr_state [6]: {
  [expr ::= expr MINUS (*) expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) NUMBER , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr MINUS expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) LPAREN expr RPAREN , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr DIVIDE expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) IDENTIFIER , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr TIMES expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr PLUS expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}
transition on expr to state [12]
transition on LPAREN to state [3]
transition on IDENTIFIER to state [2]
transition on NUMBER to state [1]

-------------------
lalr_state [7]: {
  [expr ::= (*) NUMBER , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr MINUS expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr DIVIDE (*) expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) LPAREN expr RPAREN , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr DIVIDE expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) IDENTIFIER , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr TIMES expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr PLUS expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}
transition on expr to state [11]
transition on LPAREN to state [3]
transition on IDENTIFIER to state [2]
transition on NUMBER to state [1]

-------------------
lalr_state [8]: {
  [expr ::= (*) NUMBER , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr MINUS expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) LPAREN expr RPAREN , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr DIVIDE expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr TIMES (*) expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) IDENTIFIER , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr TIMES expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= (*) expr PLUS expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}
transition on expr to state [10]
transition on LPAREN to state [3]
transition on IDENTIFIER to state [2]
transition on NUMBER to state [1]

-------------------
lalr_state [9]: {
  [$START ::= expr EOF (*) , {EOF }]
}

-------------------
lalr_state [10]: {
  [expr ::= expr (*) MINUS expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr (*) DIVIDE expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr TIMES expr (*) , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr (*) TIMES expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr (*) PLUS expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}
transition on TIMES to state [8]
transition on DIVIDE to state [7]
transition on MINUS to state [6]
transition on PLUS to state [5]

-------------------
lalr_state [11]: {
  [expr ::= expr (*) MINUS expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr DIVIDE expr (*) , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr (*) DIVIDE expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr (*) TIMES expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr (*) PLUS expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}
transition on TIMES to state [8]
transition on DIVIDE to state [7]
transition on MINUS to state [6]
transition on PLUS to state [5]

-------------------
lalr_state [12]: {
  [expr ::= expr (*) MINUS expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr (*) DIVIDE expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr (*) TIMES expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr (*) PLUS expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr MINUS expr (*) , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}
transition on TIMES to state [8]
transition on DIVIDE to state [7]
transition on MINUS to state [6]
transition on PLUS to state [5]

-------------------
lalr_state [13]: {
  [expr ::= expr (*) MINUS expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr (*) DIVIDE expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr PLUS expr (*) , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr (*) TIMES expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr (*) PLUS expr , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}
transition on TIMES to state [8]
transition on DIVIDE to state [7]
transition on MINUS to state [6]
transition on PLUS to state [5]

-------------------
lalr_state [14]: {
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= LPAREN expr (*) RPAREN , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr (*) DIVIDE expr , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES DIVIDE RPAREN }]
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES DIVIDE RPAREN }]
}
transition on TIMES to state [8]
transition on DIVIDE to state [7]
transition on MINUS to state [6]
transition on PLUS to state [5]
transition on RPAREN to state [15]

-------------------
lalr_state [15]: {
  [expr ::= LPAREN expr RPAREN (*) , {EOF PLUS MINUS TIMES DIVIDE RPAREN }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 6:SHIFT(to state 3)] [term 8:SHIFT(to state 1)]
 [term 9:SHIFT(to state 2)]
From state #1
 [term 0:REDUCE(with prod 5)] [term 2:REDUCE(with prod 5)]
 [term 3:REDUCE(with prod 5)] [term 4:REDUCE(with prod 5)]
 [term 5:REDUCE(with prod 5)] [term 7:REDUCE(with prod 5)]
From state #2
 [term 0:REDUCE(with prod 6)] [term 2:REDUCE(with prod 6)]
 [term 3:REDUCE(with prod 6)] [term 4:REDUCE(with prod 6)]
 [term 5:REDUCE(with prod 6)] [term 7:REDUCE(with prod 6)]
From state #3
 [term 6:SHIFT(to state 3)] [term 8:SHIFT(to state 1)]
 [term 9:SHIFT(to state 2)]
From state #4
 [term 0:SHIFT(to state 9)] [term 2:SHIFT(to state 5)]
 [term 3:SHIFT(to state 6)] [term 4:SHIFT(to state 8)]
 [term 5:SHIFT(to state 7)]
From state #5
 [term 6:SHIFT(to state 3)] [term 8:SHIFT(to state 1)]
 [term 9:SHIFT(to state 2)]
From state #6
 [term 6:SHIFT(to state 3)] [term 8:SHIFT(to state 1)]
 [term 9:SHIFT(to state 2)]
From state #7
 [term 6:SHIFT(to state 3)] [term 8:SHIFT(to state 1)]
 [term 9:SHIFT(to state 2)]
From state #8
 [term 6:SHIFT(to state 3)] [term 8:SHIFT(to state 1)]
 [term 9:SHIFT(to state 2)]
From state #9
 [term 0:REDUCE(with prod 1)]
From state #10
 [term 0:REDUCE(with prod 3)] [term 2:REDUCE(with prod 3)]
 [term 3:REDUCE(with prod 3)] [term 4:REDUCE(with prod 3)]
 [term 5:REDUCE(with prod 3)] [term 7:REDUCE(with prod 3)]
From state #11
 [term 0:REDUCE(with prod 4)] [term 2:REDUCE(with prod 4)]
 [term 3:REDUCE(with prod 4)] [term 4:REDUCE(with prod 4)]
 [term 5:REDUCE(with prod 4)] [term 7:REDUCE(with prod 4)]
From state #12
 [term 0:REDUCE(with prod 2)] [term 2:REDUCE(with prod 2)]
 [term 3:REDUCE(with prod 2)] [term 4:SHIFT(to state 8)]
 [term 5:SHIFT(to state 7)] [term 7:REDUCE(with prod 2)]
From state #13
 [term 0:REDUCE(with prod 0)] [term 2:REDUCE(with prod 0)]
 [term 3:REDUCE(with prod 0)] [term 4:SHIFT(to state 8)]
 [term 5:SHIFT(to state 7)] [term 7:REDUCE(with prod 0)]
From state #14
 [term 2:SHIFT(to state 5)] [term 3:SHIFT(to state 6)]
 [term 4:SHIFT(to state 8)] [term 5:SHIFT(to state 7)]
 [term 7:SHIFT(to state 15)]
From state #15
 [term 0:REDUCE(with prod 7)] [term 2:REDUCE(with prod 7)]
 [term 3:REDUCE(with prod 7)] [term 4:REDUCE(with prod 7)]
 [term 5:REDUCE(with prod 7)] [term 7:REDUCE(with prod 7)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 1->state 4]
From state #1
From state #2
From state #3
 [non term 1->state 14]
From state #4
From state #5
 [non term 1->state 13]
From state #6
 [non term 1->state 12]
From state #7
 [non term 1->state 11]
From state #8
 [non term 1->state 10]
From state #9
From state #10
From state #11
From state #12
From state #13
From state #14
From state #15
-----------------------------
Closing files...
------- CUP v0.10k Parser Generation Summary -------
  0 errors and 0 warnings
  10 terminals, 2 non-terminals, and 8 productions declared, 
  producing 16 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (v0.10k)
