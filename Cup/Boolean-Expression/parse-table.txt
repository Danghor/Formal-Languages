java java_cup.Main -dump calc.cup
Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Non terminal "run" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
  Checking for non-reduced productions...
Writing parser...
===== Terminals =====
[0]EOF [1]error [2]AND [3]OR [4]NOT 
[5]IDENTIFIER 

===== Non terminals =====
[0]$START [1]run [2]conjunction [3]disjunction [4]literal 


===== Productions =====
[0] conjunction ::= conjunction AND disjunction 
[1] $START ::= conjunction EOF 
[2] conjunction ::= disjunction 
[3] disjunction ::= disjunction OR literal 
[4] disjunction ::= literal 
[5] literal ::= NOT IDENTIFIER 
[6] literal ::= IDENTIFIER 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [literal ::= (*) NOT IDENTIFIER , {EOF AND OR }]
  [conjunction ::= (*) disjunction , {EOF AND }]
  [disjunction ::= (*) literal , {EOF AND OR }]
  [$START ::= (*) conjunction EOF , {EOF }]
  [literal ::= (*) IDENTIFIER , {EOF AND OR }]
  [disjunction ::= (*) disjunction OR literal , {EOF AND OR }]
  [conjunction ::= (*) conjunction AND disjunction , {EOF AND }]
}
transition on disjunction to state [5]
transition on IDENTIFIER to state [4]
transition on literal to state [3]
transition on NOT to state [2]
transition on conjunction to state [1]

-------------------
lalr_state [1]: {
  [$START ::= conjunction (*) EOF , {EOF }]
  [conjunction ::= conjunction (*) AND disjunction , {EOF AND }]
}
transition on EOF to state [10]
transition on AND to state [9]

-------------------
lalr_state [2]: {
  [literal ::= NOT (*) IDENTIFIER , {EOF AND OR }]
}
transition on IDENTIFIER to state [8]

-------------------
lalr_state [3]: {
  [disjunction ::= literal (*) , {EOF AND OR }]
}

-------------------
lalr_state [4]: {
  [literal ::= IDENTIFIER (*) , {EOF AND OR }]
}

-------------------
lalr_state [5]: {
  [conjunction ::= disjunction (*) , {EOF AND }]
  [disjunction ::= disjunction (*) OR literal , {EOF AND OR }]
}
transition on OR to state [6]

-------------------
lalr_state [6]: {
  [literal ::= (*) NOT IDENTIFIER , {EOF AND OR }]
  [disjunction ::= disjunction OR (*) literal , {EOF AND OR }]
  [literal ::= (*) IDENTIFIER , {EOF AND OR }]
}
transition on IDENTIFIER to state [4]
transition on literal to state [7]
transition on NOT to state [2]

-------------------
lalr_state [7]: {
  [disjunction ::= disjunction OR literal (*) , {EOF AND OR }]
}

-------------------
lalr_state [8]: {
  [literal ::= NOT IDENTIFIER (*) , {EOF AND OR }]
}

-------------------
lalr_state [9]: {
  [literal ::= (*) NOT IDENTIFIER , {EOF AND OR }]
  [disjunction ::= (*) literal , {EOF AND OR }]
  [literal ::= (*) IDENTIFIER , {EOF AND OR }]
  [conjunction ::= conjunction AND (*) disjunction , {EOF AND }]
  [disjunction ::= (*) disjunction OR literal , {EOF AND OR }]
}
transition on disjunction to state [11]
transition on IDENTIFIER to state [4]
transition on literal to state [3]
transition on NOT to state [2]

-------------------
lalr_state [10]: {
  [$START ::= conjunction EOF (*) , {EOF }]
}

-------------------
lalr_state [11]: {
  [conjunction ::= conjunction AND disjunction (*) , {EOF AND }]
  [disjunction ::= disjunction (*) OR literal , {EOF AND OR }]
}
transition on OR to state [6]

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 4:SHIFT(to state 2)] [term 5:SHIFT(to state 4)]
From state #1
 [term 0:SHIFT(to state 10)] [term 2:SHIFT(to state 9)]
From state #2
 [term 5:SHIFT(to state 8)]
From state #3
 [term 0:REDUCE(with prod 4)] [term 2:REDUCE(with prod 4)]
 [term 3:REDUCE(with prod 4)]
From state #4
 [term 0:REDUCE(with prod 6)] [term 2:REDUCE(with prod 6)]
 [term 3:REDUCE(with prod 6)]
From state #5
 [term 0:REDUCE(with prod 2)] [term 2:REDUCE(with prod 2)]
 [term 3:SHIFT(to state 6)]
From state #6
 [term 4:SHIFT(to state 2)] [term 5:SHIFT(to state 4)]
From state #7
 [term 0:REDUCE(with prod 3)] [term 2:REDUCE(with prod 3)]
 [term 3:REDUCE(with prod 3)]
From state #8
 [term 0:REDUCE(with prod 5)] [term 2:REDUCE(with prod 5)]
 [term 3:REDUCE(with prod 5)]
From state #9
 [term 4:SHIFT(to state 2)] [term 5:SHIFT(to state 4)]
From state #10
 [term 0:REDUCE(with prod 1)]
From state #11
 [term 0:REDUCE(with prod 0)] [term 2:REDUCE(with prod 0)]
 [term 3:SHIFT(to state 6)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 2->state 1] [non term 3->state 5] [non term 4->state 3]
From state #1
From state #2
From state #3
From state #4
From state #5
From state #6
 [non term 4->state 7]
From state #7
From state #8
From state #9
 [non term 3->state 11] [non term 4->state 3]
From state #10
From state #11
-----------------------------
Closing files...
------- CUP v0.10k Parser Generation Summary -------
  0 errors and 1 warning
  6 terminals, 5 non-terminals, and 7 productions declared, 
  producing 12 unique parse states.
  1 terminal declared but not used.
  0 non-terminal declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (v0.10k)

