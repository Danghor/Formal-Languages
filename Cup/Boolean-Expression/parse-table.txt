===== Terminals =====
[0]EOF [1]error [2]AND [3]OR [4]NOT 
[5]IDENTIFIER 

===== Non terminals =====
[0]bool_expr [1]conjunction [2]disjunction [3]literal 

===== Productions =====
[0] bool_expr ::= disjunction 
[1] $START ::= bool_expr EOF 
[2] disjunction ::= disjunction OR conjunction 
[3] disjunction ::= conjunction 
[4] conjunction ::= conjunction AND literal 
[5] conjunction ::= literal 
[6] literal ::= NOT IDENTIFIER 
[7] literal ::= IDENTIFIER 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [conjunction ::= (*) literal , {EOF AND OR }]
  [disjunction ::= (*) disjunction OR conjunction , {EOF OR }]
  [literal ::= (*) IDENTIFIER , {EOF AND OR }]
  [conjunction ::= (*) conjunction AND literal , {EOF AND OR }]
  [$START ::= (*) bool_expr EOF , {EOF }]
  [literal ::= (*) NOT IDENTIFIER , {EOF AND OR }]
  [disjunction ::= (*) conjunction , {EOF OR }]
  [bool_expr ::= (*) disjunction , {EOF }]
}
transition on disjunction to state [6]
transition on IDENTIFIER to state [5]
transition on literal to state [4]
transition on bool_expr to state [3]
transition on conjunction to state [2]
transition on NOT to state [1]

-------------------
lalr_state [1]: {
  [literal ::= NOT (*) IDENTIFIER , {EOF AND OR }]
}
transition on IDENTIFIER to state [12]

-------------------
lalr_state [2]: {
  [conjunction ::= conjunction (*) AND literal , {EOF AND OR }]
  [disjunction ::= conjunction (*) , {EOF OR }]
}
transition on AND to state [9]

-------------------
lalr_state [3]: {
  [$START ::= bool_expr (*) EOF , {EOF }]
}
transition on EOF to state [11]

-------------------
lalr_state [4]: {
  [conjunction ::= literal (*) , {EOF AND OR }]
}

-------------------
lalr_state [5]: {
  [literal ::= IDENTIFIER (*) , {EOF AND OR }]
}

-------------------
lalr_state [6]: {
  [disjunction ::= disjunction (*) OR conjunction , {EOF OR }]
  [bool_expr ::= disjunction (*) , {EOF }]
}
transition on OR to state [7]

-------------------
lalr_state [7]: {
  [disjunction ::= disjunction OR (*) conjunction , {EOF OR }]
  [conjunction ::= (*) literal , {EOF AND OR }]
  [literal ::= (*) IDENTIFIER , {EOF AND OR }]
  [conjunction ::= (*) conjunction AND literal , {EOF AND OR }]
  [literal ::= (*) NOT IDENTIFIER , {EOF AND OR }]
}
transition on IDENTIFIER to state [5]
transition on literal to state [4]
transition on conjunction to state [8]
transition on NOT to state [1]

-------------------
lalr_state [8]: {
  [conjunction ::= conjunction (*) AND literal , {EOF AND OR }]
  [disjunction ::= disjunction OR conjunction (*) , {EOF OR }]
}
transition on AND to state [9]

-------------------
lalr_state [9]: {
  [conjunction ::= conjunction AND (*) literal , {EOF AND OR }]
  [literal ::= (*) IDENTIFIER , {EOF AND OR }]
  [literal ::= (*) NOT IDENTIFIER , {EOF AND OR }]
}
transition on IDENTIFIER to state [5]
transition on literal to state [10]
transition on NOT to state [1]

-------------------
lalr_state [10]: {
  [conjunction ::= conjunction AND literal (*) , {EOF AND OR }]
}

-------------------
lalr_state [11]: {
  [$START ::= bool_expr EOF (*) , {EOF }]
}

-------------------
lalr_state [12]: {
  [literal ::= NOT IDENTIFIER (*) , {EOF AND OR }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 4:SHIFT(to state 1)] [term 5:SHIFT(to state 5)]
From state #1
 [term 5:SHIFT(to state 12)]
From state #2
 [term 0:REDUCE(with prod 3)] [term 2:SHIFT(to state 9)]
 [term 3:REDUCE(with prod 3)]
From state #3
 [term 0:SHIFT(to state 11)]
From state #4
 [term 0:REDUCE(with prod 5)] [term 2:REDUCE(with prod 5)]
 [term 3:REDUCE(with prod 5)]
From state #5
 [term 0:REDUCE(with prod 7)] [term 2:REDUCE(with prod 7)]
 [term 3:REDUCE(with prod 7)]
From state #6
 [term 0:REDUCE(with prod 0)] [term 3:SHIFT(to state 7)]
From state #7
 [term 4:SHIFT(to state 1)] [term 5:SHIFT(to state 5)]
From state #8
 [term 0:REDUCE(with prod 2)] [term 2:SHIFT(to state 9)]
 [term 3:REDUCE(with prod 2)]
From state #9
 [term 4:SHIFT(to state 1)] [term 5:SHIFT(to state 5)]
From state #10
 [term 0:REDUCE(with prod 4)] [term 2:REDUCE(with prod 4)]
 [term 3:REDUCE(with prod 4)]
From state #11
 [term 0:REDUCE(with prod 1)]
From state #12
 [term 0:REDUCE(with prod 6)] [term 2:REDUCE(with prod 6)]
 [term 3:REDUCE(with prod 6)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 3] [non term 1->state 2] [non term 2->state 6]
 [non term 3->state 4]
From state #1
From state #2
From state #3
From state #4
From state #5
From state #6
From state #7
 [non term 1->state 8] [non term 3->state 4]
From state #8
From state #9
 [non term 3->state 10]
From state #10
From state #11
From state #12
-----------------------------
------- CUP v0.11b 20140808 (SVN rev 54) Parser Generation Summary -------
  0 errors and 0 warnings
  6 terminals, 4 non-terminals, and 8 productions declared, 
  producing 13 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (CUP v0.11b 20140808 (SVN rev 54))
