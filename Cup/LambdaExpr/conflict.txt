Warning : *** Reduce/Reduce conflict found in state #6
  between expr ::= IDENTIFIER (*) 
  and     identifierList ::= IDENTIFIER (*) 
  under symbols: {RBRACKET}
  Resolved in favor of the first production.

Warning : *** Shift/Reduce conflict found in state #6
  between expr ::= IDENTIFIER (*) 
  under symbol RBRACKET
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #6
  between expr ::= IDENTIFIER (*) 
  and     identifierList ::= IDENTIFIER (*) COMMA identifierList 
  under symbol COMMA
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #6
  between identifierList ::= IDENTIFIER (*) 
  under symbol RBRACKET
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #6
  between identifierList ::= IDENTIFIER (*) 
  and     identifierList ::= IDENTIFIER (*) COMMA identifierList 
  under symbol COMMA
  Resolved in favor of shifting.

===== Terminals =====
[0]EOF [1]error [2]MAPSTO [3]LBRACKET [4]RBRACKET 
[5]COMMA [6]IDENTIFIER 

===== Non terminals =====
[0]expr [1]exprList [2]lambdaDefinition [3]identifierList 

===== Productions =====
[0] expr ::= lambdaDefinition 
[1] $START ::= expr EOF 
[2] expr ::= IDENTIFIER 
[3] expr ::= LBRACKET exprList RBRACKET 
[4] lambdaDefinition ::= LBRACKET identifierList RBRACKET MAPSTO expr 
[5] identifierList ::= IDENTIFIER COMMA identifierList 
[6] identifierList ::= IDENTIFIER 
[7] exprList ::= expr COMMA exprList 
[8] exprList ::= expr 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [$START ::= (*) expr EOF , {EOF }]
  [expr ::= (*) lambdaDefinition , {EOF }]
  [expr ::= (*) LBRACKET exprList RBRACKET , {EOF }]
  [expr ::= (*) IDENTIFIER , {EOF }]
  [lambdaDefinition ::= (*) LBRACKET identifierList RBRACKET MAPSTO expr , {EOF }]
}
transition on LBRACKET to state [4]

-------------------
lalr_state [4]: {
  [lambdaDefinition ::= LBRACKET (*) identifierList RBRACKET MAPSTO expr , {EOF RBRACKET COMMA }]
  [expr ::= LBRACKET (*) exprList RBRACKET , {EOF RBRACKET COMMA }]
  [exprList ::= (*) expr , {RBRACKET }]
  [exprList ::= (*) expr COMMA exprList , {RBRACKET }]
  [lambdaDefinition ::= (*) LBRACKET identifierList RBRACKET MAPSTO expr , {RBRACKET COMMA }]
  [identifierList ::= (*) IDENTIFIER , {RBRACKET }]
  [identifierList ::= (*) IDENTIFIER COMMA identifierList , {RBRACKET }]
  [expr ::= (*) IDENTIFIER , {RBRACKET COMMA }]
  [expr ::= (*) LBRACKET exprList RBRACKET , {RBRACKET COMMA }]
  [expr ::= (*) lambdaDefinition , {RBRACKET COMMA }]
}
transition on IDENTIFIER to state [6]

-------------------
lalr_state [6]: {
  [expr ::= IDENTIFIER (*) , {RBRACKET COMMA }]
  [identifierList ::= IDENTIFIER (*) COMMA identifierList , {RBRACKET }]
  [identifierList ::= IDENTIFIER (*) , {RBRACKET }]
}
transition on COMMA to state [14]

-------------------
lalr_state [1]: {
  [expr ::= IDENTIFIER (*) , {EOF RBRACKET COMMA }]
}

-------------------
lalr_state [2]: {
  [$START ::= expr (*) EOF , {EOF }]
}
transition on EOF to state [18]

-------------------
lalr_state [3]: {
  [expr ::= lambdaDefinition (*) , {EOF RBRACKET COMMA }]
}

-------------------
lalr_state [5]: {
  [expr ::= LBRACKET exprList (*) RBRACKET , {EOF RBRACKET COMMA }]
}
transition on RBRACKET to state [17]

-------------------
lalr_state [7]: {
  [exprList ::= expr (*) COMMA exprList , {RBRACKET }]
  [exprList ::= expr (*) , {RBRACKET }]
}
transition on COMMA to state [12]

-------------------
lalr_state [8]: {
  [lambdaDefinition ::= LBRACKET identifierList (*) RBRACKET MAPSTO expr , {EOF RBRACKET COMMA }]
}
transition on RBRACKET to state [9]

-------------------
lalr_state [9]: {
  [lambdaDefinition ::= LBRACKET identifierList RBRACKET (*) MAPSTO expr , {EOF RBRACKET COMMA }]
}
transition on MAPSTO to state [10]

-------------------
lalr_state [10]: {
  [lambdaDefinition ::= LBRACKET identifierList RBRACKET MAPSTO (*) expr , {EOF RBRACKET COMMA }]
  [expr ::= (*) IDENTIFIER , {EOF RBRACKET COMMA }]
  [lambdaDefinition ::= (*) LBRACKET identifierList RBRACKET MAPSTO expr , {EOF RBRACKET COMMA }]
  [expr ::= (*) LBRACKET exprList RBRACKET , {EOF RBRACKET COMMA }]
  [expr ::= (*) lambdaDefinition , {EOF RBRACKET COMMA }]
}
transition on LBRACKET to state [4]
transition on lambdaDefinition to state [3]
transition on expr to state [11]
transition on IDENTIFIER to state [1]

-------------------
lalr_state [11]: {
  [lambdaDefinition ::= LBRACKET identifierList RBRACKET MAPSTO expr (*) , {EOF RBRACKET COMMA }]
}

-------------------
lalr_state [12]: {
  [exprList ::= (*) expr , {RBRACKET }]
  [expr ::= (*) IDENTIFIER , {RBRACKET COMMA }]
  [exprList ::= expr COMMA (*) exprList , {RBRACKET }]
  [exprList ::= (*) expr COMMA exprList , {RBRACKET }]
  [lambdaDefinition ::= (*) LBRACKET identifierList RBRACKET MAPSTO expr , {RBRACKET COMMA }]
  [expr ::= (*) LBRACKET exprList RBRACKET , {RBRACKET COMMA }]
  [expr ::= (*) lambdaDefinition , {RBRACKET COMMA }]
}
transition on LBRACKET to state [4]
transition on lambdaDefinition to state [3]
transition on expr to state [7]
transition on IDENTIFIER to state [1]
transition on exprList to state [13]

-------------------
lalr_state [13]: {
  [exprList ::= expr COMMA exprList (*) , {RBRACKET }]
}

-------------------
lalr_state [14]: {
  [identifierList ::= (*) IDENTIFIER COMMA identifierList , {RBRACKET }]
  [identifierList ::= (*) IDENTIFIER , {RBRACKET }]
  [identifierList ::= IDENTIFIER COMMA (*) identifierList , {RBRACKET }]
}
transition on identifierList to state [16]
transition on IDENTIFIER to state [15]

-------------------
lalr_state [15]: {
  [identifierList ::= IDENTIFIER (*) COMMA identifierList , {RBRACKET }]
  [identifierList ::= IDENTIFIER (*) , {RBRACKET }]
}
transition on COMMA to state [14]

-------------------
lalr_state [16]: {
  [identifierList ::= IDENTIFIER COMMA identifierList (*) , {RBRACKET }]
}

-------------------
lalr_state [17]: {
  [expr ::= LBRACKET exprList RBRACKET (*) , {EOF RBRACKET COMMA }]
}

-------------------
lalr_state [18]: {
  [$START ::= expr EOF (*) , {EOF }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 3:SHIFT(to state 4)] [term 6:SHIFT(to state 1)]
From state #1
 [term 0:REDUCE(with prod 2)] [term 4:REDUCE(with prod 2)]
 [term 5:REDUCE(with prod 2)]
From state #2
 [term 0:SHIFT(to state 18)]
From state #3
 [term 0:REDUCE(with prod 0)] [term 4:REDUCE(with prod 0)]
 [term 5:REDUCE(with prod 0)]
From state #4
 [term 3:SHIFT(to state 4)] [term 6:SHIFT(to state 6)]
From state #5
 [term 4:SHIFT(to state 17)]
From state #6
 [term 4:REDUCE(with prod 2)] [term 5:SHIFT(to state 14)]
From state #7
 [term 4:REDUCE(with prod 8)] [term 5:SHIFT(to state 12)]
From state #8
 [term 4:SHIFT(to state 9)]
From state #9
 [term 2:SHIFT(to state 10)]
From state #10
 [term 3:SHIFT(to state 4)] [term 6:SHIFT(to state 1)]
From state #11
 [term 0:REDUCE(with prod 4)] [term 4:REDUCE(with prod 4)]
 [term 5:REDUCE(with prod 4)]
From state #12
 [term 3:SHIFT(to state 4)] [term 6:SHIFT(to state 1)]
From state #13
 [term 4:REDUCE(with prod 7)]
From state #14
 [term 6:SHIFT(to state 15)]
From state #15
 [term 4:REDUCE(with prod 6)] [term 5:SHIFT(to state 14)]
From state #16
 [term 4:REDUCE(with prod 5)]
From state #17
 [term 0:REDUCE(with prod 3)] [term 4:REDUCE(with prod 3)]
 [term 5:REDUCE(with prod 3)]
From state #18
 [term 0:REDUCE(with prod 1)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 2] [non term 2->state 3]
From state #1
From state #2
From state #3
From state #4
 [non term 0->state 7] [non term 1->state 5] [non term 2->state 3]
 [non term 3->state 8]
From state #5
From state #6
From state #7
From state #8
From state #9
From state #10
 [non term 0->state 11] [non term 2->state 3]
From state #11
From state #12
 [non term 0->state 7] [non term 1->state 13] [non term 2->state 3]
From state #13
From state #14
 [non term 3->state 16]
From state #15
From state #16
From state #17
From state #18
-----------------------------
------- CUP v0.11a beta 20060608 Parser Generation Summary -------
  0 errors and 5 warnings
  7 terminals, 4 non-terminals, and 9 productions declared, 
  producing 19 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  5 conflicts detected (5 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (v0.11a beta 20060608)
