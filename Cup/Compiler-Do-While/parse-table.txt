Warning : *** Shift/Reduce conflict found in state #81
  between statement ::= IF LPAREN boolExpr RPAREN statement (*) 
  and     statement ::= IF LPAREN boolExpr RPAREN statement (*) ELSE statement 
  under symbol ELSE
  Resolved in favor of shifting.

===== Terminals =====
[0]EOF [1]error [2]COMMA [3]PLUS [4]MINUS 
[5]TIMES [6]SLASH [7]LPAREN [8]RPAREN [9]LBRACE 
[10]RBRACE [11]ASSIGN [12]EQUALS [13]LT [14]GT 
[15]LE [16]GE [17]NEQUALS [18]AND [19]OR 
[20]NOT [21]IF [22]ELSE [23]WHILE [24]DO 
[25]RETURN [26]SEMICOLON [27]INT [28]IDENTIFIER [29]NUMBER 


===== Non terminals =====
[0]program [1]functionList [2]function [3]paramList [4]neParamList 
[5]declaration [6]declarations [7]statement [8]statementList [9]expr 
[10]exprList [11]neExprList [12]boolExpr 

===== Productions =====
[0] program ::= functionList 
[1] $START ::= program EOF 
[2] functionList ::= 
[3] functionList ::= functionList function 
[4] function ::= INT IDENTIFIER LPAREN paramList RPAREN LBRACE declarations statementList RBRACE 
[5] paramList ::= 
[6] paramList ::= neParamList 
[7] neParamList ::= INT IDENTIFIER 
[8] neParamList ::= neParamList COMMA INT IDENTIFIER 
[9] declaration ::= INT IDENTIFIER SEMICOLON 
[10] declarations ::= 
[11] declarations ::= declarations declaration 
[12] statement ::= LBRACE statementList RBRACE 
[13] statement ::= IDENTIFIER ASSIGN expr 
[14] statement ::= IF LPAREN boolExpr RPAREN statement 
[15] statement ::= IF LPAREN boolExpr RPAREN statement ELSE statement 
[16] statement ::= WHILE LPAREN boolExpr RPAREN statement 
[17] statement ::= DO statement WHILE LPAREN boolExpr RPAREN 
[18] statement ::= RETURN expr 
[19] statement ::= expr 
[20] statementList ::= 
[21] statementList ::= statement SEMICOLON statementList 
[22] expr ::= expr PLUS expr 
[23] expr ::= expr MINUS expr 
[24] expr ::= expr TIMES expr 
[25] expr ::= expr SLASH expr 
[26] expr ::= LPAREN expr RPAREN 
[27] expr ::= NUMBER 
[28] expr ::= IDENTIFIER 
[29] expr ::= IDENTIFIER LPAREN exprList RPAREN 
[30] exprList ::= 
[31] exprList ::= neExprList 
[32] neExprList ::= expr 
[33] neExprList ::= neExprList COMMA expr 
[34] boolExpr ::= expr EQUALS expr 
[35] boolExpr ::= expr NEQUALS expr 
[36] boolExpr ::= expr LE expr 
[37] boolExpr ::= expr GE expr 
[38] boolExpr ::= expr LT expr 
[39] boolExpr ::= expr GT expr 
[40] boolExpr ::= NOT boolExpr 
[41] boolExpr ::= boolExpr AND boolExpr 
[42] boolExpr ::= boolExpr OR boolExpr 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [functionList ::= (*) , {EOF INT }]
  [$START ::= (*) program EOF , {EOF }]
  [functionList ::= (*) functionList function , {EOF INT }]
  [program ::= (*) functionList , {EOF }]
}
transition on program to state [2]
transition on functionList to state [1]

-------------------
lalr_state [1]: {
  [function ::= (*) INT IDENTIFIER LPAREN paramList RPAREN LBRACE declarations statementList RBRACE , {EOF INT }]
  [functionList ::= functionList (*) function , {EOF INT }]
  [program ::= functionList (*) , {EOF }]
}
transition on INT to state [5]
transition on function to state [4]

-------------------
lalr_state [2]: {
  [$START ::= program (*) EOF , {EOF }]
}
transition on EOF to state [3]

-------------------
lalr_state [3]: {
  [$START ::= program EOF (*) , {EOF }]
}

-------------------
lalr_state [4]: {
  [functionList ::= functionList function (*) , {EOF INT }]
}

-------------------
lalr_state [5]: {
  [function ::= INT (*) IDENTIFIER LPAREN paramList RPAREN LBRACE declarations statementList RBRACE , {EOF INT }]
}
transition on IDENTIFIER to state [6]

-------------------
lalr_state [6]: {
  [function ::= INT IDENTIFIER (*) LPAREN paramList RPAREN LBRACE declarations statementList RBRACE , {EOF INT }]
}
transition on LPAREN to state [7]

-------------------
lalr_state [7]: {
  [neParamList ::= (*) neParamList COMMA INT IDENTIFIER , {COMMA RPAREN }]
  [paramList ::= (*) , {RPAREN }]
  [function ::= INT IDENTIFIER LPAREN (*) paramList RPAREN LBRACE declarations statementList RBRACE , {EOF INT }]
  [neParamList ::= (*) INT IDENTIFIER , {COMMA RPAREN }]
  [paramList ::= (*) neParamList , {RPAREN }]
}
transition on neParamList to state [10]
transition on INT to state [9]
transition on paramList to state [8]

-------------------
lalr_state [8]: {
  [function ::= INT IDENTIFIER LPAREN paramList (*) RPAREN LBRACE declarations statementList RBRACE , {EOF INT }]
}
transition on RPAREN to state [15]

-------------------
lalr_state [9]: {
  [neParamList ::= INT (*) IDENTIFIER , {COMMA RPAREN }]
}
transition on IDENTIFIER to state [14]

-------------------
lalr_state [10]: {
  [paramList ::= neParamList (*) , {RPAREN }]
  [neParamList ::= neParamList (*) COMMA INT IDENTIFIER , {COMMA RPAREN }]
}
transition on COMMA to state [11]

-------------------
lalr_state [11]: {
  [neParamList ::= neParamList COMMA (*) INT IDENTIFIER , {COMMA RPAREN }]
}
transition on INT to state [12]

-------------------
lalr_state [12]: {
  [neParamList ::= neParamList COMMA INT (*) IDENTIFIER , {COMMA RPAREN }]
}
transition on IDENTIFIER to state [13]

-------------------
lalr_state [13]: {
  [neParamList ::= neParamList COMMA INT IDENTIFIER (*) , {COMMA RPAREN }]
}

-------------------
lalr_state [14]: {
  [neParamList ::= INT IDENTIFIER (*) , {COMMA RPAREN }]
}

-------------------
lalr_state [15]: {
  [function ::= INT IDENTIFIER LPAREN paramList RPAREN (*) LBRACE declarations statementList RBRACE , {EOF INT }]
}
transition on LBRACE to state [16]

-------------------
lalr_state [16]: {
  [declarations ::= (*) , {LPAREN LBRACE RBRACE IF WHILE DO RETURN INT IDENTIFIER NUMBER }]
  [declarations ::= (*) declarations declaration , {LPAREN LBRACE RBRACE IF WHILE DO RETURN INT IDENTIFIER NUMBER }]
  [function ::= INT IDENTIFIER LPAREN paramList RPAREN LBRACE (*) declarations statementList RBRACE , {EOF INT }]
}
transition on declarations to state [17]

-------------------
lalr_state [17]: {
  [statement ::= (*) IF LPAREN boolExpr RPAREN statement ELSE statement , {SEMICOLON }]
  [statementList ::= (*) , {RBRACE }]
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [statement ::= (*) IDENTIFIER ASSIGN expr , {SEMICOLON }]
  [statement ::= (*) RETURN expr , {SEMICOLON }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [declarations ::= declarations (*) declaration , {LPAREN LBRACE RBRACE IF WHILE DO RETURN INT IDENTIFIER NUMBER }]
  [statement ::= (*) WHILE LPAREN boolExpr RPAREN statement , {SEMICOLON }]
  [function ::= INT IDENTIFIER LPAREN paramList RPAREN LBRACE declarations (*) statementList RBRACE , {EOF INT }]
  [statementList ::= (*) statement SEMICOLON statementList , {RBRACE }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [declaration ::= (*) INT IDENTIFIER SEMICOLON , {LPAREN LBRACE RBRACE IF WHILE DO RETURN INT IDENTIFIER NUMBER }]
  [statement ::= (*) IF LPAREN boolExpr RPAREN statement , {SEMICOLON }]
  [statement ::= (*) expr , {SEMICOLON }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [statement ::= (*) LBRACE statementList RBRACE , {SEMICOLON }]
  [statement ::= (*) DO statement WHILE LPAREN boolExpr RPAREN , {SEMICOLON }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH SEMICOLON }]
}
transition on LPAREN to state [30]
transition on DO to state [29]
transition on RETURN to state [28]
transition on expr to state [27]
transition on IDENTIFIER to state [26]
transition on statement to state [25]
transition on IF to state [24]
transition on statementList to state [23]
transition on NUMBER to state [22]
transition on declaration to state [21]
transition on WHILE to state [20]
transition on INT to state [19]
transition on LBRACE to state [18]

-------------------
lalr_state [18]: {
  [statement ::= (*) IF LPAREN boolExpr RPAREN statement ELSE statement , {SEMICOLON }]
  [statementList ::= (*) , {RBRACE }]
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [statement ::= (*) IDENTIFIER ASSIGN expr , {SEMICOLON }]
  [statement ::= (*) RETURN expr , {SEMICOLON }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [statement ::= (*) WHILE LPAREN boolExpr RPAREN statement , {SEMICOLON }]
  [statementList ::= (*) statement SEMICOLON statementList , {RBRACE }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [statement ::= (*) IF LPAREN boolExpr RPAREN statement , {SEMICOLON }]
  [statement ::= (*) expr , {SEMICOLON }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [statement ::= LBRACE (*) statementList RBRACE , {ELSE WHILE SEMICOLON }]
  [statement ::= (*) LBRACE statementList RBRACE , {SEMICOLON }]
  [statement ::= (*) DO statement WHILE LPAREN boolExpr RPAREN , {SEMICOLON }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH SEMICOLON }]
}
transition on LPAREN to state [30]
transition on DO to state [29]
transition on RETURN to state [28]
transition on expr to state [27]
transition on IDENTIFIER to state [26]
transition on statement to state [25]
transition on IF to state [24]
transition on statementList to state [91]
transition on NUMBER to state [22]
transition on WHILE to state [20]
transition on LBRACE to state [18]

-------------------
lalr_state [19]: {
  [declaration ::= INT (*) IDENTIFIER SEMICOLON , {LPAREN LBRACE RBRACE IF WHILE DO RETURN INT IDENTIFIER NUMBER }]
}
transition on IDENTIFIER to state [89]

-------------------
lalr_state [20]: {
  [statement ::= WHILE (*) LPAREN boolExpr RPAREN statement , {ELSE WHILE SEMICOLON }]
}
transition on LPAREN to state [85]

-------------------
lalr_state [21]: {
  [declarations ::= declarations declaration (*) , {LPAREN LBRACE RBRACE IF WHILE DO RETURN INT IDENTIFIER NUMBER }]
}

-------------------
lalr_state [22]: {
  [expr ::= NUMBER (*) , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
}

-------------------
lalr_state [23]: {
  [function ::= INT IDENTIFIER LPAREN paramList RPAREN LBRACE declarations statementList (*) RBRACE , {EOF INT }]
}
transition on RBRACE to state [84]

-------------------
lalr_state [24]: {
  [statement ::= IF (*) LPAREN boolExpr RPAREN statement ELSE statement , {ELSE WHILE SEMICOLON }]
  [statement ::= IF (*) LPAREN boolExpr RPAREN statement , {ELSE WHILE SEMICOLON }]
}
transition on LPAREN to state [78]

-------------------
lalr_state [25]: {
  [statementList ::= statement (*) SEMICOLON statementList , {RBRACE }]
}
transition on SEMICOLON to state [76]

-------------------
lalr_state [26]: {
  [statement ::= IDENTIFIER (*) ASSIGN expr , {ELSE WHILE SEMICOLON }]
  [expr ::= IDENTIFIER (*) LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= IDENTIFIER (*) , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
}
transition on ASSIGN to state [74]
transition on LPAREN to state [42]

-------------------
lalr_state [27]: {
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) SLASH expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [statement ::= expr (*) , {ELSE WHILE SEMICOLON }]
}
transition on TIMES to state [37]
transition on MINUS to state [36]
transition on SLASH to state [35]
transition on PLUS to state [34]

-------------------
lalr_state [28]: {
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [statement ::= RETURN (*) expr , {ELSE WHILE SEMICOLON }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
}
transition on expr to state [73]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on NUMBER to state [22]

-------------------
lalr_state [29]: {
  [statement ::= DO (*) statement WHILE LPAREN boolExpr RPAREN , {ELSE WHILE SEMICOLON }]
  [statement ::= (*) DO statement WHILE LPAREN boolExpr RPAREN , {WHILE }]
  [statement ::= (*) IF LPAREN boolExpr RPAREN statement , {WHILE }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH WHILE }]
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH WHILE }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH WHILE }]
  [statement ::= (*) expr , {WHILE }]
  [statement ::= (*) WHILE LPAREN boolExpr RPAREN statement , {WHILE }]
  [statement ::= (*) IDENTIFIER ASSIGN expr , {WHILE }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH WHILE }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH WHILE }]
  [statement ::= (*) RETURN expr , {WHILE }]
  [statement ::= (*) IF LPAREN boolExpr RPAREN statement ELSE statement , {WHILE }]
  [statement ::= (*) LBRACE statementList RBRACE , {WHILE }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH WHILE }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH WHILE }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH WHILE }]
}
transition on DO to state [29]
transition on LPAREN to state [30]
transition on RETURN to state [28]
transition on expr to state [27]
transition on IDENTIFIER to state [26]
transition on statement to state [49]
transition on IF to state [24]
transition on NUMBER to state [22]
transition on WHILE to state [20]
transition on LBRACE to state [18]

-------------------
lalr_state [30]: {
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= LPAREN (*) expr RPAREN , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH RPAREN }]
}
transition on expr to state [32]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on NUMBER to state [22]

-------------------
lalr_state [31]: {
  [expr ::= IDENTIFIER (*) LPAREN exprList RPAREN , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= IDENTIFIER (*) , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
}
transition on LPAREN to state [42]

-------------------
lalr_state [32]: {
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= LPAREN expr (*) RPAREN , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= expr (*) SLASH expr , {PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES SLASH RPAREN }]
}
transition on TIMES to state [37]
transition on MINUS to state [36]
transition on SLASH to state [35]
transition on PLUS to state [34]
transition on RPAREN to state [33]

-------------------
lalr_state [33]: {
  [expr ::= LPAREN expr RPAREN (*) , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
}

-------------------
lalr_state [34]: {
  [expr ::= expr PLUS (*) expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) IDENTIFIER , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr SLASH expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr PLUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) NUMBER , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr TIMES expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) LPAREN expr RPAREN , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr MINUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
}
transition on expr to state [41]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on NUMBER to state [22]

-------------------
lalr_state [35]: {
  [expr ::= expr SLASH (*) expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) IDENTIFIER , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr SLASH expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr PLUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) NUMBER , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr TIMES expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) LPAREN expr RPAREN , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr MINUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
}
transition on expr to state [40]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on NUMBER to state [22]

-------------------
lalr_state [36]: {
  [expr ::= (*) IDENTIFIER , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr SLASH expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr PLUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) NUMBER , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr TIMES expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr MINUS (*) expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) LPAREN expr RPAREN , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr MINUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
}
transition on expr to state [39]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on NUMBER to state [22]

-------------------
lalr_state [37]: {
  [expr ::= (*) IDENTIFIER , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr SLASH expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr PLUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr TIMES (*) expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) NUMBER , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr TIMES expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) LPAREN expr RPAREN , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr MINUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
}
transition on expr to state [38]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on NUMBER to state [22]

-------------------
lalr_state [38]: {
  [expr ::= expr (*) TIMES expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) MINUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) SLASH expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) PLUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr TIMES expr (*) , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
}
transition on TIMES to state [37]
transition on MINUS to state [36]
transition on SLASH to state [35]
transition on PLUS to state [34]

-------------------
lalr_state [39]: {
  [expr ::= expr (*) TIMES expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr MINUS expr (*) , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) MINUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) SLASH expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) PLUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
}
transition on TIMES to state [37]
transition on MINUS to state [36]
transition on SLASH to state [35]
transition on PLUS to state [34]

-------------------
lalr_state [40]: {
  [expr ::= expr (*) TIMES expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) MINUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr SLASH expr (*) , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) SLASH expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) PLUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
}
transition on TIMES to state [37]
transition on MINUS to state [36]
transition on SLASH to state [35]
transition on PLUS to state [34]

-------------------
lalr_state [41]: {
  [expr ::= expr (*) TIMES expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) MINUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr PLUS expr (*) , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) SLASH expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) PLUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
}
transition on TIMES to state [37]
transition on MINUS to state [36]
transition on SLASH to state [35]
transition on PLUS to state [34]

-------------------
lalr_state [42]: {
  [exprList ::= (*) neExprList , {RPAREN }]
  [expr ::= (*) IDENTIFIER , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= (*) expr SLASH expr , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= (*) expr PLUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [neExprList ::= (*) neExprList COMMA expr , {COMMA RPAREN }]
  [exprList ::= (*) , {RPAREN }]
  [expr ::= (*) NUMBER , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= (*) expr TIMES expr , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= IDENTIFIER LPAREN (*) exprList RPAREN , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
  [neExprList ::= (*) expr , {COMMA RPAREN }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= (*) LPAREN expr RPAREN , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= (*) expr MINUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
}
transition on expr to state [45]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on NUMBER to state [22]
transition on neExprList to state [44]
transition on exprList to state [43]

-------------------
lalr_state [43]: {
  [expr ::= IDENTIFIER LPAREN exprList (*) RPAREN , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
}
transition on RPAREN to state [48]

-------------------
lalr_state [44]: {
  [exprList ::= neExprList (*) , {RPAREN }]
  [neExprList ::= neExprList (*) COMMA expr , {COMMA RPAREN }]
}
transition on COMMA to state [46]

-------------------
lalr_state [45]: {
  [expr ::= expr (*) TIMES expr , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [neExprList ::= expr (*) , {COMMA RPAREN }]
  [expr ::= expr (*) MINUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= expr (*) SLASH expr , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= expr (*) PLUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
}
transition on TIMES to state [37]
transition on MINUS to state [36]
transition on SLASH to state [35]
transition on PLUS to state [34]

-------------------
lalr_state [46]: {
  [expr ::= (*) IDENTIFIER , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= (*) expr SLASH expr , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= (*) expr PLUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [neExprList ::= neExprList COMMA (*) expr , {COMMA RPAREN }]
  [expr ::= (*) NUMBER , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= (*) expr TIMES expr , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= (*) LPAREN expr RPAREN , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= (*) expr MINUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
}
transition on expr to state [47]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on NUMBER to state [22]

-------------------
lalr_state [47]: {
  [expr ::= expr (*) TIMES expr , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= expr (*) MINUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [neExprList ::= neExprList COMMA expr (*) , {COMMA RPAREN }]
  [expr ::= expr (*) SLASH expr , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
  [expr ::= expr (*) PLUS expr , {COMMA PLUS MINUS TIMES SLASH RPAREN }]
}
transition on TIMES to state [37]
transition on MINUS to state [36]
transition on SLASH to state [35]
transition on PLUS to state [34]

-------------------
lalr_state [48]: {
  [expr ::= IDENTIFIER LPAREN exprList RPAREN (*) , {COMMA PLUS MINUS TIMES SLASH RPAREN EQUALS LT GT LE GE NEQUALS AND OR ELSE WHILE SEMICOLON }]
}

-------------------
lalr_state [49]: {
  [statement ::= DO statement (*) WHILE LPAREN boolExpr RPAREN , {ELSE WHILE SEMICOLON }]
}
transition on WHILE to state [50]

-------------------
lalr_state [50]: {
  [statement ::= DO statement WHILE (*) LPAREN boolExpr RPAREN , {ELSE WHILE SEMICOLON }]
}
transition on LPAREN to state [51]

-------------------
lalr_state [51]: {
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr NEQUALS expr , {RPAREN AND OR }]
  [boolExpr ::= (*) NOT boolExpr , {RPAREN AND OR }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr LT expr , {RPAREN AND OR }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr LE expr , {RPAREN AND OR }]
  [boolExpr ::= (*) boolExpr AND boolExpr , {RPAREN AND OR }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr EQUALS expr , {RPAREN AND OR }]
  [boolExpr ::= (*) expr GT expr , {RPAREN AND OR }]
  [statement ::= DO statement WHILE LPAREN (*) boolExpr RPAREN , {ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr GE expr , {RPAREN AND OR }]
  [boolExpr ::= (*) boolExpr OR boolExpr , {RPAREN AND OR }]
}
transition on expr to state [54]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on boolExpr to state [53]
transition on NUMBER to state [22]
transition on NOT to state [52]

-------------------
lalr_state [52]: {
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr NEQUALS expr , {RPAREN AND OR }]
  [boolExpr ::= NOT (*) boolExpr , {RPAREN AND OR }]
  [boolExpr ::= (*) NOT boolExpr , {RPAREN AND OR }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr LT expr , {RPAREN AND OR }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr LE expr , {RPAREN AND OR }]
  [boolExpr ::= (*) boolExpr AND boolExpr , {RPAREN AND OR }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr EQUALS expr , {RPAREN AND OR }]
  [boolExpr ::= (*) expr GT expr , {RPAREN AND OR }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr GE expr , {RPAREN AND OR }]
  [boolExpr ::= (*) boolExpr OR boolExpr , {RPAREN AND OR }]
}
transition on expr to state [54]
transition on LPAREN to state [30]
transition on boolExpr to state [72]
transition on IDENTIFIER to state [31]
transition on NUMBER to state [22]
transition on NOT to state [52]

-------------------
lalr_state [53]: {
  [statement ::= DO statement WHILE LPAREN boolExpr (*) RPAREN , {ELSE WHILE SEMICOLON }]
  [boolExpr ::= boolExpr (*) OR boolExpr , {RPAREN AND OR }]
  [boolExpr ::= boolExpr (*) AND boolExpr , {RPAREN AND OR }]
}
transition on OR to state [69]
transition on AND to state [68]
transition on RPAREN to state [67]

-------------------
lalr_state [54]: {
  [boolExpr ::= expr (*) GE expr , {RPAREN AND OR }]
  [boolExpr ::= expr (*) EQUALS expr , {RPAREN AND OR }]
  [expr ::= expr (*) SLASH expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= expr (*) GT expr , {RPAREN AND OR }]
  [boolExpr ::= expr (*) LE expr , {RPAREN AND OR }]
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= expr (*) LT expr , {RPAREN AND OR }]
  [boolExpr ::= expr (*) NEQUALS expr , {RPAREN AND OR }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
}
transition on LT to state [60]
transition on EQUALS to state [59]
transition on TIMES to state [37]
transition on GT to state [58]
transition on LE to state [57]
transition on PLUS to state [34]
transition on NEQUALS to state [56]
transition on GE to state [55]
transition on SLASH to state [35]
transition on MINUS to state [36]

-------------------
lalr_state [55]: {
  [boolExpr ::= expr GE (*) expr , {RPAREN AND OR }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
}
transition on expr to state [66]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on NUMBER to state [22]

-------------------
lalr_state [56]: {
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [boolExpr ::= expr NEQUALS (*) expr , {RPAREN AND OR }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
}
transition on expr to state [65]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on NUMBER to state [22]

-------------------
lalr_state [57]: {
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [boolExpr ::= expr LE (*) expr , {RPAREN AND OR }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
}
transition on expr to state [64]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on NUMBER to state [22]

-------------------
lalr_state [58]: {
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [boolExpr ::= expr GT (*) expr , {RPAREN AND OR }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
}
transition on expr to state [63]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on NUMBER to state [22]

-------------------
lalr_state [59]: {
  [boolExpr ::= expr EQUALS (*) expr , {RPAREN AND OR }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
}
transition on expr to state [62]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on NUMBER to state [22]

-------------------
lalr_state [60]: {
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [boolExpr ::= expr LT (*) expr , {RPAREN AND OR }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
}
transition on expr to state [61]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on NUMBER to state [22]

-------------------
lalr_state [61]: {
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= expr (*) SLASH expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [boolExpr ::= expr LT expr (*) , {RPAREN AND OR }]
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
}
transition on TIMES to state [37]
transition on MINUS to state [36]
transition on SLASH to state [35]
transition on PLUS to state [34]

-------------------
lalr_state [62]: {
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [boolExpr ::= expr EQUALS expr (*) , {RPAREN AND OR }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= expr (*) SLASH expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
}
transition on TIMES to state [37]
transition on MINUS to state [36]
transition on SLASH to state [35]
transition on PLUS to state [34]

-------------------
lalr_state [63]: {
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [boolExpr ::= expr GT expr (*) , {RPAREN AND OR }]
  [expr ::= expr (*) SLASH expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
}
transition on TIMES to state [37]
transition on MINUS to state [36]
transition on SLASH to state [35]
transition on PLUS to state [34]

-------------------
lalr_state [64]: {
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [boolExpr ::= expr LE expr (*) , {RPAREN AND OR }]
  [expr ::= expr (*) SLASH expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
}
transition on TIMES to state [37]
transition on MINUS to state [36]
transition on SLASH to state [35]
transition on PLUS to state [34]

-------------------
lalr_state [65]: {
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= expr (*) SLASH expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [boolExpr ::= expr NEQUALS expr (*) , {RPAREN AND OR }]
}
transition on TIMES to state [37]
transition on MINUS to state [36]
transition on SLASH to state [35]
transition on PLUS to state [34]

-------------------
lalr_state [66]: {
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [boolExpr ::= expr GE expr (*) , {RPAREN AND OR }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= expr (*) SLASH expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES SLASH RPAREN AND OR }]
}
transition on TIMES to state [37]
transition on MINUS to state [36]
transition on SLASH to state [35]
transition on PLUS to state [34]

-------------------
lalr_state [67]: {
  [statement ::= DO statement WHILE LPAREN boolExpr RPAREN (*) , {ELSE WHILE SEMICOLON }]
}

-------------------
lalr_state [68]: {
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr NEQUALS expr , {RPAREN AND OR }]
  [boolExpr ::= (*) NOT boolExpr , {RPAREN AND OR }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr LT expr , {RPAREN AND OR }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= boolExpr AND (*) boolExpr , {RPAREN AND OR }]
  [boolExpr ::= (*) expr LE expr , {RPAREN AND OR }]
  [boolExpr ::= (*) boolExpr AND boolExpr , {RPAREN AND OR }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr EQUALS expr , {RPAREN AND OR }]
  [boolExpr ::= (*) expr GT expr , {RPAREN AND OR }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr GE expr , {RPAREN AND OR }]
  [boolExpr ::= (*) boolExpr OR boolExpr , {RPAREN AND OR }]
}
transition on expr to state [54]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on boolExpr to state [71]
transition on NUMBER to state [22]
transition on NOT to state [52]

-------------------
lalr_state [69]: {
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr NEQUALS expr , {RPAREN AND OR }]
  [boolExpr ::= (*) NOT boolExpr , {RPAREN AND OR }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr LT expr , {RPAREN AND OR }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr LE expr , {RPAREN AND OR }]
  [boolExpr ::= (*) boolExpr AND boolExpr , {RPAREN AND OR }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr EQUALS expr , {RPAREN AND OR }]
  [boolExpr ::= (*) expr GT expr , {RPAREN AND OR }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= boolExpr OR (*) boolExpr , {RPAREN AND OR }]
  [boolExpr ::= (*) expr GE expr , {RPAREN AND OR }]
  [boolExpr ::= (*) boolExpr OR boolExpr , {RPAREN AND OR }]
}
transition on expr to state [54]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on boolExpr to state [70]
transition on NUMBER to state [22]
transition on NOT to state [52]

-------------------
lalr_state [70]: {
  [boolExpr ::= boolExpr OR boolExpr (*) , {RPAREN AND OR }]
  [boolExpr ::= boolExpr (*) OR boolExpr , {RPAREN AND OR }]
  [boolExpr ::= boolExpr (*) AND boolExpr , {RPAREN AND OR }]
}
transition on OR to state [69]
transition on AND to state [68]

-------------------
lalr_state [71]: {
  [boolExpr ::= boolExpr (*) OR boolExpr , {RPAREN AND OR }]
  [boolExpr ::= boolExpr AND boolExpr (*) , {RPAREN AND OR }]
  [boolExpr ::= boolExpr (*) AND boolExpr , {RPAREN AND OR }]
}
transition on OR to state [69]
transition on AND to state [68]

-------------------
lalr_state [72]: {
  [boolExpr ::= NOT boolExpr (*) , {RPAREN AND OR }]
  [boolExpr ::= boolExpr (*) OR boolExpr , {RPAREN AND OR }]
  [boolExpr ::= boolExpr (*) AND boolExpr , {RPAREN AND OR }]
}
transition on OR to state [69]
transition on AND to state [68]

-------------------
lalr_state [73]: {
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [statement ::= RETURN expr (*) , {ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) SLASH expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
}
transition on TIMES to state [37]
transition on MINUS to state [36]
transition on SLASH to state [35]
transition on PLUS to state [34]

-------------------
lalr_state [74]: {
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [statement ::= IDENTIFIER ASSIGN (*) expr , {ELSE WHILE SEMICOLON }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
}
transition on expr to state [75]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on NUMBER to state [22]

-------------------
lalr_state [75]: {
  [expr ::= expr (*) TIMES expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) MINUS expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) SLASH expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= expr (*) PLUS expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [statement ::= IDENTIFIER ASSIGN expr (*) , {ELSE WHILE SEMICOLON }]
}
transition on TIMES to state [37]
transition on MINUS to state [36]
transition on SLASH to state [35]
transition on PLUS to state [34]

-------------------
lalr_state [76]: {
  [statement ::= (*) IF LPAREN boolExpr RPAREN statement ELSE statement , {SEMICOLON }]
  [statementList ::= (*) , {RBRACE }]
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [statement ::= (*) IDENTIFIER ASSIGN expr , {SEMICOLON }]
  [statement ::= (*) RETURN expr , {SEMICOLON }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [statementList ::= statement SEMICOLON (*) statementList , {RBRACE }]
  [statement ::= (*) WHILE LPAREN boolExpr RPAREN statement , {SEMICOLON }]
  [statementList ::= (*) statement SEMICOLON statementList , {RBRACE }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [statement ::= (*) IF LPAREN boolExpr RPAREN statement , {SEMICOLON }]
  [statement ::= (*) expr , {SEMICOLON }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [statement ::= (*) LBRACE statementList RBRACE , {SEMICOLON }]
  [statement ::= (*) DO statement WHILE LPAREN boolExpr RPAREN , {SEMICOLON }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH SEMICOLON }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH SEMICOLON }]
}
transition on LPAREN to state [30]
transition on DO to state [29]
transition on RETURN to state [28]
transition on expr to state [27]
transition on IDENTIFIER to state [26]
transition on statement to state [25]
transition on IF to state [24]
transition on statementList to state [77]
transition on NUMBER to state [22]
transition on WHILE to state [20]
transition on LBRACE to state [18]

-------------------
lalr_state [77]: {
  [statementList ::= statement SEMICOLON statementList (*) , {RBRACE }]
}

-------------------
lalr_state [78]: {
  [statement ::= IF LPAREN (*) boolExpr RPAREN statement ELSE statement , {ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr NEQUALS expr , {RPAREN AND OR }]
  [boolExpr ::= (*) NOT boolExpr , {RPAREN AND OR }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr LT expr , {RPAREN AND OR }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr LE expr , {RPAREN AND OR }]
  [boolExpr ::= (*) boolExpr AND boolExpr , {RPAREN AND OR }]
  [statement ::= IF LPAREN (*) boolExpr RPAREN statement , {ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr EQUALS expr , {RPAREN AND OR }]
  [boolExpr ::= (*) expr GT expr , {RPAREN AND OR }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr GE expr , {RPAREN AND OR }]
  [boolExpr ::= (*) boolExpr OR boolExpr , {RPAREN AND OR }]
}
transition on expr to state [54]
transition on LPAREN to state [30]
transition on boolExpr to state [79]
transition on IDENTIFIER to state [31]
transition on NUMBER to state [22]
transition on NOT to state [52]

-------------------
lalr_state [79]: {
  [statement ::= IF LPAREN boolExpr (*) RPAREN statement ELSE statement , {ELSE WHILE SEMICOLON }]
  [boolExpr ::= boolExpr (*) OR boolExpr , {RPAREN AND OR }]
  [statement ::= IF LPAREN boolExpr (*) RPAREN statement , {ELSE WHILE SEMICOLON }]
  [boolExpr ::= boolExpr (*) AND boolExpr , {RPAREN AND OR }]
}
transition on OR to state [69]
transition on AND to state [68]
transition on RPAREN to state [80]

-------------------
lalr_state [80]: {
  [statement ::= (*) IF LPAREN boolExpr RPAREN statement ELSE statement , {ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [statement ::= (*) IDENTIFIER ASSIGN expr , {ELSE WHILE SEMICOLON }]
  [statement ::= (*) RETURN expr , {ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [statement ::= (*) WHILE LPAREN boolExpr RPAREN statement , {ELSE WHILE SEMICOLON }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [statement ::= IF LPAREN boolExpr RPAREN (*) statement , {ELSE WHILE SEMICOLON }]
  [statement ::= (*) IF LPAREN boolExpr RPAREN statement , {ELSE WHILE SEMICOLON }]
  [statement ::= (*) expr , {ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [statement ::= (*) LBRACE statementList RBRACE , {ELSE WHILE SEMICOLON }]
  [statement ::= (*) DO statement WHILE LPAREN boolExpr RPAREN , {ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [statement ::= IF LPAREN boolExpr RPAREN (*) statement ELSE statement , {ELSE WHILE SEMICOLON }]
}
transition on LPAREN to state [30]
transition on DO to state [29]
transition on RETURN to state [28]
transition on expr to state [27]
transition on IDENTIFIER to state [26]
transition on statement to state [81]
transition on IF to state [24]
transition on NUMBER to state [22]
transition on LBRACE to state [18]
transition on WHILE to state [20]

-------------------
lalr_state [81]: {
  [statement ::= IF LPAREN boolExpr RPAREN statement (*) ELSE statement , {ELSE WHILE SEMICOLON }]
  [statement ::= IF LPAREN boolExpr RPAREN statement (*) , {ELSE WHILE SEMICOLON }]
}
transition on ELSE to state [82]

-------------------
lalr_state [82]: {
  [statement ::= (*) DO statement WHILE LPAREN boolExpr RPAREN , {ELSE WHILE SEMICOLON }]
  [statement ::= (*) IF LPAREN boolExpr RPAREN statement , {ELSE WHILE SEMICOLON }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [statement ::= (*) expr , {ELSE WHILE SEMICOLON }]
  [statement ::= (*) WHILE LPAREN boolExpr RPAREN statement , {ELSE WHILE SEMICOLON }]
  [statement ::= (*) IDENTIFIER ASSIGN expr , {ELSE WHILE SEMICOLON }]
  [statement ::= IF LPAREN boolExpr RPAREN statement ELSE (*) statement , {ELSE WHILE SEMICOLON }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [statement ::= (*) RETURN expr , {ELSE WHILE SEMICOLON }]
  [statement ::= (*) IF LPAREN boolExpr RPAREN statement ELSE statement , {ELSE WHILE SEMICOLON }]
  [statement ::= (*) LBRACE statementList RBRACE , {ELSE WHILE SEMICOLON }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
}
transition on DO to state [29]
transition on LPAREN to state [30]
transition on RETURN to state [28]
transition on expr to state [27]
transition on IDENTIFIER to state [26]
transition on statement to state [83]
transition on IF to state [24]
transition on NUMBER to state [22]
transition on WHILE to state [20]
transition on LBRACE to state [18]

-------------------
lalr_state [83]: {
  [statement ::= IF LPAREN boolExpr RPAREN statement ELSE statement (*) , {ELSE WHILE SEMICOLON }]
}

-------------------
lalr_state [84]: {
  [function ::= INT IDENTIFIER LPAREN paramList RPAREN LBRACE declarations statementList RBRACE (*) , {EOF INT }]
}

-------------------
lalr_state [85]: {
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr NEQUALS expr , {RPAREN AND OR }]
  [boolExpr ::= (*) NOT boolExpr , {RPAREN AND OR }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr LT expr , {RPAREN AND OR }]
  [statement ::= WHILE LPAREN (*) boolExpr RPAREN statement , {ELSE WHILE SEMICOLON }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr LE expr , {RPAREN AND OR }]
  [boolExpr ::= (*) boolExpr AND boolExpr , {RPAREN AND OR }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr EQUALS expr , {RPAREN AND OR }]
  [boolExpr ::= (*) expr GT expr , {RPAREN AND OR }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH EQUALS LT GT LE GE NEQUALS }]
  [boolExpr ::= (*) expr GE expr , {RPAREN AND OR }]
  [boolExpr ::= (*) boolExpr OR boolExpr , {RPAREN AND OR }]
}
transition on expr to state [54]
transition on LPAREN to state [30]
transition on IDENTIFIER to state [31]
transition on boolExpr to state [86]
transition on NUMBER to state [22]
transition on NOT to state [52]

-------------------
lalr_state [86]: {
  [boolExpr ::= boolExpr (*) OR boolExpr , {RPAREN AND OR }]
  [statement ::= WHILE LPAREN boolExpr (*) RPAREN statement , {ELSE WHILE SEMICOLON }]
  [boolExpr ::= boolExpr (*) AND boolExpr , {RPAREN AND OR }]
}
transition on OR to state [69]
transition on AND to state [68]
transition on RPAREN to state [87]

-------------------
lalr_state [87]: {
  [statement ::= (*) DO statement WHILE LPAREN boolExpr RPAREN , {ELSE WHILE SEMICOLON }]
  [statement ::= (*) IF LPAREN boolExpr RPAREN statement , {ELSE WHILE SEMICOLON }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [statement ::= WHILE LPAREN boolExpr RPAREN (*) statement , {ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr SLASH expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr PLUS expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [statement ::= (*) expr , {ELSE WHILE SEMICOLON }]
  [statement ::= (*) WHILE LPAREN boolExpr RPAREN statement , {ELSE WHILE SEMICOLON }]
  [statement ::= (*) IDENTIFIER ASSIGN expr , {ELSE WHILE SEMICOLON }]
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr TIMES expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [statement ::= (*) RETURN expr , {ELSE WHILE SEMICOLON }]
  [statement ::= (*) IF LPAREN boolExpr RPAREN statement ELSE statement , {ELSE WHILE SEMICOLON }]
  [statement ::= (*) LBRACE statementList RBRACE , {ELSE WHILE SEMICOLON }]
  [expr ::= (*) IDENTIFIER LPAREN exprList RPAREN , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
  [expr ::= (*) expr MINUS expr , {PLUS MINUS TIMES SLASH ELSE WHILE SEMICOLON }]
}
transition on DO to state [29]
transition on LPAREN to state [30]
transition on RETURN to state [28]
transition on expr to state [27]
transition on IDENTIFIER to state [26]
transition on statement to state [88]
transition on IF to state [24]
transition on NUMBER to state [22]
transition on WHILE to state [20]
transition on LBRACE to state [18]

-------------------
lalr_state [88]: {
  [statement ::= WHILE LPAREN boolExpr RPAREN statement (*) , {ELSE WHILE SEMICOLON }]
}

-------------------
lalr_state [89]: {
  [declaration ::= INT IDENTIFIER (*) SEMICOLON , {LPAREN LBRACE RBRACE IF WHILE DO RETURN INT IDENTIFIER NUMBER }]
}
transition on SEMICOLON to state [90]

-------------------
lalr_state [90]: {
  [declaration ::= INT IDENTIFIER SEMICOLON (*) , {LPAREN LBRACE RBRACE IF WHILE DO RETURN INT IDENTIFIER NUMBER }]
}

-------------------
lalr_state [91]: {
  [statement ::= LBRACE statementList (*) RBRACE , {ELSE WHILE SEMICOLON }]
}
transition on RBRACE to state [92]

-------------------
lalr_state [92]: {
  [statement ::= LBRACE statementList RBRACE (*) , {ELSE WHILE SEMICOLON }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 0:REDUCE(with prod 2)] [term 27:REDUCE(with prod 2)]
From state #1
 [term 0:REDUCE(with prod 0)] [term 27:SHIFT(to state 5)]
From state #2
 [term 0:SHIFT(to state 3)]
From state #3
 [term 0:REDUCE(with prod 1)]
From state #4
 [term 0:REDUCE(with prod 3)] [term 27:REDUCE(with prod 3)]
From state #5
 [term 28:SHIFT(to state 6)]
From state #6
 [term 7:SHIFT(to state 7)]
From state #7
 [term 8:REDUCE(with prod 5)] [term 27:SHIFT(to state 9)]
From state #8
 [term 8:SHIFT(to state 15)]
From state #9
 [term 28:SHIFT(to state 14)]
From state #10
 [term 2:SHIFT(to state 11)] [term 8:REDUCE(with prod 6)]
From state #11
 [term 27:SHIFT(to state 12)]
From state #12
 [term 28:SHIFT(to state 13)]
From state #13
 [term 2:REDUCE(with prod 8)] [term 8:REDUCE(with prod 8)]
From state #14
 [term 2:REDUCE(with prod 7)] [term 8:REDUCE(with prod 7)]
From state #15
 [term 9:SHIFT(to state 16)]
From state #16
 [term 7:REDUCE(with prod 10)] [term 9:REDUCE(with prod 10)]
 [term 10:REDUCE(with prod 10)] [term 21:REDUCE(with prod 10)]
 [term 23:REDUCE(with prod 10)] [term 24:REDUCE(with prod 10)]
 [term 25:REDUCE(with prod 10)] [term 27:REDUCE(with prod 10)]
 [term 28:REDUCE(with prod 10)] [term 29:REDUCE(with prod 10)]
From state #17
 [term 7:SHIFT(to state 30)] [term 9:SHIFT(to state 18)]
 [term 10:REDUCE(with prod 20)] [term 21:SHIFT(to state 24)]
 [term 23:SHIFT(to state 20)] [term 24:SHIFT(to state 29)]
 [term 25:SHIFT(to state 28)] [term 27:SHIFT(to state 19)]
 [term 28:SHIFT(to state 26)] [term 29:SHIFT(to state 22)]
From state #18
 [term 7:SHIFT(to state 30)] [term 9:SHIFT(to state 18)]
 [term 10:REDUCE(with prod 20)] [term 21:SHIFT(to state 24)]
 [term 23:SHIFT(to state 20)] [term 24:SHIFT(to state 29)]
 [term 25:SHIFT(to state 28)] [term 28:SHIFT(to state 26)]
 [term 29:SHIFT(to state 22)]
From state #19
 [term 28:SHIFT(to state 89)]
From state #20
 [term 7:SHIFT(to state 85)]
From state #21
 [term 7:REDUCE(with prod 11)] [term 9:REDUCE(with prod 11)]
 [term 10:REDUCE(with prod 11)] [term 21:REDUCE(with prod 11)]
 [term 23:REDUCE(with prod 11)] [term 24:REDUCE(with prod 11)]
 [term 25:REDUCE(with prod 11)] [term 27:REDUCE(with prod 11)]
 [term 28:REDUCE(with prod 11)] [term 29:REDUCE(with prod 11)]
From state #22
 [term 2:REDUCE(with prod 27)] [term 3:REDUCE(with prod 27)]
 [term 4:REDUCE(with prod 27)] [term 5:REDUCE(with prod 27)]
 [term 6:REDUCE(with prod 27)] [term 8:REDUCE(with prod 27)]
 [term 12:REDUCE(with prod 27)] [term 13:REDUCE(with prod 27)]
 [term 14:REDUCE(with prod 27)] [term 15:REDUCE(with prod 27)]
 [term 16:REDUCE(with prod 27)] [term 17:REDUCE(with prod 27)]
 [term 18:REDUCE(with prod 27)] [term 19:REDUCE(with prod 27)]
 [term 22:REDUCE(with prod 27)] [term 23:REDUCE(with prod 27)]
 [term 26:REDUCE(with prod 27)]
From state #23
 [term 10:SHIFT(to state 84)]
From state #24
 [term 7:SHIFT(to state 78)]
From state #25
 [term 26:SHIFT(to state 76)]
From state #26
 [term 3:REDUCE(with prod 28)] [term 4:REDUCE(with prod 28)]
 [term 5:REDUCE(with prod 28)] [term 6:REDUCE(with prod 28)]
 [term 7:SHIFT(to state 42)] [term 11:SHIFT(to state 74)]
 [term 22:REDUCE(with prod 28)] [term 23:REDUCE(with prod 28)]
 [term 26:REDUCE(with prod 28)]
From state #27
 [term 3:SHIFT(to state 34)] [term 4:SHIFT(to state 36)]
 [term 5:SHIFT(to state 37)] [term 6:SHIFT(to state 35)]
 [term 22:REDUCE(with prod 19)] [term 23:REDUCE(with prod 19)]
 [term 26:REDUCE(with prod 19)]
From state #28
 [term 7:SHIFT(to state 30)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 22)]
From state #29
 [term 7:SHIFT(to state 30)] [term 9:SHIFT(to state 18)]
 [term 21:SHIFT(to state 24)] [term 23:SHIFT(to state 20)]
 [term 24:SHIFT(to state 29)] [term 25:SHIFT(to state 28)]
 [term 28:SHIFT(to state 26)] [term 29:SHIFT(to state 22)]
From state #30
 [term 7:SHIFT(to state 30)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 22)]
From state #31
 [term 2:REDUCE(with prod 28)] [term 3:REDUCE(with prod 28)]
 [term 4:REDUCE(with prod 28)] [term 5:REDUCE(with prod 28)]
 [term 6:REDUCE(with prod 28)] [term 7:SHIFT(to state 42)]
 [term 8:REDUCE(with prod 28)] [term 12:REDUCE(with prod 28)]
 [term 13:REDUCE(with prod 28)] [term 14:REDUCE(with prod 28)]
 [term 15:REDUCE(with prod 28)] [term 16:REDUCE(with prod 28)]
 [term 17:REDUCE(with prod 28)] [term 18:REDUCE(with prod 28)]
 [term 19:REDUCE(with prod 28)] [term 22:REDUCE(with prod 28)]
 [term 23:REDUCE(with prod 28)] [term 26:REDUCE(with prod 28)]
From state #32
 [term 3:SHIFT(to state 34)] [term 4:SHIFT(to state 36)]
 [term 5:SHIFT(to state 37)] [term 6:SHIFT(to state 35)]
 [term 8:SHIFT(to state 33)]
From state #33
 [term 2:REDUCE(with prod 26)] [term 3:REDUCE(with prod 26)]
 [term 4:REDUCE(with prod 26)] [term 5:REDUCE(with prod 26)]
 [term 6:REDUCE(with prod 26)] [term 8:REDUCE(with prod 26)]
 [term 12:REDUCE(with prod 26)] [term 13:REDUCE(with prod 26)]
 [term 14:REDUCE(with prod 26)] [term 15:REDUCE(with prod 26)]
 [term 16:REDUCE(with prod 26)] [term 17:REDUCE(with prod 26)]
 [term 18:REDUCE(with prod 26)] [term 19:REDUCE(with prod 26)]
 [term 22:REDUCE(with prod 26)] [term 23:REDUCE(with prod 26)]
 [term 26:REDUCE(with prod 26)]
From state #34
 [term 7:SHIFT(to state 30)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 22)]
From state #35
 [term 7:SHIFT(to state 30)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 22)]
From state #36
 [term 7:SHIFT(to state 30)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 22)]
From state #37
 [term 7:SHIFT(to state 30)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 22)]
From state #38
 [term 2:REDUCE(with prod 24)] [term 3:REDUCE(with prod 24)]
 [term 4:REDUCE(with prod 24)] [term 5:REDUCE(with prod 24)]
 [term 6:REDUCE(with prod 24)] [term 8:REDUCE(with prod 24)]
 [term 12:REDUCE(with prod 24)] [term 13:REDUCE(with prod 24)]
 [term 14:REDUCE(with prod 24)] [term 15:REDUCE(with prod 24)]
 [term 16:REDUCE(with prod 24)] [term 17:REDUCE(with prod 24)]
 [term 18:REDUCE(with prod 24)] [term 19:REDUCE(with prod 24)]
 [term 22:REDUCE(with prod 24)] [term 23:REDUCE(with prod 24)]
 [term 26:REDUCE(with prod 24)]
From state #39
 [term 2:REDUCE(with prod 23)] [term 3:REDUCE(with prod 23)]
 [term 4:REDUCE(with prod 23)] [term 5:SHIFT(to state 37)]
 [term 6:SHIFT(to state 35)] [term 8:REDUCE(with prod 23)]
 [term 12:REDUCE(with prod 23)] [term 13:REDUCE(with prod 23)]
 [term 14:REDUCE(with prod 23)] [term 15:REDUCE(with prod 23)]
 [term 16:REDUCE(with prod 23)] [term 17:REDUCE(with prod 23)]
 [term 18:REDUCE(with prod 23)] [term 19:REDUCE(with prod 23)]
 [term 22:REDUCE(with prod 23)] [term 23:REDUCE(with prod 23)]
 [term 26:REDUCE(with prod 23)]
From state #40
 [term 2:REDUCE(with prod 25)] [term 3:REDUCE(with prod 25)]
 [term 4:REDUCE(with prod 25)] [term 5:REDUCE(with prod 25)]
 [term 6:REDUCE(with prod 25)] [term 8:REDUCE(with prod 25)]
 [term 12:REDUCE(with prod 25)] [term 13:REDUCE(with prod 25)]
 [term 14:REDUCE(with prod 25)] [term 15:REDUCE(with prod 25)]
 [term 16:REDUCE(with prod 25)] [term 17:REDUCE(with prod 25)]
 [term 18:REDUCE(with prod 25)] [term 19:REDUCE(with prod 25)]
 [term 22:REDUCE(with prod 25)] [term 23:REDUCE(with prod 25)]
 [term 26:REDUCE(with prod 25)]
From state #41
 [term 2:REDUCE(with prod 22)] [term 3:REDUCE(with prod 22)]
 [term 4:REDUCE(with prod 22)] [term 5:SHIFT(to state 37)]
 [term 6:SHIFT(to state 35)] [term 8:REDUCE(with prod 22)]
 [term 12:REDUCE(with prod 22)] [term 13:REDUCE(with prod 22)]
 [term 14:REDUCE(with prod 22)] [term 15:REDUCE(with prod 22)]
 [term 16:REDUCE(with prod 22)] [term 17:REDUCE(with prod 22)]
 [term 18:REDUCE(with prod 22)] [term 19:REDUCE(with prod 22)]
 [term 22:REDUCE(with prod 22)] [term 23:REDUCE(with prod 22)]
 [term 26:REDUCE(with prod 22)]
From state #42
 [term 7:SHIFT(to state 30)] [term 8:REDUCE(with prod 30)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 22)]
From state #43
 [term 8:SHIFT(to state 48)]
From state #44
 [term 2:SHIFT(to state 46)] [term 8:REDUCE(with prod 31)]
From state #45
 [term 2:REDUCE(with prod 32)] [term 3:SHIFT(to state 34)]
 [term 4:SHIFT(to state 36)] [term 5:SHIFT(to state 37)]
 [term 6:SHIFT(to state 35)] [term 8:REDUCE(with prod 32)]
From state #46
 [term 7:SHIFT(to state 30)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 22)]
From state #47
 [term 2:REDUCE(with prod 33)] [term 3:SHIFT(to state 34)]
 [term 4:SHIFT(to state 36)] [term 5:SHIFT(to state 37)]
 [term 6:SHIFT(to state 35)] [term 8:REDUCE(with prod 33)]
From state #48
 [term 2:REDUCE(with prod 29)] [term 3:REDUCE(with prod 29)]
 [term 4:REDUCE(with prod 29)] [term 5:REDUCE(with prod 29)]
 [term 6:REDUCE(with prod 29)] [term 8:REDUCE(with prod 29)]
 [term 12:REDUCE(with prod 29)] [term 13:REDUCE(with prod 29)]
 [term 14:REDUCE(with prod 29)] [term 15:REDUCE(with prod 29)]
 [term 16:REDUCE(with prod 29)] [term 17:REDUCE(with prod 29)]
 [term 18:REDUCE(with prod 29)] [term 19:REDUCE(with prod 29)]
 [term 22:REDUCE(with prod 29)] [term 23:REDUCE(with prod 29)]
 [term 26:REDUCE(with prod 29)]
From state #49
 [term 23:SHIFT(to state 50)]
From state #50
 [term 7:SHIFT(to state 51)]
From state #51
 [term 7:SHIFT(to state 30)] [term 20:SHIFT(to state 52)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 22)]
From state #52
 [term 7:SHIFT(to state 30)] [term 20:SHIFT(to state 52)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 22)]
From state #53
 [term 8:SHIFT(to state 67)] [term 18:SHIFT(to state 68)]
 [term 19:SHIFT(to state 69)]
From state #54
 [term 3:SHIFT(to state 34)] [term 4:SHIFT(to state 36)]
 [term 5:SHIFT(to state 37)] [term 6:SHIFT(to state 35)]
 [term 12:SHIFT(to state 59)] [term 13:SHIFT(to state 60)]
 [term 14:SHIFT(to state 58)] [term 15:SHIFT(to state 57)]
 [term 16:SHIFT(to state 55)] [term 17:SHIFT(to state 56)]
From state #55
 [term 7:SHIFT(to state 30)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 22)]
From state #56
 [term 7:SHIFT(to state 30)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 22)]
From state #57
 [term 7:SHIFT(to state 30)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 22)]
From state #58
 [term 7:SHIFT(to state 30)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 22)]
From state #59
 [term 7:SHIFT(to state 30)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 22)]
From state #60
 [term 7:SHIFT(to state 30)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 22)]
From state #61
 [term 3:SHIFT(to state 34)] [term 4:SHIFT(to state 36)]
 [term 5:SHIFT(to state 37)] [term 6:SHIFT(to state 35)]
 [term 8:REDUCE(with prod 38)] [term 18:REDUCE(with prod 38)]
 [term 19:REDUCE(with prod 38)]
From state #62
 [term 3:SHIFT(to state 34)] [term 4:SHIFT(to state 36)]
 [term 5:SHIFT(to state 37)] [term 6:SHIFT(to state 35)]
 [term 8:REDUCE(with prod 34)] [term 18:REDUCE(with prod 34)]
 [term 19:REDUCE(with prod 34)]
From state #63
 [term 3:SHIFT(to state 34)] [term 4:SHIFT(to state 36)]
 [term 5:SHIFT(to state 37)] [term 6:SHIFT(to state 35)]
 [term 8:REDUCE(with prod 39)] [term 18:REDUCE(with prod 39)]
 [term 19:REDUCE(with prod 39)]
From state #64
 [term 3:SHIFT(to state 34)] [term 4:SHIFT(to state 36)]
 [term 5:SHIFT(to state 37)] [term 6:SHIFT(to state 35)]
 [term 8:REDUCE(with prod 36)] [term 18:REDUCE(with prod 36)]
 [term 19:REDUCE(with prod 36)]
From state #65
 [term 3:SHIFT(to state 34)] [term 4:SHIFT(to state 36)]
 [term 5:SHIFT(to state 37)] [term 6:SHIFT(to state 35)]
 [term 8:REDUCE(with prod 35)] [term 18:REDUCE(with prod 35)]
 [term 19:REDUCE(with prod 35)]
From state #66
 [term 3:SHIFT(to state 34)] [term 4:SHIFT(to state 36)]
 [term 5:SHIFT(to state 37)] [term 6:SHIFT(to state 35)]
 [term 8:REDUCE(with prod 37)] [term 18:REDUCE(with prod 37)]
 [term 19:REDUCE(with prod 37)]
From state #67
 [term 22:REDUCE(with prod 17)] [term 23:REDUCE(with prod 17)]
 [term 26:REDUCE(with prod 17)]
From state #68
 [term 7:SHIFT(to state 30)] [term 20:SHIFT(to state 52)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 22)]
From state #69
 [term 7:SHIFT(to state 30)] [term 20:SHIFT(to state 52)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 22)]
From state #70
 [term 8:REDUCE(with prod 42)] [term 18:SHIFT(to state 68)]
 [term 19:REDUCE(with prod 42)]
From state #71
 [term 8:REDUCE(with prod 41)] [term 18:REDUCE(with prod 41)]
 [term 19:REDUCE(with prod 41)]
From state #72
 [term 8:REDUCE(with prod 40)] [term 18:REDUCE(with prod 40)]
 [term 19:REDUCE(with prod 40)]
From state #73
 [term 3:SHIFT(to state 34)] [term 4:SHIFT(to state 36)]
 [term 5:SHIFT(to state 37)] [term 6:SHIFT(to state 35)]
 [term 22:REDUCE(with prod 18)] [term 23:REDUCE(with prod 18)]
 [term 26:REDUCE(with prod 18)]
From state #74
 [term 7:SHIFT(to state 30)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 22)]
From state #75
 [term 3:SHIFT(to state 34)] [term 4:SHIFT(to state 36)]
 [term 5:SHIFT(to state 37)] [term 6:SHIFT(to state 35)]
 [term 22:REDUCE(with prod 13)] [term 23:REDUCE(with prod 13)]
 [term 26:REDUCE(with prod 13)]
From state #76
 [term 7:SHIFT(to state 30)] [term 9:SHIFT(to state 18)]
 [term 10:REDUCE(with prod 20)] [term 21:SHIFT(to state 24)]
 [term 23:SHIFT(to state 20)] [term 24:SHIFT(to state 29)]
 [term 25:SHIFT(to state 28)] [term 28:SHIFT(to state 26)]
 [term 29:SHIFT(to state 22)]
From state #77
 [term 10:REDUCE(with prod 21)]
From state #78
 [term 7:SHIFT(to state 30)] [term 20:SHIFT(to state 52)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 22)]
From state #79
 [term 8:SHIFT(to state 80)] [term 18:SHIFT(to state 68)]
 [term 19:SHIFT(to state 69)]
From state #80
 [term 7:SHIFT(to state 30)] [term 9:SHIFT(to state 18)]
 [term 21:SHIFT(to state 24)] [term 23:SHIFT(to state 20)]
 [term 24:SHIFT(to state 29)] [term 25:SHIFT(to state 28)]
 [term 28:SHIFT(to state 26)] [term 29:SHIFT(to state 22)]
From state #81
 [term 22:SHIFT(to state 82)] [term 23:REDUCE(with prod 14)]
 [term 26:REDUCE(with prod 14)]
From state #82
 [term 7:SHIFT(to state 30)] [term 9:SHIFT(to state 18)]
 [term 21:SHIFT(to state 24)] [term 23:SHIFT(to state 20)]
 [term 24:SHIFT(to state 29)] [term 25:SHIFT(to state 28)]
 [term 28:SHIFT(to state 26)] [term 29:SHIFT(to state 22)]
From state #83
 [term 22:REDUCE(with prod 15)] [term 23:REDUCE(with prod 15)]
 [term 26:REDUCE(with prod 15)]
From state #84
 [term 0:REDUCE(with prod 4)] [term 27:REDUCE(with prod 4)]
From state #85
 [term 7:SHIFT(to state 30)] [term 20:SHIFT(to state 52)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 22)]
From state #86
 [term 8:SHIFT(to state 87)] [term 18:SHIFT(to state 68)]
 [term 19:SHIFT(to state 69)]
From state #87
 [term 7:SHIFT(to state 30)] [term 9:SHIFT(to state 18)]
 [term 21:SHIFT(to state 24)] [term 23:SHIFT(to state 20)]
 [term 24:SHIFT(to state 29)] [term 25:SHIFT(to state 28)]
 [term 28:SHIFT(to state 26)] [term 29:SHIFT(to state 22)]
From state #88
 [term 22:REDUCE(with prod 16)] [term 23:REDUCE(with prod 16)]
 [term 26:REDUCE(with prod 16)]
From state #89
 [term 26:SHIFT(to state 90)]
From state #90
 [term 7:REDUCE(with prod 9)] [term 9:REDUCE(with prod 9)]
 [term 10:REDUCE(with prod 9)] [term 21:REDUCE(with prod 9)]
 [term 23:REDUCE(with prod 9)] [term 24:REDUCE(with prod 9)]
 [term 25:REDUCE(with prod 9)] [term 27:REDUCE(with prod 9)]
 [term 28:REDUCE(with prod 9)] [term 29:REDUCE(with prod 9)]
From state #91
 [term 10:SHIFT(to state 92)]
From state #92
 [term 22:REDUCE(with prod 12)] [term 23:REDUCE(with prod 12)]
 [term 26:REDUCE(with prod 12)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 2] [non term 1->state 1]
From state #1
 [non term 2->state 4]
From state #2
From state #3
From state #4
From state #5
From state #6
From state #7
 [non term 3->state 8] [non term 4->state 10]
From state #8
From state #9
From state #10
From state #11
From state #12
From state #13
From state #14
From state #15
From state #16
 [non term 6->state 17]
From state #17
 [non term 5->state 21] [non term 7->state 25] [non term 8->state 23]
 [non term 9->state 27]
From state #18
 [non term 7->state 25] [non term 8->state 91] [non term 9->state 27]
From state #19
From state #20
From state #21
From state #22
From state #23
From state #24
From state #25
From state #26
From state #27
From state #28
 [non term 9->state 73]
From state #29
 [non term 7->state 49] [non term 9->state 27]
From state #30
 [non term 9->state 32]
From state #31
From state #32
From state #33
From state #34
 [non term 9->state 41]
From state #35
 [non term 9->state 40]
From state #36
 [non term 9->state 39]
From state #37
 [non term 9->state 38]
From state #38
From state #39
From state #40
From state #41
From state #42
 [non term 9->state 45] [non term 10->state 43] [non term 11->state 44]
From state #43
From state #44
From state #45
From state #46
 [non term 9->state 47]
From state #47
From state #48
From state #49
From state #50
From state #51
 [non term 9->state 54] [non term 12->state 53]
From state #52
 [non term 9->state 54] [non term 12->state 72]
From state #53
From state #54
From state #55
 [non term 9->state 66]
From state #56
 [non term 9->state 65]
From state #57
 [non term 9->state 64]
From state #58
 [non term 9->state 63]
From state #59
 [non term 9->state 62]
From state #60
 [non term 9->state 61]
From state #61
From state #62
From state #63
From state #64
From state #65
From state #66
From state #67
From state #68
 [non term 9->state 54] [non term 12->state 71]
From state #69
 [non term 9->state 54] [non term 12->state 70]
From state #70
From state #71
From state #72
From state #73
From state #74
 [non term 9->state 75]
From state #75
From state #76
 [non term 7->state 25] [non term 8->state 77] [non term 9->state 27]
From state #77
From state #78
 [non term 9->state 54] [non term 12->state 79]
From state #79
From state #80
 [non term 7->state 81] [non term 9->state 27]
From state #81
From state #82
 [non term 7->state 83] [non term 9->state 27]
From state #83
From state #84
From state #85
 [non term 9->state 54] [non term 12->state 86]
From state #86
From state #87
 [non term 7->state 88] [non term 9->state 27]
From state #88
From state #89
From state #90
From state #91
From state #92
-----------------------------
------- CUP v0.11a beta 20060608 Parser Generation Summary -------
  0 errors and 1 warning
  30 terminals, 13 non-terminals, and 43 productions declared, 
  producing 93 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  1 conflict detected (1 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (v0.11a beta 20060608)
