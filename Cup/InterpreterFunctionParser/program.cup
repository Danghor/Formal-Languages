import java_cup.runtime.*;

terminal ID, NUMBER, STRING;
terminal ASSIGN, SEMI;
terminal AND, OR, NOT;
terminal NE, EQ, LT, GT, LE, GE;
terminal PLUS, MINUS, TIMES, DIV, MOD;
terminal PRINT, IF, ELSE, WHILE, FOR, RETURN, QUIT, FUNCTION;
terminal LBRACE, RBRACE, LPAR, RPAR, COMMA;

nonterminal program, dfnStmntList, definition, stmntList, statement;
nonterminal printExprList, nePrintExprList, printExpr, assignment;
nonterminal paramList, neIDList, boolExpr, expr, exprList, neExprList;

precedence left  OR;
precedence left  AND;
precedence right NOT;
precedence left  PLUS, MINUS;
precedence left  TIMES, DIV, MOD;

program ::= dfnStmntList ;

dfnStmntList 
    ::= definition dfnStmntList
     |  statement  dfnStmntList
     |  /* epsilon */
     ;

definition 
    ::= FUNCTION ID LPAR paramList RPAR LBRACE stmntList RBRACE 
     ;

stmntList
    ::= statement stmntList
     |  /* epsilon */
     ;

statement 
    ::= assignment SEMI     
     |  PRINT LPAR printExprList RPAR SEMI       
     |  IF LPAR boolExpr RPAR LBRACE stmntList RBRACE 
     |  WHILE LPAR boolExpr RPAR LBRACE stmntList RBRACE 
     |  FOR LPAR assignment SEMI boolExpr SEMI assignment RPAR LBRACE stmntList RBRACE
     |  RETURN expr SEMI 
     |  RETURN SEMI 
     |  expr SEMI       
     |  QUIT SEMI
     ;

printExprList 
    ::= printExpr COMMA nePrintExprList 
     |  printExpr
     |  /* epsilon */
     ;

nePrintExprList
    ::= printExpr
     |  printExpr COMMA nePrintExprList
     ;

printExpr 
    ::= STRING 
     |  expr   
     ;

assignment 
    ::= ID ASSIGN expr 
     ;

paramList 
    ::= ID COMMA neIDList
     |  ID
     |  /* epsilon */
     ;

neIDList
    ::= ID COMMA neIDList
     |  ID
     ;

boolExpr 
    ::= boolExpr OR  boolExpr
     |  boolExpr AND boolExpr
     |  NOT boolExpr 
     |  LPAR boolExpr RPAR 
     |  expr EQ expr  
     |  expr NE expr 
     |  expr LE expr 
     |  expr GE expr 
     |  expr LT expr 
     |  expr GT expr 
     ;

expr
    ::= expr PLUS expr
     |  expr MINUS expr
     |  expr TIMES expr
     |  expr DIV   expr
     |  expr MOD   expr
     |  LPAR expr RPAR      
     |  ID    
     |  NUMBER        
     |  ID LPAR exprList RPAR
     ;

exprList
    ::= expr COMMA neExprList
     |  expr
     |  /* epsilon */
     ;

neExprList
    ::= expr COMMA neExprList
     |  expr
     ;

