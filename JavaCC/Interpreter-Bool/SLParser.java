/* Generated By:JavaCC: Do not edit this line. SLParser.java */
import java.util.*;

public class SLParser implements SLParserConstants {
    public static void main(String args[]) throws ParseException {
        SLParser        parser  = new SLParser(System.in);
        List<Statement> program = parser.stmntList();
        for (Statement stmnt: program) {
            System.out.println(stmnt);
        }
        for (Statement stmnt: program) {
            stmnt.execute();
        }
    }

// stmntList : statment stmntList 
//           | /* epsilon */
//           ;
  static final public List<Statement> stmntList() throws ParseException {
    Statement       s;
    List<Statement> l;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 2:
    case 5:
    case 8:
    case 9:
    case IDENTIFIER:
      s = statement();
      l = stmntList();
                                        l.add(0, s); {if (true) return l;}
      break;
    default:
      jj_la1[0] = jj_gen;
                                        {if (true) return new LinkedList<Statement>();}
    }
    throw new Error("Missing return statement in function");
  }

// statement : assignment ";"
//           | "print" "(" expr ")" ";"
//           | "if"    "(" boolExpr ")" "{" stmntList "}"
//           | "while" "(" boolExpr ")" "{" stmntList "}"
//           | "for"   "(" assignment ";" boolExpr ";" assignment ")" "{" stmntList "}"
//           ;
  static final public Statement statement() throws ParseException {
    Assignment a, i, u;
    Expr       r;
    BoolExpr   b;
    List<Statement> l;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      a = assignment(true);
      jj_consume_token(1);
                                                               {if (true) return a;}
      break;
    case 2:
      jj_consume_token(2);
      jj_consume_token(3);
      r = expr();
      jj_consume_token(4);
      jj_consume_token(1);
                                                               {if (true) return new Print(r);}
      break;
    case 5:
      jj_consume_token(5);
      jj_consume_token(3);
      b = boolExpr();
      jj_consume_token(4);
      jj_consume_token(6);
      l = stmntList();
      jj_consume_token(7);
                                                               {if (true) return new IfThen(b, l);}
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(3);
      b = boolExpr();
      jj_consume_token(4);
      jj_consume_token(6);
      l = stmntList();
      jj_consume_token(7);
                                                               {if (true) return new While (b, l);}
      break;
    case 9:
      jj_consume_token(9);
      jj_consume_token(3);
      i = assignment(false);
      jj_consume_token(1);
      b = boolExpr();
      jj_consume_token(1);
      u = assignment(false);
      jj_consume_token(4);
      jj_consume_token(6);
      l = stmntList();
      jj_consume_token(7);
                                {if (true) return new For(i, b, u, l);}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// assignment : variable "=" expr ;
  static final public Assignment assignment(boolean semicolon) throws ParseException {
    Variable v;
    Expr     r;
    v = variable();
    jj_consume_token(10);
    r = expr();
                                    {if (true) return new Assignment(v, r, semicolon);}
    throw new Error("Missing return statement in function");
  }

// boolExpr : conjunction boolExprRest;
  static final public BoolExpr boolExpr() throws ParseException {
    BoolExpr b, c;
    c = conjunction();
    b = boolExprRest(c);
                                            {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

// boolExprRest : "||" conjunction boolExprRest
//              | /* epsilon */
//              ;
  static final public BoolExpr boolExprRest(BoolExpr b) throws ParseException {
    BoolExpr c, d, r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
      jj_consume_token(11);
      c = conjunction();
                                 d = new Disjunction(b, c);
      r = boolExprRest(d);
                                                                                    {if (true) return r;}
      break;
    default:
      jj_la1[2] = jj_gen;
                                                                                {if (true) return b;}
    }
    throw new Error("Missing return statement in function");
  }

// conjunction : negation conjunctionRest;
  static final public BoolExpr conjunction() throws ParseException {
        BoolExpr r, n;
    n = negation();
    r = conjunctionRest(n);
                                                {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

// conjunctionRest : "&&" negation conjunctionRest
//                 | /* epsilon */
//                 ;
  static final public BoolExpr conjunctionRest(BoolExpr b) throws ParseException {
        BoolExpr n, c, r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
      jj_consume_token(12);
      n = negation();
                                c = new Conjunction(b, n);
      r = conjunctionRest(c);
                                                                                      {if (true) return r;}
      break;
    default:
      jj_la1[3] = jj_gen;
                                                                                  {if (true) return b;}
    }
    throw new Error("Missing return statement in function");
  }

// negation : "!" simpleBoolExpr
//          | "(" boolExpr ")"
//          | simpleBoolExpr
//          ;
  static final public BoolExpr negation() throws ParseException {
        BoolExpr b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      jj_consume_token(13);
      b = simpleBoolExpr();
                                     {if (true) return new Negation(b);}
      break;
    default:
      jj_la1[4] = jj_gen;
      if (jj_2_1(2147483647)) {
        jj_consume_token(3);
        b = boolExpr();
        jj_consume_token(4);
                                 {if (true) return b;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 3:
        case NUMBER:
        case IDENTIFIER:
          b = simpleBoolExpr();
                                 {if (true) return b;}
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

// simpleBoolExpr : expr "==" expr
//                | expr "<"  expr
//                ; 
  static final public BoolExpr simpleBoolExpr() throws ParseException {
    Expr l, r;
    l = expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
      jj_consume_token(14);
      r = expr();
                                     {if (true) return new Equal   (l, r);}
      break;
    case 15:
      jj_consume_token(15);
      r = expr();
                                     {if (true) return new LessThan(l, r);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// expr : product exprRest;
  static final public Expr expr() throws ParseException {
    Expr p, r;
    p = product();
    r = exprRest(p);
                                    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

// exprRest : "+" product exprRest
//          | "-" product exprRest
//          | /* epsilon */
//          ;
  static final public Expr exprRest(Expr s) throws ParseException {
    Expr p, a, r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
      jj_consume_token(16);
      p = product();
                          a = new Sum       (s, p);
      r = exprRest(a);
                                                                        {if (true) return r;}
      break;
    case 17:
      jj_consume_token(17);
      p = product();
                          a = new Difference(s, p);
      r = exprRest(a);
                                                                        {if (true) return r;}
      break;
    default:
      jj_la1[7] = jj_gen;
                                                                        {if (true) return s;}
    }
    throw new Error("Missing return statement in function");
  }

// product : factor productRest;
  static final public Expr product() throws ParseException {
    Expr f, r;
    f = factor();
    r = productRest(f);
                                      {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

// productRest : "*" factor productRest
//             | "/" factor productRest
//             | /* epsilon */
//             ;
  static final public Expr productRest(Expr p) throws ParseException {
    Expr f, a, r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      jj_consume_token(18);
      f = factor();
                         a = new Product (p, f);
      r = productRest(a);
                                                                        {if (true) return r;}
      break;
    case 19:
      jj_consume_token(19);
      f = factor();
                         a = new Quotient(p, f);
      r = productRest(a);
                                                                        {if (true) return r;}
      break;
    default:
      jj_la1[8] = jj_gen;
                                                                        {if (true) return p;}
    }
    throw new Error("Missing return statement in function");
  }

// factor : "(" expr ")"
//        | variable
//        | NUMBER
//        ;
  static final public Expr factor() throws ParseException {
    Expr  r, v;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 3:
      jj_consume_token(3);
      r = expr();
      jj_consume_token(4);
                           {if (true) return r;}
      break;
    case IDENTIFIER:
      v = variable();
                           {if (true) return v;}
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
                           {if (true) return new MyNumber(t.image);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Variable variable() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
                       {if (true) return new Variable(t.image);}
    throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_3R_22() {
    if (jj_scan_token(17)) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static final private boolean jj_3R_21() {
    if (jj_scan_token(16)) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_2() {
    if (jj_3R_4()) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  static final private boolean jj_3R_16() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static final private boolean jj_3R_15() {
    if (jj_scan_token(14)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static final private boolean jj_3R_30() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_29() {
    return false;
  }

  static final private boolean jj_3R_6() {
    if (jj_scan_token(11)) return true;
    if (jj_3R_2()) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  static final private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_14() {
    if (jj_3R_17()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static final private boolean jj_3R_26() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static final private boolean jj_3R_25() {
    if (jj_3R_30()) return true;
    return false;
  }

  static final private boolean jj_3R_12() {
    return false;
  }

  static final private boolean jj_3R_24() {
    if (jj_scan_token(3)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(4)) return true;
    return false;
  }

  static final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_scan_token(3)) return true;
    if (jj_3R_1()) return true;
    return false;
  }

  static final private boolean jj_3R_13() {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_1() {
    if (jj_3R_2()) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  static final private boolean jj_3R_9() {
    if (jj_scan_token(3)) return true;
    if (jj_3R_1()) return true;
    if (jj_scan_token(4)) return true;
    return false;
  }

  static final private boolean jj_3R_28() {
    if (jj_scan_token(19)) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_8() {
    if (jj_scan_token(13)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static final private boolean jj_3R_27() {
    if (jj_scan_token(18)) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_23() {
    return false;
  }

  static final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_10() {
    if (jj_3R_13()) return true;
    return false;
  }

  static final private boolean jj_3R_7() {
    return false;
  }

  static final private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_11() {
    if (jj_scan_token(12)) return true;
    if (jj_3R_4()) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  static final private boolean jj_3R_17() {
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public SLParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x2000324,0x2000324,0x800,0x1000,0x2000,0x3000008,0xc000,0x30000,0xc0000,0x3000008,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public SLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public SLParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SLParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SLParser(SLParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(SLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[26];
    for (int i = 0; i < 26; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
