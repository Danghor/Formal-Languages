PARSER_BEGIN(SLParser)

import java.util.*;

public class SLParser {  
    public static void main(String args[]) throws ParseException {
        SLParser        parser  = new SLParser(System.in);
        List<Statement> program = parser.stmntList();
        for (Statement stmnt: program) {
            System.out.println(stmnt);
        }
        for (Statement stmnt: program) {
            stmnt.execute();
        }
    }
}
PARSER_END(SLParser)

// stmntList : statment stmntList 
//           | /* epsilon */
//           ;
List<Statement> stmntList() : {
    Statement       s;
    List<Statement> l;
} {
      s = statement() l = stmntList() { l.add(0, s); return l;              }
    | /* epsilon */                   { return new LinkedList<Statement>(); }
}

// statement : variable "=" expr ";"
//           | "print" "(" expr ")" ";"
//           | "if"    "(" boolExpr ")" "{" stmntList "}"
//           | "while" "(" boolExpr ")" "{" stmntList "}"
//           ;
Statement statement() : {
    Variable v;
    BoolExpr b;
    Expr     r;
    List<Statement> l;
} {
      v = variable() "=" r = expr() ";" { return new Assignment(v, r); }
    | "print" "(" r = expr() ")"    ";" { return new Print(r);         }
    | "if"    "(" b = boolExpr() ")" "{" l = stmntList() "}" { return new IfThen(b, l); }
    | "while" "(" b = boolExpr() ")" "{" l = stmntList() "}" { return new While (b, l); }
}

// boolExpr : expr "==" expr
//          | expr "<"  expr
//          ;            
BoolExpr boolExpr() : {
    Expr l, r;
} {
    l = expr() (   "==" r = expr() { return new Equal   (l, r); }
                 | "<"  r = expr() { return new LessThan(l, r); }
               )
}

// expr : product exprRest;
Expr expr() : {
    Expr p, r;
} {
    p = product() r = exprRest(p) { return r; }
}

// exprRest : "+" product exprRest
//          | "-" product exprRest
//          | /* epsilon */
//          ;
Expr exprRest(Expr s) : {
    Expr p, a, r;
} {
      "+" p = product() { a = new Sum       (s, p); } r = exprRest(a) { return r; }
    | "-" p = product() { a = new Difference(s, p); } r = exprRest(a) { return r; }
    | /* epsilon */                                                   { return s; }
}

// product : factor productRest;
Expr product() : {
    Expr f, r;
} {
    f = factor() r = productRest(f) { return r; }
}

// productRest : "*" factor productRest
//             | "/" factor productRest
//             | /* epsilon */
//             ;
Expr productRest(Expr p) : {
    Expr f, a, r;
} {
      "*" f = factor() { a = new Product (p, f); } r = productRest(a) { return r; }
    | "/" f = factor() { a = new Quotient(p, f); } r = productRest(a) { return r; }
    | /* epsilon */                                                   { return p; }
}

// factor : "(" expr ")"
//        | variable
//        | NUMBER
//        ;
Expr factor() : {
    Expr  r, v;
    Token t;
} {
      "(" r = expr() ")" { return r; }
    | v = variable()     { return v; }
    | t = <NUMBER>       { return new MyNumber(t.image); }
}

Variable variable() : {
    Token t;
} {
    t = <IDENTIFIER> { return new Variable(t.image); }
}

// forget about white space
SKIP: { " " | "\t" | "\r" | "\n" }

TOKEN: {
    <NUMBER:     ("0" | ["1"-"9"] (["0"-"9"])*) ("." (["0"-"9"])*)?> 
  | <IDENTIFIER: (["a"-"z", "A"-"Z"])+>
}

