

					     BNF for SL

					     NON-TERMINALS


       stmntList ::= ( statement )*

       statement ::= assignment ";"
                  |  "var" variable ";"
                  |  "return" expr ";"
                  |  "print" "(" expr ")" ";"
                  |  "if" "(" boolExpr ")" "{" stmntList "}"
                  |  "while" "(" boolExpr ")" "{" stmntList "}"
                  |  "for" "(" assignment ";" boolExpr ";" assignment ")" "{" stmntList "}"
                  |  "function" <IDENTIFIER> "(" parameterList ")" "{" stmntList "}"

   parameterList ::= ( <IDENTIFIER> )*

      assignment ::= variable "=" expr

        boolExpr ::= conjunction boolExprRest

    boolExprRest ::= "||" conjunction boolExprRest
                  |  /* epsilon */

     conjunction ::= negation conjunctionRest

 conjunctionRest ::= "&&" negation conjunctionRest
                  |  /* epsilon */

        negation ::= "!" simpleBoolExpr
                  |  "(" boolExpr ")"
                  |  simpleBoolExpr

  simpleBoolExpr ::= expr ( "==" expr | "<" expr )

        exprList ::= ( expr ( "," expr )* )?

    exprListRest ::= "," expr exprListRest
                  | /* epsilon */

            expr ::= product exprRest

        exprRest ::= "+" product exprRest
                  |  "-" product exprRest
                  |

         product ::= factor productRest

     productRest ::= "*" factor productRest
                  |  "/" factor productRest
                  |  /* epsilon */

          factor ::= "(" expr ")"
                  |  <IDENTIFIER> "(" exprList ")"
                  |  variable
                  |  <NUMBER>

        variable ::= <IDENTIFIER>


