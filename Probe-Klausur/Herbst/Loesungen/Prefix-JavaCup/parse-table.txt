===== Terminals =====
[0]EOF [1]error [2]PLUS [3]MINUS [4]TIMES 
[5]DIVIDE [6]NUMBER 

===== Non terminals =====
[0]expr 

===== Productions =====
[0] expr ::= PLUS expr expr 
[1] $START ::= expr EOF 
[2] expr ::= MINUS expr expr 
[3] expr ::= TIMES expr expr 
[4] expr ::= DIVIDE expr expr 
[5] expr ::= NUMBER 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [expr ::= (*) NUMBER , {EOF }]
  [expr ::= (*) MINUS expr expr , {EOF }]
  [expr ::= (*) DIVIDE expr expr , {EOF }]
  [$START ::= (*) expr EOF , {EOF }]
  [expr ::= (*) TIMES expr expr , {EOF }]
  [expr ::= (*) PLUS expr expr , {EOF }]
}
transition on TIMES to state [6]
transition on expr to state [5]
transition on DIVIDE to state [4]
transition on MINUS to state [3]
transition on NUMBER to state [2]
transition on PLUS to state [1]

-------------------
lalr_state [1]: {
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) MINUS expr expr , {PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) DIVIDE expr expr , {PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) TIMES expr expr , {PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= PLUS (*) expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) PLUS expr expr , {PLUS MINUS TIMES DIVIDE NUMBER }]
}
transition on TIMES to state [6]
transition on expr to state [14]
transition on DIVIDE to state [4]
transition on MINUS to state [3]
transition on NUMBER to state [2]
transition on PLUS to state [1]

-------------------
lalr_state [2]: {
  [expr ::= NUMBER (*) , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
}

-------------------
lalr_state [3]: {
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= MINUS (*) expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) MINUS expr expr , {PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) DIVIDE expr expr , {PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) TIMES expr expr , {PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) PLUS expr expr , {PLUS MINUS TIMES DIVIDE NUMBER }]
}
transition on TIMES to state [6]
transition on expr to state [12]
transition on DIVIDE to state [4]
transition on MINUS to state [3]
transition on NUMBER to state [2]
transition on PLUS to state [1]

-------------------
lalr_state [4]: {
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) MINUS expr expr , {PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= DIVIDE (*) expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) DIVIDE expr expr , {PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) TIMES expr expr , {PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) PLUS expr expr , {PLUS MINUS TIMES DIVIDE NUMBER }]
}
transition on TIMES to state [6]
transition on expr to state [10]
transition on DIVIDE to state [4]
transition on MINUS to state [3]
transition on NUMBER to state [2]
transition on PLUS to state [1]

-------------------
lalr_state [5]: {
  [$START ::= expr (*) EOF , {EOF }]
}
transition on EOF to state [9]

-------------------
lalr_state [6]: {
  [expr ::= (*) NUMBER , {PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) MINUS expr expr , {PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) DIVIDE expr expr , {PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= TIMES (*) expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) TIMES expr expr , {PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) PLUS expr expr , {PLUS MINUS TIMES DIVIDE NUMBER }]
}
transition on TIMES to state [6]
transition on expr to state [7]
transition on DIVIDE to state [4]
transition on MINUS to state [3]
transition on NUMBER to state [2]
transition on PLUS to state [1]

-------------------
lalr_state [7]: {
  [expr ::= (*) NUMBER , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) MINUS expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) DIVIDE expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= TIMES expr (*) expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) TIMES expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) PLUS expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
}
transition on TIMES to state [6]
transition on expr to state [8]
transition on DIVIDE to state [4]
transition on MINUS to state [3]
transition on NUMBER to state [2]
transition on PLUS to state [1]

-------------------
lalr_state [8]: {
  [expr ::= TIMES expr expr (*) , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
}

-------------------
lalr_state [9]: {
  [$START ::= expr EOF (*) , {EOF }]
}

-------------------
lalr_state [10]: {
  [expr ::= (*) NUMBER , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) MINUS expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= DIVIDE expr (*) expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) DIVIDE expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) TIMES expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) PLUS expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
}
transition on TIMES to state [6]
transition on expr to state [11]
transition on DIVIDE to state [4]
transition on MINUS to state [3]
transition on NUMBER to state [2]
transition on PLUS to state [1]

-------------------
lalr_state [11]: {
  [expr ::= DIVIDE expr expr (*) , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
}

-------------------
lalr_state [12]: {
  [expr ::= MINUS expr (*) expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) NUMBER , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) MINUS expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) DIVIDE expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) TIMES expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) PLUS expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
}
transition on TIMES to state [6]
transition on expr to state [13]
transition on DIVIDE to state [4]
transition on MINUS to state [3]
transition on NUMBER to state [2]
transition on PLUS to state [1]

-------------------
lalr_state [13]: {
  [expr ::= MINUS expr expr (*) , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
}

-------------------
lalr_state [14]: {
  [expr ::= (*) NUMBER , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) MINUS expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) DIVIDE expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= PLUS expr (*) expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) TIMES expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
  [expr ::= (*) PLUS expr expr , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
}
transition on TIMES to state [6]
transition on expr to state [15]
transition on DIVIDE to state [4]
transition on MINUS to state [3]
transition on NUMBER to state [2]
transition on PLUS to state [1]

-------------------
lalr_state [15]: {
  [expr ::= PLUS expr expr (*) , {EOF PLUS MINUS TIMES DIVIDE NUMBER }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 2:SHIFT(to state 1)] [term 3:SHIFT(to state 3)]
 [term 4:SHIFT(to state 6)] [term 5:SHIFT(to state 4)]
 [term 6:SHIFT(to state 2)]
From state #1
 [term 2:SHIFT(to state 1)] [term 3:SHIFT(to state 3)]
 [term 4:SHIFT(to state 6)] [term 5:SHIFT(to state 4)]
 [term 6:SHIFT(to state 2)]
From state #2
 [term 0:REDUCE(with prod 5)] [term 2:REDUCE(with prod 5)]
 [term 3:REDUCE(with prod 5)] [term 4:REDUCE(with prod 5)]
 [term 5:REDUCE(with prod 5)] [term 6:REDUCE(with prod 5)]
From state #3
 [term 2:SHIFT(to state 1)] [term 3:SHIFT(to state 3)]
 [term 4:SHIFT(to state 6)] [term 5:SHIFT(to state 4)]
 [term 6:SHIFT(to state 2)]
From state #4
 [term 2:SHIFT(to state 1)] [term 3:SHIFT(to state 3)]
 [term 4:SHIFT(to state 6)] [term 5:SHIFT(to state 4)]
 [term 6:SHIFT(to state 2)]
From state #5
 [term 0:SHIFT(to state 9)]
From state #6
 [term 2:SHIFT(to state 1)] [term 3:SHIFT(to state 3)]
 [term 4:SHIFT(to state 6)] [term 5:SHIFT(to state 4)]
 [term 6:SHIFT(to state 2)]
From state #7
 [term 2:SHIFT(to state 1)] [term 3:SHIFT(to state 3)]
 [term 4:SHIFT(to state 6)] [term 5:SHIFT(to state 4)]
 [term 6:SHIFT(to state 2)]
From state #8
 [term 0:REDUCE(with prod 3)] [term 2:REDUCE(with prod 3)]
 [term 3:REDUCE(with prod 3)] [term 4:REDUCE(with prod 3)]
 [term 5:REDUCE(with prod 3)] [term 6:REDUCE(with prod 3)]
From state #9
 [term 0:REDUCE(with prod 1)]
From state #10
 [term 2:SHIFT(to state 1)] [term 3:SHIFT(to state 3)]
 [term 4:SHIFT(to state 6)] [term 5:SHIFT(to state 4)]
 [term 6:SHIFT(to state 2)]
From state #11
 [term 0:REDUCE(with prod 4)] [term 2:REDUCE(with prod 4)]
 [term 3:REDUCE(with prod 4)] [term 4:REDUCE(with prod 4)]
 [term 5:REDUCE(with prod 4)] [term 6:REDUCE(with prod 4)]
From state #12
 [term 2:SHIFT(to state 1)] [term 3:SHIFT(to state 3)]
 [term 4:SHIFT(to state 6)] [term 5:SHIFT(to state 4)]
 [term 6:SHIFT(to state 2)]
From state #13
 [term 0:REDUCE(with prod 2)] [term 2:REDUCE(with prod 2)]
 [term 3:REDUCE(with prod 2)] [term 4:REDUCE(with prod 2)]
 [term 5:REDUCE(with prod 2)] [term 6:REDUCE(with prod 2)]
From state #14
 [term 2:SHIFT(to state 1)] [term 3:SHIFT(to state 3)]
 [term 4:SHIFT(to state 6)] [term 5:SHIFT(to state 4)]
 [term 6:SHIFT(to state 2)]
From state #15
 [term 0:REDUCE(with prod 0)] [term 2:REDUCE(with prod 0)]
 [term 3:REDUCE(with prod 0)] [term 4:REDUCE(with prod 0)]
 [term 5:REDUCE(with prod 0)] [term 6:REDUCE(with prod 0)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 5]
From state #1
 [non term 0->state 14]
From state #2
From state #3
 [non term 0->state 12]
From state #4
 [non term 0->state 10]
From state #5
From state #6
 [non term 0->state 7]
From state #7
 [non term 0->state 8]
From state #8
From state #9
From state #10
 [non term 0->state 11]
From state #11
From state #12
 [non term 0->state 13]
From state #13
From state #14
 [non term 0->state 15]
From state #15
-----------------------------
------- CUP v0.11a beta 20060608 Parser Generation Summary -------
  0 errors and 0 warnings
  7 terminals, 1 non-terminal, and 6 productions declared, 
  producing 16 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (v0.11a beta 20060608)
